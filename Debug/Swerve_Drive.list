
Swerve_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800c4d8  0800c4d8  0000d4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb9c  0800cb9c  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb9c  0800cb9c  0000db9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cba4  0800cba4  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cba4  0800cba4  0000dba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cba8  0800cba8  0000dba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800cbac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  200001ec  0800cd98  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800cd98  0000e798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a09  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5f  00000000  00000000  00023c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00026988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e63  00000000  00000000  00027c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281ab  00000000  00000000  00028a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e91  00000000  00000000  00050c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff438  00000000  00000000  00066aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006808  00000000  00000000  00165f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0016c734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c4bc 	.word	0x0800c4bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800c4bc 	.word	0x0800c4bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <JOYSTICK_Init>:
static char _data_buffer[256];
static uint16_t _buf_index = 0;
static JoystickData _current_data = {0};
static bool _new_data_available = false;

void JOYSTICK_Init(UART_HandleTypeDef *huart) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    _huart = huart;
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <JOYSTICK_Init+0x28>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
    memset(_data_buffer, 0, sizeof(_data_buffer));
 8001042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001046:	2100      	movs	r1, #0
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <JOYSTICK_Init+0x2c>)
 800104a:	f007 fe5f 	bl	8008d0c <memset>
    _buf_index = 0;
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <JOYSTICK_Init+0x30>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000208 	.word	0x20000208
 8001060:	2000020c 	.word	0x2000020c
 8001064:	2000030c 	.word	0x2000030c

08001068 <JOYSTICK_SetTimeout>:

void JOYSTICK_SetTimeout(uint32_t timeout) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    _timeout = timeout;
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <JOYSTICK_SetTimeout+0x1c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000

08001088 <JOYSTICK_Process>:

void JOYSTICK_Process(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
    char c;

    // Read until buffer full or newline received
    while (_buf_index < sizeof(_data_buffer) - 1) {
 800108e:	e03e      	b.n	800110e <JOYSTICK_Process+0x86>
        if (HAL_UART_Receive(_huart, (uint8_t *)&c, 1, _timeout) == HAL_OK) {
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <JOYSTICK_Process+0x9c>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <JOYSTICK_Process+0xa0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f107 010f 	add.w	r1, r7, #15
 800109c:	2201      	movs	r2, #1
 800109e:	f005 f889 	bl	80061b4 <HAL_UART_Receive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d137      	bne.n	8001118 <JOYSTICK_Process+0x90>
            if (c == '\n') {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d125      	bne.n	80010fa <JOYSTICK_Process+0x72>
                // Process complete message
                _data_buffer[_buf_index] = '\0';
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <JOYSTICK_Process+0xa4>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <JOYSTICK_Process+0xa8>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	5499      	strb	r1, [r3, r2]

//                sscanf(_data_buffer,
//                       "dpad: 0x%04hx, buttons: 0x%04hx, axis L: %ld, %ld, axis R: %ld, %ld, brake: %ld, throttle: %ld, misc: 0x%04hx",
//                       &dpad, &buttons, &ax, &ay, &rax, &ray, &brake, &throttle, &misc);

                sscanf(_data_buffer,
 80010ba:	1d39      	adds	r1, r7, #4
 80010bc:	f107 0208 	add.w	r2, r7, #8
 80010c0:	463b      	mov	r3, r7
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	460b      	mov	r3, r1
 80010c6:	491b      	ldr	r1, [pc, #108]	@ (8001134 <JOYSTICK_Process+0xac>)
 80010c8:	4819      	ldr	r0, [pc, #100]	@ (8001130 <JOYSTICK_Process+0xa8>)
 80010ca:	f006 fde5 	bl	8007c98 <siscanf>
                       "axis L: %ld, %ld, axis R: %ld", &ax, &ay, &rax);

                // Update data structure
                _current_data.axisX = ax;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	4a19      	ldr	r2, [pc, #100]	@ (8001138 <JOYSTICK_Process+0xb0>)
 80010d2:	6013      	str	r3, [r2, #0]
                _current_data.axisY = ay;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <JOYSTICK_Process+0xb0>)
 80010d8:	6053      	str	r3, [r2, #4]
                _current_data.axisRX = rax;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <JOYSTICK_Process+0xb0>)
 80010de:	6093      	str	r3, [r2, #8]
                _new_data_available = true;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <JOYSTICK_Process+0xb4>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]

                // Reset buffer
                memset(_data_buffer, 0, sizeof(_data_buffer));
 80010e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ea:	2100      	movs	r1, #0
 80010ec:	4810      	ldr	r0, [pc, #64]	@ (8001130 <JOYSTICK_Process+0xa8>)
 80010ee:	f007 fe0d 	bl	8008d0c <memset>
                _buf_index = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <JOYSTICK_Process+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]
                break;
 80010f8:	e00f      	b.n	800111a <JOYSTICK_Process+0x92>
            }
            _data_buffer[_buf_index++] = c;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <JOYSTICK_Process+0xa4>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	b291      	uxth	r1, r2
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <JOYSTICK_Process+0xa4>)
 8001104:	8011      	strh	r1, [r2, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	7bf9      	ldrb	r1, [r7, #15]
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <JOYSTICK_Process+0xa8>)
 800110c:	5499      	strb	r1, [r3, r2]
    while (_buf_index < sizeof(_data_buffer) - 1) {
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <JOYSTICK_Process+0xa4>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	2bfe      	cmp	r3, #254	@ 0xfe
 8001114:	d9bc      	bls.n	8001090 <JOYSTICK_Process+0x8>
        } else {
            // Timeout occurred
            break;
        }
    }
}
 8001116:	e000      	b.n	800111a <JOYSTICK_Process+0x92>
            break;
 8001118:	bf00      	nop
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000208 	.word	0x20000208
 8001128:	20000000 	.word	0x20000000
 800112c:	2000030c 	.word	0x2000030c
 8001130:	2000020c 	.word	0x2000020c
 8001134:	0800c4d8 	.word	0x0800c4d8
 8001138:	20000310 	.word	0x20000310
 800113c:	20000320 	.word	0x20000320

08001140 <JOYSTICK_NewDataAvailable>:

bool JOYSTICK_NewDataAvailable(void) {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
    return _new_data_available;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <JOYSTICK_NewDataAvailable+0x14>)
 8001146:	781b      	ldrb	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000320 	.word	0x20000320

08001158 <JOYSTICK_GetData>:

JoystickData JOYSTICK_GetData(void) {
 8001158:	b490      	push	{r4, r7}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    _new_data_available = false;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <JOYSTICK_GetData+0x28>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
    return _current_data;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <JOYSTICK_GetData+0x2c>)
 800116a:	461c      	mov	r4, r3
 800116c:	4613      	mov	r3, r2
 800116e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bc90      	pop	{r4, r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000320 	.word	0x20000320
 8001184:	20000310 	.word	0x20000310

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	ed2d 8b02 	vpush	{d8}
 8001190:	b0e2      	sub	sp, #392	@ 0x188
 8001192:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  SwerveModule moduleRF = {	// Configuration moduleRF
 8001194:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001198:	2248      	movs	r2, #72	@ 0x48
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f007 fdb5 	bl	8008d0c <memset>
 80011a2:	4bd3      	ldr	r3, [pc, #844]	@ (80014f0 <main+0x368>)
 80011a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
 80011b0:	4bd0      	ldr	r3, [pc, #832]	@ (80014f4 <main+0x36c>)
 80011b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80011b6:	4bd0      	ldr	r3, [pc, #832]	@ (80014f8 <main+0x370>)
 80011b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80011bc:	4bcf      	ldr	r3, [pc, #828]	@ (80014fc <main+0x374>)
 80011be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80011c2:	4bcf      	ldr	r3, [pc, #828]	@ (8001500 <main+0x378>)
 80011c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80011c8:	4bce      	ldr	r3, [pc, #824]	@ (8001504 <main+0x37c>)
 80011ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80011ce:	4bce      	ldr	r3, [pc, #824]	@ (8001508 <main+0x380>)
 80011d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80011d4:	4bca      	ldr	r3, [pc, #808]	@ (8001500 <main+0x378>)
 80011d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80011da:	23c7      	movs	r3, #199	@ 0xc7
 80011dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011e0:	4bca      	ldr	r3, [pc, #808]	@ (800150c <main+0x384>)
 80011e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011e6:	f240 4355 	movw	r3, #1109	@ 0x455
 80011ea:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
 80011ee:	f240 737a 	movw	r3, #1914	@ 0x77a
 80011f2:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
 80011f6:	f240 434b 	movw	r3, #1099	@ 0x44b
 80011fa:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
 80011fe:	4bc4      	ldr	r3, [pc, #784]	@ (8001510 <main+0x388>)
 8001200:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	      .arming_pulse = 1100-1
	  },
	  .counts_per_degree = ROBOT_STEERING_GEAR_RATIO / (float)(STEERING_ENCODER_RESOLUTION * 8) // Adjust based on encoder
  };

  SwerveModule moduleLF = {	// Configuration moduleRF
 8001204:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001208:	2248      	movs	r2, #72	@ 0x48
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f007 fd7d 	bl	8008d0c <memset>
 8001212:	4bb7      	ldr	r3, [pc, #732]	@ (80014f0 <main+0x368>)
 8001214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121c:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 8001220:	4bb4      	ldr	r3, [pc, #720]	@ (80014f4 <main+0x36c>)
 8001222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001226:	2304      	movs	r3, #4
 8001228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800122c:	4bb9      	ldr	r3, [pc, #740]	@ (8001514 <main+0x38c>)
 800122e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001232:	4bb9      	ldr	r3, [pc, #740]	@ (8001518 <main+0x390>)
 8001234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001238:	4bb1      	ldr	r3, [pc, #708]	@ (8001500 <main+0x378>)
 800123a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800123e:	4bb1      	ldr	r3, [pc, #708]	@ (8001504 <main+0x37c>)
 8001240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001244:	4bb0      	ldr	r3, [pc, #704]	@ (8001508 <main+0x380>)
 8001246:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800124a:	4bad      	ldr	r3, [pc, #692]	@ (8001500 <main+0x378>)
 800124c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001250:	23c7      	movs	r3, #199	@ 0xc7
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001256:	4bad      	ldr	r3, [pc, #692]	@ (800150c <main+0x384>)
 8001258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800125c:	2304      	movs	r3, #4
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001262:	f240 4355 	movw	r3, #1109	@ 0x455
 8001266:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 800126a:	f240 737a 	movw	r3, #1914	@ 0x77a
 800126e:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 8001272:	f240 434b 	movw	r3, #1099	@ 0x44b
 8001276:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 800127a:	4ba5      	ldr	r3, [pc, #660]	@ (8001510 <main+0x388>)
 800127c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	      .arming_pulse = 1100-1
	  },
	  .counts_per_degree = ROBOT_STEERING_GEAR_RATIO / (float)(STEERING_ENCODER_RESOLUTION * 8) // Adjust based on encoder
  };

  SwerveModule moduleRB = {	// Configuration moduleRF
 8001280:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001284:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001288:	4618      	mov	r0, r3
 800128a:	2348      	movs	r3, #72	@ 0x48
 800128c:	461a      	mov	r2, r3
 800128e:	2100      	movs	r1, #0
 8001290:	f007 fd3c 	bl	8008d0c <memset>
 8001294:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001298:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800129c:	4a94      	ldr	r2, [pc, #592]	@ (80014f0 <main+0x368>)
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ac:	809a      	strh	r2, [r3, #4]
 80012ae:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012b6:	4a8f      	ldr	r2, [pc, #572]	@ (80014f4 <main+0x36c>)
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012c2:	2208      	movs	r2, #8
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012ce:	4a93      	ldr	r2, [pc, #588]	@ (800151c <main+0x394>)
 80012d0:	611a      	str	r2, [r3, #16]
 80012d2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012da:	4a8f      	ldr	r2, [pc, #572]	@ (8001518 <main+0x390>)
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012e6:	4a86      	ldr	r2, [pc, #536]	@ (8001500 <main+0x378>)
 80012e8:	619a      	str	r2, [r3, #24]
 80012ea:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012f2:	4a84      	ldr	r2, [pc, #528]	@ (8001504 <main+0x37c>)
 80012f4:	61da      	str	r2, [r3, #28]
 80012f6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80012fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012fe:	4a82      	ldr	r2, [pc, #520]	@ (8001508 <main+0x380>)
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001306:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800130a:	4a7d      	ldr	r2, [pc, #500]	@ (8001500 <main+0x378>)
 800130c:	625a      	str	r2, [r3, #36]	@ 0x24
 800130e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001312:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001316:	22c7      	movs	r2, #199	@ 0xc7
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30
 800131a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800131e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001322:	4a7a      	ldr	r2, [pc, #488]	@ (800150c <main+0x384>)
 8001324:	635a      	str	r2, [r3, #52]	@ 0x34
 8001326:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800132a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800132e:	2208      	movs	r2, #8
 8001330:	639a      	str	r2, [r3, #56]	@ 0x38
 8001332:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001336:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800133a:	f240 4255 	movw	r2, #1109	@ 0x455
 800133e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8001340:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001344:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001348:	f240 727a 	movw	r2, #1914	@ 0x77a
 800134c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800134e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001352:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001356:	f240 424b 	movw	r2, #1099	@ 0x44b
 800135a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800135e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001362:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001366:	4a6a      	ldr	r2, [pc, #424]	@ (8001510 <main+0x388>)
 8001368:	645a      	str	r2, [r3, #68]	@ 0x44
	      .arming_pulse = 1100-1
	  },
	  .counts_per_degree = ROBOT_STEERING_GEAR_RATIO / (float)(STEERING_ENCODER_RESOLUTION * 8) // Adjust based on encoder
  };

  SwerveModule moduleLB = {	// Configuration moduleRF
 800136a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800136e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001372:	4618      	mov	r0, r3
 8001374:	2348      	movs	r3, #72	@ 0x48
 8001376:	461a      	mov	r2, r3
 8001378:	2100      	movs	r1, #0
 800137a:	f007 fcc7 	bl	8008d0c <memset>
 800137e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001382:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001386:	4a5a      	ldr	r2, [pc, #360]	@ (80014f0 <main+0x368>)
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800138e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001392:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001396:	809a      	strh	r2, [r3, #4]
 8001398:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800139c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013a0:	4a54      	ldr	r2, [pc, #336]	@ (80014f4 <main+0x36c>)
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013a8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013ac:	220c      	movs	r2, #12
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013b8:	4a59      	ldr	r2, [pc, #356]	@ (8001520 <main+0x398>)
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013c4:	4a54      	ldr	r2, [pc, #336]	@ (8001518 <main+0x390>)
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <main+0x378>)
 80013d2:	619a      	str	r2, [r3, #24]
 80013d4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013d8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013dc:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <main+0x37c>)
 80013de:	61da      	str	r2, [r3, #28]
 80013e0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013e8:	4a47      	ldr	r2, [pc, #284]	@ (8001508 <main+0x380>)
 80013ea:	621a      	str	r2, [r3, #32]
 80013ec:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013f0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80013f4:	4a42      	ldr	r2, [pc, #264]	@ (8001500 <main+0x378>)
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80013f8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001400:	22c7      	movs	r2, #199	@ 0xc7
 8001402:	631a      	str	r2, [r3, #48]	@ 0x30
 8001404:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001408:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800140c:	4a3f      	ldr	r2, [pc, #252]	@ (800150c <main+0x384>)
 800140e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001410:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001414:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001418:	220c      	movs	r2, #12
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38
 800141c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001420:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001424:	f240 4255 	movw	r2, #1109	@ 0x455
 8001428:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800142a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800142e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001432:	f240 727a 	movw	r2, #1914	@ 0x77a
 8001436:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001438:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800143c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001440:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8001448:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800144c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001450:	4a2f      	ldr	r2, [pc, #188]	@ (8001510 <main+0x388>)
 8001452:	645a      	str	r2, [r3, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f001 ff8c 	bl	8003370 <HAL_Init>

  /* USER CODE BEGIN Init */
  JOYSTICK_Init(&huart3);  // Pass your UART handle
 8001458:	4832      	ldr	r0, [pc, #200]	@ (8001524 <main+0x39c>)
 800145a:	f7ff fdeb 	bl	8001034 <JOYSTICK_Init>
  JOYSTICK_SetTimeout(2); // Optional: Set custom timeout
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff fe02 	bl	8001068 <JOYSTICK_SetTimeout>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 fb3c 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f000 fe68 	bl	800213c <MX_GPIO_Init>
  MX_TIM1_Init();
 800146c:	f000 fb84 	bl	8001b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001470:	f000 fbdc 	bl	8001c2c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001474:	f000 fd0a 	bl	8001e8c <MX_TIM4_Init>
  MX_TIM3_Init();
 8001478:	f000 fc70 	bl	8001d5c <MX_TIM3_Init>
  MX_TIM8_Init();
 800147c:	f000 fd5c 	bl	8001f38 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001480:	f000 fe0e 	bl	80020a0 <MX_USART3_UART_Init>
  MX_TIM20_Init();
 8001484:	f000 fdb2 	bl	8001fec <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
  // Initialization
  SM_Init(&moduleRF);
 8001488:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f92b 	bl	80026e8 <SM_Init>
  SM_Init(&moduleLF);
 8001492:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001496:	4618      	mov	r0, r3
 8001498:	f001 f926 	bl	80026e8 <SM_Init>
  SM_Init(&moduleRB);
 800149c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 f921 	bl	80026e8 <SM_Init>
  SM_Init(&moduleLB);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 f91c 	bl	80026e8 <SM_Init>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fda9 	bl	8003008 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f001 fe07 	bl	80030cc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <main+0x3a0>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <main+0x3a0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <main+0x3a0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <main+0x3a0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <main+0x3a0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80014de:	4912      	ldr	r1, [pc, #72]	@ (8001528 <main+0x3a0>)
 80014e0:	2000      	movs	r0, #0
 80014e2:	f001 fe73 	bl	80031cc <BSP_COM_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d021      	beq.n	8001530 <main+0x3a8>
 80014ec:	e01e      	b.n	800152c <main+0x3a4>
 80014ee:	bf00      	nop
 80014f0:	48000400 	.word	0x48000400
 80014f4:	200003d0 	.word	0x200003d0
 80014f8:	20000338 	.word	0x20000338
 80014fc:	40a00000 	.word	0x40a00000
 8001500:	3dcccccd 	.word	0x3dcccccd
 8001504:	3c23d70a 	.word	0x3c23d70a
 8001508:	43fa0000 	.word	0x43fa0000
 800150c:	20000384 	.word	0x20000384
 8001510:	3983126f 	.word	0x3983126f
 8001514:	2000041c 	.word	0x2000041c
 8001518:	40200000 	.word	0x40200000
 800151c:	20000468 	.word	0x20000468
 8001520:	200004b4 	.word	0x200004b4
 8001524:	20000500 	.word	0x20000500
 8001528:	20000324 	.word	0x20000324
  {
    Error_Handler();
 800152c:	f000 fe72 	bl	8002214 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Swerve Drive Robot Initialized\n");
 8001530:	4832      	ldr	r0, [pc, #200]	@ (80015fc <main+0x474>)
 8001532:	f007 fbd1 	bl	8008cd8 <puts>
  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8001536:	2000      	movs	r0, #0
 8001538:	f001 fd9c 	bl	8003074 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <main+0x478>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d123      	bne.n	800158c <main+0x404>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8001544:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <main+0x478>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 800154a:	2000      	movs	r0, #0
 800154c:	f001 fda8 	bl	80030a0 <BSP_LED_Toggle>
      printf("ESC calibrate starting..\n");
 8001550:	482c      	ldr	r0, [pc, #176]	@ (8001604 <main+0x47c>)
 8001552:	f007 fbc1 	bl	8008cd8 <puts>

      SM_CalibrateESC(&moduleRF.driving);
 8001556:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800155a:	3334      	adds	r3, #52	@ 0x34
 800155c:	4618      	mov	r0, r3
 800155e:	f001 f9eb 	bl	8002938 <SM_CalibrateESC>
      SM_CalibrateESC(&moduleLF.driving);
 8001562:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001566:	3334      	adds	r3, #52	@ 0x34
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f9e5 	bl	8002938 <SM_CalibrateESC>
      SM_CalibrateESC(&moduleRB.driving);
 800156e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001572:	3334      	adds	r3, #52	@ 0x34
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f9df 	bl	8002938 <SM_CalibrateESC>
      SM_CalibrateESC(&moduleLB.driving);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	3334      	adds	r3, #52	@ 0x34
 8001580:	4618      	mov	r0, r3
 8001582:	f001 f9d9 	bl	8002938 <SM_CalibrateESC>

      printf("ESC calibrate done.\n");
 8001586:	4820      	ldr	r0, [pc, #128]	@ (8001608 <main+0x480>)
 8001588:	f007 fba6 	bl	8008cd8 <puts>
      /* ..... Perform your action ..... */
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    JOYSTICK_Process();
 800158c:	f7ff fd7c 	bl	8001088 <JOYSTICK_Process>

    if (JOYSTICK_NewDataAvailable()) {
 8001590:	f7ff fdd6 	bl	8001140 <JOYSTICK_NewDataAvailable>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80ae 	beq.w	80016f8 <main+0x570>
    	JoystickData data = JOYSTICK_GetData();
 800159c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80015a0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fdd7 	bl	8001158 <JOYSTICK_GetData>
    	lastJoystickUpdate = HAL_GetTick();  // Reset timeout timer
 80015aa:	f001 ff45 	bl	8003438 <HAL_GetTick>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a16      	ldr	r2, [pc, #88]	@ (800160c <main+0x484>)
 80015b2:	6013      	str	r3, [r2, #0]

        // Add data validation
        if(data.axisX < -512 || data.axisX > 511 ||
 80015b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80015b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f513 7f00 	cmn.w	r3, #512	@ 0x200
 80015c2:	db17      	blt.n	80015f4 <main+0x46c>
 80015c4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80015c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015d2:	da0f      	bge.n	80015f4 <main+0x46c>
           data.axisY < -512 || data.axisY > 511) {
 80015d4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80015d8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015dc:	685b      	ldr	r3, [r3, #4]
        if(data.axisX < -512 || data.axisX > 511 ||
 80015de:	f513 7f00 	cmn.w	r3, #512	@ 0x200
 80015e2:	db07      	blt.n	80015f4 <main+0x46c>
           data.axisY < -512 || data.axisY > 511) {
 80015e4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80015e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015f2:	db0f      	blt.n	8001614 <main+0x48c>
            printf("Invalid joystick data!\r\n");
 80015f4:	4806      	ldr	r0, [pc, #24]	@ (8001610 <main+0x488>)
 80015f6:	f007 fb6f 	bl	8008cd8 <puts>
 80015fa:	e79f      	b.n	800153c <main+0x3b4>
 80015fc:	0800c4f8 	.word	0x0800c4f8
 8001600:	20000334 	.word	0x20000334
 8001604:	0800c518 	.word	0x0800c518
 8001608:	0800c534 	.word	0x0800c534
 800160c:	200005a0 	.word	0x200005a0
 8001610:	0800c548 	.word	0x0800c548
            continue;
        }

		#ifdef DEBUG_PRINT
				printf("X: %ld, Y: %ld, RX: %ld\n", data.axisX, data.axisY, data.axisRX);
 8001614:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001618:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001622:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800162c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	48d9      	ldr	r0, [pc, #868]	@ (8001998 <main+0x810>)
 8001634:	f007 fae8 	bl	8008c08 <iprintf>
		#endif

        xSpeed = (float)data.axisX / 512.0f;
 8001638:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800163c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	eddf 6ad4 	vldr	s13, [pc, #848]	@ 800199c <main+0x814>
 800164e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001652:	4bd3      	ldr	r3, [pc, #844]	@ (80019a0 <main+0x818>)
 8001654:	edc3 7a00 	vstr	s15, [r3]
        ySpeed = (float)data.axisY / -512.0f;
 8001658:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800165c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166a:	eddf 6ace 	vldr	s13, [pc, #824]	@ 80019a4 <main+0x81c>
 800166e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001672:	4bcd      	ldr	r3, [pc, #820]	@ (80019a8 <main+0x820>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
        rot = (float)data.axisRX / 512.0f;
 8001678:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800167c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168a:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 800199c <main+0x814>
 800168e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001692:	4bc6      	ldr	r3, [pc, #792]	@ (80019ac <main+0x824>)
 8001694:	edc3 7a00 	vstr	s15, [r3]

        // Apply deadzone
        if (fabsf(xSpeed) < DEADZONE) xSpeed = 0.0f;
 8001698:	4bc1      	ldr	r3, [pc, #772]	@ (80019a0 <main+0x818>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	eef0 7ae7 	vabs.f32	s15, s15
 80016a2:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 80019b0 <main+0x828>
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	d503      	bpl.n	80016b8 <main+0x530>
 80016b0:	4bbb      	ldr	r3, [pc, #748]	@ (80019a0 <main+0x818>)
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
        if (fabsf(ySpeed) < DEADZONE) ySpeed = 0.0f;
 80016b8:	4bbb      	ldr	r3, [pc, #748]	@ (80019a8 <main+0x820>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef0 7ae7 	vabs.f32	s15, s15
 80016c2:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80019b0 <main+0x828>
 80016c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d503      	bpl.n	80016d8 <main+0x550>
 80016d0:	4bb5      	ldr	r3, [pc, #724]	@ (80019a8 <main+0x820>)
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
        if (fabsf(rot) < DEADZONE) rot = 0.0f;
 80016d8:	4bb4      	ldr	r3, [pc, #720]	@ (80019ac <main+0x824>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	eef0 7ae7 	vabs.f32	s15, s15
 80016e2:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80019b0 <main+0x828>
 80016e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	d503      	bpl.n	80016f8 <main+0x570>
 80016f0:	4bae      	ldr	r3, [pc, #696]	@ (80019ac <main+0x824>)
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
//        rot = 0.0f;
//
//        lastJoystickUpdate = HAL_GetTick();
//    }

    printf("xSpeed: %f, ySpeed: %f, Rot: %f\n", xSpeed, ySpeed, rot);
 80016f8:	4ba9      	ldr	r3, [pc, #676]	@ (80019a0 <main+0x818>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff4b 	bl	8000598 <__aeabi_f2d>
 8001702:	4680      	mov	r8, r0
 8001704:	4689      	mov	r9, r1
 8001706:	4ba8      	ldr	r3, [pc, #672]	@ (80019a8 <main+0x820>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff44 	bl	8000598 <__aeabi_f2d>
 8001710:	4604      	mov	r4, r0
 8001712:	460d      	mov	r5, r1
 8001714:	4ba5      	ldr	r3, [pc, #660]	@ (80019ac <main+0x824>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff3d 	bl	8000598 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001726:	e9cd 4500 	strd	r4, r5, [sp]
 800172a:	4642      	mov	r2, r8
 800172c:	464b      	mov	r3, r9
 800172e:	48a1      	ldr	r0, [pc, #644]	@ (80019b4 <main+0x82c>)
 8001730:	f007 fa6a 	bl	8008c08 <iprintf>

		HAL_Delay(10);
#else
		// Kinematic calculations for each module
	    // Front Right (RF)
	    float rf_x = xSpeed - (rot * (ROBOT_LENGTH / 2.0f));
 8001734:	4b9a      	ldr	r3, [pc, #616]	@ (80019a0 <main+0x818>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b9c      	ldr	r3, [pc, #624]	@ (80019ac <main+0x824>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001744:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174c:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
	    float rf_y = ySpeed + (rot * (ROBOT_WIDTH / 2.0f));
 8001750:	4b96      	ldr	r3, [pc, #600]	@ (80019ac <main+0x824>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800175a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800175e:	4b92      	ldr	r3, [pc, #584]	@ (80019a8 <main+0x820>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
	    float rf_angle = atan2f(rf_y, rf_x) * (180.0f / (float)M_PI);
 800176c:	edd7 0a59 	vldr	s1, [r7, #356]	@ 0x164
 8001770:	ed97 0a58 	vldr	s0, [r7, #352]	@ 0x160
 8001774:	f00a fc0a 	bl	800bf8c <atan2f>
 8001778:	eef0 7a40 	vmov.f32	s15, s0
 800177c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80019b8 <main+0x830>
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
	    float rf_speed = sqrtf(rf_x * rf_x + rf_y * rf_y);
 8001788:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 800178c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001790:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8001794:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	f00a fc16 	bl	800bfd0 <sqrtf>
 80017a4:	ed87 0a5d 	vstr	s0, [r7, #372]	@ 0x174

	    // Front Left (LF)
	    float lf_x = xSpeed - (rot * (ROBOT_LENGTH / 2.0f));
 80017a8:	4b7d      	ldr	r3, [pc, #500]	@ (80019a0 <main+0x818>)
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	4b7f      	ldr	r3, [pc, #508]	@ (80019ac <main+0x824>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 80017b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c0:	edc7 7a56 	vstr	s15, [r7, #344]	@ 0x158
	    float lf_y = ySpeed - (rot * (ROBOT_WIDTH / 2.0f));
 80017c4:	4b78      	ldr	r3, [pc, #480]	@ (80019a8 <main+0x820>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	4b78      	ldr	r3, [pc, #480]	@ (80019ac <main+0x824>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 80017d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
	    float lf_angle = atan2f(lf_y, lf_x) * (180.0f / (float)M_PI);
 80017e0:	edd7 0a56 	vldr	s1, [r7, #344]	@ 0x158
 80017e4:	ed97 0a55 	vldr	s0, [r7, #340]	@ 0x154
 80017e8:	f00a fbd0 	bl	800bf8c <atan2f>
 80017ec:	eef0 7a40 	vmov.f32	s15, s0
 80017f0:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80019b8 <main+0x830>
 80017f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f8:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
	    float lf_speed = sqrtf(lf_x * lf_x + lf_y * lf_y);
 80017fc:	edd7 7a56 	vldr	s15, [r7, #344]	@ 0x158
 8001800:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001804:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8001808:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f00a fbdc 	bl	800bfd0 <sqrtf>
 8001818:	ed87 0a5c 	vstr	s0, [r7, #368]	@ 0x170

	    // Rear Right (RB)
	    float rb_x = xSpeed + (rot * (ROBOT_LENGTH / 2.0f));
 800181c:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <main+0x824>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001826:	ee27 7a87 	vmul.f32	s14, s15, s14
 800182a:	4b5d      	ldr	r3, [pc, #372]	@ (80019a0 <main+0x818>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c
	    float rb_y = ySpeed + (rot * (ROBOT_WIDTH / 2.0f));
 8001838:	4b5c      	ldr	r3, [pc, #368]	@ (80019ac <main+0x824>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001842:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001846:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <main+0x820>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
	    float rb_angle = atan2f(rb_y, rb_x) * (180.0f / (float)M_PI);
 8001854:	edd7 0a53 	vldr	s1, [r7, #332]	@ 0x14c
 8001858:	ed97 0a52 	vldr	s0, [r7, #328]	@ 0x148
 800185c:	f00a fb96 	bl	800bf8c <atan2f>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80019b8 <main+0x830>
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144
	    float rb_speed = sqrtf(rb_x * rb_x + rb_y * rb_y);
 8001870:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8001874:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001878:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 800187c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f00a fba2 	bl	800bfd0 <sqrtf>
 800188c:	ed87 0a5b 	vstr	s0, [r7, #364]	@ 0x16c

	    // Rear Left (LB)
	    float lb_x = xSpeed + (rot * (ROBOT_LENGTH / 2.0f));
 8001890:	4b46      	ldr	r3, [pc, #280]	@ (80019ac <main+0x824>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800189a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800189e:	4b40      	ldr	r3, [pc, #256]	@ (80019a0 <main+0x818>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a8:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
	    float lb_y = ySpeed - (rot * (ROBOT_WIDTH / 2.0f));
 80018ac:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <main+0x820>)
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ac <main+0x824>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 80018bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c4:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
	    float lb_angle = atan2f(lb_y, lb_x) * (180.0f / (float)M_PI);
 80018c8:	edd7 0a50 	vldr	s1, [r7, #320]	@ 0x140
 80018cc:	ed97 0a4f 	vldr	s0, [r7, #316]	@ 0x13c
 80018d0:	f00a fb5c 	bl	800bf8c <atan2f>
 80018d4:	eef0 7a40 	vmov.f32	s15, s0
 80018d8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80019b8 <main+0x830>
 80018dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e0:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
	    float lb_speed = sqrtf(lb_x * lb_x + lb_y * lb_y);
 80018e4:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80018e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018ec:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80018f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	eeb0 0a67 	vmov.f32	s0, s15
 80018fc:	f00a fb68 	bl	800bfd0 <sqrtf>
 8001900:	ed87 0a5a 	vstr	s0, [r7, #360]	@ 0x168

	    // Normalize speeds if any exceeds 1.0
	    float max_speed = fmaxf(fmaxf(rf_speed, lf_speed), fmaxf(rb_speed, lb_speed));
 8001904:	edd7 0a5c 	vldr	s1, [r7, #368]	@ 0x170
 8001908:	ed97 0a5d 	vldr	s0, [r7, #372]	@ 0x174
 800190c:	f00a fca4 	bl	800c258 <fmaxf>
 8001910:	eeb0 8a40 	vmov.f32	s16, s0
 8001914:	edd7 0a5a 	vldr	s1, [r7, #360]	@ 0x168
 8001918:	ed97 0a5b 	vldr	s0, [r7, #364]	@ 0x16c
 800191c:	f00a fc9c 	bl	800c258 <fmaxf>
 8001920:	eef0 7a40 	vmov.f32	s15, s0
 8001924:	eef0 0a67 	vmov.f32	s1, s15
 8001928:	eeb0 0a48 	vmov.f32	s0, s16
 800192c:	f00a fc94 	bl	800c258 <fmaxf>
 8001930:	ed87 0a4d 	vstr	s0, [r7, #308]	@ 0x134
	    if (max_speed > 1.0f && max_speed > 0.0f) {
 8001934:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 8001938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	dd3a      	ble.n	80019bc <main+0x834>
 8001946:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 800194a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	dd33      	ble.n	80019bc <main+0x834>
	    	rf_speed /= max_speed;
 8001954:	edd7 6a5d 	vldr	s13, [r7, #372]	@ 0x174
 8001958:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800195c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001960:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	        lf_speed /= max_speed;
 8001964:	edd7 6a5c 	vldr	s13, [r7, #368]	@ 0x170
 8001968:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800196c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001970:	edc7 7a5c 	vstr	s15, [r7, #368]	@ 0x170
	        rb_speed /= max_speed;
 8001974:	edd7 6a5b 	vldr	s13, [r7, #364]	@ 0x16c
 8001978:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800197c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001980:	edc7 7a5b 	vstr	s15, [r7, #364]	@ 0x16c
	        lb_speed /= max_speed;
 8001984:	edd7 6a5a 	vldr	s13, [r7, #360]	@ 0x168
 8001988:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800198c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001990:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
 8001994:	e012      	b.n	80019bc <main+0x834>
 8001996:	bf00      	nop
 8001998:	0800c560 	.word	0x0800c560
 800199c:	44000000 	.word	0x44000000
 80019a0:	20000594 	.word	0x20000594
 80019a4:	c4000000 	.word	0xc4000000
 80019a8:	20000598 	.word	0x20000598
 80019ac:	2000059c 	.word	0x2000059c
 80019b0:	3dcccccd 	.word	0x3dcccccd
 80019b4:	0800c57c 	.word	0x0800c57c
 80019b8:	42652ee0 	.word	0x42652ee0
//	    lf_angle = fmodf((lf_angle + 360.0f), 360.0f);
//	    rb_angle = fmodf((rb_angle + 360.0f), 360.0f);
//	    lb_angle = fmodf((lb_angle + 360.0f), 360.0f);

	    // Update modules
	    SM_UpdateSteering(&moduleRF, rf_angle);
 80019bc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80019c0:	ed97 0a57 	vldr	s0, [r7, #348]	@ 0x15c
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 feec 	bl	80027a2 <SM_UpdateSteering>
	    SM_UpdateDriving(&moduleRF, rf_speed);
 80019ca:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80019ce:	ed97 0a5d 	vldr	s0, [r7, #372]	@ 0x174
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 ff20 	bl	8002818 <SM_UpdateDriving>

	    SM_UpdateSteering(&moduleLF, lf_angle);
 80019d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019dc:	ed97 0a54 	vldr	s0, [r7, #336]	@ 0x150
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fede 	bl	80027a2 <SM_UpdateSteering>
	    SM_UpdateDriving(&moduleLF, lf_speed);
 80019e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ea:	ed97 0a5c 	vldr	s0, [r7, #368]	@ 0x170
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 ff12 	bl	8002818 <SM_UpdateDriving>

	    SM_UpdateSteering(&moduleRB, rb_angle);
 80019f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019f8:	ed97 0a51 	vldr	s0, [r7, #324]	@ 0x144
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fed0 	bl	80027a2 <SM_UpdateSteering>
	    SM_UpdateDriving(&moduleRB, rb_speed);
 8001a02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a06:	ed97 0a5b 	vldr	s0, [r7, #364]	@ 0x16c
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 ff04 	bl	8002818 <SM_UpdateDriving>

	    SM_UpdateSteering(&moduleLB, lb_angle);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	ed97 0a4e 	vldr	s0, [r7, #312]	@ 0x138
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fec2 	bl	80027a2 <SM_UpdateSteering>
	    SM_UpdateDriving(&moduleLB, lb_speed);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	ed97 0a5a 	vldr	s0, [r7, #360]	@ 0x168
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fef6 	bl	8002818 <SM_UpdateDriving>

#ifdef DEBUG_PRINT
	    // Debug prints for each wheel's speed and angle
	    printf("\n==== Wheel Data ====\n");
 8001a2c:	4827      	ldr	r0, [pc, #156]	@ (8001acc <main+0x944>)
 8001a2e:	f007 f953 	bl	8008cd8 <puts>
	    printf("RF -> Angle: %.2f°, Speed: %.2f\n", rf_angle, rf_speed);
 8001a32:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 8001a36:	f7fe fdaf 	bl	8000598 <__aeabi_f2d>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	f8d7 0174 	ldr.w	r0, [r7, #372]	@ 0x174
 8001a42:	f7fe fda9 	bl	8000598 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4e:	4622      	mov	r2, r4
 8001a50:	462b      	mov	r3, r5
 8001a52:	481f      	ldr	r0, [pc, #124]	@ (8001ad0 <main+0x948>)
 8001a54:	f007 f8d8 	bl	8008c08 <iprintf>
	    printf("LF -> Angle: %.2f°, Speed: %.2f\n", lf_angle, lf_speed);
 8001a58:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8001a5c:	f7fe fd9c 	bl	8000598 <__aeabi_f2d>
 8001a60:	4604      	mov	r4, r0
 8001a62:	460d      	mov	r5, r1
 8001a64:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8001a68:	f7fe fd96 	bl	8000598 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	e9cd 2300 	strd	r2, r3, [sp]
 8001a74:	4622      	mov	r2, r4
 8001a76:	462b      	mov	r3, r5
 8001a78:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <main+0x94c>)
 8001a7a:	f007 f8c5 	bl	8008c08 <iprintf>
	    printf("RB -> Angle: %.2f°, Speed: %.2f\n", rb_angle, rb_speed);
 8001a7e:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
 8001a8a:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8001a8e:	f7fe fd83 	bl	8000598 <__aeabi_f2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9cd 2300 	strd	r2, r3, [sp]
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	480e      	ldr	r0, [pc, #56]	@ (8001ad8 <main+0x950>)
 8001aa0:	f007 f8b2 	bl	8008c08 <iprintf>
	    printf("LB -> Angle: %.2f°, Speed: %.2f\n", lb_angle, lb_speed);
 8001aa4:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8001aa8:	f7fe fd76 	bl	8000598 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <main+0x954>)
 8001ac6:	f007 f89f 	bl	8008c08 <iprintf>
  {
 8001aca:	e537      	b.n	800153c <main+0x3b4>
 8001acc:	0800c5a0 	.word	0x0800c5a0
 8001ad0:	0800c5b8 	.word	0x0800c5b8
 8001ad4:	0800c5dc 	.word	0x0800c5dc
 8001ad8:	0800c600 	.word	0x0800c600
 8001adc:	0800c624 	.word	0x0800c624

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	@ 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	2238      	movs	r2, #56	@ 0x38
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 f90c 	bl	8008d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 ffea 	bl	8003adc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b12:	2340      	movs	r3, #64	@ 0x40
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b22:	2355      	movs	r3, #85	@ 0x55
 8001b24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f884 	bl	8003c44 <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b42:	f000 fb67 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fb82 	bl	8004268 <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b6a:	f000 fb53 	bl	8002214 <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3750      	adds	r7, #80	@ 0x50
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f007 f8c0 	bl	8008d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b96:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001b98:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <MX_TIM1_Init+0xb0>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001be2:	230a      	movs	r3, #10
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001bee:	f003 f96f 	bl	8004ed0 <HAL_TIM_Encoder_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001bf8:	f000 fb0c 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_TIM1_Init+0xac>)
 8001c0e:	f004 f95d 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c18:	f000 fafc 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3730      	adds	r7, #48	@ 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000338 	.word	0x20000338
 8001c28:	40012c00 	.word	0x40012c00

08001c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	@ 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001c66:	4b3c      	ldr	r3, [pc, #240]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c68:	22a9      	movs	r2, #169	@ 0xa9
 8001c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001c72:	4b39      	ldr	r3, [pc, #228]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c74:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c86:	4834      	ldr	r0, [pc, #208]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001c88:	f002 ff58 	bl	8004b3c <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c92:	f000 fabf 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482d      	ldr	r0, [pc, #180]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001ca4:	f003 fb5c 	bl	8005360 <HAL_TIM_ConfigClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cae:	f000 fab1 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb2:	4829      	ldr	r0, [pc, #164]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001cb4:	f002 ff99 	bl	8004bea <HAL_TIM_PWM_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cbe:	f000 faa9 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4821      	ldr	r0, [pc, #132]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001cd2:	f004 f8fb 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cdc:	f000 fa9a 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce0:	2360      	movs	r3, #96	@ 0x60
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1099;
 8001ce4:	f240 434b 	movw	r3, #1099	@ 0x44b
 8001ce8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4817      	ldr	r0, [pc, #92]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001cfa:	f003 fa1d 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d04:	f000 fa86 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4812      	ldr	r0, [pc, #72]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001d10:	f003 fa12 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001d1a:	f000 fa7b 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2208      	movs	r2, #8
 8001d22:	4619      	mov	r1, r3
 8001d24:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001d26:	f003 fa07 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8001d30:	f000 fa70 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	220c      	movs	r2, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001d3c:	f003 f9fc 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8001d46:	f000 fa65 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d4a:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <MX_TIM2_Init+0x12c>)
 8001d4c:	f000 fbb2 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001d50:	bf00      	nop
 8001d52:	3738      	adds	r7, #56	@ 0x38
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000384 	.word	0x20000384

08001d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	@ 0x38
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001d90:	4a3d      	ldr	r2, [pc, #244]	@ (8001e88 <MX_TIM3_Init+0x12c>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8001d94:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001d96:	22a9      	movs	r2, #169	@ 0xa9
 8001d98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001da0:	4b38      	ldr	r3, [pc, #224]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001da2:	22c7      	movs	r2, #199	@ 0xc7
 8001da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db2:	4834      	ldr	r0, [pc, #208]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001db4:	f002 fec2 	bl	8004b3c <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dbe:	f000 fa29 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482d      	ldr	r0, [pc, #180]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001dd0:	f003 fac6 	bl	8005360 <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dda:	f000 fa1b 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dde:	4829      	ldr	r0, [pc, #164]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001de0:	f002 ff03 	bl	8004bea <HAL_TIM_PWM_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dea:	f000 fa13 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4821      	ldr	r0, [pc, #132]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001dfe:	f004 f865 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e08:	f000 fa04 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	@ 0x60
 8001e0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4818      	ldr	r0, [pc, #96]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001e24:	f003 f988 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e2e:	f000 f9f1 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	2204      	movs	r2, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4812      	ldr	r0, [pc, #72]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001e3a:	f003 f97d 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e44:	f000 f9e6 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001e50:	f003 f972 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001e5a:	f000 f9db 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e5e:	463b      	mov	r3, r7
 8001e60:	220c      	movs	r2, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	4807      	ldr	r0, [pc, #28]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001e66:	f003 f967 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001e70:	f000 f9d0 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e74:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <MX_TIM3_Init+0x128>)
 8001e76:	f000 fb1d 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001e7a:	bf00      	nop
 8001e7c:	3738      	adds	r7, #56	@ 0x38
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200003d0 	.word	0x200003d0
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	@ 0x30
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2224      	movs	r2, #36	@ 0x24
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f006 ff36 	bl	8008d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001eac:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <MX_TIM4_Init+0xa8>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480d      	ldr	r0, [pc, #52]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001efc:	f002 ffe8 	bl	8004ed0 <HAL_TIM_Encoder_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001f06:	f000 f985 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	@ (8001f30 <MX_TIM4_Init+0xa4>)
 8001f18:	f003 ffd8 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001f22:	f000 f977 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	3730      	adds	r7, #48	@ 0x30
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000041c 	.word	0x2000041c
 8001f34:	40000800 	.word	0x40000800

08001f38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	@ 0x30
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	2224      	movs	r2, #36	@ 0x24
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fee0 	bl	8008d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f58:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <MX_TIM8_Init+0xb0>)
 8001f5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f5c:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f92:	230a      	movs	r3, #10
 8001f94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4619      	mov	r1, r3
 8001fac:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001fae:	f002 ff8f 	bl	8004ed0 <HAL_TIM_Encoder_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001fb8:	f000 f92c 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <MX_TIM8_Init+0xac>)
 8001fce:	f003 ff7d 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001fd8:	f000 f91c 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	3730      	adds	r7, #48	@ 0x30
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000468 	.word	0x20000468
 8001fe8:	40013400 	.word	0x40013400

08001fec <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	@ 0x30
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2224      	movs	r2, #36	@ 0x24
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f006 fe86 	bl	8008d0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800200a:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <MX_TIM20_Init+0xac>)
 800200c:	4a23      	ldr	r2, [pc, #140]	@ (800209c <MX_TIM20_Init+0xb0>)
 800200e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <MX_TIM20_Init+0xac>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <MX_TIM20_Init+0xac>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_TIM20_Init+0xac>)
 800201e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002022:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_TIM20_Init+0xac>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_TIM20_Init+0xac>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_TIM20_Init+0xac>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002036:	2301      	movs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800203e:	2301      	movs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002046:	230a      	movs	r3, #10
 8002048:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800204e:	2301      	movs	r3, #1
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002056:	230a      	movs	r3, #10
 8002058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4619      	mov	r1, r3
 8002060:	480d      	ldr	r0, [pc, #52]	@ (8002098 <MX_TIM20_Init+0xac>)
 8002062:	f002 ff35 	bl	8004ed0 <HAL_TIM_Encoder_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 800206c:	f000 f8d2 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800207c:	463b      	mov	r3, r7
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_TIM20_Init+0xac>)
 8002082:	f003 ff23 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 800208c:	f000 f8c2 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	3730      	adds	r7, #48	@ 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200004b4 	.word	0x200004b4
 800209c:	40015000 	.word	0x40015000

080020a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a4:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020a6:	4a23      	ldr	r2, [pc, #140]	@ (8002134 <MX_USART3_UART_Init+0x94>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 80020aa:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020ac:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <MX_USART3_UART_Init+0x98>)
 80020ae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020c4:	220c      	movs	r2, #12
 80020c6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ce:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020e6:	4812      	ldr	r0, [pc, #72]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020e8:	f003 ff86 	bl	8005ff8 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80020f2:	f000 f88f 	bl	8002214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f6:	2100      	movs	r1, #0
 80020f8:	480d      	ldr	r0, [pc, #52]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 80020fa:	f004 fe77 	bl	8006dec <HAL_UARTEx_SetTxFifoThreshold>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002104:	f000 f886 	bl	8002214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002108:	2100      	movs	r1, #0
 800210a:	4809      	ldr	r0, [pc, #36]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 800210c:	f004 feac 	bl	8006e68 <HAL_UARTEx_SetRxFifoThreshold>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002116:	f000 f87d 	bl	8002214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	@ (8002130 <MX_USART3_UART_Init+0x90>)
 800211c:	f004 fe2d 	bl	8006d7a <HAL_UARTEx_DisableFifoMode>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002126:	f000 f875 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000500 	.word	0x20000500
 8002134:	40004800 	.word	0x40004800
 8002138:	0007a120 	.word	0x0007a120

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	@ 0x28
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215e:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	4a1d      	ldr	r2, [pc, #116]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002170:	f043 0320 	orr.w	r3, r3, #32
 8002174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002186:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <MX_GPIO_Init+0xa8>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80021b8:	480b      	ldr	r0, [pc, #44]	@ (80021e8 <MX_GPIO_Init+0xac>)
 80021ba:	f001 fc5d 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 80021be:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <MX_GPIO_Init+0xac>)
 80021d8:	f001 facc 	bl	8003774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	@ 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	48000400 	.word	0x48000400

080021ec <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <BSP_PB_Callback+0x24>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  }
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000334 	.word	0x20000334

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <Error_Handler+0x8>

08002220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_MspInit+0x44>)
 8002228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222a:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <HAL_MspInit+0x44>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6613      	str	r3, [r2, #96]	@ 0x60
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <HAL_MspInit+0x44>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_MspInit+0x44>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <HAL_MspInit+0x44>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	6593      	str	r3, [r2, #88]	@ 0x58
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002256:	f001 fce5 	bl	8003c24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b090      	sub	sp, #64	@ 0x40
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6b      	ldr	r2, [pc, #428]	@ (8002434 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d128      	bne.n	80022dc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800228a:	4b6b      	ldr	r3, [pc, #428]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	4a6a      	ldr	r2, [pc, #424]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002290:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002294:	6613      	str	r3, [r2, #96]	@ 0x60
 8002296:	4b68      	ldr	r3, [pc, #416]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	4b65      	ldr	r3, [pc, #404]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	4a64      	ldr	r2, [pc, #400]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ae:	4b62      	ldr	r3, [pc, #392]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022ba:	2303      	movs	r3, #3
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80022ca:	2302      	movs	r3, #2
 80022cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d2:	4619      	mov	r1, r3
 80022d4:	4859      	ldr	r0, [pc, #356]	@ (800243c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022d6:	f001 fa4d 	bl	8003774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80022da:	e0a6      	b.n	800242a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a57      	ldr	r2, [pc, #348]	@ (8002440 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12a      	bne.n	800233c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e6:	4b54      	ldr	r3, [pc, #336]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	4a53      	ldr	r2, [pc, #332]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f2:	4b51      	ldr	r3, [pc, #324]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	4a4d      	ldr	r2, [pc, #308]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230a:	4b4b      	ldr	r3, [pc, #300]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002316:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002328:	230a      	movs	r3, #10
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002336:	f001 fa1d 	bl	8003774 <HAL_GPIO_Init>
}
 800233a:	e076      	b.n	800242a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a40      	ldr	r2, [pc, #256]	@ (8002444 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d128      	bne.n	8002398 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002346:	4b3c      	ldr	r3, [pc, #240]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	4a3b      	ldr	r2, [pc, #236]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800234c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002350:	6613      	str	r3, [r2, #96]	@ 0x60
 8002352:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	4b36      	ldr	r3, [pc, #216]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	4a35      	ldr	r2, [pc, #212]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236a:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002376:	23c0      	movs	r3, #192	@ 0xc0
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002386:	2304      	movs	r3, #4
 8002388:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800238e:	4619      	mov	r1, r3
 8002390:	482a      	ldr	r0, [pc, #168]	@ (800243c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002392:	f001 f9ef 	bl	8003774 <HAL_GPIO_Init>
}
 8002396:	e048      	b.n	800242a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM20)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2a      	ldr	r2, [pc, #168]	@ (8002448 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d143      	bne.n	800242a <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80023a2:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a6:	4a24      	ldr	r2, [pc, #144]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	4a18      	ldr	r2, [pc, #96]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ea:	2304      	movs	r3, #4
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80023fa:	2306      	movs	r3, #6
 80023fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002402:	4619      	mov	r1, r3
 8002404:	480d      	ldr	r0, [pc, #52]	@ (800243c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002406:	f001 f9b5 	bl	8003774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800240a:	2304      	movs	r3, #4
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800241a:	2303      	movs	r3, #3
 800241c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	4809      	ldr	r0, [pc, #36]	@ (800244c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002426:	f001 f9a5 	bl	8003774 <HAL_GPIO_Init>
}
 800242a:	bf00      	nop
 800242c:	3740      	adds	r7, #64	@ 0x40
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40021000 	.word	0x40021000
 800243c:	48000800 	.word	0x48000800
 8002440:	40000800 	.word	0x40000800
 8002444:	40013400 	.word	0x40013400
 8002448:	40015000 	.word	0x40015000
 800244c:	48000400 	.word	0x48000400

08002450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002460:	d10c      	bne.n	800247c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002462:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <HAL_TIM_Base_MspInit+0x5c>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <HAL_TIM_Base_MspInit+0x5c>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6593      	str	r3, [r2, #88]	@ 0x58
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <HAL_TIM_Base_MspInit+0x5c>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800247a:	e010      	b.n	800249e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0b      	ldr	r2, [pc, #44]	@ (80024b0 <HAL_TIM_Base_MspInit+0x60>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10b      	bne.n	800249e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_TIM_Base_MspInit+0x5c>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_TIM_Base_MspInit+0x5c>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6593      	str	r3, [r2, #88]	@ 0x58
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_TIM_Base_MspInit+0x5c>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	@ 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d4:	d12f      	bne.n	8002536 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	4a38      	ldr	r2, [pc, #224]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e2:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA9     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Driving_PWM1_Pin|Driving_PWM2_Pin;
 80024ee:	2303      	movs	r3, #3
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024fe:	2301      	movs	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250c:	f001 f932 	bl	8003774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Driving_PWM3_Pin|Driving_PWM4_Pin;
 8002510:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002522:	230a      	movs	r3, #10
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002530:	f001 f920 	bl	8003774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002534:	e03d      	b.n	80025b2 <HAL_TIM_MspPostInit+0xfe>
  else if(htim->Instance==TIM3)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <HAL_TIM_MspPostInit+0x10c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d138      	bne.n	80025b2 <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002544:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_TIM_MspPostInit+0x108>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Steering_PWM2_Pin|Steering_PWM1_Pin;
 8002570:	2350      	movs	r3, #80	@ 0x50
 8002572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002580:	2302      	movs	r3, #2
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800258e:	f001 f8f1 	bl	8003774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Steering_PWM3_Pin|Steering_PWM4_Pin;
 8002592:	2303      	movs	r3, #3
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025a2:	2302      	movs	r3, #2
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <HAL_TIM_MspPostInit+0x110>)
 80025ae:	f001 f8e1 	bl	8003774 <HAL_GPIO_Init>
}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	@ 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40000400 	.word	0x40000400
 80025c4:	48000400 	.word	0x48000400

080025c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b09e      	sub	sp, #120	@ 0x78
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	2254      	movs	r2, #84	@ 0x54
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f006 fb8f 	bl	8008d0c <memset>
  if(huart->Instance==USART3)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_UART_MspInit+0xa8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d136      	bne.n	8002666 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025f8:	2304      	movs	r3, #4
 80025fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f002 f84b 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002610:	f7ff fe00 	bl	8002214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_UART_MspInit+0xac>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <HAL_UART_MspInit+0xac>)
 800261a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_UART_MspInit+0xac>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_UART_MspInit+0xac>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <HAL_UART_MspInit+0xac>)
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_UART_MspInit+0xac>)
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002644:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002656:	2307      	movs	r3, #7
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	@ (8002678 <HAL_UART_MspInit+0xb0>)
 8002662:	f001 f887 	bl	8003774 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002666:	bf00      	nop
 8002668:	3778      	adds	r7, #120	@ 0x78
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40004800 	.word	0x40004800
 8002674:	40021000 	.word	0x40021000
 8002678:	48000400 	.word	0x48000400

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <NMI_Handler+0x4>

08002684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <HardFault_Handler+0x4>

0800268c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <MemManage_Handler+0x4>

08002694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d2:	f000 fe9f 	bl	8003414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}

080026da <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 fd62 	bl	80031a8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <SM_Init>:
static float steering_pid_update(SteeringMotor* motor, float target, float current);
static int16_t clamp_pid_output(float pid_output, int16_t min_pwm, int16_t max_pwm);
static void set_steering_pwm(SteeringMotor* motor, int16_t pwm);
static void constrain_pulse_width(uint16_t* pulse, uint16_t min, uint16_t max);

void SM_Init(SwerveModule* module) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
    // Initialize steering motor PWM
    HAL_TIM_PWM_Start(module->steering.pwm_tim, module->steering.pwm_channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f002 fad6 	bl	8004cac <HAL_TIM_PWM_Start>

    // Initialize encoder timer
    HAL_TIM_Encoder_Start(module->steering.encoder_tim, TIM_CHANNEL_ALL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	213c      	movs	r1, #60	@ 0x3c
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fc88 	bl	800501c <HAL_TIM_Encoder_Start>

    // Initialize driving motor PWM
    HAL_TIM_PWM_Start(module->driving.pwm_tim, module->driving.pwm_channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002714:	4619      	mov	r1, r3
 8002716:	4610      	mov	r0, r2
 8002718:	f002 fac8 	bl	8004cac <HAL_TIM_PWM_Start>
//    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, module->driving.arming_pulse);
    // Reset PID parameters
    module->steering.prev_error = 0.0f;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28
    module->steering.integral = 0.0f;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <clamp_pid_output>:

static int16_t clamp_pid_output(float pid_output, int16_t min_pwm, int16_t max_pwm) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	ed87 0a01 	vstr	s0, [r7, #4]
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	803b      	strh	r3, [r7, #0]
    if (pid_output < min_pwm) return min_pwm;
 8002748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002754:	ed97 7a01 	vldr	s14, [r7, #4]
 8002758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	d502      	bpl.n	8002768 <clamp_pid_output+0x34>
 8002762:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002766:	e016      	b.n	8002796 <clamp_pid_output+0x62>
    if (pid_output > max_pwm) return max_pwm;
 8002768:	f9b7 3000 	ldrsh.w	r3, [r7]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002774:	ed97 7a01 	vldr	s14, [r7, #4]
 8002778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	dd02      	ble.n	8002788 <clamp_pid_output+0x54>
 8002782:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002786:	e006      	b.n	8002796 <clamp_pid_output+0x62>
    return (int16_t)pid_output;
 8002788:	edd7 7a01 	vldr	s15, [r7, #4]
 800278c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002790:	ee17 3a90 	vmov	r3, s15
 8002794:	b21b      	sxth	r3, r3
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <SM_UpdateSteering>:

void SM_UpdateSteering(SwerveModule* module, float target_angle) {
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	ed87 0a00 	vstr	s0, [r7]
    float current = SM_GetCurrentAngle(module);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f89c 	bl	80028ec <SM_GetCurrentAngle>
 80027b4:	ed87 0a03 	vstr	s0, [r7, #12]
    float pid_output = steering_pid_update(&module->steering, target_angle, current);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	edd7 0a03 	vldr	s1, [r7, #12]
 80027be:	ed97 0a00 	vldr	s0, [r7]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fa1c 	bl	8002c00 <steering_pid_update>
 80027c8:	ed87 0a02 	vstr	s0, [r7, #8]

    // Clamp the PID output if necessary (choose appropriate PWM limits)
    pid_output = clamp_pid_output(pid_output, -module->steering.max_pwm, module->steering.max_pwm);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	425b      	negs	r3, r3
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80027e6:	f7ff ffa5 	bl	8002734 <clamp_pid_output>
 80027ea:	4603      	mov	r3, r0
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f4:	edc7 7a02 	vstr	s15, [r7, #8]

    set_steering_pwm(&module->steering, (int16_t)pid_output);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80027fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002802:	ee17 2a90 	vmov	r2, s15
 8002806:	b212      	sxth	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fa69 	bl	8002ce2 <set_steering_pwm>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <SM_UpdateDriving>:

void SM_UpdateDriving(SwerveModule* module, float speed) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	ed87 0a00 	vstr	s0, [r7]
	uint16_t target_speed = module->driving.min_pulse + (uint16_t)((module->driving.max_pulse - module->driving.min_pulse) * fabsf(speed));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282c:	4619      	mov	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002832:	1acb      	subs	r3, r1, r3
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283c:	edd7 7a00 	vldr	s15, [r7]
 8002840:	eef0 7ae7 	vabs.f32	s15, s15
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800284c:	ee17 3a90 	vmov	r3, s15
 8002850:	b29b      	uxth	r3, r3
 8002852:	4413      	add	r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	81fb      	strh	r3, [r7, #14]
    constrain_pulse_width(&target_speed, module->driving.min_pulse, module->driving.max_pulse);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002860:	f107 030e 	add.w	r3, r7, #14
 8002864:	4618      	mov	r0, r3
 8002866:	f000 faae 	bl	8002dc6 <constrain_pulse_width>
	#ifdef DEBUG_PRINT    // For debugging, you might print the pulse:
		 printf("Driving speed: %d\n", target_speed);
		 printf("Driving PSC: %lu, ARR: %lu\n", module->driving.pwm_tim->Instance->PSC, module->driving.pwm_tim->Instance->ARR);
	#endif

    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <SM_UpdateDriving+0x66>
 8002872:	89fa      	ldrh	r2, [r7, #14]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800287c:	e031      	b.n	80028e2 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	2b04      	cmp	r3, #4
 8002884:	d106      	bne.n	8002894 <SM_UpdateDriving+0x7c>
 8002886:	89f9      	ldrh	r1, [r7, #14]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	460b      	mov	r3, r1
 8002890:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002892:	e026      	b.n	80028e2 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	2b08      	cmp	r3, #8
 800289a:	d106      	bne.n	80028aa <SM_UpdateDriving+0x92>
 800289c:	89f9      	ldrh	r1, [r7, #14]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80028a8:	e01b      	b.n	80028e2 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d106      	bne.n	80028c0 <SM_UpdateDriving+0xa8>
 80028b2:	89f9      	ldrh	r1, [r7, #14]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	460b      	mov	r3, r1
 80028bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80028be:	e010      	b.n	80028e2 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d106      	bne.n	80028d6 <SM_UpdateDriving+0xbe>
 80028c8:	89f9      	ldrh	r1, [r7, #14]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	460b      	mov	r3, r1
 80028d2:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80028d4:	e005      	b.n	80028e2 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 80028d6:	89f9      	ldrh	r1, [r7, #14]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <SM_GetCurrentAngle>:
//    // Convert the encoder counts to an angle.
//    // (Assumes module->counts_per_degree is set appropriately.)
//    return counts * module->counts_per_degree * 360.0f;
//}

float SM_GetCurrentAngle(SwerveModule* module) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    int32_t counts = (int16_t)(module->steering.encoder_tim->Instance->CNT);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	60fb      	str	r3, [r7, #12]
//    printf("32bit %ld, 16bit %d", (int32_t)module->steering.encoder_tim->Instance->CNT, (int16_t)module->steering.encoder_tim->Instance->CNT);     // For 32-bit timer, use the full value;

//	#ifdef DEBUG_PRINT
		printf("Encoder Counts: %ld\n", counts);
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	480b      	ldr	r0, [pc, #44]	@ (8002930 <SM_GetCurrentAngle+0x44>)
 8002904:	f006 f980 	bl	8008c08 <iprintf>
//	#endif

    // Convert the encoder counts to an angle.
    // (Assumes module->counts_per_degree is set appropriately.)
    return counts * module->counts_per_degree * 360.0f;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002934 <SM_GetCurrentAngle+0x48>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002924:	eeb0 0a67 	vmov.f32	s0, s15
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	0800c648 	.word	0x0800c648
 8002934:	43b40000 	.word	0x43b40000

08002938 <SM_CalibrateESC>:
//#endif

    return fabsf(current - target_angle) <= tolerance;
}

void SM_CalibrateESC(DrivingMotor* motor) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->max_pulse);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <SM_CalibrateESC+0x1e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	895a      	ldrh	r2, [r3, #10]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34
 8002954:	e036      	b.n	80029c4 <SM_CalibrateESC+0x8c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <SM_CalibrateESC+0x36>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8959      	ldrh	r1, [r3, #10]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	6393      	str	r3, [r2, #56]	@ 0x38
 800296c:	e02a      	b.n	80029c4 <SM_CalibrateESC+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d107      	bne.n	8002986 <SM_CalibrateESC+0x4e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8959      	ldrh	r1, [r3, #10]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	460b      	mov	r3, r1
 8002982:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002984:	e01e      	b.n	80029c4 <SM_CalibrateESC+0x8c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d107      	bne.n	800299e <SM_CalibrateESC+0x66>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8959      	ldrh	r1, [r3, #10]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	460b      	mov	r3, r1
 800299a:	6413      	str	r3, [r2, #64]	@ 0x40
 800299c:	e012      	b.n	80029c4 <SM_CalibrateESC+0x8c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d107      	bne.n	80029b6 <SM_CalibrateESC+0x7e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8959      	ldrh	r1, [r3, #10]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	6493      	str	r3, [r2, #72]	@ 0x48
 80029b4:	e006      	b.n	80029c4 <SM_CalibrateESC+0x8c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8959      	ldrh	r1, [r3, #10]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	460b      	mov	r3, r1
 80029c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    printf("Driving Calibrate PSC: %lu, ARR: %lu\n", motor->pwm_tim->Instance->PSC, motor->pwm_tim->Instance->ARR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	461a      	mov	r2, r3
 80029d6:	486f      	ldr	r0, [pc, #444]	@ (8002b94 <SM_CalibrateESC+0x25c>)
 80029d8:	f006 f916 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e4:	4619      	mov	r1, r3
 80029e6:	486c      	ldr	r0, [pc, #432]	@ (8002b98 <SM_CalibrateESC+0x260>)
 80029e8:	f006 f90e 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f4:	4619      	mov	r1, r3
 80029f6:	4868      	ldr	r0, [pc, #416]	@ (8002b98 <SM_CalibrateESC+0x260>)
 80029f8:	f006 f906 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a04:	4619      	mov	r1, r3
 8002a06:	4864      	ldr	r0, [pc, #400]	@ (8002b98 <SM_CalibrateESC+0x260>)
 8002a08:	f006 f8fe 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR4);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	4619      	mov	r1, r3
 8002a16:	4860      	ldr	r0, [pc, #384]	@ (8002b98 <SM_CalibrateESC+0x260>)
 8002a18:	f006 f8f6 	bl	8008c08 <iprintf>
	HAL_Delay(7000);
 8002a1c:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8002a20:	f000 fd16 	bl	8003450 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->min_pulse);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <SM_CalibrateESC+0x102>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	891a      	ldrh	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a38:	e036      	b.n	8002aa8 <SM_CalibrateESC+0x170>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d107      	bne.n	8002a52 <SM_CalibrateESC+0x11a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8919      	ldrh	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a50:	e02a      	b.n	8002aa8 <SM_CalibrateESC+0x170>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d107      	bne.n	8002a6a <SM_CalibrateESC+0x132>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8919      	ldrh	r1, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	460b      	mov	r3, r1
 8002a66:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a68:	e01e      	b.n	8002aa8 <SM_CalibrateESC+0x170>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d107      	bne.n	8002a82 <SM_CalibrateESC+0x14a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8919      	ldrh	r1, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a80:	e012      	b.n	8002aa8 <SM_CalibrateESC+0x170>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d107      	bne.n	8002a9a <SM_CalibrateESC+0x162>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8919      	ldrh	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a98:	e006      	b.n	8002aa8 <SM_CalibrateESC+0x170>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8919      	ldrh	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    printf("Driving Calibrate PSC: %lu, ARR: %lu\n", motor->pwm_tim->Instance->PSC, motor->pwm_tim->Instance->ARR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4836      	ldr	r0, [pc, #216]	@ (8002b94 <SM_CalibrateESC+0x25c>)
 8002abc:	f006 f8a4 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4833      	ldr	r0, [pc, #204]	@ (8002b98 <SM_CalibrateESC+0x260>)
 8002acc:	f006 f89c 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	4619      	mov	r1, r3
 8002ada:	482f      	ldr	r0, [pc, #188]	@ (8002b98 <SM_CalibrateESC+0x260>)
 8002adc:	f006 f894 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	4619      	mov	r1, r3
 8002aea:	482b      	ldr	r0, [pc, #172]	@ (8002b98 <SM_CalibrateESC+0x260>)
 8002aec:	f006 f88c 	bl	8008c08 <iprintf>
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	4619      	mov	r1, r3
 8002afa:	4827      	ldr	r0, [pc, #156]	@ (8002b98 <SM_CalibrateESC+0x260>)
 8002afc:	f006 f884 	bl	8008c08 <iprintf>
	HAL_Delay(8000);
 8002b00:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8002b04:	f000 fca4 	bl	8003450 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <SM_CalibrateESC+0x1e6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	899a      	ldrh	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b1c:	e036      	b.n	8002b8c <SM_CalibrateESC+0x254>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d107      	bne.n	8002b36 <SM_CalibrateESC+0x1fe>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8999      	ldrh	r1, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b34:	e02a      	b.n	8002b8c <SM_CalibrateESC+0x254>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d107      	bne.n	8002b4e <SM_CalibrateESC+0x216>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8999      	ldrh	r1, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002b4c:	e01e      	b.n	8002b8c <SM_CalibrateESC+0x254>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d107      	bne.n	8002b66 <SM_CalibrateESC+0x22e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8999      	ldrh	r1, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	460b      	mov	r3, r1
 8002b62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002b64:	e012      	b.n	8002b8c <SM_CalibrateESC+0x254>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d107      	bne.n	8002b7e <SM_CalibrateESC+0x246>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8999      	ldrh	r1, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002b7c:	e006      	b.n	8002b8c <SM_CalibrateESC+0x254>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8999      	ldrh	r1, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	0800c684 	.word	0x0800c684
 8002b98:	0800c6ac 	.word	0x0800c6ac

08002b9c <normalize_angle_error>:

static float normalize_angle_error(float error) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Wrap error to [-180, 180)
    error = fmodf(error + 180.0f, 360.0f);
 8002ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002baa:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002bf8 <normalize_angle_error+0x5c>
 8002bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bb2:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8002bfc <normalize_angle_error+0x60>
 8002bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bba:	f009 f9e9 	bl	800bf90 <fmodf>
 8002bbe:	ed87 0a01 	vstr	s0, [r7, #4]
    if (error < 0)
 8002bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d507      	bpl.n	8002be0 <normalize_angle_error+0x44>
        error += 360.0f;
 8002bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002bfc <normalize_angle_error+0x60>
 8002bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bdc:	edc7 7a01 	vstr	s15, [r7, #4]
    return error - 180.0f;
 8002be0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002bf8 <normalize_angle_error+0x5c>
 8002be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	43340000 	.word	0x43340000
 8002bfc:	43b40000 	.word	0x43b40000

08002c00 <steering_pid_update>:

// Private function implementations
static float steering_pid_update(SteeringMotor* motor, float target, float current) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c0c:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = normalize_angle_error(target - current);
 8002c10:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	f7ff ffbc 	bl	8002b9c <normalize_angle_error>
 8002c24:	ed87 0a05 	vstr	s0, [r7, #20]

    // Integral term with clamping
    motor->integral += error * motor->dt;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    motor->integral = fmaxf(fminf(motor->integral, motor->integral_limit), -motor->integral_limit);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c52:	eef0 0a47 	vmov.f32	s1, s14
 8002c56:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5a:	f009 fb1a 	bl	800c292 <fminf>
 8002c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c68:	eef1 7a67 	vneg.f32	s15, s15
 8002c6c:	eef0 0a67 	vmov.f32	s1, s15
 8002c70:	eeb0 0a47 	vmov.f32	s0, s14
 8002c74:	f009 faf0 	bl	800c258 <fmaxf>
 8002c78:	eef0 7a40 	vmov.f32	s15, s0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Derivative term
    float derivative = (error - motor->prev_error) / motor->dt;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002c88:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9a:	edc7 7a04 	vstr	s15, [r7, #16]
    motor->prev_error = error;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28

    return (motor->Kp * error) + (motor->Ki * motor->integral) + (motor->Kd * derivative);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	ed93 7a05 	vldr	s14, [r3, #20]
 8002caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <set_steering_pwm>:


static void set_steering_pwm(SteeringMotor* motor, int16_t pwm) {
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	807b      	strh	r3, [r7, #2]
    bool direction = (pwm <= 0);
 8002cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bfd4      	ite	le
 8002cf6:	2301      	movle	r3, #1
 8002cf8:	2300      	movgt	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
    pwm = (int16_t)fminf(fabsf(pwm), __HAL_TIM_GET_AUTORELOAD(motor->pwm_tim));
 8002cfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d08:	eef0 7ae7 	vabs.f32	s15, s15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d14:	ee07 3a10 	vmov	s14, r3
 8002d18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002d1c:	eef0 0a47 	vmov.f32	s1, s14
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	f009 fab5 	bl	800c292 <fminf>
 8002d28:	eef0 7a40 	vmov.f32	s15, s0
 8002d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d30:	ee17 3a90 	vmov	r3, s15
 8002d34:	807b      	strh	r3, [r7, #2]
	#ifdef DEBUG_PRINT
		printf("Steering PSC: %lu, ARR: %lu\n", motor->pwm_tim->Instance->PSC, motor->pwm_tim->Instance->ARR);
		printf("Direction: %d, pwm: %d\n", direction, pwm);
	#endif

    HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, direction);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	889b      	ldrh	r3, [r3, #4]
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f000 fe99 	bl	8003a78 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <set_steering_pwm+0x78>
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d58:	e031      	b.n	8002dbe <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d106      	bne.n	8002d70 <set_steering_pwm+0x8e>
 8002d62:	8879      	ldrh	r1, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d6e:	e026      	b.n	8002dbe <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d106      	bne.n	8002d86 <set_steering_pwm+0xa4>
 8002d78:	8879      	ldrh	r1, [r7, #2]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	460b      	mov	r3, r1
 8002d82:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002d84:	e01b      	b.n	8002dbe <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d106      	bne.n	8002d9c <set_steering_pwm+0xba>
 8002d8e:	8879      	ldrh	r1, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	460b      	mov	r3, r1
 8002d98:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002d9a:	e010      	b.n	8002dbe <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d106      	bne.n	8002db2 <set_steering_pwm+0xd0>
 8002da4:	8879      	ldrh	r1, [r7, #2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	460b      	mov	r3, r1
 8002dae:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002db0:	e005      	b.n	8002dbe <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8002db2:	8879      	ldrh	r1, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <constrain_pulse_width>:

static void constrain_pulse_width(uint16_t* pulse, uint16_t min, uint16_t max) {
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	807b      	strh	r3, [r7, #2]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	803b      	strh	r3, [r7, #0]
    if(*pulse < min) *pulse = min;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	887a      	ldrh	r2, [r7, #2]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d902      	bls.n	8002de6 <constrain_pulse_width+0x20>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	801a      	strh	r2, [r3, #0]
    if(*pulse > max) *pulse = max;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	883a      	ldrh	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d202      	bcs.n	8002df6 <constrain_pulse_width+0x30>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	883a      	ldrh	r2, [r7, #0]
 8002df4:	801a      	strh	r2, [r3, #0]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  return 1;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_kill>:

int _kill(int pid, int sig)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e1c:	f005 ffc8 	bl	8008db0 <__errno>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2216      	movs	r2, #22
 8002e24:	601a      	str	r2, [r3, #0]
  return -1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_exit>:

void _exit (int status)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e3a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffe7 	bl	8002e12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <_exit+0x12>

08002e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e00a      	b.n	8002e70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e5a:	f3af 8000 	nop.w
 8002e5e:	4601      	mov	r1, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	60ba      	str	r2, [r7, #8]
 8002e66:	b2ca      	uxtb	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	dbf0      	blt.n	8002e5a <_read+0x12>
  }

  return len;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e009      	b.n	8002ea8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f9f7 	bl	8003290 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dbf1      	blt.n	8002e94 <_write+0x12>
  }
  return len;
 8002eb0:	687b      	ldr	r3, [r7, #4]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_close>:

int _close(int file)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_isatty>:

int _isatty(int file)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	@ (8002f80 <_sbrk+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <_sbrk+0x60>)
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <_sbrk+0x64>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <_sbrk+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f54:	f005 ff2c 	bl	8008db0 <__errno>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f62:	e009      	b.n	8002f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <_sbrk+0x64>)
 8002f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20020000 	.word	0x20020000
 8002f84:	00000400 	.word	0x00000400
 8002f88:	200005a4 	.word	0x200005a4
 8002f8c:	20000798 	.word	0x20000798

08002f90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <SystemInit+0x20>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	4a05      	ldr	r2, [pc, #20]	@ (8002fb0 <SystemInit+0x20>)
 8002f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fb4:	480d      	ldr	r0, [pc, #52]	@ (8002fec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fb8:	f7ff ffea 	bl	8002f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fbc:	480c      	ldr	r0, [pc, #48]	@ (8002ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fbe:	490d      	ldr	r1, [pc, #52]	@ (8002ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff8 <LoopForever+0xe>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002fc4:	e002      	b.n	8002fcc <LoopCopyDataInit>

08002fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fca:	3304      	adds	r3, #4

08002fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd0:	d3f9      	bcc.n	8002fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003000 <LoopForever+0x16>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd8:	e001      	b.n	8002fde <LoopFillZerobss>

08002fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fdc:	3204      	adds	r2, #4

08002fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe0:	d3fb      	bcc.n	8002fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fe2:	f005 feeb 	bl	8008dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fe6:	f7fe f8cf 	bl	8001188 <main>

08002fea <LoopForever>:

LoopForever:
    b LoopForever
 8002fea:	e7fe      	b.n	8002fea <LoopForever>
  ldr   r0, =_estack
 8002fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002ff8:	0800cbac 	.word	0x0800cbac
  ldr r2, =_sbss
 8002ffc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003000:	20000798 	.word	0x20000798

08003004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003004:	e7fe      	b.n	8003004 <ADC1_2_IRQHandler>
	...

08003008 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8003012:	4b16      	ldr	r3, [pc, #88]	@ (800306c <BSP_LED_Init+0x64>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003016:	4a15      	ldr	r2, [pc, #84]	@ (800306c <BSP_LED_Init+0x64>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <BSP_LED_Init+0x64>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800302a:	2320      	movs	r3, #32
 800302c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800302e:	2301      	movs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003036:	2303      	movs	r3, #3
 8003038:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	4a0c      	ldr	r2, [pc, #48]	@ (8003070 <BSP_LED_Init+0x68>)
 800303e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003042:	f107 020c 	add.w	r2, r7, #12
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fb93 	bl	8003774 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4a07      	ldr	r2, [pc, #28]	@ (8003070 <BSP_LED_Init+0x68>)
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	2120      	movs	r1, #32
 8003058:	2200      	movs	r2, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fd0c 	bl	8003a78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	20000008 	.word	0x20000008

08003074 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	4a06      	ldr	r2, [pc, #24]	@ (800309c <BSP_LED_On+0x28>)
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	2120      	movs	r1, #32
 8003088:	2201      	movs	r2, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fcf4 	bl	8003a78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000008 	.word	0x20000008

080030a0 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <BSP_LED_Toggle+0x28>)
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	2220      	movs	r2, #32
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fcf6 	bl	8003aa8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000008 	.word	0x20000008

080030cc <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	460a      	mov	r2, r1
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	4613      	mov	r3, r2
 80030da:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80030dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003190 <BSP_PB_Init+0xc4>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003190 <BSP_PB_Init+0xc4>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030e8:	4b29      	ldr	r3, [pc, #164]	@ (8003190 <BSP_PB_Init+0xc4>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80030f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80030fa:	2302      	movs	r3, #2
 80030fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10c      	bne.n	8003122 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4a21      	ldr	r2, [pc, #132]	@ (8003194 <BSP_PB_Init+0xc8>)
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	f107 020c 	add.w	r2, r7, #12
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fb2a 	bl	8003774 <HAL_GPIO_Init>
 8003120:	e031      	b.n	8003186 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003122:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003126:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	4a1a      	ldr	r2, [pc, #104]	@ (8003194 <BSP_PB_Init+0xc8>)
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	f107 020c 	add.w	r2, r7, #12
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fb1c 	bl	8003774 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <BSP_PB_Init+0xcc>)
 8003142:	441a      	add	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	4915      	ldr	r1, [pc, #84]	@ (800319c <BSP_PB_Init+0xd0>)
 8003148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f000 facc 	bl	80036ec <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4a0f      	ldr	r2, [pc, #60]	@ (8003198 <BSP_PB_Init+0xcc>)
 800315a:	1898      	adds	r0, r3, r2
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <BSP_PB_Init+0xd4>)
 8003160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003164:	461a      	mov	r2, r3
 8003166:	2100      	movs	r1, #0
 8003168:	f000 faa3 	bl	80036b2 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800316c:	2028      	movs	r0, #40	@ 0x28
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <BSP_PB_Init+0xd8>)
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	2200      	movs	r2, #0
 8003178:	4619      	mov	r1, r3
 800317a:	f000 fa66 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800317e:	2328      	movs	r3, #40	@ 0x28
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fa7c 	bl	800367e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	2000000c 	.word	0x2000000c
 8003198:	200005a8 	.word	0x200005a8
 800319c:	0800c6ec 	.word	0x0800c6ec
 80031a0:	20000014 	.word	0x20000014
 80031a4:	20000018 	.word	0x20000018

080031a8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <BSP_PB_IRQHandler+0x20>)
 80031b8:	4413      	add	r3, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 faaa 	bl	8003714 <HAL_EXTI_IRQHandler>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	200005a8 	.word	0x200005a8

080031cc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d903      	bls.n	80031ea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80031e2:	f06f 0301 	mvn.w	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e018      	b.n	800321c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	2294      	movs	r2, #148	@ 0x94
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <BSP_COM_Init+0x5c>)
 80031f4:	4413      	add	r3, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f86e 	bl	80032d8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2294      	movs	r2, #148	@ 0x94
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <BSP_COM_Init+0x5c>)
 8003206:	4413      	add	r3, r2
 8003208:	6839      	ldr	r1, [r7, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f80e 	bl	800322c <MX_LPUART1_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8003216:	f06f 0303 	mvn.w	r3, #3
 800321a:	e000      	b.n	800321e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800321c:	68fb      	ldr	r3, [r7, #12]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200005b0 	.word	0x200005b0

0800322c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <MX_LPUART1_Init+0x60>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	220c      	movs	r2, #12
 800324a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	895b      	ldrh	r3, [r3, #10]
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	891b      	ldrh	r3, [r3, #8]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	899b      	ldrh	r3, [r3, #12]
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003278:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f002 febc 	bl	8005ff8 <HAL_UART_Init>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000010 	.word	0x20000010

08003290 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <__io_putchar+0x30>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	2394      	movs	r3, #148	@ 0x94
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	4a07      	ldr	r2, [pc, #28]	@ (80032c4 <__io_putchar+0x34>)
 80032a6:	1898      	adds	r0, r3, r2
 80032a8:	1d39      	adds	r1, r7, #4
 80032aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ae:	2201      	movs	r2, #1
 80032b0:	f002 fef2 	bl	8006098 <HAL_UART_Transmit>
  return ch;
 80032b4:	687b      	ldr	r3, [r7, #4]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000644 	.word	0x20000644
 80032c4:	200005b0 	.word	0x200005b0

080032c8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fe ff8d 	bl	80021ec <BSP_PB_Callback>
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	@ 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80032e0:	4b22      	ldr	r3, [pc, #136]	@ (800336c <COM1_MspInit+0x94>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e4:	4a21      	ldr	r2, [pc, #132]	@ (800336c <COM1_MspInit+0x94>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <COM1_MspInit+0x94>)
 80032ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80032f8:	4b1c      	ldr	r3, [pc, #112]	@ (800336c <COM1_MspInit+0x94>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fc:	4a1b      	ldr	r2, [pc, #108]	@ (800336c <COM1_MspInit+0x94>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <COM1_MspInit+0x94>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003310:	4b16      	ldr	r3, [pc, #88]	@ (800336c <COM1_MspInit+0x94>)
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	4a15      	ldr	r2, [pc, #84]	@ (800336c <COM1_MspInit+0x94>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800331c:	4b13      	ldr	r3, [pc, #76]	@ (800336c <COM1_MspInit+0x94>)
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003328:	2304      	movs	r3, #4
 800332a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003330:	2302      	movs	r3, #2
 8003332:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003334:	2301      	movs	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003338:	230c      	movs	r3, #12
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4619      	mov	r1, r3
 8003342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003346:	f000 fa15 	bl	8003774 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800334a:	2308      	movs	r3, #8
 800334c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8003352:	230c      	movs	r3, #12
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003360:	f000 fa08 	bl	8003774 <HAL_GPIO_Init>
}
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	@ 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000

08003370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337a:	2003      	movs	r0, #3
 800337c:	f000 f95a 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003380:	2000      	movs	r0, #0
 8003382:	f000 f80d 	bl	80033a0 <HAL_InitTick>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	71fb      	strb	r3, [r7, #7]
 8003390:	e001      	b.n	8003396 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003392:	f7fe ff45 	bl	8002220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003396:	79fb      	ldrb	r3, [r7, #7]

}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033ac:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <HAL_InitTick+0x68>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033b4:	4b15      	ldr	r3, [pc, #84]	@ (800340c <HAL_InitTick+0x6c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <HAL_InitTick+0x68>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f966 	bl	800369a <HAL_SYSTICK_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d809      	bhi.n	80033ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033da:	2200      	movs	r2, #0
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033e2:	f000 f932 	bl	800364a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <HAL_InitTick+0x70>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e007      	b.n	80033fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e004      	b.n	80033fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e001      	b.n	80033fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000020 	.word	0x20000020
 800340c:	20000004 	.word	0x20000004
 8003410:	2000001c 	.word	0x2000001c

08003414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <HAL_IncTick+0x1c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_IncTick+0x20>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	4a03      	ldr	r2, [pc, #12]	@ (8003430 <HAL_IncTick+0x1c>)
 8003424:	6013      	str	r3, [r2, #0]
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000648 	.word	0x20000648
 8003434:	20000020 	.word	0x20000020

08003438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return uwTick;
 800343c:	4b03      	ldr	r3, [pc, #12]	@ (800344c <HAL_GetTick+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000648 	.word	0x20000648

08003450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff ffee 	bl	8003438 <HAL_GetTick>
 800345c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003468:	d004      	beq.n	8003474 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_Delay+0x40>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4413      	add	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003474:	bf00      	nop
 8003476:	f7ff ffdf 	bl	8003438 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	429a      	cmp	r2, r3
 8003484:	d8f7      	bhi.n	8003476 <HAL_Delay+0x26>
  {
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000020 	.word	0x20000020

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	@ (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	@ (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	@ (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	@ 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff29 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff40 	bl	80034dc <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff90 	bl	8003588 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5f 	bl	8003534 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff33 	bl	80034f8 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa4 	bl	80035f0 <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80036b2:	b480      	push	{r7}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	460b      	mov	r3, r1
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80036c4:	7afb      	ldrb	r3, [r7, #11]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	605a      	str	r2, [r3, #4]
      break;
 80036d0:	e005      	b.n	80036de <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
      break;
 80036dc:	bf00      	nop
  }

  return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e003      	b.n	8003708 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003706:	2300      	movs	r3, #0
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2201      	movs	r2, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_EXTI_IRQHandler+0x5c>)
 800373e:	4413      	add	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4798      	blx	r3
    }
  }
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010414 	.word	0x40010414

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003782:	e15a      	b.n	8003a3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 814c 	beq.w	8003a34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d005      	beq.n	80037b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d130      	bne.n	8003816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ea:	2201      	movs	r2, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0201 	and.w	r2, r3, #1
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b03      	cmp	r3, #3
 8003820:	d017      	beq.n	8003852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d123      	bne.n	80038a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	08da      	lsrs	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3208      	adds	r2, #8
 8003866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	6939      	ldr	r1, [r7, #16]
 80038a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80a6 	beq.w	8003a34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003a58 <HAL_GPIO_Init+0x2e4>)
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003a58 <HAL_GPIO_Init+0x2e4>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80038f4:	4b58      	ldr	r3, [pc, #352]	@ (8003a58 <HAL_GPIO_Init+0x2e4>)
 80038f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003900:	4a56      	ldr	r2, [pc, #344]	@ (8003a5c <HAL_GPIO_Init+0x2e8>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800392a:	d01f      	beq.n	800396c <HAL_GPIO_Init+0x1f8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a60 <HAL_GPIO_Init+0x2ec>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d019      	beq.n	8003968 <HAL_GPIO_Init+0x1f4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a4b      	ldr	r2, [pc, #300]	@ (8003a64 <HAL_GPIO_Init+0x2f0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_GPIO_Init+0x1f0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a68 <HAL_GPIO_Init+0x2f4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00d      	beq.n	8003960 <HAL_GPIO_Init+0x1ec>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a49      	ldr	r2, [pc, #292]	@ (8003a6c <HAL_GPIO_Init+0x2f8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <HAL_GPIO_Init+0x1e8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a48      	ldr	r2, [pc, #288]	@ (8003a70 <HAL_GPIO_Init+0x2fc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <HAL_GPIO_Init+0x1e4>
 8003954:	2305      	movs	r3, #5
 8003956:	e00a      	b.n	800396e <HAL_GPIO_Init+0x1fa>
 8003958:	2306      	movs	r3, #6
 800395a:	e008      	b.n	800396e <HAL_GPIO_Init+0x1fa>
 800395c:	2304      	movs	r3, #4
 800395e:	e006      	b.n	800396e <HAL_GPIO_Init+0x1fa>
 8003960:	2303      	movs	r3, #3
 8003962:	e004      	b.n	800396e <HAL_GPIO_Init+0x1fa>
 8003964:	2302      	movs	r3, #2
 8003966:	e002      	b.n	800396e <HAL_GPIO_Init+0x1fa>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_GPIO_Init+0x1fa>
 800396c:	2300      	movs	r3, #0
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4093      	lsls	r3, r2
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800397e:	4937      	ldr	r1, [pc, #220]	@ (8003a5c <HAL_GPIO_Init+0x2e8>)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398c:	4b39      	ldr	r3, [pc, #228]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b0:	4a30      	ldr	r2, [pc, #192]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039da:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80039e0:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a04:	4a1b      	ldr	r2, [pc, #108]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2e:	4a11      	ldr	r2, [pc, #68]	@ (8003a74 <HAL_GPIO_Init+0x300>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3301      	adds	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f ae9d 	bne.w	8003784 <HAL_GPIO_Init+0x10>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	40010400 	.word	0x40010400

08003a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	041a      	lsls	r2, r3, #16
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43d9      	mvns	r1, r3
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	400b      	ands	r3, r1
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d141      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aea:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af6:	d131      	bne.n	8003b5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af8:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003afe:	4a46      	ldr	r2, [pc, #280]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b08:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b10:	4a41      	ldr	r2, [pc, #260]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b18:	4b40      	ldr	r3, [pc, #256]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2232      	movs	r2, #50	@ 0x32
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	4a3f      	ldr	r2, [pc, #252]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0c9b      	lsrs	r3, r3, #18
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2e:	e002      	b.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b36:	4b38      	ldr	r3, [pc, #224]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b42:	d102      	bne.n	8003b4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f2      	bne.n	8003b30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b4a:	4b33      	ldr	r3, [pc, #204]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b56:	d158      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e057      	b.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b62:	4a2d      	ldr	r2, [pc, #180]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b6c:	e04d      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b74:	d141      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b76:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b82:	d131      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b84:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b8a:	4a23      	ldr	r2, [pc, #140]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b94:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2232      	movs	r2, #50	@ 0x32
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	4a1c      	ldr	r2, [pc, #112]	@ (8003c20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	0c9b      	lsrs	r3, r3, #18
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bba:	e002      	b.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bce:	d102      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f2      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd6:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be2:	d112      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e011      	b.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bee:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bf8:	e007      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c02:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	20000004 	.word	0x20000004
 8003c20:	431bde83 	.word	0x431bde83

08003c24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c32:	6093      	str	r3, [r2, #8]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40007000 	.word	0x40007000

08003c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e2fe      	b.n	8004254 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d075      	beq.n	8003d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c62:	4b97      	ldr	r3, [pc, #604]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c6c:	4b94      	ldr	r3, [pc, #592]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d102      	bne.n	8003c82 <HAL_RCC_OscConfig+0x3e>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_OscConfig+0x44>
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d10b      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05b      	beq.n	8003d4c <HAL_RCC_OscConfig+0x108>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d157      	bne.n	8003d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e2d9      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x74>
 8003caa:	4b85      	ldr	r3, [pc, #532]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a84      	ldr	r2, [pc, #528]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0xb0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x98>
 8003cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0xb0>
 8003cdc:	4b78      	ldr	r3, [pc, #480]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a77      	ldr	r2, [pc, #476]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b75      	ldr	r3, [pc, #468]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a74      	ldr	r2, [pc, #464]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7ff fb9c 	bl	8003438 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d04:	f7ff fb98 	bl	8003438 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	@ 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e29e      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d16:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0xc0>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7ff fb88 	bl	8003438 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7ff fb84 	bl	8003438 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	@ 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e28a      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d3e:	4b60      	ldr	r3, [pc, #384]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0xe8>
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d075      	beq.n	8003e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	4b56      	ldr	r3, [pc, #344]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_OscConfig+0x136>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_OscConfig+0x13c>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d11f      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d80:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_OscConfig+0x154>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e25d      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d98:	4b49      	ldr	r3, [pc, #292]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	4946      	ldr	r1, [pc, #280]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dac:	4b45      	ldr	r3, [pc, #276]	@ (8003ec4 <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff faf5 	bl	80033a0 <HAL_InitTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d043      	beq.n	8003e44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e249      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d023      	beq.n	8003e10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7ff fb30 	bl	8003438 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7ff fb2c 	bl	8003438 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e232      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dee:	4b34      	ldr	r3, [pc, #208]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	492d      	ldr	r1, [pc, #180]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
 8003e0e:	e01a      	b.n	8003e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7ff fb0c 	bl	8003438 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e24:	f7ff fb08 	bl	8003438 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e20e      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e36:	4b22      	ldr	r3, [pc, #136]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x1e0>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d041      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5a:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e60:	4a17      	ldr	r2, [pc, #92]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7ff fae5 	bl	8003438 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e72:	f7ff fae1 	bl	8003438 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1e7      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ef      	beq.n	8003e72 <HAL_RCC_OscConfig+0x22e>
 8003e92:	e020      	b.n	8003ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7ff fac8 	bl	8003438 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eaa:	e00d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eac:	f7ff fac4 	bl	8003438 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d906      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1ca      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ea      	bne.n	8003eac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80a6 	beq.w	8004030 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ee8:	4b84      	ldr	r3, [pc, #528]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2b4>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x2b6>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	4b7f      	ldr	r3, [pc, #508]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	4a7e      	ldr	r2, [pc, #504]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1a:	4b79      	ldr	r3, [pc, #484]	@ (8004100 <HAL_RCC_OscConfig+0x4bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f26:	4b76      	ldr	r3, [pc, #472]	@ (8004100 <HAL_RCC_OscConfig+0x4bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a75      	ldr	r2, [pc, #468]	@ (8004100 <HAL_RCC_OscConfig+0x4bc>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7ff fa81 	bl	8003438 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7ff fa7d 	bl	8003438 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e183      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004100 <HAL_RCC_OscConfig+0x4bc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d108      	bne.n	8003f72 <HAL_RCC_OscConfig+0x32e>
 8003f60:	4b66      	ldr	r3, [pc, #408]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	4a65      	ldr	r2, [pc, #404]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f70:	e024      	b.n	8003fbc <HAL_RCC_OscConfig+0x378>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d110      	bne.n	8003f9c <HAL_RCC_OscConfig+0x358>
 8003f7a:	4b60      	ldr	r3, [pc, #384]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f80:	4a5e      	ldr	r2, [pc, #376]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f90:	4a5a      	ldr	r2, [pc, #360]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f9a:	e00f      	b.n	8003fbc <HAL_RCC_OscConfig+0x378>
 8003f9c:	4b57      	ldr	r3, [pc, #348]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	4a56      	ldr	r2, [pc, #344]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fac:	4b53      	ldr	r3, [pc, #332]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb2:	4a52      	ldr	r2, [pc, #328]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f023 0304 	bic.w	r3, r3, #4
 8003fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d016      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7ff fa38 	bl	8003438 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7ff fa34 	bl	8003438 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e138      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe2:	4b46      	ldr	r3, [pc, #280]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ed      	beq.n	8003fcc <HAL_RCC_OscConfig+0x388>
 8003ff0:	e015      	b.n	800401e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7ff fa21 	bl	8003438 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff8:	e00a      	b.n	8004010 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffa:	f7ff fa1d 	bl	8003438 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e121      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004010:	4b3a      	ldr	r3, [pc, #232]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ed      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800401e:	7ffb      	ldrb	r3, [r7, #31]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004024:	4b35      	ldr	r3, [pc, #212]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	4a34      	ldr	r2, [pc, #208]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d03c      	beq.n	80040b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01c      	beq.n	800407e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004044:	4b2d      	ldr	r3, [pc, #180]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8004046:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800404a:	4a2c      	ldr	r2, [pc, #176]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7ff f9f0 	bl	8003438 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800405c:	f7ff f9ec 	bl	8003438 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e0f2      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800406e:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8004070:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ef      	beq.n	800405c <HAL_RCC_OscConfig+0x418>
 800407c:	e01b      	b.n	80040b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800407e:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8004080:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004084:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408e:	f7ff f9d3 	bl	8003438 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004096:	f7ff f9cf 	bl	8003438 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e0d5      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040a8:	4b14      	ldr	r3, [pc, #80]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 80040aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ef      	bne.n	8004096 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80c9 	beq.w	8004252 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c0:	4b0e      	ldr	r3, [pc, #56]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	f000 8083 	beq.w	80041d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d15e      	bne.n	8004194 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a08      	ldr	r2, [pc, #32]	@ (80040fc <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7ff f9a9 	bl	8003438 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e8:	e00c      	b.n	8004104 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ea:	f7ff f9a5 	bl	8003438 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d905      	bls.n	8004104 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e0ab      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004104:	4b55      	ldr	r3, [pc, #340]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ec      	bne.n	80040ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004110:	4b52      	ldr	r3, [pc, #328]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4b52      	ldr	r3, [pc, #328]	@ (8004260 <HAL_RCC_OscConfig+0x61c>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6a11      	ldr	r1, [r2, #32]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004120:	3a01      	subs	r2, #1
 8004122:	0112      	lsls	r2, r2, #4
 8004124:	4311      	orrs	r1, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800412a:	0212      	lsls	r2, r2, #8
 800412c:	4311      	orrs	r1, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004132:	0852      	lsrs	r2, r2, #1
 8004134:	3a01      	subs	r2, #1
 8004136:	0552      	lsls	r2, r2, #21
 8004138:	4311      	orrs	r1, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800413e:	0852      	lsrs	r2, r2, #1
 8004140:	3a01      	subs	r2, #1
 8004142:	0652      	lsls	r2, r2, #25
 8004144:	4311      	orrs	r1, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800414a:	06d2      	lsls	r2, r2, #27
 800414c:	430a      	orrs	r2, r1
 800414e:	4943      	ldr	r1, [pc, #268]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004150:	4313      	orrs	r3, r2
 8004152:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004154:	4b41      	ldr	r3, [pc, #260]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a40      	ldr	r2, [pc, #256]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 800415a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800415e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004160:	4b3e      	ldr	r3, [pc, #248]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a3d      	ldr	r2, [pc, #244]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7ff f964 	bl	8003438 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7ff f960 	bl	8003438 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e066      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004186:	4b35      	ldr	r3, [pc, #212]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x530>
 8004192:	e05e      	b.n	8004252 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004194:	4b31      	ldr	r3, [pc, #196]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a30      	ldr	r2, [pc, #192]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 800419a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7ff f94a 	bl	8003438 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7ff f946 	bl	8003438 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04c      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ba:	4b28      	ldr	r3, [pc, #160]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80041c6:	4b25      	ldr	r3, [pc, #148]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	4924      	ldr	r1, [pc, #144]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 80041cc:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <HAL_RCC_OscConfig+0x620>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	60cb      	str	r3, [r1, #12]
 80041d2:	e03e      	b.n	8004252 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e039      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041e0:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <HAL_RCC_OscConfig+0x618>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0203 	and.w	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d12c      	bne.n	800424e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	3b01      	subs	r3, #1
 8004200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d123      	bne.n	800424e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d11b      	bne.n	800424e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d113      	bne.n	800424e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d109      	bne.n	800424e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	019f800c 	.word	0x019f800c
 8004264:	feeefffc 	.word	0xfeeefffc

08004268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e11e      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b91      	ldr	r3, [pc, #580]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d910      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b8e      	ldr	r3, [pc, #568]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	498c      	ldr	r1, [pc, #560]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b8a      	ldr	r3, [pc, #552]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e106      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d073      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d129      	bne.n	8004318 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c4:	4b81      	ldr	r3, [pc, #516]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0f4      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042d4:	f000 f99e 	bl	8004614 <RCC_GetSysClockFreqFromPLLSource>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4a7c      	ldr	r2, [pc, #496]	@ (80044d0 <HAL_RCC_ClockConfig+0x268>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d93f      	bls.n	8004362 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042e2:	4b7a      	ldr	r3, [pc, #488]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d033      	beq.n	8004362 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d12f      	bne.n	8004362 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004302:	4b72      	ldr	r3, [pc, #456]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800430a:	4a70      	ldr	r2, [pc, #448]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 800430c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004310:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e024      	b.n	8004362 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d107      	bne.n	8004330 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004320:	4b6a      	ldr	r3, [pc, #424]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0c6      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004330:	4b66      	ldr	r3, [pc, #408]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0be      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004340:	f000 f8ce 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8004344:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4a61      	ldr	r2, [pc, #388]	@ (80044d0 <HAL_RCC_ClockConfig+0x268>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d909      	bls.n	8004362 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800434e:	4b5f      	ldr	r3, [pc, #380]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004356:	4a5d      	ldr	r2, [pc, #372]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800435c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b5a      	ldr	r3, [pc, #360]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4957      	ldr	r1, [pc, #348]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7ff f860 	bl	8003438 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7ff f85c 	bl	8003438 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e095      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b4e      	ldr	r3, [pc, #312]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043bc:	4b43      	ldr	r3, [pc, #268]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a42      	ldr	r2, [pc, #264]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80043c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043d4:	4b3d      	ldr	r3, [pc, #244]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043dc:	4a3b      	ldr	r2, [pc, #236]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80043de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b39      	ldr	r3, [pc, #228]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4936      	ldr	r1, [pc, #216]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
 80043f6:	e008      	b.n	800440a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	d105      	bne.n	800440a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043fe:	4b33      	ldr	r3, [pc, #204]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4a32      	ldr	r2, [pc, #200]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004404:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004408:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d21d      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 020f 	bic.w	r2, r3, #15
 8004420:	4929      	ldr	r1, [pc, #164]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004428:	f7ff f806 	bl	8003438 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7ff f802 	bl	8003438 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e03b      	b.n	80044be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b20      	ldr	r3, [pc, #128]	@ (80044c8 <HAL_RCC_ClockConfig+0x260>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d1ed      	bne.n	8004430 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4917      	ldr	r1, [pc, #92]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447e:	4b13      	ldr	r3, [pc, #76]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	490f      	ldr	r1, [pc, #60]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004492:	f000 f825 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_RCC_ClockConfig+0x264>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	490c      	ldr	r1, [pc, #48]	@ (80044d4 <HAL_RCC_ClockConfig+0x26c>)
 80044a4:	5ccb      	ldrb	r3, [r1, r3]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	fa22 f303 	lsr.w	r3, r2, r3
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <HAL_RCC_ClockConfig+0x270>)
 80044b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <HAL_RCC_ClockConfig+0x274>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe ff72 	bl	80033a0 <HAL_InitTick>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40021000 	.word	0x40021000
 80044d0:	04c4b400 	.word	0x04c4b400
 80044d4:	0800c6d4 	.word	0x0800c6d4
 80044d8:	20000004 	.word	0x20000004
 80044dc:	2000001c 	.word	0x2000001c

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044f2:	4b2a      	ldr	r3, [pc, #168]	@ (800459c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e047      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044f8:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d102      	bne.n	800450a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004504:	4b26      	ldr	r3, [pc, #152]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e03e      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800450a:	4b23      	ldr	r3, [pc, #140]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d136      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004520:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3301      	adds	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d10c      	bne.n	800454e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004534:	4a1a      	ldr	r2, [pc, #104]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	4a16      	ldr	r2, [pc, #88]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800453e:	68d2      	ldr	r2, [r2, #12]
 8004540:	0a12      	lsrs	r2, r2, #8
 8004542:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	617b      	str	r3, [r7, #20]
      break;
 800454c:	e00c      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800454e:	4a13      	ldr	r2, [pc, #76]	@ (800459c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	fbb2 f3f3 	udiv	r3, r2, r3
 8004556:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004558:	68d2      	ldr	r2, [r2, #12]
 800455a:	0a12      	lsrs	r2, r2, #8
 800455c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004560:	fb02 f303 	mul.w	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]
      break;
 8004566:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xb8>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0e5b      	lsrs	r3, r3, #25
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	e001      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004588:	693b      	ldr	r3, [r7, #16]
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40021000 	.word	0x40021000
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	016e3600 	.word	0x016e3600

080045a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4904      	ldr	r1, [pc, #16]	@ (80045e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	0800c6e4 	.word	0x0800c6e4

080045e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045ec:	f7ff ffda 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0adb      	lsrs	r3, r3, #11
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800c6e4 	.word	0x0800c6e4

08004614 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800461a:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004624:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	3301      	adds	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d10c      	bne.n	8004652 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004638:	4a17      	ldr	r2, [pc, #92]	@ (8004698 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	4a14      	ldr	r2, [pc, #80]	@ (8004694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004642:	68d2      	ldr	r2, [r2, #12]
 8004644:	0a12      	lsrs	r2, r2, #8
 8004646:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
    break;
 8004650:	e00c      	b.n	800466c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004652:	4a12      	ldr	r2, [pc, #72]	@ (800469c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	4a0e      	ldr	r2, [pc, #56]	@ (8004694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	0a12      	lsrs	r2, r2, #8
 8004660:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
    break;
 800466a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0e5b      	lsrs	r3, r3, #25
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	3301      	adds	r3, #1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004686:	687b      	ldr	r3, [r7, #4]
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40021000 	.word	0x40021000
 8004698:	016e3600 	.word	0x016e3600
 800469c:	00f42400 	.word	0x00f42400

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046a8:	2300      	movs	r3, #0
 80046aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046ac:	2300      	movs	r3, #0
 80046ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8098 	beq.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046be:	2300      	movs	r3, #0
 80046c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c2:	4b43      	ldr	r3, [pc, #268]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ce:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d2:	4a3f      	ldr	r2, [pc, #252]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046da:	4b3d      	ldr	r3, [pc, #244]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e6:	2301      	movs	r3, #1
 80046e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ea:	4b3a      	ldr	r3, [pc, #232]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a39      	ldr	r2, [pc, #228]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046f6:	f7fe fe9f 	bl	8003438 <HAL_GetTick>
 80046fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046fc:	e009      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fe:	f7fe fe9b 	bl	8003438 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d902      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	74fb      	strb	r3, [r7, #19]
        break;
 8004710:	e005      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004712:	4b30      	ldr	r3, [pc, #192]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0ef      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800471e:	7cfb      	ldrb	r3, [r7, #19]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d159      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004724:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01e      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	429a      	cmp	r2, r3
 800473e:	d019      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004740:	4b23      	ldr	r3, [pc, #140]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800474a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800475c:	4b1c      	ldr	r3, [pc, #112]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800476c:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fe fe5b 	bl	8003438 <HAL_GetTick>
 8004782:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004784:	e00b      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fe fe57 	bl	8003438 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d902      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	74fb      	strb	r3, [r7, #19]
            break;
 800479c:	e006      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ec      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b2:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c0:	4903      	ldr	r1, [pc, #12]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047c8:	e008      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ca:	7cfb      	ldrb	r3, [r7, #19]
 80047cc:	74bb      	strb	r3, [r7, #18]
 80047ce:	e005      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047dc:	7c7b      	ldrb	r3, [r7, #17]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4ba7      	ldr	r3, [pc, #668]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	4aa6      	ldr	r2, [pc, #664]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047fa:	4ba1      	ldr	r3, [pc, #644]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f023 0203 	bic.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	499d      	ldr	r1, [pc, #628]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800481c:	4b98      	ldr	r3, [pc, #608]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f023 020c 	bic.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4995      	ldr	r1, [pc, #596]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800483e:	4b90      	ldr	r3, [pc, #576]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	498c      	ldr	r1, [pc, #560]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004860:	4b87      	ldr	r3, [pc, #540]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	4984      	ldr	r1, [pc, #528]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004882:	4b7f      	ldr	r3, [pc, #508]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	497b      	ldr	r1, [pc, #492]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a4:	4b76      	ldr	r3, [pc, #472]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	4973      	ldr	r1, [pc, #460]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	496a      	ldr	r1, [pc, #424]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e8:	4b65      	ldr	r3, [pc, #404]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	4962      	ldr	r1, [pc, #392]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800490a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	4959      	ldr	r1, [pc, #356]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800492c:	4b54      	ldr	r3, [pc, #336]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	4951      	ldr	r1, [pc, #324]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800494e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004954:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	4948      	ldr	r1, [pc, #288]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004970:	4b43      	ldr	r3, [pc, #268]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	4940      	ldr	r1, [pc, #256]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498e:	d105      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004990:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a3a      	ldr	r2, [pc, #232]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800499a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049a8:	4b35      	ldr	r3, [pc, #212]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b6:	4932      	ldr	r1, [pc, #200]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d105      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049e0:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	4924      	ldr	r1, [pc, #144]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049fe:	d105      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a00:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a18:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	4916      	ldr	r1, [pc, #88]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a36:	d105      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a10      	ldr	r2, [pc, #64]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d019      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	4908      	ldr	r1, [pc, #32]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b03      	ldr	r3, [pc, #12]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a02      	ldr	r2, [pc, #8]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
 8004a7c:	e002      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a90:	4b29      	ldr	r3, [pc, #164]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	4926      	ldr	r1, [pc, #152]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aae:	d105      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ab0:	4b21      	ldr	r3, [pc, #132]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad6:	4918      	ldr	r1, [pc, #96]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ae8:	4b13      	ldr	r3, [pc, #76]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a12      	ldr	r2, [pc, #72]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d015      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b00:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0e:	490a      	ldr	r1, [pc, #40]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a04      	ldr	r2, [pc, #16]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000

08004b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e049      	b.n	8004be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fc74 	bl	8002450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fd06 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e049      	b.n	8004c90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f841 	bl	8004c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fcaf 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x24>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e03c      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d109      	bne.n	8004cea <HAL_TIM_PWM_Start+0x3e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e02f      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d109      	bne.n	8004d04 <HAL_TIM_PWM_Start+0x58>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	e022      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d109      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x72>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e015      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d109      	bne.n	8004d38 <HAL_TIM_PWM_Start+0x8c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e008      	b.n	8004d4a <HAL_TIM_PWM_Start+0x9e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0a6      	b.n	8004ea0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <HAL_TIM_PWM_Start+0xb6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d60:	e023      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Start+0xc6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d70:	e01b      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0xd6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d80:	e013      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xe6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xf6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004da0:	e003      	b.n	8004daa <HAL_TIM_PWM_Start+0xfe>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 f864 	bl	8005e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <HAL_TIM_PWM_Start+0x148>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a39      	ldr	r2, [pc, #228]	@ (8004eac <HAL_TIM_PWM_Start+0x200>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <HAL_TIM_PWM_Start+0x148>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a37      	ldr	r2, [pc, #220]	@ (8004eb0 <HAL_TIM_PWM_Start+0x204>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <HAL_TIM_PWM_Start+0x148>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a36      	ldr	r2, [pc, #216]	@ (8004eb4 <HAL_TIM_PWM_Start+0x208>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_TIM_PWM_Start+0x148>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a34      	ldr	r2, [pc, #208]	@ (8004eb8 <HAL_TIM_PWM_Start+0x20c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIM_PWM_Start+0x148>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a33      	ldr	r2, [pc, #204]	@ (8004ebc <HAL_TIM_PWM_Start+0x210>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_TIM_PWM_Start+0x14c>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_TIM_PWM_Start+0x14e>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a25      	ldr	r2, [pc, #148]	@ (8004ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d01d      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <HAL_TIM_PWM_Start+0x214>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a24      	ldr	r2, [pc, #144]	@ (8004ec4 <HAL_TIM_PWM_Start+0x218>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a23      	ldr	r2, [pc, #140]	@ (8004ec8 <HAL_TIM_PWM_Start+0x21c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a19      	ldr	r2, [pc, #100]	@ (8004eac <HAL_TIM_PWM_Start+0x200>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <HAL_TIM_PWM_Start+0x204>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x1b2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a18      	ldr	r2, [pc, #96]	@ (8004ebc <HAL_TIM_PWM_Start+0x210>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d115      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <HAL_TIM_PWM_Start+0x220>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d015      	beq.n	8004e9c <HAL_TIM_PWM_Start+0x1f0>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e76:	d011      	beq.n	8004e9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	e008      	b.n	8004e9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	40015000 	.word	0x40015000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	00010007 	.word	0x00010007

08004ed0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e097      	b.n	8005014 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fd f9b5 	bl	8002268 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004f14:	f023 0307 	bic.w	r3, r3, #7
 8004f18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f000 fb31 	bl	800558c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	4313      	orrs	r3, r2
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f70:	f023 030c 	bic.w	r3, r3, #12
 8004f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	031b      	lsls	r3, r3, #12
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800502c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005034:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800503c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005044:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d110      	bne.n	800506e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005052:	7b7b      	ldrb	r3, [r7, #13]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e069      	b.n	8005130 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506c:	e031      	b.n	80050d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d110      	bne.n	8005096 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d102      	bne.n	8005080 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800507a:	7b3b      	ldrb	r3, [r7, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e055      	b.n	8005130 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005094:	e01d      	b.n	80050d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d108      	bne.n	80050ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d102      	bne.n	80050ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a8:	7b3b      	ldrb	r3, [r7, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e03e      	b.n	8005130 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_Encoder_Start+0xc4>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d008      	beq.n	80050f0 <HAL_TIM_Encoder_Start+0xd4>
 80050de:	e00f      	b.n	8005100 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fec9 	bl	8005e80 <TIM_CCxChannelCmd>
      break;
 80050ee:	e016      	b.n	800511e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2201      	movs	r2, #1
 80050f6:	2104      	movs	r1, #4
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fec1 	bl	8005e80 <TIM_CCxChannelCmd>
      break;
 80050fe:	e00e      	b.n	800511e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	2100      	movs	r1, #0
 8005108:	4618      	mov	r0, r3
 800510a:	f000 feb9 	bl	8005e80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	2104      	movs	r1, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f000 feb2 	bl	8005e80 <TIM_CCxChannelCmd>
      break;
 800511c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005152:	2302      	movs	r3, #2
 8005154:	e0ff      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b14      	cmp	r3, #20
 8005162:	f200 80f0 	bhi.w	8005346 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005166:	a201      	add	r2, pc, #4	@ (adr r2, 800516c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	080051c1 	.word	0x080051c1
 8005170:	08005347 	.word	0x08005347
 8005174:	08005347 	.word	0x08005347
 8005178:	08005347 	.word	0x08005347
 800517c:	08005201 	.word	0x08005201
 8005180:	08005347 	.word	0x08005347
 8005184:	08005347 	.word	0x08005347
 8005188:	08005347 	.word	0x08005347
 800518c:	08005243 	.word	0x08005243
 8005190:	08005347 	.word	0x08005347
 8005194:	08005347 	.word	0x08005347
 8005198:	08005347 	.word	0x08005347
 800519c:	08005283 	.word	0x08005283
 80051a0:	08005347 	.word	0x08005347
 80051a4:	08005347 	.word	0x08005347
 80051a8:	08005347 	.word	0x08005347
 80051ac:	080052c5 	.word	0x080052c5
 80051b0:	08005347 	.word	0x08005347
 80051b4:	08005347 	.word	0x08005347
 80051b8:	08005347 	.word	0x08005347
 80051bc:	08005305 	.word	0x08005305
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fa94 	bl	80056f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0208 	orr.w	r2, r2, #8
 80051da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0204 	bic.w	r2, r2, #4
 80051ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6999      	ldr	r1, [r3, #24]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	619a      	str	r2, [r3, #24]
      break;
 80051fe:	e0a5      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fb0e 	bl	8005828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800521a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6999      	ldr	r1, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	021a      	lsls	r2, r3, #8
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	619a      	str	r2, [r3, #24]
      break;
 8005240:	e084      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fb81 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0208 	orr.w	r2, r2, #8
 800525c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0204 	bic.w	r2, r2, #4
 800526c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69d9      	ldr	r1, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	61da      	str	r2, [r3, #28]
      break;
 8005280:	e064      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fbf3 	bl	8005a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69d9      	ldr	r1, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	021a      	lsls	r2, r3, #8
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	61da      	str	r2, [r3, #28]
      break;
 80052c2:	e043      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fc66 	bl	8005b9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0208 	orr.w	r2, r2, #8
 80052de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005302:	e023      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fcb0 	bl	8005c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800531e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800532e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005344:	e002      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
      break;
 800534a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop

08005360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIM_ConfigClockSource+0x1c>
 8005378:	2302      	movs	r3, #2
 800537a:	e0f6      	b.n	800556a <HAL_TIM_ConfigClockSource+0x20a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800539a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800539e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a6f      	ldr	r2, [pc, #444]	@ (8005574 <HAL_TIM_ConfigClockSource+0x214>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	f000 80c1 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053bc:	4a6d      	ldr	r2, [pc, #436]	@ (8005574 <HAL_TIM_ConfigClockSource+0x214>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f200 80c6 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005578 <HAL_TIM_ConfigClockSource+0x218>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f000 80b9 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005578 <HAL_TIM_ConfigClockSource+0x218>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f200 80be 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053d4:	4a69      	ldr	r2, [pc, #420]	@ (800557c <HAL_TIM_ConfigClockSource+0x21c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f000 80b1 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053dc:	4a67      	ldr	r2, [pc, #412]	@ (800557c <HAL_TIM_ConfigClockSource+0x21c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f200 80b6 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053e4:	4a66      	ldr	r2, [pc, #408]	@ (8005580 <HAL_TIM_ConfigClockSource+0x220>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f000 80a9 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053ec:	4a64      	ldr	r2, [pc, #400]	@ (8005580 <HAL_TIM_ConfigClockSource+0x220>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	f200 80ae 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 80053f4:	4a63      	ldr	r2, [pc, #396]	@ (8005584 <HAL_TIM_ConfigClockSource+0x224>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f000 80a1 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 80053fc:	4a61      	ldr	r2, [pc, #388]	@ (8005584 <HAL_TIM_ConfigClockSource+0x224>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	f200 80a6 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005404:	4a60      	ldr	r2, [pc, #384]	@ (8005588 <HAL_TIM_ConfigClockSource+0x228>)
 8005406:	4293      	cmp	r3, r2
 8005408:	f000 8099 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800540c:	4a5e      	ldr	r2, [pc, #376]	@ (8005588 <HAL_TIM_ConfigClockSource+0x228>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f200 809e 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005414:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005418:	f000 8091 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800541c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005420:	f200 8096 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005428:	f000 8089 	beq.w	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800542c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005430:	f200 808e 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005438:	d03e      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0x158>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543e:	f200 8087 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005446:	f000 8086 	beq.w	8005556 <HAL_TIM_ConfigClockSource+0x1f6>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544e:	d87f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005450:	2b70      	cmp	r3, #112	@ 0x70
 8005452:	d01a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x12a>
 8005454:	2b70      	cmp	r3, #112	@ 0x70
 8005456:	d87b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005458:	2b60      	cmp	r3, #96	@ 0x60
 800545a:	d050      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x19e>
 800545c:	2b60      	cmp	r3, #96	@ 0x60
 800545e:	d877      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005460:	2b50      	cmp	r3, #80	@ 0x50
 8005462:	d03c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x17e>
 8005464:	2b50      	cmp	r3, #80	@ 0x50
 8005466:	d873      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d058      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x1be>
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d86f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005470:	2b30      	cmp	r3, #48	@ 0x30
 8005472:	d064      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 8005474:	2b30      	cmp	r3, #48	@ 0x30
 8005476:	d86b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d060      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d867      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d05a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x1de>
 8005488:	e062      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	f000 fcd1 	bl	8005e40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
      break;
 80054b6:	e04f      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	f000 fcba 	bl	8005e40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e03c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 fc2c 	bl	8005d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2150      	movs	r1, #80	@ 0x50
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc85 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 80054fc:	e02c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550a:	461a      	mov	r2, r3
 800550c:	f000 fc4b 	bl	8005da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2160      	movs	r1, #96	@ 0x60
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fc75 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 800551c:	e01c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	461a      	mov	r2, r3
 800552c:	f000 fc0c 	bl	8005d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2140      	movs	r1, #64	@ 0x40
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fc65 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 800553c:	e00c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 fc5c 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 800554e:	e003      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e000      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	00100070 	.word	0x00100070
 8005578:	00100060 	.word	0x00100060
 800557c:	00100050 	.word	0x00100050
 8005580:	00100040 	.word	0x00100040
 8005584:	00100030 	.word	0x00100030
 8005588:	00100020 	.word	0x00100020

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a4c      	ldr	r2, [pc, #304]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d017      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	d013      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a49      	ldr	r2, [pc, #292]	@ (80056d4 <TIM_Base_SetConfig+0x148>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a48      	ldr	r2, [pc, #288]	@ (80056d8 <TIM_Base_SetConfig+0x14c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a47      	ldr	r2, [pc, #284]	@ (80056dc <TIM_Base_SetConfig+0x150>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a46      	ldr	r2, [pc, #280]	@ (80056e0 <TIM_Base_SetConfig+0x154>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a45      	ldr	r2, [pc, #276]	@ (80056e4 <TIM_Base_SetConfig+0x158>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a39      	ldr	r2, [pc, #228]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d023      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d01f      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a36      	ldr	r2, [pc, #216]	@ (80056d4 <TIM_Base_SetConfig+0x148>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01b      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a35      	ldr	r2, [pc, #212]	@ (80056d8 <TIM_Base_SetConfig+0x14c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d017      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a34      	ldr	r2, [pc, #208]	@ (80056dc <TIM_Base_SetConfig+0x150>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a33      	ldr	r2, [pc, #204]	@ (80056e0 <TIM_Base_SetConfig+0x154>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a33      	ldr	r2, [pc, #204]	@ (80056e8 <TIM_Base_SetConfig+0x15c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a32      	ldr	r2, [pc, #200]	@ (80056ec <TIM_Base_SetConfig+0x160>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a31      	ldr	r2, [pc, #196]	@ (80056f0 <TIM_Base_SetConfig+0x164>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_Base_SetConfig+0xaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <TIM_Base_SetConfig+0x158>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <TIM_Base_SetConfig+0x154>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00f      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1a      	ldr	r2, [pc, #104]	@ (80056e8 <TIM_Base_SetConfig+0x15c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <TIM_Base_SetConfig+0x160>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <TIM_Base_SetConfig+0x164>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_Base_SetConfig+0x110>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <TIM_Base_SetConfig+0x158>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]
  }
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40015000 	.word	0x40015000
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 0302 	bic.w	r3, r3, #2
 8005740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a30      	ldr	r2, [pc, #192]	@ (8005810 <TIM_OC1_SetConfig+0x11c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a2f      	ldr	r2, [pc, #188]	@ (8005814 <TIM_OC1_SetConfig+0x120>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a2e      	ldr	r2, [pc, #184]	@ (8005818 <TIM_OC1_SetConfig+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a2d      	ldr	r2, [pc, #180]	@ (800581c <TIM_OC1_SetConfig+0x128>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2c      	ldr	r2, [pc, #176]	@ (8005820 <TIM_OC1_SetConfig+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC1_SetConfig+0x88>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2b      	ldr	r2, [pc, #172]	@ (8005824 <TIM_OC1_SetConfig+0x130>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d10c      	bne.n	8005796 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0308 	bic.w	r3, r3, #8
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <TIM_OC1_SetConfig+0x11c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <TIM_OC1_SetConfig+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005818 <TIM_OC1_SetConfig+0x124>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <TIM_OC1_SetConfig+0x128>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <TIM_OC1_SetConfig+0x12c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC1_SetConfig+0xd2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <TIM_OC1_SetConfig+0x130>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d111      	bne.n	80057ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	621a      	str	r2, [r3, #32]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800
 8005824:	40015000 	.word	0x40015000

08005828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0320 	bic.w	r3, r3, #32
 8005876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a2c      	ldr	r2, [pc, #176]	@ (8005938 <TIM_OC2_SetConfig+0x110>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC2_SetConfig+0x74>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2b      	ldr	r2, [pc, #172]	@ (800593c <TIM_OC2_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC2_SetConfig+0x74>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <TIM_OC2_SetConfig+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005938 <TIM_OC2_SetConfig+0x110>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1e      	ldr	r2, [pc, #120]	@ (800593c <TIM_OC2_SetConfig+0x114>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00f      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005944 <TIM_OC2_SetConfig+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <TIM_OC2_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <TIM_OC2_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0xc0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <TIM_OC2_SetConfig+0x118>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d113      	bne.n	8005910 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40013400 	.word	0x40013400
 8005940:	40015000 	.word	0x40015000
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800599c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2b      	ldr	r2, [pc, #172]	@ (8005a5c <TIM_OC3_SetConfig+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC3_SetConfig+0x72>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a60 <TIM_OC3_SetConfig+0x110>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC3_SetConfig+0x72>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a29      	ldr	r2, [pc, #164]	@ (8005a64 <TIM_OC3_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a5c <TIM_OC3_SetConfig+0x10c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <TIM_OC3_SetConfig+0x110>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00f      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a68 <TIM_OC3_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <TIM_OC3_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <TIM_OC3_SetConfig+0x120>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0xbe>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a16      	ldr	r2, [pc, #88]	@ (8005a64 <TIM_OC3_SetConfig+0x114>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40013400 	.word	0x40013400
 8005a64:	40015000 	.word	0x40015000
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800

08005a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	031b      	lsls	r3, r3, #12
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b84 <TIM_OC4_SetConfig+0x110>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_OC4_SetConfig+0x74>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2b      	ldr	r2, [pc, #172]	@ (8005b88 <TIM_OC4_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC4_SetConfig+0x74>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b8c <TIM_OC4_SetConfig+0x118>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10d      	bne.n	8005b04 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	@ (8005b84 <TIM_OC4_SetConfig+0x110>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b88 <TIM_OC4_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00f      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1e      	ldr	r2, [pc, #120]	@ (8005b90 <TIM_OC4_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b94 <TIM_OC4_SetConfig+0x120>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a1c      	ldr	r2, [pc, #112]	@ (8005b98 <TIM_OC4_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC4_SetConfig+0xc0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC4_SetConfig+0x118>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40013400 	.word	0x40013400
 8005b8c:	40015000 	.word	0x40015000
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <TIM_OC5_SetConfig+0xbc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <TIM_OC5_SetConfig+0xc0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <TIM_OC5_SetConfig+0xc4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <TIM_OC5_SetConfig+0xc8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <TIM_OC5_SetConfig+0xcc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_OC5_SetConfig+0x82>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a14      	ldr	r2, [pc, #80]	@ (8005c6c <TIM_OC5_SetConfig+0xd0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d109      	bne.n	8005c32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40013400 	.word	0x40013400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	40015000 	.word	0x40015000

08005c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	051b      	lsls	r3, r3, #20
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <TIM_OC6_SetConfig+0xc0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <TIM_OC6_SetConfig+0xc4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00f      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <TIM_OC6_SetConfig+0xc8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <TIM_OC6_SetConfig+0xcc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a16      	ldr	r2, [pc, #88]	@ (8005d40 <TIM_OC6_SetConfig+0xd0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC6_SetConfig+0x84>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <TIM_OC6_SetConfig+0xd4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	029b      	lsls	r3, r3, #10
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800
 8005d44:	40015000 	.word	0x40015000

08005d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0201 	bic.w	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 030a 	bic.w	r3, r3, #10
 8005d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b087      	sub	sp, #28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f023 0210 	bic.w	r2, r3, #16
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f043 0307 	orr.w	r3, r3, #7
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	021a      	lsls	r2, r3, #8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2201      	movs	r2, #1
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e074      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a34      	ldr	r2, [pc, #208]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a33      	ldr	r2, [pc, #204]	@ (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a31      	ldr	r2, [pc, #196]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d108      	bne.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f64:	d01d      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a15      	ldr	r2, [pc, #84]	@ (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a18      	ldr	r2, [pc, #96]	@ (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a11      	ldr	r2, [pc, #68]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40015000 	.word	0x40015000
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40000c00 	.word	0x40000c00
 8005ff4:	40014000 	.word	0x40014000

08005ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e042      	b.n	8006090 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fc fad3 	bl	80025c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2224      	movs	r2, #36	@ 0x24
 8006026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fc7a 	bl	800693c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f97b 	bl	8006344 <UART_SetConfig>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e01b      	b.n	8006090 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fcf9 	bl	8006a80 <UART_CheckIdleState>
 800608e:	4603      	mov	r3, r0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	@ 0x28
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d17b      	bne.n	80061aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_UART_Transmit+0x26>
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e074      	b.n	80061ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2221      	movs	r2, #33	@ 0x21
 80060ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060d2:	f7fd f9b1 	bl	8003438 <HAL_GetTick>
 80060d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	88fa      	ldrh	r2, [r7, #6]
 80060e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f0:	d108      	bne.n	8006104 <HAL_UART_Transmit+0x6c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d104      	bne.n	8006104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	e003      	b.n	800610c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800610c:	e030      	b.n	8006170 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	@ 0x80
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fd5b 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e03d      	b.n	80061ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006144:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	3302      	adds	r3, #2
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	e007      	b.n	800615e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	3301      	adds	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1c8      	bne.n	800610e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	2140      	movs	r1, #64	@ 0x40
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fd24 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e006      	b.n	80061ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	f040 80b5 	bne.w	800633a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UART_Receive+0x28>
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e0ad      	b.n	800633c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2222      	movs	r2, #34	@ 0x22
 80061ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061f6:	f7fd f91f 	bl	8003438 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	88fa      	ldrh	r2, [r7, #6]
 8006208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006214:	d10e      	bne.n	8006234 <HAL_UART_Receive+0x80>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <HAL_UART_Receive+0x76>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006224:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006228:	e02d      	b.n	8006286 <HAL_UART_Receive+0xd2>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	22ff      	movs	r2, #255	@ 0xff
 800622e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006232:	e028      	b.n	8006286 <HAL_UART_Receive+0xd2>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10d      	bne.n	8006258 <HAL_UART_Receive+0xa4>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_UART_Receive+0x9a>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	22ff      	movs	r2, #255	@ 0xff
 8006248:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800624c:	e01b      	b.n	8006286 <HAL_UART_Receive+0xd2>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	227f      	movs	r2, #127	@ 0x7f
 8006252:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006256:	e016      	b.n	8006286 <HAL_UART_Receive+0xd2>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006260:	d10d      	bne.n	800627e <HAL_UART_Receive+0xca>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_UART_Receive+0xc0>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	227f      	movs	r2, #127	@ 0x7f
 800626e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006272:	e008      	b.n	8006286 <HAL_UART_Receive+0xd2>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	223f      	movs	r2, #63	@ 0x3f
 8006278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800627c:	e003      	b.n	8006286 <HAL_UART_Receive+0xd2>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800628c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006296:	d108      	bne.n	80062aa <HAL_UART_Receive+0xf6>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	e003      	b.n	80062b2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80062b2:	e036      	b.n	8006322 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	2120      	movs	r1, #32
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fc88 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e032      	b.n	800633c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10c      	bne.n	80062f6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	8a7b      	ldrh	r3, [r7, #18]
 80062e6:	4013      	ands	r3, r2
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	3302      	adds	r3, #2
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	e00c      	b.n	8006310 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	8a7b      	ldrh	r3, [r7, #18]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	4013      	ands	r3, r2
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3301      	adds	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1c2      	bne.n	80062b4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	e000      	b.n	800633c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800633a:	2302      	movs	r3, #2
  }
}
 800633c:	4618      	mov	r0, r3
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006348:	b08c      	sub	sp, #48	@ 0x30
 800634a:	af00      	add	r7, sp, #0
 800634c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	431a      	orrs	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	431a      	orrs	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	4313      	orrs	r3, r2
 800636a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4baa      	ldr	r3, [pc, #680]	@ (800661c <UART_SetConfig+0x2d8>)
 8006374:	4013      	ands	r3, r2
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800637c:	430b      	orrs	r3, r1
 800637e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a9f      	ldr	r2, [pc, #636]	@ (8006620 <UART_SetConfig+0x2dc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ac:	4313      	orrs	r3, r2
 80063ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80063ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	f023 010f 	bic.w	r1, r3, #15
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a90      	ldr	r2, [pc, #576]	@ (8006624 <UART_SetConfig+0x2e0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d125      	bne.n	8006434 <UART_SetConfig+0xf0>
 80063e8:	4b8f      	ldr	r3, [pc, #572]	@ (8006628 <UART_SetConfig+0x2e4>)
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d81a      	bhi.n	800642c <UART_SetConfig+0xe8>
 80063f6:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <UART_SetConfig+0xb8>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	0800641d 	.word	0x0800641d
 8006404:	08006415 	.word	0x08006415
 8006408:	08006425 	.word	0x08006425
 800640c:	2301      	movs	r3, #1
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006412:	e116      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006414:	2302      	movs	r3, #2
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641a:	e112      	b.n	8006642 <UART_SetConfig+0x2fe>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006422:	e10e      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642a:	e10a      	b.n	8006642 <UART_SetConfig+0x2fe>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006432:	e106      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a7c      	ldr	r2, [pc, #496]	@ (800662c <UART_SetConfig+0x2e8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d138      	bne.n	80064b0 <UART_SetConfig+0x16c>
 800643e:	4b7a      	ldr	r3, [pc, #488]	@ (8006628 <UART_SetConfig+0x2e4>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d82d      	bhi.n	80064a8 <UART_SetConfig+0x164>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x110>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006489 	.word	0x08006489
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080064a9 	.word	0x080064a9
 8006460:	080064a9 	.word	0x080064a9
 8006464:	08006499 	.word	0x08006499
 8006468:	080064a9 	.word	0x080064a9
 800646c:	080064a9 	.word	0x080064a9
 8006470:	080064a9 	.word	0x080064a9
 8006474:	08006491 	.word	0x08006491
 8006478:	080064a9 	.word	0x080064a9
 800647c:	080064a9 	.word	0x080064a9
 8006480:	080064a9 	.word	0x080064a9
 8006484:	080064a1 	.word	0x080064a1
 8006488:	2300      	movs	r3, #0
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800648e:	e0d8      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006490:	2302      	movs	r3, #2
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006496:	e0d4      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006498:	2304      	movs	r3, #4
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800649e:	e0d0      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064a0:	2308      	movs	r3, #8
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a6:	e0cc      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064a8:	2310      	movs	r3, #16
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ae:	e0c8      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006630 <UART_SetConfig+0x2ec>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d125      	bne.n	8006506 <UART_SetConfig+0x1c2>
 80064ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006628 <UART_SetConfig+0x2e4>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064c4:	2b30      	cmp	r3, #48	@ 0x30
 80064c6:	d016      	beq.n	80064f6 <UART_SetConfig+0x1b2>
 80064c8:	2b30      	cmp	r3, #48	@ 0x30
 80064ca:	d818      	bhi.n	80064fe <UART_SetConfig+0x1ba>
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d00a      	beq.n	80064e6 <UART_SetConfig+0x1a2>
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d814      	bhi.n	80064fe <UART_SetConfig+0x1ba>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <UART_SetConfig+0x19a>
 80064d8:	2b10      	cmp	r3, #16
 80064da:	d008      	beq.n	80064ee <UART_SetConfig+0x1aa>
 80064dc:	e00f      	b.n	80064fe <UART_SetConfig+0x1ba>
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e4:	e0ad      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064e6:	2302      	movs	r3, #2
 80064e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ec:	e0a9      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064ee:	2304      	movs	r3, #4
 80064f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064f4:	e0a5      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064f6:	2308      	movs	r3, #8
 80064f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fc:	e0a1      	b.n	8006642 <UART_SetConfig+0x2fe>
 80064fe:	2310      	movs	r3, #16
 8006500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006504:	e09d      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4a      	ldr	r2, [pc, #296]	@ (8006634 <UART_SetConfig+0x2f0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d125      	bne.n	800655c <UART_SetConfig+0x218>
 8006510:	4b45      	ldr	r3, [pc, #276]	@ (8006628 <UART_SetConfig+0x2e4>)
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006516:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800651a:	2bc0      	cmp	r3, #192	@ 0xc0
 800651c:	d016      	beq.n	800654c <UART_SetConfig+0x208>
 800651e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006520:	d818      	bhi.n	8006554 <UART_SetConfig+0x210>
 8006522:	2b80      	cmp	r3, #128	@ 0x80
 8006524:	d00a      	beq.n	800653c <UART_SetConfig+0x1f8>
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d814      	bhi.n	8006554 <UART_SetConfig+0x210>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <UART_SetConfig+0x1f0>
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d008      	beq.n	8006544 <UART_SetConfig+0x200>
 8006532:	e00f      	b.n	8006554 <UART_SetConfig+0x210>
 8006534:	2300      	movs	r3, #0
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653a:	e082      	b.n	8006642 <UART_SetConfig+0x2fe>
 800653c:	2302      	movs	r3, #2
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006542:	e07e      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006544:	2304      	movs	r3, #4
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800654a:	e07a      	b.n	8006642 <UART_SetConfig+0x2fe>
 800654c:	2308      	movs	r3, #8
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006552:	e076      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006554:	2310      	movs	r3, #16
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655a:	e072      	b.n	8006642 <UART_SetConfig+0x2fe>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a35      	ldr	r2, [pc, #212]	@ (8006638 <UART_SetConfig+0x2f4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d12a      	bne.n	80065bc <UART_SetConfig+0x278>
 8006566:	4b30      	ldr	r3, [pc, #192]	@ (8006628 <UART_SetConfig+0x2e4>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006574:	d01a      	beq.n	80065ac <UART_SetConfig+0x268>
 8006576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800657a:	d81b      	bhi.n	80065b4 <UART_SetConfig+0x270>
 800657c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006580:	d00c      	beq.n	800659c <UART_SetConfig+0x258>
 8006582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006586:	d815      	bhi.n	80065b4 <UART_SetConfig+0x270>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <UART_SetConfig+0x250>
 800658c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006590:	d008      	beq.n	80065a4 <UART_SetConfig+0x260>
 8006592:	e00f      	b.n	80065b4 <UART_SetConfig+0x270>
 8006594:	2300      	movs	r3, #0
 8006596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800659a:	e052      	b.n	8006642 <UART_SetConfig+0x2fe>
 800659c:	2302      	movs	r3, #2
 800659e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065a2:	e04e      	b.n	8006642 <UART_SetConfig+0x2fe>
 80065a4:	2304      	movs	r3, #4
 80065a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065aa:	e04a      	b.n	8006642 <UART_SetConfig+0x2fe>
 80065ac:	2308      	movs	r3, #8
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b2:	e046      	b.n	8006642 <UART_SetConfig+0x2fe>
 80065b4:	2310      	movs	r3, #16
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ba:	e042      	b.n	8006642 <UART_SetConfig+0x2fe>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a17      	ldr	r2, [pc, #92]	@ (8006620 <UART_SetConfig+0x2dc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d13a      	bne.n	800663c <UART_SetConfig+0x2f8>
 80065c6:	4b18      	ldr	r3, [pc, #96]	@ (8006628 <UART_SetConfig+0x2e4>)
 80065c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065d4:	d01a      	beq.n	800660c <UART_SetConfig+0x2c8>
 80065d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065da:	d81b      	bhi.n	8006614 <UART_SetConfig+0x2d0>
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e0:	d00c      	beq.n	80065fc <UART_SetConfig+0x2b8>
 80065e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e6:	d815      	bhi.n	8006614 <UART_SetConfig+0x2d0>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <UART_SetConfig+0x2b0>
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f0:	d008      	beq.n	8006604 <UART_SetConfig+0x2c0>
 80065f2:	e00f      	b.n	8006614 <UART_SetConfig+0x2d0>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fa:	e022      	b.n	8006642 <UART_SetConfig+0x2fe>
 80065fc:	2302      	movs	r3, #2
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006602:	e01e      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660a:	e01a      	b.n	8006642 <UART_SetConfig+0x2fe>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006612:	e016      	b.n	8006642 <UART_SetConfig+0x2fe>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661a:	e012      	b.n	8006642 <UART_SetConfig+0x2fe>
 800661c:	cfff69f3 	.word	0xcfff69f3
 8006620:	40008000 	.word	0x40008000
 8006624:	40013800 	.word	0x40013800
 8006628:	40021000 	.word	0x40021000
 800662c:	40004400 	.word	0x40004400
 8006630:	40004800 	.word	0x40004800
 8006634:	40004c00 	.word	0x40004c00
 8006638:	40005000 	.word	0x40005000
 800663c:	2310      	movs	r3, #16
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4aae      	ldr	r2, [pc, #696]	@ (8006900 <UART_SetConfig+0x5bc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	f040 8097 	bne.w	800677c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800664e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006652:	2b08      	cmp	r3, #8
 8006654:	d823      	bhi.n	800669e <UART_SetConfig+0x35a>
 8006656:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <UART_SetConfig+0x318>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006681 	.word	0x08006681
 8006660:	0800669f 	.word	0x0800669f
 8006664:	08006689 	.word	0x08006689
 8006668:	0800669f 	.word	0x0800669f
 800666c:	0800668f 	.word	0x0800668f
 8006670:	0800669f 	.word	0x0800669f
 8006674:	0800669f 	.word	0x0800669f
 8006678:	0800669f 	.word	0x0800669f
 800667c:	08006697 	.word	0x08006697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006680:	f7fd ff9c 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006686:	e010      	b.n	80066aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006688:	4b9e      	ldr	r3, [pc, #632]	@ (8006904 <UART_SetConfig+0x5c0>)
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800668c:	e00d      	b.n	80066aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668e:	f7fd ff27 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 8006692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006694:	e009      	b.n	80066aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800669c:	e005      	b.n	80066aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8130 	beq.w	8006912 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	4a94      	ldr	r2, [pc, #592]	@ (8006908 <UART_SetConfig+0x5c4>)
 80066b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066bc:	461a      	mov	r2, r3
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4413      	add	r3, r2
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d305      	bcc.n	80066e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d903      	bls.n	80066ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066e8:	e113      	b.n	8006912 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	2200      	movs	r2, #0
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	60fa      	str	r2, [r7, #12]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	4a84      	ldr	r2, [pc, #528]	@ (8006908 <UART_SetConfig+0x5c4>)
 80066f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2200      	movs	r2, #0
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006708:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800670c:	f7fa fae4 	bl	8000cd8 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4610      	mov	r0, r2
 8006716:	4619      	mov	r1, r3
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	020b      	lsls	r3, r1, #8
 8006722:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006726:	0202      	lsls	r2, r0, #8
 8006728:	6979      	ldr	r1, [r7, #20]
 800672a:	6849      	ldr	r1, [r1, #4]
 800672c:	0849      	lsrs	r1, r1, #1
 800672e:	2000      	movs	r0, #0
 8006730:	460c      	mov	r4, r1
 8006732:	4605      	mov	r5, r0
 8006734:	eb12 0804 	adds.w	r8, r2, r4
 8006738:	eb43 0905 	adc.w	r9, r3, r5
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	469a      	mov	sl, r3
 8006744:	4693      	mov	fp, r2
 8006746:	4652      	mov	r2, sl
 8006748:	465b      	mov	r3, fp
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7fa fac3 	bl	8000cd8 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4613      	mov	r3, r2
 8006758:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006760:	d308      	bcc.n	8006774 <UART_SetConfig+0x430>
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006768:	d204      	bcs.n	8006774 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e0ce      	b.n	8006912 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800677a:	e0ca      	b.n	8006912 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006784:	d166      	bne.n	8006854 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006786:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800678a:	2b08      	cmp	r3, #8
 800678c:	d827      	bhi.n	80067de <UART_SetConfig+0x49a>
 800678e:	a201      	add	r2, pc, #4	@ (adr r2, 8006794 <UART_SetConfig+0x450>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067df 	.word	0x080067df
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067df 	.word	0x080067df
 80067ac:	080067df 	.word	0x080067df
 80067b0:	080067df 	.word	0x080067df
 80067b4:	080067d7 	.word	0x080067d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b8:	f7fd ff00 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80067bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067be:	e014      	b.n	80067ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067c0:	f7fd ff12 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 80067c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067c6:	e010      	b.n	80067ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006904 <UART_SetConfig+0x5c0>)
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067cc:	e00d      	b.n	80067ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ce:	f7fd fe87 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 80067d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067d4:	e009      	b.n	80067ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067dc:	e005      	b.n	80067ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8090 	beq.w	8006912 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	4a44      	ldr	r2, [pc, #272]	@ (8006908 <UART_SetConfig+0x5c4>)
 80067f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	fbb3 f3f2 	udiv	r3, r3, r2
 8006804:	005a      	lsls	r2, r3, #1
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	441a      	add	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b0f      	cmp	r3, #15
 800681c:	d916      	bls.n	800684c <UART_SetConfig+0x508>
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006824:	d212      	bcs.n	800684c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	b29b      	uxth	r3, r3
 800682a:	f023 030f 	bic.w	r3, r3, #15
 800682e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	b29a      	uxth	r2, r3
 800683c:	8bfb      	ldrh	r3, [r7, #30]
 800683e:	4313      	orrs	r3, r2
 8006840:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	8bfa      	ldrh	r2, [r7, #30]
 8006848:	60da      	str	r2, [r3, #12]
 800684a:	e062      	b.n	8006912 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006852:	e05e      	b.n	8006912 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006854:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006858:	2b08      	cmp	r3, #8
 800685a:	d828      	bhi.n	80068ae <UART_SetConfig+0x56a>
 800685c:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <UART_SetConfig+0x520>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006889 	.word	0x08006889
 8006868:	08006891 	.word	0x08006891
 800686c:	08006899 	.word	0x08006899
 8006870:	080068af 	.word	0x080068af
 8006874:	0800689f 	.word	0x0800689f
 8006878:	080068af 	.word	0x080068af
 800687c:	080068af 	.word	0x080068af
 8006880:	080068af 	.word	0x080068af
 8006884:	080068a7 	.word	0x080068a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006888:	f7fd fe98 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 800688c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800688e:	e014      	b.n	80068ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006890:	f7fd feaa 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8006894:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006896:	e010      	b.n	80068ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006898:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <UART_SetConfig+0x5c0>)
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800689c:	e00d      	b.n	80068ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689e:	f7fd fe1f 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 80068a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068a4:	e009      	b.n	80068ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068ac:	e005      	b.n	80068ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068b8:	bf00      	nop
    }

    if (pclk != 0U)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d028      	beq.n	8006912 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	4a10      	ldr	r2, [pc, #64]	@ (8006908 <UART_SetConfig+0x5c4>)
 80068c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	441a      	add	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d910      	bls.n	800690c <UART_SetConfig+0x5c8>
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d20c      	bcs.n	800690c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60da      	str	r2, [r3, #12]
 80068fc:	e009      	b.n	8006912 <UART_SetConfig+0x5ce>
 80068fe:	bf00      	nop
 8006900:	40008000 	.word	0x40008000
 8006904:	00f42400 	.word	0x00f42400
 8006908:	0800c6f0 	.word	0x0800c6f0
      }
      else
      {
        ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2201      	movs	r2, #1
 8006916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2201      	movs	r2, #1
 800691e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2200      	movs	r2, #0
 800692c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800692e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006932:	4618      	mov	r0, r3
 8006934:	3730      	adds	r7, #48	@ 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800693c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01a      	beq.n	8006a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3a:	d10a      	bne.n	8006a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	605a      	str	r2, [r3, #4]
  }
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b098      	sub	sp, #96	@ 0x60
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a90:	f7fc fcd2 	bl	8003438 <HAL_GetTick>
 8006a94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d12f      	bne.n	8006b04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aac:	2200      	movs	r2, #0
 8006aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f88e 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d022      	beq.n	8006b04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ade:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e6      	bne.n	8006abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e063      	b.n	8006bcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d149      	bne.n	8006ba6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f857 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d03c      	beq.n	8006ba6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	623b      	str	r3, [r7, #32]
   return(result);
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e6      	bne.n	8006b2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b7e:	61fa      	str	r2, [r7, #28]
 8006b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	69b9      	ldr	r1, [r7, #24]
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e012      	b.n	8006bcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3758      	adds	r7, #88	@ 0x58
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be4:	e04f      	b.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bec:	d04b      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bee:	f7fc fc23 	bl	8003438 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d302      	bcc.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e04e      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d037      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b80      	cmp	r3, #128	@ 0x80
 8006c1a:	d034      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b40      	cmp	r3, #64	@ 0x40
 8006c20:	d031      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d110      	bne.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2208      	movs	r2, #8
 8006c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f838 	bl	8006cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2208      	movs	r2, #8
 8006c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e029      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c60:	d111      	bne.n	8006c86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f81e 	bl	8006cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e00f      	b.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	bf0c      	ite	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	2300      	movne	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d0a0      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b095      	sub	sp, #84	@ 0x54
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e3      	bne.n	8006ce8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d118      	bne.n	8006d5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f023 0310 	bic.w	r3, r3, #16
 8006d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6979      	ldr	r1, [r7, #20]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	613b      	str	r3, [r7, #16]
   return(result);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d6e:	bf00      	nop
 8006d70:	3754      	adds	r7, #84	@ 0x54
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e027      	b.n	8006de0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2224      	movs	r2, #36	@ 0x24
 8006d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0201 	bic.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006dbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e02d      	b.n	8006e60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	@ 0x24
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f84f 	bl	8006ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e02d      	b.n	8006edc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	@ 0x24
 8006e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0201 	bic.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f811 	bl	8006ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d108      	bne.n	8006f06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f04:	e031      	b.n	8006f6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f06:	2308      	movs	r3, #8
 8006f08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	0e5b      	lsrs	r3, r3, #25
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	0f5b      	lsrs	r3, r3, #29
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	7b3a      	ldrb	r2, [r7, #12]
 8006f32:	4911      	ldr	r1, [pc, #68]	@ (8006f78 <UARTEx_SetNbDataToProcess+0x94>)
 8006f34:	5c8a      	ldrb	r2, [r1, r2]
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f3a:	7b3a      	ldrb	r2, [r7, #12]
 8006f3c:	490f      	ldr	r1, [pc, #60]	@ (8006f7c <UARTEx_SetNbDataToProcess+0x98>)
 8006f3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	7b7a      	ldrb	r2, [r7, #13]
 8006f50:	4909      	ldr	r1, [pc, #36]	@ (8006f78 <UARTEx_SetNbDataToProcess+0x94>)
 8006f52:	5c8a      	ldrb	r2, [r1, r2]
 8006f54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f58:	7b7a      	ldrb	r2, [r7, #13]
 8006f5a:	4908      	ldr	r1, [pc, #32]	@ (8006f7c <UARTEx_SetNbDataToProcess+0x98>)
 8006f5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	0800c708 	.word	0x0800c708
 8006f7c:	0800c710 	.word	0x0800c710

08006f80 <__cvt>:
 8006f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	ec57 6b10 	vmov	r6, r7, d0
 8006f88:	2f00      	cmp	r7, #0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	463b      	mov	r3, r7
 8006f90:	bfbb      	ittet	lt
 8006f92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f96:	461f      	movlt	r7, r3
 8006f98:	2300      	movge	r3, #0
 8006f9a:	232d      	movlt	r3, #45	@ 0x2d
 8006f9c:	700b      	strb	r3, [r1, #0]
 8006f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fa0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006fa4:	4691      	mov	r9, r2
 8006fa6:	f023 0820 	bic.w	r8, r3, #32
 8006faa:	bfbc      	itt	lt
 8006fac:	4632      	movlt	r2, r6
 8006fae:	4616      	movlt	r6, r2
 8006fb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fb4:	d005      	beq.n	8006fc2 <__cvt+0x42>
 8006fb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fba:	d100      	bne.n	8006fbe <__cvt+0x3e>
 8006fbc:	3401      	adds	r4, #1
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	e000      	b.n	8006fc4 <__cvt+0x44>
 8006fc2:	2103      	movs	r1, #3
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	ab02      	add	r3, sp, #8
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	ec47 6b10 	vmov	d0, r6, r7
 8006fd0:	4653      	mov	r3, sl
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	f001 ffc0 	bl	8008f58 <_dtoa_r>
 8006fd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fdc:	4605      	mov	r5, r0
 8006fde:	d119      	bne.n	8007014 <__cvt+0x94>
 8006fe0:	f019 0f01 	tst.w	r9, #1
 8006fe4:	d00e      	beq.n	8007004 <__cvt+0x84>
 8006fe6:	eb00 0904 	add.w	r9, r0, r4
 8006fea:	2200      	movs	r2, #0
 8006fec:	2300      	movs	r3, #0
 8006fee:	4630      	mov	r0, r6
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fd91 	bl	8000b18 <__aeabi_dcmpeq>
 8006ff6:	b108      	cbz	r0, 8006ffc <__cvt+0x7c>
 8006ff8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ffc:	2230      	movs	r2, #48	@ 0x30
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	454b      	cmp	r3, r9
 8007002:	d31e      	bcc.n	8007042 <__cvt+0xc2>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007008:	1b5b      	subs	r3, r3, r5
 800700a:	4628      	mov	r0, r5
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	b004      	add	sp, #16
 8007010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007014:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007018:	eb00 0904 	add.w	r9, r0, r4
 800701c:	d1e5      	bne.n	8006fea <__cvt+0x6a>
 800701e:	7803      	ldrb	r3, [r0, #0]
 8007020:	2b30      	cmp	r3, #48	@ 0x30
 8007022:	d10a      	bne.n	800703a <__cvt+0xba>
 8007024:	2200      	movs	r2, #0
 8007026:	2300      	movs	r3, #0
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 fd74 	bl	8000b18 <__aeabi_dcmpeq>
 8007030:	b918      	cbnz	r0, 800703a <__cvt+0xba>
 8007032:	f1c4 0401 	rsb	r4, r4, #1
 8007036:	f8ca 4000 	str.w	r4, [sl]
 800703a:	f8da 3000 	ldr.w	r3, [sl]
 800703e:	4499      	add	r9, r3
 8007040:	e7d3      	b.n	8006fea <__cvt+0x6a>
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	9103      	str	r1, [sp, #12]
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e7d9      	b.n	8006ffe <__cvt+0x7e>

0800704a <__exponent>:
 800704a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800704c:	2900      	cmp	r1, #0
 800704e:	bfba      	itte	lt
 8007050:	4249      	neglt	r1, r1
 8007052:	232d      	movlt	r3, #45	@ 0x2d
 8007054:	232b      	movge	r3, #43	@ 0x2b
 8007056:	2909      	cmp	r1, #9
 8007058:	7002      	strb	r2, [r0, #0]
 800705a:	7043      	strb	r3, [r0, #1]
 800705c:	dd29      	ble.n	80070b2 <__exponent+0x68>
 800705e:	f10d 0307 	add.w	r3, sp, #7
 8007062:	461d      	mov	r5, r3
 8007064:	270a      	movs	r7, #10
 8007066:	461a      	mov	r2, r3
 8007068:	fbb1 f6f7 	udiv	r6, r1, r7
 800706c:	fb07 1416 	mls	r4, r7, r6, r1
 8007070:	3430      	adds	r4, #48	@ 0x30
 8007072:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007076:	460c      	mov	r4, r1
 8007078:	2c63      	cmp	r4, #99	@ 0x63
 800707a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800707e:	4631      	mov	r1, r6
 8007080:	dcf1      	bgt.n	8007066 <__exponent+0x1c>
 8007082:	3130      	adds	r1, #48	@ 0x30
 8007084:	1e94      	subs	r4, r2, #2
 8007086:	f803 1c01 	strb.w	r1, [r3, #-1]
 800708a:	1c41      	adds	r1, r0, #1
 800708c:	4623      	mov	r3, r4
 800708e:	42ab      	cmp	r3, r5
 8007090:	d30a      	bcc.n	80070a8 <__exponent+0x5e>
 8007092:	f10d 0309 	add.w	r3, sp, #9
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	42ac      	cmp	r4, r5
 800709a:	bf88      	it	hi
 800709c:	2300      	movhi	r3, #0
 800709e:	3302      	adds	r3, #2
 80070a0:	4403      	add	r3, r0
 80070a2:	1a18      	subs	r0, r3, r0
 80070a4:	b003      	add	sp, #12
 80070a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80070ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 80070b0:	e7ed      	b.n	800708e <__exponent+0x44>
 80070b2:	2330      	movs	r3, #48	@ 0x30
 80070b4:	3130      	adds	r1, #48	@ 0x30
 80070b6:	7083      	strb	r3, [r0, #2]
 80070b8:	70c1      	strb	r1, [r0, #3]
 80070ba:	1d03      	adds	r3, r0, #4
 80070bc:	e7f1      	b.n	80070a2 <__exponent+0x58>
	...

080070c0 <_printf_float>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	b08d      	sub	sp, #52	@ 0x34
 80070c6:	460c      	mov	r4, r1
 80070c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070cc:	4616      	mov	r6, r2
 80070ce:	461f      	mov	r7, r3
 80070d0:	4605      	mov	r5, r0
 80070d2:	f001 fe23 	bl	8008d1c <_localeconv_r>
 80070d6:	6803      	ldr	r3, [r0, #0]
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7f9 f8f0 	bl	80002c0 <strlen>
 80070e0:	2300      	movs	r3, #0
 80070e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e4:	f8d8 3000 	ldr.w	r3, [r8]
 80070e8:	9005      	str	r0, [sp, #20]
 80070ea:	3307      	adds	r3, #7
 80070ec:	f023 0307 	bic.w	r3, r3, #7
 80070f0:	f103 0208 	add.w	r2, r3, #8
 80070f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070f8:	f8d4 b000 	ldr.w	fp, [r4]
 80070fc:	f8c8 2000 	str.w	r2, [r8]
 8007100:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007104:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	f8cd 8018 	str.w	r8, [sp, #24]
 800710e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007116:	4b9c      	ldr	r3, [pc, #624]	@ (8007388 <_printf_float+0x2c8>)
 8007118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800711c:	f7f9 fd2e 	bl	8000b7c <__aeabi_dcmpun>
 8007120:	bb70      	cbnz	r0, 8007180 <_printf_float+0xc0>
 8007122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007126:	4b98      	ldr	r3, [pc, #608]	@ (8007388 <_printf_float+0x2c8>)
 8007128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800712c:	f7f9 fd08 	bl	8000b40 <__aeabi_dcmple>
 8007130:	bb30      	cbnz	r0, 8007180 <_printf_float+0xc0>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	4640      	mov	r0, r8
 8007138:	4649      	mov	r1, r9
 800713a:	f7f9 fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800713e:	b110      	cbz	r0, 8007146 <_printf_float+0x86>
 8007140:	232d      	movs	r3, #45	@ 0x2d
 8007142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007146:	4a91      	ldr	r2, [pc, #580]	@ (800738c <_printf_float+0x2cc>)
 8007148:	4b91      	ldr	r3, [pc, #580]	@ (8007390 <_printf_float+0x2d0>)
 800714a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800714e:	bf94      	ite	ls
 8007150:	4690      	movls	r8, r2
 8007152:	4698      	movhi	r8, r3
 8007154:	2303      	movs	r3, #3
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	f02b 0304 	bic.w	r3, fp, #4
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	9700      	str	r7, [sp, #0]
 8007164:	4633      	mov	r3, r6
 8007166:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 f9d2 	bl	8007514 <_printf_common>
 8007170:	3001      	adds	r0, #1
 8007172:	f040 808d 	bne.w	8007290 <_printf_float+0x1d0>
 8007176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800717a:	b00d      	add	sp, #52	@ 0x34
 800717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007180:	4642      	mov	r2, r8
 8007182:	464b      	mov	r3, r9
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 fcf8 	bl	8000b7c <__aeabi_dcmpun>
 800718c:	b140      	cbz	r0, 80071a0 <_printf_float+0xe0>
 800718e:	464b      	mov	r3, r9
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfbc      	itt	lt
 8007194:	232d      	movlt	r3, #45	@ 0x2d
 8007196:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800719a:	4a7e      	ldr	r2, [pc, #504]	@ (8007394 <_printf_float+0x2d4>)
 800719c:	4b7e      	ldr	r3, [pc, #504]	@ (8007398 <_printf_float+0x2d8>)
 800719e:	e7d4      	b.n	800714a <_printf_float+0x8a>
 80071a0:	6863      	ldr	r3, [r4, #4]
 80071a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80071a6:	9206      	str	r2, [sp, #24]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	d13b      	bne.n	8007224 <_printf_float+0x164>
 80071ac:	2306      	movs	r3, #6
 80071ae:	6063      	str	r3, [r4, #4]
 80071b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80071b4:	2300      	movs	r3, #0
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80071bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071c0:	ab09      	add	r3, sp, #36	@ 0x24
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	ec49 8b10 	vmov	d0, r8, r9
 80071ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071ce:	4628      	mov	r0, r5
 80071d0:	f7ff fed6 	bl	8006f80 <__cvt>
 80071d4:	9b06      	ldr	r3, [sp, #24]
 80071d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071d8:	2b47      	cmp	r3, #71	@ 0x47
 80071da:	4680      	mov	r8, r0
 80071dc:	d129      	bne.n	8007232 <_printf_float+0x172>
 80071de:	1cc8      	adds	r0, r1, #3
 80071e0:	db02      	blt.n	80071e8 <_printf_float+0x128>
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	4299      	cmp	r1, r3
 80071e6:	dd41      	ble.n	800726c <_printf_float+0x1ac>
 80071e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80071ec:	fa5f fa8a 	uxtb.w	sl, sl
 80071f0:	3901      	subs	r1, #1
 80071f2:	4652      	mov	r2, sl
 80071f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80071fa:	f7ff ff26 	bl	800704a <__exponent>
 80071fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007200:	1813      	adds	r3, r2, r0
 8007202:	2a01      	cmp	r2, #1
 8007204:	4681      	mov	r9, r0
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	dc02      	bgt.n	8007210 <_printf_float+0x150>
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	07d2      	lsls	r2, r2, #31
 800720e:	d501      	bpl.n	8007214 <_printf_float+0x154>
 8007210:	3301      	adds	r3, #1
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0a2      	beq.n	8007162 <_printf_float+0xa2>
 800721c:	232d      	movs	r3, #45	@ 0x2d
 800721e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007222:	e79e      	b.n	8007162 <_printf_float+0xa2>
 8007224:	9a06      	ldr	r2, [sp, #24]
 8007226:	2a47      	cmp	r2, #71	@ 0x47
 8007228:	d1c2      	bne.n	80071b0 <_printf_float+0xf0>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1c0      	bne.n	80071b0 <_printf_float+0xf0>
 800722e:	2301      	movs	r3, #1
 8007230:	e7bd      	b.n	80071ae <_printf_float+0xee>
 8007232:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007236:	d9db      	bls.n	80071f0 <_printf_float+0x130>
 8007238:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800723c:	d118      	bne.n	8007270 <_printf_float+0x1b0>
 800723e:	2900      	cmp	r1, #0
 8007240:	6863      	ldr	r3, [r4, #4]
 8007242:	dd0b      	ble.n	800725c <_printf_float+0x19c>
 8007244:	6121      	str	r1, [r4, #16]
 8007246:	b913      	cbnz	r3, 800724e <_printf_float+0x18e>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	07d0      	lsls	r0, r2, #31
 800724c:	d502      	bpl.n	8007254 <_printf_float+0x194>
 800724e:	3301      	adds	r3, #1
 8007250:	440b      	add	r3, r1
 8007252:	6123      	str	r3, [r4, #16]
 8007254:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007256:	f04f 0900 	mov.w	r9, #0
 800725a:	e7db      	b.n	8007214 <_printf_float+0x154>
 800725c:	b913      	cbnz	r3, 8007264 <_printf_float+0x1a4>
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	07d2      	lsls	r2, r2, #31
 8007262:	d501      	bpl.n	8007268 <_printf_float+0x1a8>
 8007264:	3302      	adds	r3, #2
 8007266:	e7f4      	b.n	8007252 <_printf_float+0x192>
 8007268:	2301      	movs	r3, #1
 800726a:	e7f2      	b.n	8007252 <_printf_float+0x192>
 800726c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007272:	4299      	cmp	r1, r3
 8007274:	db05      	blt.n	8007282 <_printf_float+0x1c2>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6121      	str	r1, [r4, #16]
 800727a:	07d8      	lsls	r0, r3, #31
 800727c:	d5ea      	bpl.n	8007254 <_printf_float+0x194>
 800727e:	1c4b      	adds	r3, r1, #1
 8007280:	e7e7      	b.n	8007252 <_printf_float+0x192>
 8007282:	2900      	cmp	r1, #0
 8007284:	bfd4      	ite	le
 8007286:	f1c1 0202 	rsble	r2, r1, #2
 800728a:	2201      	movgt	r2, #1
 800728c:	4413      	add	r3, r2
 800728e:	e7e0      	b.n	8007252 <_printf_float+0x192>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	055a      	lsls	r2, r3, #21
 8007294:	d407      	bmi.n	80072a6 <_printf_float+0x1e6>
 8007296:	6923      	ldr	r3, [r4, #16]
 8007298:	4642      	mov	r2, r8
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	d12b      	bne.n	80072fc <_printf_float+0x23c>
 80072a4:	e767      	b.n	8007176 <_printf_float+0xb6>
 80072a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072aa:	f240 80dd 	bls.w	8007468 <_printf_float+0x3a8>
 80072ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	f7f9 fc2f 	bl	8000b18 <__aeabi_dcmpeq>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d033      	beq.n	8007326 <_printf_float+0x266>
 80072be:	4a37      	ldr	r2, [pc, #220]	@ (800739c <_printf_float+0x2dc>)
 80072c0:	2301      	movs	r3, #1
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	f43f af54 	beq.w	8007176 <_printf_float+0xb6>
 80072ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072d2:	4543      	cmp	r3, r8
 80072d4:	db02      	blt.n	80072dc <_printf_float+0x21c>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	07d8      	lsls	r0, r3, #31
 80072da:	d50f      	bpl.n	80072fc <_printf_float+0x23c>
 80072dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af45 	beq.w	8007176 <_printf_float+0xb6>
 80072ec:	f04f 0900 	mov.w	r9, #0
 80072f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80072f4:	f104 0a1a 	add.w	sl, r4, #26
 80072f8:	45c8      	cmp	r8, r9
 80072fa:	dc09      	bgt.n	8007310 <_printf_float+0x250>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	079b      	lsls	r3, r3, #30
 8007300:	f100 8103 	bmi.w	800750a <_printf_float+0x44a>
 8007304:	68e0      	ldr	r0, [r4, #12]
 8007306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007308:	4298      	cmp	r0, r3
 800730a:	bfb8      	it	lt
 800730c:	4618      	movlt	r0, r3
 800730e:	e734      	b.n	800717a <_printf_float+0xba>
 8007310:	2301      	movs	r3, #1
 8007312:	4652      	mov	r2, sl
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af2b 	beq.w	8007176 <_printf_float+0xb6>
 8007320:	f109 0901 	add.w	r9, r9, #1
 8007324:	e7e8      	b.n	80072f8 <_printf_float+0x238>
 8007326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	dc39      	bgt.n	80073a0 <_printf_float+0x2e0>
 800732c:	4a1b      	ldr	r2, [pc, #108]	@ (800739c <_printf_float+0x2dc>)
 800732e:	2301      	movs	r3, #1
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	f43f af1d 	beq.w	8007176 <_printf_float+0xb6>
 800733c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007340:	ea59 0303 	orrs.w	r3, r9, r3
 8007344:	d102      	bne.n	800734c <_printf_float+0x28c>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	07d9      	lsls	r1, r3, #31
 800734a:	d5d7      	bpl.n	80072fc <_printf_float+0x23c>
 800734c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f af0d 	beq.w	8007176 <_printf_float+0xb6>
 800735c:	f04f 0a00 	mov.w	sl, #0
 8007360:	f104 0b1a 	add.w	fp, r4, #26
 8007364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007366:	425b      	negs	r3, r3
 8007368:	4553      	cmp	r3, sl
 800736a:	dc01      	bgt.n	8007370 <_printf_float+0x2b0>
 800736c:	464b      	mov	r3, r9
 800736e:	e793      	b.n	8007298 <_printf_float+0x1d8>
 8007370:	2301      	movs	r3, #1
 8007372:	465a      	mov	r2, fp
 8007374:	4631      	mov	r1, r6
 8007376:	4628      	mov	r0, r5
 8007378:	47b8      	blx	r7
 800737a:	3001      	adds	r0, #1
 800737c:	f43f aefb 	beq.w	8007176 <_printf_float+0xb6>
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	e7ee      	b.n	8007364 <_printf_float+0x2a4>
 8007386:	bf00      	nop
 8007388:	7fefffff 	.word	0x7fefffff
 800738c:	0800c718 	.word	0x0800c718
 8007390:	0800c71c 	.word	0x0800c71c
 8007394:	0800c720 	.word	0x0800c720
 8007398:	0800c724 	.word	0x0800c724
 800739c:	0800c9c5 	.word	0x0800c9c5
 80073a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073a6:	4553      	cmp	r3, sl
 80073a8:	bfa8      	it	ge
 80073aa:	4653      	movge	r3, sl
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	4699      	mov	r9, r3
 80073b0:	dc36      	bgt.n	8007420 <_printf_float+0x360>
 80073b2:	f04f 0b00 	mov.w	fp, #0
 80073b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ba:	f104 021a 	add.w	r2, r4, #26
 80073be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073c0:	9306      	str	r3, [sp, #24]
 80073c2:	eba3 0309 	sub.w	r3, r3, r9
 80073c6:	455b      	cmp	r3, fp
 80073c8:	dc31      	bgt.n	800742e <_printf_float+0x36e>
 80073ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073cc:	459a      	cmp	sl, r3
 80073ce:	dc3a      	bgt.n	8007446 <_printf_float+0x386>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07da      	lsls	r2, r3, #31
 80073d4:	d437      	bmi.n	8007446 <_printf_float+0x386>
 80073d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d8:	ebaa 0903 	sub.w	r9, sl, r3
 80073dc:	9b06      	ldr	r3, [sp, #24]
 80073de:	ebaa 0303 	sub.w	r3, sl, r3
 80073e2:	4599      	cmp	r9, r3
 80073e4:	bfa8      	it	ge
 80073e6:	4699      	movge	r9, r3
 80073e8:	f1b9 0f00 	cmp.w	r9, #0
 80073ec:	dc33      	bgt.n	8007456 <_printf_float+0x396>
 80073ee:	f04f 0800 	mov.w	r8, #0
 80073f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073f6:	f104 0b1a 	add.w	fp, r4, #26
 80073fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007400:	eba3 0309 	sub.w	r3, r3, r9
 8007404:	4543      	cmp	r3, r8
 8007406:	f77f af79 	ble.w	80072fc <_printf_float+0x23c>
 800740a:	2301      	movs	r3, #1
 800740c:	465a      	mov	r2, fp
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f aeae 	beq.w	8007176 <_printf_float+0xb6>
 800741a:	f108 0801 	add.w	r8, r8, #1
 800741e:	e7ec      	b.n	80073fa <_printf_float+0x33a>
 8007420:	4642      	mov	r2, r8
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	d1c2      	bne.n	80073b2 <_printf_float+0x2f2>
 800742c:	e6a3      	b.n	8007176 <_printf_float+0xb6>
 800742e:	2301      	movs	r3, #1
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	9206      	str	r2, [sp, #24]
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f ae9c 	beq.w	8007176 <_printf_float+0xb6>
 800743e:	9a06      	ldr	r2, [sp, #24]
 8007440:	f10b 0b01 	add.w	fp, fp, #1
 8007444:	e7bb      	b.n	80073be <_printf_float+0x2fe>
 8007446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	47b8      	blx	r7
 8007450:	3001      	adds	r0, #1
 8007452:	d1c0      	bne.n	80073d6 <_printf_float+0x316>
 8007454:	e68f      	b.n	8007176 <_printf_float+0xb6>
 8007456:	9a06      	ldr	r2, [sp, #24]
 8007458:	464b      	mov	r3, r9
 800745a:	4442      	add	r2, r8
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	d1c3      	bne.n	80073ee <_printf_float+0x32e>
 8007466:	e686      	b.n	8007176 <_printf_float+0xb6>
 8007468:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800746c:	f1ba 0f01 	cmp.w	sl, #1
 8007470:	dc01      	bgt.n	8007476 <_printf_float+0x3b6>
 8007472:	07db      	lsls	r3, r3, #31
 8007474:	d536      	bpl.n	80074e4 <_printf_float+0x424>
 8007476:	2301      	movs	r3, #1
 8007478:	4642      	mov	r2, r8
 800747a:	4631      	mov	r1, r6
 800747c:	4628      	mov	r0, r5
 800747e:	47b8      	blx	r7
 8007480:	3001      	adds	r0, #1
 8007482:	f43f ae78 	beq.w	8007176 <_printf_float+0xb6>
 8007486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f ae70 	beq.w	8007176 <_printf_float+0xb6>
 8007496:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80074a2:	f7f9 fb39 	bl	8000b18 <__aeabi_dcmpeq>
 80074a6:	b9c0      	cbnz	r0, 80074da <_printf_float+0x41a>
 80074a8:	4653      	mov	r3, sl
 80074aa:	f108 0201 	add.w	r2, r8, #1
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d10c      	bne.n	80074d2 <_printf_float+0x412>
 80074b8:	e65d      	b.n	8007176 <_printf_float+0xb6>
 80074ba:	2301      	movs	r3, #1
 80074bc:	465a      	mov	r2, fp
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f ae56 	beq.w	8007176 <_printf_float+0xb6>
 80074ca:	f108 0801 	add.w	r8, r8, #1
 80074ce:	45d0      	cmp	r8, sl
 80074d0:	dbf3      	blt.n	80074ba <_printf_float+0x3fa>
 80074d2:	464b      	mov	r3, r9
 80074d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074d8:	e6df      	b.n	800729a <_printf_float+0x1da>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	f104 0b1a 	add.w	fp, r4, #26
 80074e2:	e7f4      	b.n	80074ce <_printf_float+0x40e>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4642      	mov	r2, r8
 80074e8:	e7e1      	b.n	80074ae <_printf_float+0x3ee>
 80074ea:	2301      	movs	r3, #1
 80074ec:	464a      	mov	r2, r9
 80074ee:	4631      	mov	r1, r6
 80074f0:	4628      	mov	r0, r5
 80074f2:	47b8      	blx	r7
 80074f4:	3001      	adds	r0, #1
 80074f6:	f43f ae3e 	beq.w	8007176 <_printf_float+0xb6>
 80074fa:	f108 0801 	add.w	r8, r8, #1
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007502:	1a5b      	subs	r3, r3, r1
 8007504:	4543      	cmp	r3, r8
 8007506:	dcf0      	bgt.n	80074ea <_printf_float+0x42a>
 8007508:	e6fc      	b.n	8007304 <_printf_float+0x244>
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	f104 0919 	add.w	r9, r4, #25
 8007512:	e7f4      	b.n	80074fe <_printf_float+0x43e>

08007514 <_printf_common>:
 8007514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007518:	4616      	mov	r6, r2
 800751a:	4698      	mov	r8, r3
 800751c:	688a      	ldr	r2, [r1, #8]
 800751e:	690b      	ldr	r3, [r1, #16]
 8007520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007524:	4293      	cmp	r3, r2
 8007526:	bfb8      	it	lt
 8007528:	4613      	movlt	r3, r2
 800752a:	6033      	str	r3, [r6, #0]
 800752c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007530:	4607      	mov	r7, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b10a      	cbz	r2, 800753a <_printf_common+0x26>
 8007536:	3301      	adds	r3, #1
 8007538:	6033      	str	r3, [r6, #0]
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	0699      	lsls	r1, r3, #26
 800753e:	bf42      	ittt	mi
 8007540:	6833      	ldrmi	r3, [r6, #0]
 8007542:	3302      	addmi	r3, #2
 8007544:	6033      	strmi	r3, [r6, #0]
 8007546:	6825      	ldr	r5, [r4, #0]
 8007548:	f015 0506 	ands.w	r5, r5, #6
 800754c:	d106      	bne.n	800755c <_printf_common+0x48>
 800754e:	f104 0a19 	add.w	sl, r4, #25
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	6832      	ldr	r2, [r6, #0]
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	42ab      	cmp	r3, r5
 800755a:	dc26      	bgt.n	80075aa <_printf_common+0x96>
 800755c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	3b00      	subs	r3, #0
 8007564:	bf18      	it	ne
 8007566:	2301      	movne	r3, #1
 8007568:	0692      	lsls	r2, r2, #26
 800756a:	d42b      	bmi.n	80075c4 <_printf_common+0xb0>
 800756c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007570:	4641      	mov	r1, r8
 8007572:	4638      	mov	r0, r7
 8007574:	47c8      	blx	r9
 8007576:	3001      	adds	r0, #1
 8007578:	d01e      	beq.n	80075b8 <_printf_common+0xa4>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	6922      	ldr	r2, [r4, #16]
 800757e:	f003 0306 	and.w	r3, r3, #6
 8007582:	2b04      	cmp	r3, #4
 8007584:	bf02      	ittt	eq
 8007586:	68e5      	ldreq	r5, [r4, #12]
 8007588:	6833      	ldreq	r3, [r6, #0]
 800758a:	1aed      	subeq	r5, r5, r3
 800758c:	68a3      	ldr	r3, [r4, #8]
 800758e:	bf0c      	ite	eq
 8007590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007594:	2500      	movne	r5, #0
 8007596:	4293      	cmp	r3, r2
 8007598:	bfc4      	itt	gt
 800759a:	1a9b      	subgt	r3, r3, r2
 800759c:	18ed      	addgt	r5, r5, r3
 800759e:	2600      	movs	r6, #0
 80075a0:	341a      	adds	r4, #26
 80075a2:	42b5      	cmp	r5, r6
 80075a4:	d11a      	bne.n	80075dc <_printf_common+0xc8>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e008      	b.n	80075bc <_printf_common+0xa8>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4652      	mov	r2, sl
 80075ae:	4641      	mov	r1, r8
 80075b0:	4638      	mov	r0, r7
 80075b2:	47c8      	blx	r9
 80075b4:	3001      	adds	r0, #1
 80075b6:	d103      	bne.n	80075c0 <_printf_common+0xac>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7c6      	b.n	8007552 <_printf_common+0x3e>
 80075c4:	18e1      	adds	r1, r4, r3
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	2030      	movs	r0, #48	@ 0x30
 80075ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ce:	4422      	add	r2, r4
 80075d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075d8:	3302      	adds	r3, #2
 80075da:	e7c7      	b.n	800756c <_printf_common+0x58>
 80075dc:	2301      	movs	r3, #1
 80075de:	4622      	mov	r2, r4
 80075e0:	4641      	mov	r1, r8
 80075e2:	4638      	mov	r0, r7
 80075e4:	47c8      	blx	r9
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0e6      	beq.n	80075b8 <_printf_common+0xa4>
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7d9      	b.n	80075a2 <_printf_common+0x8e>
	...

080075f0 <_printf_i>:
 80075f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	7e0f      	ldrb	r7, [r1, #24]
 80075f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075f8:	2f78      	cmp	r7, #120	@ 0x78
 80075fa:	4691      	mov	r9, r2
 80075fc:	4680      	mov	r8, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	469a      	mov	sl, r3
 8007602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007606:	d807      	bhi.n	8007618 <_printf_i+0x28>
 8007608:	2f62      	cmp	r7, #98	@ 0x62
 800760a:	d80a      	bhi.n	8007622 <_printf_i+0x32>
 800760c:	2f00      	cmp	r7, #0
 800760e:	f000 80d2 	beq.w	80077b6 <_printf_i+0x1c6>
 8007612:	2f58      	cmp	r7, #88	@ 0x58
 8007614:	f000 80b9 	beq.w	800778a <_printf_i+0x19a>
 8007618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800761c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007620:	e03a      	b.n	8007698 <_printf_i+0xa8>
 8007622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007626:	2b15      	cmp	r3, #21
 8007628:	d8f6      	bhi.n	8007618 <_printf_i+0x28>
 800762a:	a101      	add	r1, pc, #4	@ (adr r1, 8007630 <_printf_i+0x40>)
 800762c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007630:	08007689 	.word	0x08007689
 8007634:	0800769d 	.word	0x0800769d
 8007638:	08007619 	.word	0x08007619
 800763c:	08007619 	.word	0x08007619
 8007640:	08007619 	.word	0x08007619
 8007644:	08007619 	.word	0x08007619
 8007648:	0800769d 	.word	0x0800769d
 800764c:	08007619 	.word	0x08007619
 8007650:	08007619 	.word	0x08007619
 8007654:	08007619 	.word	0x08007619
 8007658:	08007619 	.word	0x08007619
 800765c:	0800779d 	.word	0x0800779d
 8007660:	080076c7 	.word	0x080076c7
 8007664:	08007757 	.word	0x08007757
 8007668:	08007619 	.word	0x08007619
 800766c:	08007619 	.word	0x08007619
 8007670:	080077bf 	.word	0x080077bf
 8007674:	08007619 	.word	0x08007619
 8007678:	080076c7 	.word	0x080076c7
 800767c:	08007619 	.word	0x08007619
 8007680:	08007619 	.word	0x08007619
 8007684:	0800775f 	.word	0x0800775f
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	1d1a      	adds	r2, r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6032      	str	r2, [r6, #0]
 8007690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007698:	2301      	movs	r3, #1
 800769a:	e09d      	b.n	80077d8 <_printf_i+0x1e8>
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	6031      	str	r1, [r6, #0]
 80076a4:	0606      	lsls	r6, r0, #24
 80076a6:	d501      	bpl.n	80076ac <_printf_i+0xbc>
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	e003      	b.n	80076b4 <_printf_i+0xc4>
 80076ac:	0645      	lsls	r5, r0, #25
 80076ae:	d5fb      	bpl.n	80076a8 <_printf_i+0xb8>
 80076b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	da03      	bge.n	80076c0 <_printf_i+0xd0>
 80076b8:	232d      	movs	r3, #45	@ 0x2d
 80076ba:	426d      	negs	r5, r5
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076c0:	4859      	ldr	r0, [pc, #356]	@ (8007828 <_printf_i+0x238>)
 80076c2:	230a      	movs	r3, #10
 80076c4:	e011      	b.n	80076ea <_printf_i+0xfa>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	0608      	lsls	r0, r1, #24
 80076cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80076d0:	d402      	bmi.n	80076d8 <_printf_i+0xe8>
 80076d2:	0649      	lsls	r1, r1, #25
 80076d4:	bf48      	it	mi
 80076d6:	b2ad      	uxthmi	r5, r5
 80076d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076da:	4853      	ldr	r0, [pc, #332]	@ (8007828 <_printf_i+0x238>)
 80076dc:	6033      	str	r3, [r6, #0]
 80076de:	bf14      	ite	ne
 80076e0:	230a      	movne	r3, #10
 80076e2:	2308      	moveq	r3, #8
 80076e4:	2100      	movs	r1, #0
 80076e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ea:	6866      	ldr	r6, [r4, #4]
 80076ec:	60a6      	str	r6, [r4, #8]
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	bfa2      	ittt	ge
 80076f2:	6821      	ldrge	r1, [r4, #0]
 80076f4:	f021 0104 	bicge.w	r1, r1, #4
 80076f8:	6021      	strge	r1, [r4, #0]
 80076fa:	b90d      	cbnz	r5, 8007700 <_printf_i+0x110>
 80076fc:	2e00      	cmp	r6, #0
 80076fe:	d04b      	beq.n	8007798 <_printf_i+0x1a8>
 8007700:	4616      	mov	r6, r2
 8007702:	fbb5 f1f3 	udiv	r1, r5, r3
 8007706:	fb03 5711 	mls	r7, r3, r1, r5
 800770a:	5dc7      	ldrb	r7, [r0, r7]
 800770c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007710:	462f      	mov	r7, r5
 8007712:	42bb      	cmp	r3, r7
 8007714:	460d      	mov	r5, r1
 8007716:	d9f4      	bls.n	8007702 <_printf_i+0x112>
 8007718:	2b08      	cmp	r3, #8
 800771a:	d10b      	bne.n	8007734 <_printf_i+0x144>
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	07df      	lsls	r7, r3, #31
 8007720:	d508      	bpl.n	8007734 <_printf_i+0x144>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	6861      	ldr	r1, [r4, #4]
 8007726:	4299      	cmp	r1, r3
 8007728:	bfde      	ittt	le
 800772a:	2330      	movle	r3, #48	@ 0x30
 800772c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007730:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007734:	1b92      	subs	r2, r2, r6
 8007736:	6122      	str	r2, [r4, #16]
 8007738:	f8cd a000 	str.w	sl, [sp]
 800773c:	464b      	mov	r3, r9
 800773e:	aa03      	add	r2, sp, #12
 8007740:	4621      	mov	r1, r4
 8007742:	4640      	mov	r0, r8
 8007744:	f7ff fee6 	bl	8007514 <_printf_common>
 8007748:	3001      	adds	r0, #1
 800774a:	d14a      	bne.n	80077e2 <_printf_i+0x1f2>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007750:	b004      	add	sp, #16
 8007752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f043 0320 	orr.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	4833      	ldr	r0, [pc, #204]	@ (800782c <_printf_i+0x23c>)
 8007760:	2778      	movs	r7, #120	@ 0x78
 8007762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	6831      	ldr	r1, [r6, #0]
 800776a:	061f      	lsls	r7, r3, #24
 800776c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007770:	d402      	bmi.n	8007778 <_printf_i+0x188>
 8007772:	065f      	lsls	r7, r3, #25
 8007774:	bf48      	it	mi
 8007776:	b2ad      	uxthmi	r5, r5
 8007778:	6031      	str	r1, [r6, #0]
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	bf44      	itt	mi
 800777e:	f043 0320 	orrmi.w	r3, r3, #32
 8007782:	6023      	strmi	r3, [r4, #0]
 8007784:	b11d      	cbz	r5, 800778e <_printf_i+0x19e>
 8007786:	2310      	movs	r3, #16
 8007788:	e7ac      	b.n	80076e4 <_printf_i+0xf4>
 800778a:	4827      	ldr	r0, [pc, #156]	@ (8007828 <_printf_i+0x238>)
 800778c:	e7e9      	b.n	8007762 <_printf_i+0x172>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	f023 0320 	bic.w	r3, r3, #32
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	e7f6      	b.n	8007786 <_printf_i+0x196>
 8007798:	4616      	mov	r6, r2
 800779a:	e7bd      	b.n	8007718 <_printf_i+0x128>
 800779c:	6833      	ldr	r3, [r6, #0]
 800779e:	6825      	ldr	r5, [r4, #0]
 80077a0:	6961      	ldr	r1, [r4, #20]
 80077a2:	1d18      	adds	r0, r3, #4
 80077a4:	6030      	str	r0, [r6, #0]
 80077a6:	062e      	lsls	r6, r5, #24
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0x1c0>
 80077ac:	6019      	str	r1, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0x1c6>
 80077b0:	0668      	lsls	r0, r5, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0x1bc>
 80077b4:	8019      	strh	r1, [r3, #0]
 80077b6:	2300      	movs	r3, #0
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	4616      	mov	r6, r2
 80077bc:	e7bc      	b.n	8007738 <_printf_i+0x148>
 80077be:	6833      	ldr	r3, [r6, #0]
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	6032      	str	r2, [r6, #0]
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	2100      	movs	r1, #0
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7f8 fd28 	bl	8000220 <memchr>
 80077d0:	b108      	cbz	r0, 80077d6 <_printf_i+0x1e6>
 80077d2:	1b80      	subs	r0, r0, r6
 80077d4:	6060      	str	r0, [r4, #4]
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	2300      	movs	r3, #0
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077e0:	e7aa      	b.n	8007738 <_printf_i+0x148>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	4632      	mov	r2, r6
 80077e6:	4649      	mov	r1, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	47d0      	blx	sl
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0ad      	beq.n	800774c <_printf_i+0x15c>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	079b      	lsls	r3, r3, #30
 80077f4:	d413      	bmi.n	800781e <_printf_i+0x22e>
 80077f6:	68e0      	ldr	r0, [r4, #12]
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	4298      	cmp	r0, r3
 80077fc:	bfb8      	it	lt
 80077fe:	4618      	movlt	r0, r3
 8007800:	e7a6      	b.n	8007750 <_printf_i+0x160>
 8007802:	2301      	movs	r3, #1
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d09d      	beq.n	800774c <_printf_i+0x15c>
 8007810:	3501      	adds	r5, #1
 8007812:	68e3      	ldr	r3, [r4, #12]
 8007814:	9903      	ldr	r1, [sp, #12]
 8007816:	1a5b      	subs	r3, r3, r1
 8007818:	42ab      	cmp	r3, r5
 800781a:	dcf2      	bgt.n	8007802 <_printf_i+0x212>
 800781c:	e7eb      	b.n	80077f6 <_printf_i+0x206>
 800781e:	2500      	movs	r5, #0
 8007820:	f104 0619 	add.w	r6, r4, #25
 8007824:	e7f5      	b.n	8007812 <_printf_i+0x222>
 8007826:	bf00      	nop
 8007828:	0800c728 	.word	0x0800c728
 800782c:	0800c739 	.word	0x0800c739

08007830 <_scanf_float>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	b087      	sub	sp, #28
 8007836:	4617      	mov	r7, r2
 8007838:	9303      	str	r3, [sp, #12]
 800783a:	688b      	ldr	r3, [r1, #8]
 800783c:	1e5a      	subs	r2, r3, #1
 800783e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007842:	bf81      	itttt	hi
 8007844:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007848:	eb03 0b05 	addhi.w	fp, r3, r5
 800784c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007850:	608b      	strhi	r3, [r1, #8]
 8007852:	680b      	ldr	r3, [r1, #0]
 8007854:	460a      	mov	r2, r1
 8007856:	f04f 0500 	mov.w	r5, #0
 800785a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800785e:	f842 3b1c 	str.w	r3, [r2], #28
 8007862:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007866:	4680      	mov	r8, r0
 8007868:	460c      	mov	r4, r1
 800786a:	bf98      	it	ls
 800786c:	f04f 0b00 	movls.w	fp, #0
 8007870:	9201      	str	r2, [sp, #4]
 8007872:	4616      	mov	r6, r2
 8007874:	46aa      	mov	sl, r5
 8007876:	46a9      	mov	r9, r5
 8007878:	9502      	str	r5, [sp, #8]
 800787a:	68a2      	ldr	r2, [r4, #8]
 800787c:	b152      	cbz	r2, 8007894 <_scanf_float+0x64>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b4e      	cmp	r3, #78	@ 0x4e
 8007884:	d864      	bhi.n	8007950 <_scanf_float+0x120>
 8007886:	2b40      	cmp	r3, #64	@ 0x40
 8007888:	d83c      	bhi.n	8007904 <_scanf_float+0xd4>
 800788a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800788e:	b2c8      	uxtb	r0, r1
 8007890:	280e      	cmp	r0, #14
 8007892:	d93a      	bls.n	800790a <_scanf_float+0xda>
 8007894:	f1b9 0f00 	cmp.w	r9, #0
 8007898:	d003      	beq.n	80078a2 <_scanf_float+0x72>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80078a6:	f1ba 0f01 	cmp.w	sl, #1
 80078aa:	f200 8117 	bhi.w	8007adc <_scanf_float+0x2ac>
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	429e      	cmp	r6, r3
 80078b2:	f200 8108 	bhi.w	8007ac6 <_scanf_float+0x296>
 80078b6:	2001      	movs	r0, #1
 80078b8:	b007      	add	sp, #28
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80078c2:	2a0d      	cmp	r2, #13
 80078c4:	d8e6      	bhi.n	8007894 <_scanf_float+0x64>
 80078c6:	a101      	add	r1, pc, #4	@ (adr r1, 80078cc <_scanf_float+0x9c>)
 80078c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078cc:	08007a13 	.word	0x08007a13
 80078d0:	08007895 	.word	0x08007895
 80078d4:	08007895 	.word	0x08007895
 80078d8:	08007895 	.word	0x08007895
 80078dc:	08007a73 	.word	0x08007a73
 80078e0:	08007a4b 	.word	0x08007a4b
 80078e4:	08007895 	.word	0x08007895
 80078e8:	08007895 	.word	0x08007895
 80078ec:	08007a21 	.word	0x08007a21
 80078f0:	08007895 	.word	0x08007895
 80078f4:	08007895 	.word	0x08007895
 80078f8:	08007895 	.word	0x08007895
 80078fc:	08007895 	.word	0x08007895
 8007900:	080079d9 	.word	0x080079d9
 8007904:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007908:	e7db      	b.n	80078c2 <_scanf_float+0x92>
 800790a:	290e      	cmp	r1, #14
 800790c:	d8c2      	bhi.n	8007894 <_scanf_float+0x64>
 800790e:	a001      	add	r0, pc, #4	@ (adr r0, 8007914 <_scanf_float+0xe4>)
 8007910:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007914:	080079c9 	.word	0x080079c9
 8007918:	08007895 	.word	0x08007895
 800791c:	080079c9 	.word	0x080079c9
 8007920:	08007a5f 	.word	0x08007a5f
 8007924:	08007895 	.word	0x08007895
 8007928:	08007971 	.word	0x08007971
 800792c:	080079af 	.word	0x080079af
 8007930:	080079af 	.word	0x080079af
 8007934:	080079af 	.word	0x080079af
 8007938:	080079af 	.word	0x080079af
 800793c:	080079af 	.word	0x080079af
 8007940:	080079af 	.word	0x080079af
 8007944:	080079af 	.word	0x080079af
 8007948:	080079af 	.word	0x080079af
 800794c:	080079af 	.word	0x080079af
 8007950:	2b6e      	cmp	r3, #110	@ 0x6e
 8007952:	d809      	bhi.n	8007968 <_scanf_float+0x138>
 8007954:	2b60      	cmp	r3, #96	@ 0x60
 8007956:	d8b2      	bhi.n	80078be <_scanf_float+0x8e>
 8007958:	2b54      	cmp	r3, #84	@ 0x54
 800795a:	d07b      	beq.n	8007a54 <_scanf_float+0x224>
 800795c:	2b59      	cmp	r3, #89	@ 0x59
 800795e:	d199      	bne.n	8007894 <_scanf_float+0x64>
 8007960:	2d07      	cmp	r5, #7
 8007962:	d197      	bne.n	8007894 <_scanf_float+0x64>
 8007964:	2508      	movs	r5, #8
 8007966:	e02c      	b.n	80079c2 <_scanf_float+0x192>
 8007968:	2b74      	cmp	r3, #116	@ 0x74
 800796a:	d073      	beq.n	8007a54 <_scanf_float+0x224>
 800796c:	2b79      	cmp	r3, #121	@ 0x79
 800796e:	e7f6      	b.n	800795e <_scanf_float+0x12e>
 8007970:	6821      	ldr	r1, [r4, #0]
 8007972:	05c8      	lsls	r0, r1, #23
 8007974:	d51b      	bpl.n	80079ae <_scanf_float+0x17e>
 8007976:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800797a:	6021      	str	r1, [r4, #0]
 800797c:	f109 0901 	add.w	r9, r9, #1
 8007980:	f1bb 0f00 	cmp.w	fp, #0
 8007984:	d003      	beq.n	800798e <_scanf_float+0x15e>
 8007986:	3201      	adds	r2, #1
 8007988:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800798c:	60a2      	str	r2, [r4, #8]
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	3b01      	subs	r3, #1
 8007992:	60a3      	str	r3, [r4, #8]
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	3301      	adds	r3, #1
 8007998:	6123      	str	r3, [r4, #16]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	607b      	str	r3, [r7, #4]
 80079a2:	f340 8087 	ble.w	8007ab4 <_scanf_float+0x284>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	e765      	b.n	800787a <_scanf_float+0x4a>
 80079ae:	eb1a 0105 	adds.w	r1, sl, r5
 80079b2:	f47f af6f 	bne.w	8007894 <_scanf_float+0x64>
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80079bc:	6022      	str	r2, [r4, #0]
 80079be:	460d      	mov	r5, r1
 80079c0:	468a      	mov	sl, r1
 80079c2:	f806 3b01 	strb.w	r3, [r6], #1
 80079c6:	e7e2      	b.n	800798e <_scanf_float+0x15e>
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	0610      	lsls	r0, r2, #24
 80079cc:	f57f af62 	bpl.w	8007894 <_scanf_float+0x64>
 80079d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	e7f4      	b.n	80079c2 <_scanf_float+0x192>
 80079d8:	f1ba 0f00 	cmp.w	sl, #0
 80079dc:	d10e      	bne.n	80079fc <_scanf_float+0x1cc>
 80079de:	f1b9 0f00 	cmp.w	r9, #0
 80079e2:	d10e      	bne.n	8007a02 <_scanf_float+0x1d2>
 80079e4:	6822      	ldr	r2, [r4, #0]
 80079e6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079ea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079ee:	d108      	bne.n	8007a02 <_scanf_float+0x1d2>
 80079f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079f4:	6022      	str	r2, [r4, #0]
 80079f6:	f04f 0a01 	mov.w	sl, #1
 80079fa:	e7e2      	b.n	80079c2 <_scanf_float+0x192>
 80079fc:	f1ba 0f02 	cmp.w	sl, #2
 8007a00:	d055      	beq.n	8007aae <_scanf_float+0x27e>
 8007a02:	2d01      	cmp	r5, #1
 8007a04:	d002      	beq.n	8007a0c <_scanf_float+0x1dc>
 8007a06:	2d04      	cmp	r5, #4
 8007a08:	f47f af44 	bne.w	8007894 <_scanf_float+0x64>
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	b2ed      	uxtb	r5, r5
 8007a10:	e7d7      	b.n	80079c2 <_scanf_float+0x192>
 8007a12:	f1ba 0f01 	cmp.w	sl, #1
 8007a16:	f47f af3d 	bne.w	8007894 <_scanf_float+0x64>
 8007a1a:	f04f 0a02 	mov.w	sl, #2
 8007a1e:	e7d0      	b.n	80079c2 <_scanf_float+0x192>
 8007a20:	b97d      	cbnz	r5, 8007a42 <_scanf_float+0x212>
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	f47f af38 	bne.w	800789a <_scanf_float+0x6a>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a34:	f040 8108 	bne.w	8007c48 <_scanf_float+0x418>
 8007a38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a3c:	6022      	str	r2, [r4, #0]
 8007a3e:	2501      	movs	r5, #1
 8007a40:	e7bf      	b.n	80079c2 <_scanf_float+0x192>
 8007a42:	2d03      	cmp	r5, #3
 8007a44:	d0e2      	beq.n	8007a0c <_scanf_float+0x1dc>
 8007a46:	2d05      	cmp	r5, #5
 8007a48:	e7de      	b.n	8007a08 <_scanf_float+0x1d8>
 8007a4a:	2d02      	cmp	r5, #2
 8007a4c:	f47f af22 	bne.w	8007894 <_scanf_float+0x64>
 8007a50:	2503      	movs	r5, #3
 8007a52:	e7b6      	b.n	80079c2 <_scanf_float+0x192>
 8007a54:	2d06      	cmp	r5, #6
 8007a56:	f47f af1d 	bne.w	8007894 <_scanf_float+0x64>
 8007a5a:	2507      	movs	r5, #7
 8007a5c:	e7b1      	b.n	80079c2 <_scanf_float+0x192>
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	0591      	lsls	r1, r2, #22
 8007a62:	f57f af17 	bpl.w	8007894 <_scanf_float+0x64>
 8007a66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007a6a:	6022      	str	r2, [r4, #0]
 8007a6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a70:	e7a7      	b.n	80079c2 <_scanf_float+0x192>
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007a78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a7c:	d006      	beq.n	8007a8c <_scanf_float+0x25c>
 8007a7e:	0550      	lsls	r0, r2, #21
 8007a80:	f57f af08 	bpl.w	8007894 <_scanf_float+0x64>
 8007a84:	f1b9 0f00 	cmp.w	r9, #0
 8007a88:	f000 80de 	beq.w	8007c48 <_scanf_float+0x418>
 8007a8c:	0591      	lsls	r1, r2, #22
 8007a8e:	bf58      	it	pl
 8007a90:	9902      	ldrpl	r1, [sp, #8]
 8007a92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a96:	bf58      	it	pl
 8007a98:	eba9 0101 	subpl.w	r1, r9, r1
 8007a9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007aa0:	bf58      	it	pl
 8007aa2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	f04f 0900 	mov.w	r9, #0
 8007aac:	e789      	b.n	80079c2 <_scanf_float+0x192>
 8007aae:	f04f 0a03 	mov.w	sl, #3
 8007ab2:	e786      	b.n	80079c2 <_scanf_float+0x192>
 8007ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ab8:	4639      	mov	r1, r7
 8007aba:	4640      	mov	r0, r8
 8007abc:	4798      	blx	r3
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f43f aedb 	beq.w	800787a <_scanf_float+0x4a>
 8007ac4:	e6e6      	b.n	8007894 <_scanf_float+0x64>
 8007ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ace:	463a      	mov	r2, r7
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4798      	blx	r3
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	6123      	str	r3, [r4, #16]
 8007ada:	e6e8      	b.n	80078ae <_scanf_float+0x7e>
 8007adc:	1e6b      	subs	r3, r5, #1
 8007ade:	2b06      	cmp	r3, #6
 8007ae0:	d824      	bhi.n	8007b2c <_scanf_float+0x2fc>
 8007ae2:	2d02      	cmp	r5, #2
 8007ae4:	d836      	bhi.n	8007b54 <_scanf_float+0x324>
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	429e      	cmp	r6, r3
 8007aea:	f67f aee4 	bls.w	80078b6 <_scanf_float+0x86>
 8007aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007af2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007af6:	463a      	mov	r2, r7
 8007af8:	4640      	mov	r0, r8
 8007afa:	4798      	blx	r3
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	6123      	str	r3, [r4, #16]
 8007b02:	e7f0      	b.n	8007ae6 <_scanf_float+0x2b6>
 8007b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b0c:	463a      	mov	r2, r7
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4798      	blx	r3
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007b1c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b20:	f1ba 0f02 	cmp.w	sl, #2
 8007b24:	d1ee      	bne.n	8007b04 <_scanf_float+0x2d4>
 8007b26:	3d03      	subs	r5, #3
 8007b28:	b2ed      	uxtb	r5, r5
 8007b2a:	1b76      	subs	r6, r6, r5
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	05da      	lsls	r2, r3, #23
 8007b30:	d530      	bpl.n	8007b94 <_scanf_float+0x364>
 8007b32:	055b      	lsls	r3, r3, #21
 8007b34:	d511      	bpl.n	8007b5a <_scanf_float+0x32a>
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	429e      	cmp	r6, r3
 8007b3a:	f67f aebc 	bls.w	80078b6 <_scanf_float+0x86>
 8007b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b46:	463a      	mov	r2, r7
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4798      	blx	r3
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	e7f0      	b.n	8007b36 <_scanf_float+0x306>
 8007b54:	46aa      	mov	sl, r5
 8007b56:	46b3      	mov	fp, r6
 8007b58:	e7de      	b.n	8007b18 <_scanf_float+0x2e8>
 8007b5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	2965      	cmp	r1, #101	@ 0x65
 8007b62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007b66:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	d00c      	beq.n	8007b88 <_scanf_float+0x358>
 8007b6e:	2945      	cmp	r1, #69	@ 0x45
 8007b70:	d00a      	beq.n	8007b88 <_scanf_float+0x358>
 8007b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b76:	463a      	mov	r2, r7
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4798      	blx	r3
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	1eb5      	subs	r5, r6, #2
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b8c:	463a      	mov	r2, r7
 8007b8e:	4640      	mov	r0, r8
 8007b90:	4798      	blx	r3
 8007b92:	462e      	mov	r6, r5
 8007b94:	6822      	ldr	r2, [r4, #0]
 8007b96:	f012 0210 	ands.w	r2, r2, #16
 8007b9a:	d001      	beq.n	8007ba0 <_scanf_float+0x370>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e68b      	b.n	80078b8 <_scanf_float+0x88>
 8007ba0:	7032      	strb	r2, [r6, #0]
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bac:	d11c      	bne.n	8007be8 <_scanf_float+0x3b8>
 8007bae:	9b02      	ldr	r3, [sp, #8]
 8007bb0:	454b      	cmp	r3, r9
 8007bb2:	eba3 0209 	sub.w	r2, r3, r9
 8007bb6:	d123      	bne.n	8007c00 <_scanf_float+0x3d0>
 8007bb8:	9901      	ldr	r1, [sp, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	f000 ff83 	bl	8008ac8 <_strtod_r>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	6821      	ldr	r1, [r4, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f011 0f02 	tst.w	r1, #2
 8007bcc:	ec57 6b10 	vmov	r6, r7, d0
 8007bd0:	f103 0204 	add.w	r2, r3, #4
 8007bd4:	d01f      	beq.n	8007c16 <_scanf_float+0x3e6>
 8007bd6:	9903      	ldr	r1, [sp, #12]
 8007bd8:	600a      	str	r2, [r1, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	e9c3 6700 	strd	r6, r7, [r3]
 8007be0:	68e3      	ldr	r3, [r4, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60e3      	str	r3, [r4, #12]
 8007be6:	e7d9      	b.n	8007b9c <_scanf_float+0x36c>
 8007be8:	9b04      	ldr	r3, [sp, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0e4      	beq.n	8007bb8 <_scanf_float+0x388>
 8007bee:	9905      	ldr	r1, [sp, #20]
 8007bf0:	230a      	movs	r3, #10
 8007bf2:	3101      	adds	r1, #1
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	f000 ffe7 	bl	8008bc8 <_strtol_r>
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	9e05      	ldr	r6, [sp, #20]
 8007bfe:	1ac2      	subs	r2, r0, r3
 8007c00:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c04:	429e      	cmp	r6, r3
 8007c06:	bf28      	it	cs
 8007c08:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c0c:	4910      	ldr	r1, [pc, #64]	@ (8007c50 <_scanf_float+0x420>)
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f000 f822 	bl	8007c58 <siprintf>
 8007c14:	e7d0      	b.n	8007bb8 <_scanf_float+0x388>
 8007c16:	f011 0f04 	tst.w	r1, #4
 8007c1a:	9903      	ldr	r1, [sp, #12]
 8007c1c:	600a      	str	r2, [r1, #0]
 8007c1e:	d1dc      	bne.n	8007bda <_scanf_float+0x3aa>
 8007c20:	681d      	ldr	r5, [r3, #0]
 8007c22:	4632      	mov	r2, r6
 8007c24:	463b      	mov	r3, r7
 8007c26:	4630      	mov	r0, r6
 8007c28:	4639      	mov	r1, r7
 8007c2a:	f7f8 ffa7 	bl	8000b7c <__aeabi_dcmpun>
 8007c2e:	b128      	cbz	r0, 8007c3c <_scanf_float+0x40c>
 8007c30:	4808      	ldr	r0, [pc, #32]	@ (8007c54 <_scanf_float+0x424>)
 8007c32:	f001 f901 	bl	8008e38 <nanf>
 8007c36:	ed85 0a00 	vstr	s0, [r5]
 8007c3a:	e7d1      	b.n	8007be0 <_scanf_float+0x3b0>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 fffa 	bl	8000c38 <__aeabi_d2f>
 8007c44:	6028      	str	r0, [r5, #0]
 8007c46:	e7cb      	b.n	8007be0 <_scanf_float+0x3b0>
 8007c48:	f04f 0900 	mov.w	r9, #0
 8007c4c:	e629      	b.n	80078a2 <_scanf_float+0x72>
 8007c4e:	bf00      	nop
 8007c50:	0800c74a 	.word	0x0800c74a
 8007c54:	0800cb5b 	.word	0x0800cb5b

08007c58 <siprintf>:
 8007c58:	b40e      	push	{r1, r2, r3}
 8007c5a:	b500      	push	{lr}
 8007c5c:	b09c      	sub	sp, #112	@ 0x70
 8007c5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c60:	9002      	str	r0, [sp, #8]
 8007c62:	9006      	str	r0, [sp, #24]
 8007c64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c68:	4809      	ldr	r0, [pc, #36]	@ (8007c90 <siprintf+0x38>)
 8007c6a:	9107      	str	r1, [sp, #28]
 8007c6c:	9104      	str	r1, [sp, #16]
 8007c6e:	4909      	ldr	r1, [pc, #36]	@ (8007c94 <siprintf+0x3c>)
 8007c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c74:	9105      	str	r1, [sp, #20]
 8007c76:	6800      	ldr	r0, [r0, #0]
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	a902      	add	r1, sp, #8
 8007c7c:	f002 fb0e 	bl	800a29c <_svfiprintf_r>
 8007c80:	9b02      	ldr	r3, [sp, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	b01c      	add	sp, #112	@ 0x70
 8007c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c8c:	b003      	add	sp, #12
 8007c8e:	4770      	bx	lr
 8007c90:	2000019c 	.word	0x2000019c
 8007c94:	ffff0208 	.word	0xffff0208

08007c98 <siscanf>:
 8007c98:	b40e      	push	{r1, r2, r3}
 8007c9a:	b530      	push	{r4, r5, lr}
 8007c9c:	b09c      	sub	sp, #112	@ 0x70
 8007c9e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007ca0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007ca4:	f854 5b04 	ldr.w	r5, [r4], #4
 8007ca8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007cac:	9002      	str	r0, [sp, #8]
 8007cae:	9006      	str	r0, [sp, #24]
 8007cb0:	f7f8 fb06 	bl	80002c0 <strlen>
 8007cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <siscanf+0x4c>)
 8007cb6:	9003      	str	r0, [sp, #12]
 8007cb8:	9007      	str	r0, [sp, #28]
 8007cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cbc:	480a      	ldr	r0, [pc, #40]	@ (8007ce8 <siscanf+0x50>)
 8007cbe:	9401      	str	r4, [sp, #4]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cc4:	9314      	str	r3, [sp, #80]	@ 0x50
 8007cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	a902      	add	r1, sp, #8
 8007cd4:	6800      	ldr	r0, [r0, #0]
 8007cd6:	f002 fc35 	bl	800a544 <__ssvfiscanf_r>
 8007cda:	b01c      	add	sp, #112	@ 0x70
 8007cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ce0:	b003      	add	sp, #12
 8007ce2:	4770      	bx	lr
 8007ce4:	08007d0f 	.word	0x08007d0f
 8007ce8:	2000019c 	.word	0x2000019c

08007cec <__sread>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	460c      	mov	r4, r1
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	f001 f838 	bl	8008d68 <_read_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	bfab      	itete	ge
 8007cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8007d00:	181b      	addge	r3, r3, r0
 8007d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d06:	bfac      	ite	ge
 8007d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d0a:	81a3      	strhlt	r3, [r4, #12]
 8007d0c:	bd10      	pop	{r4, pc}

08007d0e <__seofread>:
 8007d0e:	2000      	movs	r0, #0
 8007d10:	4770      	bx	lr

08007d12 <__swrite>:
 8007d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d16:	461f      	mov	r7, r3
 8007d18:	898b      	ldrh	r3, [r1, #12]
 8007d1a:	05db      	lsls	r3, r3, #23
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	4616      	mov	r6, r2
 8007d22:	d505      	bpl.n	8007d30 <__swrite+0x1e>
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	2302      	movs	r3, #2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f001 f80a 	bl	8008d44 <_lseek_r>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	463b      	mov	r3, r7
 8007d40:	4628      	mov	r0, r5
 8007d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	f001 b821 	b.w	8008d8c <_write_r>

08007d4a <__sseek>:
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d52:	f000 fff7 	bl	8008d44 <_lseek_r>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	bf15      	itete	ne
 8007d5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d66:	81a3      	strheq	r3, [r4, #12]
 8007d68:	bf18      	it	ne
 8007d6a:	81a3      	strhne	r3, [r4, #12]
 8007d6c:	bd10      	pop	{r4, pc}

08007d6e <__sclose>:
 8007d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d72:	f000 bfd7 	b.w	8008d24 <_close_r>
	...

08007d78 <std>:
 8007d78:	2300      	movs	r3, #0
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d86:	6083      	str	r3, [r0, #8]
 8007d88:	8181      	strh	r1, [r0, #12]
 8007d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d8c:	81c2      	strh	r2, [r0, #14]
 8007d8e:	6183      	str	r3, [r0, #24]
 8007d90:	4619      	mov	r1, r3
 8007d92:	2208      	movs	r2, #8
 8007d94:	305c      	adds	r0, #92	@ 0x5c
 8007d96:	f000 ffb9 	bl	8008d0c <memset>
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd0 <std+0x58>)
 8007d9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <std+0x5c>)
 8007da0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <std+0x60>)
 8007da4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <std+0x64>)
 8007da8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <std+0x68>)
 8007dac:	6224      	str	r4, [r4, #32]
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d006      	beq.n	8007dc0 <std+0x48>
 8007db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007db6:	4294      	cmp	r4, r2
 8007db8:	d002      	beq.n	8007dc0 <std+0x48>
 8007dba:	33d0      	adds	r3, #208	@ 0xd0
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d105      	bne.n	8007dcc <std+0x54>
 8007dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc8:	f001 b81c 	b.w	8008e04 <__retarget_lock_init_recursive>
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	08007ced 	.word	0x08007ced
 8007dd4:	08007d13 	.word	0x08007d13
 8007dd8:	08007d4b 	.word	0x08007d4b
 8007ddc:	08007d6f 	.word	0x08007d6f
 8007de0:	2000064c 	.word	0x2000064c

08007de4 <stdio_exit_handler>:
 8007de4:	4a02      	ldr	r2, [pc, #8]	@ (8007df0 <stdio_exit_handler+0xc>)
 8007de6:	4903      	ldr	r1, [pc, #12]	@ (8007df4 <stdio_exit_handler+0x10>)
 8007de8:	4803      	ldr	r0, [pc, #12]	@ (8007df8 <stdio_exit_handler+0x14>)
 8007dea:	f000 beef 	b.w	8008bcc <_fwalk_sglue>
 8007dee:	bf00      	nop
 8007df0:	20000024 	.word	0x20000024
 8007df4:	0800b041 	.word	0x0800b041
 8007df8:	200001a0 	.word	0x200001a0

08007dfc <cleanup_stdio>:
 8007dfc:	6841      	ldr	r1, [r0, #4]
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007e30 <cleanup_stdio+0x34>)
 8007e00:	4299      	cmp	r1, r3
 8007e02:	b510      	push	{r4, lr}
 8007e04:	4604      	mov	r4, r0
 8007e06:	d001      	beq.n	8007e0c <cleanup_stdio+0x10>
 8007e08:	f003 f91a 	bl	800b040 <_fflush_r>
 8007e0c:	68a1      	ldr	r1, [r4, #8]
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <cleanup_stdio+0x38>)
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d002      	beq.n	8007e1a <cleanup_stdio+0x1e>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f003 f913 	bl	800b040 <_fflush_r>
 8007e1a:	68e1      	ldr	r1, [r4, #12]
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <cleanup_stdio+0x3c>)
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d004      	beq.n	8007e2c <cleanup_stdio+0x30>
 8007e22:	4620      	mov	r0, r4
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	f003 b90a 	b.w	800b040 <_fflush_r>
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	bf00      	nop
 8007e30:	2000064c 	.word	0x2000064c
 8007e34:	200006b4 	.word	0x200006b4
 8007e38:	2000071c 	.word	0x2000071c

08007e3c <global_stdio_init.part.0>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <global_stdio_init.part.0+0x30>)
 8007e40:	4c0b      	ldr	r4, [pc, #44]	@ (8007e70 <global_stdio_init.part.0+0x34>)
 8007e42:	4a0c      	ldr	r2, [pc, #48]	@ (8007e74 <global_stdio_init.part.0+0x38>)
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	4620      	mov	r0, r4
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2104      	movs	r1, #4
 8007e4c:	f7ff ff94 	bl	8007d78 <std>
 8007e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e54:	2201      	movs	r2, #1
 8007e56:	2109      	movs	r1, #9
 8007e58:	f7ff ff8e 	bl	8007d78 <std>
 8007e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e60:	2202      	movs	r2, #2
 8007e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e66:	2112      	movs	r1, #18
 8007e68:	f7ff bf86 	b.w	8007d78 <std>
 8007e6c:	20000784 	.word	0x20000784
 8007e70:	2000064c 	.word	0x2000064c
 8007e74:	08007de5 	.word	0x08007de5

08007e78 <__sfp_lock_acquire>:
 8007e78:	4801      	ldr	r0, [pc, #4]	@ (8007e80 <__sfp_lock_acquire+0x8>)
 8007e7a:	f000 bfc4 	b.w	8008e06 <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	2000078d 	.word	0x2000078d

08007e84 <__sfp_lock_release>:
 8007e84:	4801      	ldr	r0, [pc, #4]	@ (8007e8c <__sfp_lock_release+0x8>)
 8007e86:	f000 bfbf 	b.w	8008e08 <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	2000078d 	.word	0x2000078d

08007e90 <__sinit>:
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4604      	mov	r4, r0
 8007e94:	f7ff fff0 	bl	8007e78 <__sfp_lock_acquire>
 8007e98:	6a23      	ldr	r3, [r4, #32]
 8007e9a:	b11b      	cbz	r3, 8007ea4 <__sinit+0x14>
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f7ff bff0 	b.w	8007e84 <__sfp_lock_release>
 8007ea4:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <__sinit+0x28>)
 8007ea6:	6223      	str	r3, [r4, #32]
 8007ea8:	4b04      	ldr	r3, [pc, #16]	@ (8007ebc <__sinit+0x2c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1f5      	bne.n	8007e9c <__sinit+0xc>
 8007eb0:	f7ff ffc4 	bl	8007e3c <global_stdio_init.part.0>
 8007eb4:	e7f2      	b.n	8007e9c <__sinit+0xc>
 8007eb6:	bf00      	nop
 8007eb8:	08007dfd 	.word	0x08007dfd
 8007ebc:	20000784 	.word	0x20000784

08007ec0 <sulp>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	ec45 4b10 	vmov	d0, r4, r5
 8007eca:	4616      	mov	r6, r2
 8007ecc:	f003 fc60 	bl	800b790 <__ulp>
 8007ed0:	ec51 0b10 	vmov	r0, r1, d0
 8007ed4:	b17e      	cbz	r6, 8007ef6 <sulp+0x36>
 8007ed6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007eda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd09      	ble.n	8007ef6 <sulp+0x36>
 8007ee2:	051b      	lsls	r3, r3, #20
 8007ee4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ee8:	2400      	movs	r4, #0
 8007eea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007eee:	4622      	mov	r2, r4
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	f7f8 fba9 	bl	8000648 <__aeabi_dmul>
 8007ef6:	ec41 0b10 	vmov	d0, r0, r1
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	0000      	movs	r0, r0
	...

08007f00 <_strtod_l>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	b09f      	sub	sp, #124	@ 0x7c
 8007f06:	460c      	mov	r4, r1
 8007f08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007f0e:	9005      	str	r0, [sp, #20]
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	f04f 0b00 	mov.w	fp, #0
 8007f18:	460a      	mov	r2, r1
 8007f1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f1c:	7811      	ldrb	r1, [r2, #0]
 8007f1e:	292b      	cmp	r1, #43	@ 0x2b
 8007f20:	d04a      	beq.n	8007fb8 <_strtod_l+0xb8>
 8007f22:	d838      	bhi.n	8007f96 <_strtod_l+0x96>
 8007f24:	290d      	cmp	r1, #13
 8007f26:	d832      	bhi.n	8007f8e <_strtod_l+0x8e>
 8007f28:	2908      	cmp	r1, #8
 8007f2a:	d832      	bhi.n	8007f92 <_strtod_l+0x92>
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	d03b      	beq.n	8007fa8 <_strtod_l+0xa8>
 8007f30:	2200      	movs	r2, #0
 8007f32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007f34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007f36:	782a      	ldrb	r2, [r5, #0]
 8007f38:	2a30      	cmp	r2, #48	@ 0x30
 8007f3a:	f040 80b3 	bne.w	80080a4 <_strtod_l+0x1a4>
 8007f3e:	786a      	ldrb	r2, [r5, #1]
 8007f40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f44:	2a58      	cmp	r2, #88	@ 0x58
 8007f46:	d16e      	bne.n	8008026 <_strtod_l+0x126>
 8007f48:	9302      	str	r3, [sp, #8]
 8007f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4a8e      	ldr	r2, [pc, #568]	@ (800818c <_strtod_l+0x28c>)
 8007f54:	9805      	ldr	r0, [sp, #20]
 8007f56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f58:	a919      	add	r1, sp, #100	@ 0x64
 8007f5a:	f001 fe73 	bl	8009c44 <__gethex>
 8007f5e:	f010 060f 	ands.w	r6, r0, #15
 8007f62:	4604      	mov	r4, r0
 8007f64:	d005      	beq.n	8007f72 <_strtod_l+0x72>
 8007f66:	2e06      	cmp	r6, #6
 8007f68:	d128      	bne.n	8007fbc <_strtod_l+0xbc>
 8007f6a:	3501      	adds	r5, #1
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 858e 	bne.w	8008a96 <_strtod_l+0xb96>
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f7c:	b1cb      	cbz	r3, 8007fb2 <_strtod_l+0xb2>
 8007f7e:	4652      	mov	r2, sl
 8007f80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007f84:	ec43 2b10 	vmov	d0, r2, r3
 8007f88:	b01f      	add	sp, #124	@ 0x7c
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	2920      	cmp	r1, #32
 8007f90:	d1ce      	bne.n	8007f30 <_strtod_l+0x30>
 8007f92:	3201      	adds	r2, #1
 8007f94:	e7c1      	b.n	8007f1a <_strtod_l+0x1a>
 8007f96:	292d      	cmp	r1, #45	@ 0x2d
 8007f98:	d1ca      	bne.n	8007f30 <_strtod_l+0x30>
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f9e:	1c51      	adds	r1, r2, #1
 8007fa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007fa2:	7852      	ldrb	r2, [r2, #1]
 8007fa4:	2a00      	cmp	r2, #0
 8007fa6:	d1c5      	bne.n	8007f34 <_strtod_l+0x34>
 8007fa8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007faa:	9419      	str	r4, [sp, #100]	@ 0x64
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 8570 	bne.w	8008a92 <_strtod_l+0xb92>
 8007fb2:	4652      	mov	r2, sl
 8007fb4:	465b      	mov	r3, fp
 8007fb6:	e7e5      	b.n	8007f84 <_strtod_l+0x84>
 8007fb8:	2100      	movs	r1, #0
 8007fba:	e7ef      	b.n	8007f9c <_strtod_l+0x9c>
 8007fbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007fbe:	b13a      	cbz	r2, 8007fd0 <_strtod_l+0xd0>
 8007fc0:	2135      	movs	r1, #53	@ 0x35
 8007fc2:	a81c      	add	r0, sp, #112	@ 0x70
 8007fc4:	f003 fcde 	bl	800b984 <__copybits>
 8007fc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fca:	9805      	ldr	r0, [sp, #20]
 8007fcc:	f003 f8ac 	bl	800b128 <_Bfree>
 8007fd0:	3e01      	subs	r6, #1
 8007fd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007fd4:	2e04      	cmp	r6, #4
 8007fd6:	d806      	bhi.n	8007fe6 <_strtod_l+0xe6>
 8007fd8:	e8df f006 	tbb	[pc, r6]
 8007fdc:	201d0314 	.word	0x201d0314
 8007fe0:	14          	.byte	0x14
 8007fe1:	00          	.byte	0x00
 8007fe2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007fe6:	05e1      	lsls	r1, r4, #23
 8007fe8:	bf48      	it	mi
 8007fea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007fee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ff2:	0d1b      	lsrs	r3, r3, #20
 8007ff4:	051b      	lsls	r3, r3, #20
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1bb      	bne.n	8007f72 <_strtod_l+0x72>
 8007ffa:	f000 fed9 	bl	8008db0 <__errno>
 8007ffe:	2322      	movs	r3, #34	@ 0x22
 8008000:	6003      	str	r3, [r0, #0]
 8008002:	e7b6      	b.n	8007f72 <_strtod_l+0x72>
 8008004:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008008:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800800c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008010:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008014:	e7e7      	b.n	8007fe6 <_strtod_l+0xe6>
 8008016:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008194 <_strtod_l+0x294>
 800801a:	e7e4      	b.n	8007fe6 <_strtod_l+0xe6>
 800801c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008020:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008024:	e7df      	b.n	8007fe6 <_strtod_l+0xe6>
 8008026:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	9219      	str	r2, [sp, #100]	@ 0x64
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b30      	cmp	r3, #48	@ 0x30
 8008030:	d0f9      	beq.n	8008026 <_strtod_l+0x126>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d09d      	beq.n	8007f72 <_strtod_l+0x72>
 8008036:	2301      	movs	r3, #1
 8008038:	9309      	str	r3, [sp, #36]	@ 0x24
 800803a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800803c:	930c      	str	r3, [sp, #48]	@ 0x30
 800803e:	2300      	movs	r3, #0
 8008040:	9308      	str	r3, [sp, #32]
 8008042:	930a      	str	r3, [sp, #40]	@ 0x28
 8008044:	461f      	mov	r7, r3
 8008046:	220a      	movs	r2, #10
 8008048:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800804a:	7805      	ldrb	r5, [r0, #0]
 800804c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008050:	b2d9      	uxtb	r1, r3
 8008052:	2909      	cmp	r1, #9
 8008054:	d928      	bls.n	80080a8 <_strtod_l+0x1a8>
 8008056:	494e      	ldr	r1, [pc, #312]	@ (8008190 <_strtod_l+0x290>)
 8008058:	2201      	movs	r2, #1
 800805a:	f000 fe45 	bl	8008ce8 <strncmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	d032      	beq.n	80080c8 <_strtod_l+0x1c8>
 8008062:	2000      	movs	r0, #0
 8008064:	462a      	mov	r2, r5
 8008066:	4681      	mov	r9, r0
 8008068:	463d      	mov	r5, r7
 800806a:	4603      	mov	r3, r0
 800806c:	2a65      	cmp	r2, #101	@ 0x65
 800806e:	d001      	beq.n	8008074 <_strtod_l+0x174>
 8008070:	2a45      	cmp	r2, #69	@ 0x45
 8008072:	d114      	bne.n	800809e <_strtod_l+0x19e>
 8008074:	b91d      	cbnz	r5, 800807e <_strtod_l+0x17e>
 8008076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008078:	4302      	orrs	r2, r0
 800807a:	d095      	beq.n	8007fa8 <_strtod_l+0xa8>
 800807c:	2500      	movs	r5, #0
 800807e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008080:	1c62      	adds	r2, r4, #1
 8008082:	9219      	str	r2, [sp, #100]	@ 0x64
 8008084:	7862      	ldrb	r2, [r4, #1]
 8008086:	2a2b      	cmp	r2, #43	@ 0x2b
 8008088:	d077      	beq.n	800817a <_strtod_l+0x27a>
 800808a:	2a2d      	cmp	r2, #45	@ 0x2d
 800808c:	d07b      	beq.n	8008186 <_strtod_l+0x286>
 800808e:	f04f 0c00 	mov.w	ip, #0
 8008092:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008096:	2909      	cmp	r1, #9
 8008098:	f240 8082 	bls.w	80081a0 <_strtod_l+0x2a0>
 800809c:	9419      	str	r4, [sp, #100]	@ 0x64
 800809e:	f04f 0800 	mov.w	r8, #0
 80080a2:	e0a2      	b.n	80081ea <_strtod_l+0x2ea>
 80080a4:	2300      	movs	r3, #0
 80080a6:	e7c7      	b.n	8008038 <_strtod_l+0x138>
 80080a8:	2f08      	cmp	r7, #8
 80080aa:	bfd5      	itete	le
 80080ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80080ae:	9908      	ldrgt	r1, [sp, #32]
 80080b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80080b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80080b8:	f100 0001 	add.w	r0, r0, #1
 80080bc:	bfd4      	ite	le
 80080be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80080c0:	9308      	strgt	r3, [sp, #32]
 80080c2:	3701      	adds	r7, #1
 80080c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80080c6:	e7bf      	b.n	8008048 <_strtod_l+0x148>
 80080c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80080ce:	785a      	ldrb	r2, [r3, #1]
 80080d0:	b37f      	cbz	r7, 8008132 <_strtod_l+0x232>
 80080d2:	4681      	mov	r9, r0
 80080d4:	463d      	mov	r5, r7
 80080d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80080da:	2b09      	cmp	r3, #9
 80080dc:	d912      	bls.n	8008104 <_strtod_l+0x204>
 80080de:	2301      	movs	r3, #1
 80080e0:	e7c4      	b.n	800806c <_strtod_l+0x16c>
 80080e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80080e8:	785a      	ldrb	r2, [r3, #1]
 80080ea:	3001      	adds	r0, #1
 80080ec:	2a30      	cmp	r2, #48	@ 0x30
 80080ee:	d0f8      	beq.n	80080e2 <_strtod_l+0x1e2>
 80080f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	f200 84d3 	bhi.w	8008aa0 <_strtod_l+0xba0>
 80080fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80080fe:	4681      	mov	r9, r0
 8008100:	2000      	movs	r0, #0
 8008102:	4605      	mov	r5, r0
 8008104:	3a30      	subs	r2, #48	@ 0x30
 8008106:	f100 0301 	add.w	r3, r0, #1
 800810a:	d02a      	beq.n	8008162 <_strtod_l+0x262>
 800810c:	4499      	add	r9, r3
 800810e:	eb00 0c05 	add.w	ip, r0, r5
 8008112:	462b      	mov	r3, r5
 8008114:	210a      	movs	r1, #10
 8008116:	4563      	cmp	r3, ip
 8008118:	d10d      	bne.n	8008136 <_strtod_l+0x236>
 800811a:	1c69      	adds	r1, r5, #1
 800811c:	4401      	add	r1, r0
 800811e:	4428      	add	r0, r5
 8008120:	2808      	cmp	r0, #8
 8008122:	dc16      	bgt.n	8008152 <_strtod_l+0x252>
 8008124:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008126:	230a      	movs	r3, #10
 8008128:	fb03 2300 	mla	r3, r3, r0, r2
 800812c:	930a      	str	r3, [sp, #40]	@ 0x28
 800812e:	2300      	movs	r3, #0
 8008130:	e018      	b.n	8008164 <_strtod_l+0x264>
 8008132:	4638      	mov	r0, r7
 8008134:	e7da      	b.n	80080ec <_strtod_l+0x1ec>
 8008136:	2b08      	cmp	r3, #8
 8008138:	f103 0301 	add.w	r3, r3, #1
 800813c:	dc03      	bgt.n	8008146 <_strtod_l+0x246>
 800813e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008140:	434e      	muls	r6, r1
 8008142:	960a      	str	r6, [sp, #40]	@ 0x28
 8008144:	e7e7      	b.n	8008116 <_strtod_l+0x216>
 8008146:	2b10      	cmp	r3, #16
 8008148:	bfde      	ittt	le
 800814a:	9e08      	ldrle	r6, [sp, #32]
 800814c:	434e      	mulle	r6, r1
 800814e:	9608      	strle	r6, [sp, #32]
 8008150:	e7e1      	b.n	8008116 <_strtod_l+0x216>
 8008152:	280f      	cmp	r0, #15
 8008154:	dceb      	bgt.n	800812e <_strtod_l+0x22e>
 8008156:	9808      	ldr	r0, [sp, #32]
 8008158:	230a      	movs	r3, #10
 800815a:	fb03 2300 	mla	r3, r3, r0, r2
 800815e:	9308      	str	r3, [sp, #32]
 8008160:	e7e5      	b.n	800812e <_strtod_l+0x22e>
 8008162:	4629      	mov	r1, r5
 8008164:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008166:	1c50      	adds	r0, r2, #1
 8008168:	9019      	str	r0, [sp, #100]	@ 0x64
 800816a:	7852      	ldrb	r2, [r2, #1]
 800816c:	4618      	mov	r0, r3
 800816e:	460d      	mov	r5, r1
 8008170:	e7b1      	b.n	80080d6 <_strtod_l+0x1d6>
 8008172:	f04f 0900 	mov.w	r9, #0
 8008176:	2301      	movs	r3, #1
 8008178:	e77d      	b.n	8008076 <_strtod_l+0x176>
 800817a:	f04f 0c00 	mov.w	ip, #0
 800817e:	1ca2      	adds	r2, r4, #2
 8008180:	9219      	str	r2, [sp, #100]	@ 0x64
 8008182:	78a2      	ldrb	r2, [r4, #2]
 8008184:	e785      	b.n	8008092 <_strtod_l+0x192>
 8008186:	f04f 0c01 	mov.w	ip, #1
 800818a:	e7f8      	b.n	800817e <_strtod_l+0x27e>
 800818c:	0800c768 	.word	0x0800c768
 8008190:	0800c74f 	.word	0x0800c74f
 8008194:	7ff00000 	.word	0x7ff00000
 8008198:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800819a:	1c51      	adds	r1, r2, #1
 800819c:	9119      	str	r1, [sp, #100]	@ 0x64
 800819e:	7852      	ldrb	r2, [r2, #1]
 80081a0:	2a30      	cmp	r2, #48	@ 0x30
 80081a2:	d0f9      	beq.n	8008198 <_strtod_l+0x298>
 80081a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80081a8:	2908      	cmp	r1, #8
 80081aa:	f63f af78 	bhi.w	800809e <_strtod_l+0x19e>
 80081ae:	3a30      	subs	r2, #48	@ 0x30
 80081b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80081b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80081b6:	f04f 080a 	mov.w	r8, #10
 80081ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081bc:	1c56      	adds	r6, r2, #1
 80081be:	9619      	str	r6, [sp, #100]	@ 0x64
 80081c0:	7852      	ldrb	r2, [r2, #1]
 80081c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80081c6:	f1be 0f09 	cmp.w	lr, #9
 80081ca:	d939      	bls.n	8008240 <_strtod_l+0x340>
 80081cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80081ce:	1a76      	subs	r6, r6, r1
 80081d0:	2e08      	cmp	r6, #8
 80081d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80081d6:	dc03      	bgt.n	80081e0 <_strtod_l+0x2e0>
 80081d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081da:	4588      	cmp	r8, r1
 80081dc:	bfa8      	it	ge
 80081de:	4688      	movge	r8, r1
 80081e0:	f1bc 0f00 	cmp.w	ip, #0
 80081e4:	d001      	beq.n	80081ea <_strtod_l+0x2ea>
 80081e6:	f1c8 0800 	rsb	r8, r8, #0
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	d14e      	bne.n	800828c <_strtod_l+0x38c>
 80081ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081f0:	4308      	orrs	r0, r1
 80081f2:	f47f aebe 	bne.w	8007f72 <_strtod_l+0x72>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f47f aed6 	bne.w	8007fa8 <_strtod_l+0xa8>
 80081fc:	2a69      	cmp	r2, #105	@ 0x69
 80081fe:	d028      	beq.n	8008252 <_strtod_l+0x352>
 8008200:	dc25      	bgt.n	800824e <_strtod_l+0x34e>
 8008202:	2a49      	cmp	r2, #73	@ 0x49
 8008204:	d025      	beq.n	8008252 <_strtod_l+0x352>
 8008206:	2a4e      	cmp	r2, #78	@ 0x4e
 8008208:	f47f aece 	bne.w	8007fa8 <_strtod_l+0xa8>
 800820c:	499b      	ldr	r1, [pc, #620]	@ (800847c <_strtod_l+0x57c>)
 800820e:	a819      	add	r0, sp, #100	@ 0x64
 8008210:	f001 ff3a 	bl	800a088 <__match>
 8008214:	2800      	cmp	r0, #0
 8008216:	f43f aec7 	beq.w	8007fa8 <_strtod_l+0xa8>
 800821a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b28      	cmp	r3, #40	@ 0x28
 8008220:	d12e      	bne.n	8008280 <_strtod_l+0x380>
 8008222:	4997      	ldr	r1, [pc, #604]	@ (8008480 <_strtod_l+0x580>)
 8008224:	aa1c      	add	r2, sp, #112	@ 0x70
 8008226:	a819      	add	r0, sp, #100	@ 0x64
 8008228:	f001 ff42 	bl	800a0b0 <__hexnan>
 800822c:	2805      	cmp	r0, #5
 800822e:	d127      	bne.n	8008280 <_strtod_l+0x380>
 8008230:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008232:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008236:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800823a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800823e:	e698      	b.n	8007f72 <_strtod_l+0x72>
 8008240:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008242:	fb08 2101 	mla	r1, r8, r1, r2
 8008246:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800824a:	920e      	str	r2, [sp, #56]	@ 0x38
 800824c:	e7b5      	b.n	80081ba <_strtod_l+0x2ba>
 800824e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008250:	e7da      	b.n	8008208 <_strtod_l+0x308>
 8008252:	498c      	ldr	r1, [pc, #560]	@ (8008484 <_strtod_l+0x584>)
 8008254:	a819      	add	r0, sp, #100	@ 0x64
 8008256:	f001 ff17 	bl	800a088 <__match>
 800825a:	2800      	cmp	r0, #0
 800825c:	f43f aea4 	beq.w	8007fa8 <_strtod_l+0xa8>
 8008260:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008262:	4989      	ldr	r1, [pc, #548]	@ (8008488 <_strtod_l+0x588>)
 8008264:	3b01      	subs	r3, #1
 8008266:	a819      	add	r0, sp, #100	@ 0x64
 8008268:	9319      	str	r3, [sp, #100]	@ 0x64
 800826a:	f001 ff0d 	bl	800a088 <__match>
 800826e:	b910      	cbnz	r0, 8008276 <_strtod_l+0x376>
 8008270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008272:	3301      	adds	r3, #1
 8008274:	9319      	str	r3, [sp, #100]	@ 0x64
 8008276:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008498 <_strtod_l+0x598>
 800827a:	f04f 0a00 	mov.w	sl, #0
 800827e:	e678      	b.n	8007f72 <_strtod_l+0x72>
 8008280:	4882      	ldr	r0, [pc, #520]	@ (800848c <_strtod_l+0x58c>)
 8008282:	f000 fdd1 	bl	8008e28 <nan>
 8008286:	ec5b ab10 	vmov	sl, fp, d0
 800828a:	e672      	b.n	8007f72 <_strtod_l+0x72>
 800828c:	eba8 0309 	sub.w	r3, r8, r9
 8008290:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008292:	9309      	str	r3, [sp, #36]	@ 0x24
 8008294:	2f00      	cmp	r7, #0
 8008296:	bf08      	it	eq
 8008298:	462f      	moveq	r7, r5
 800829a:	2d10      	cmp	r5, #16
 800829c:	462c      	mov	r4, r5
 800829e:	bfa8      	it	ge
 80082a0:	2410      	movge	r4, #16
 80082a2:	f7f8 f957 	bl	8000554 <__aeabi_ui2d>
 80082a6:	2d09      	cmp	r5, #9
 80082a8:	4682      	mov	sl, r0
 80082aa:	468b      	mov	fp, r1
 80082ac:	dc13      	bgt.n	80082d6 <_strtod_l+0x3d6>
 80082ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f43f ae5e 	beq.w	8007f72 <_strtod_l+0x72>
 80082b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b8:	dd78      	ble.n	80083ac <_strtod_l+0x4ac>
 80082ba:	2b16      	cmp	r3, #22
 80082bc:	dc5f      	bgt.n	800837e <_strtod_l+0x47e>
 80082be:	4974      	ldr	r1, [pc, #464]	@ (8008490 <_strtod_l+0x590>)
 80082c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c8:	4652      	mov	r2, sl
 80082ca:	465b      	mov	r3, fp
 80082cc:	f7f8 f9bc 	bl	8000648 <__aeabi_dmul>
 80082d0:	4682      	mov	sl, r0
 80082d2:	468b      	mov	fp, r1
 80082d4:	e64d      	b.n	8007f72 <_strtod_l+0x72>
 80082d6:	4b6e      	ldr	r3, [pc, #440]	@ (8008490 <_strtod_l+0x590>)
 80082d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80082e0:	f7f8 f9b2 	bl	8000648 <__aeabi_dmul>
 80082e4:	4682      	mov	sl, r0
 80082e6:	9808      	ldr	r0, [sp, #32]
 80082e8:	468b      	mov	fp, r1
 80082ea:	f7f8 f933 	bl	8000554 <__aeabi_ui2d>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4650      	mov	r0, sl
 80082f4:	4659      	mov	r1, fp
 80082f6:	f7f7 fff1 	bl	80002dc <__adddf3>
 80082fa:	2d0f      	cmp	r5, #15
 80082fc:	4682      	mov	sl, r0
 80082fe:	468b      	mov	fp, r1
 8008300:	ddd5      	ble.n	80082ae <_strtod_l+0x3ae>
 8008302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008304:	1b2c      	subs	r4, r5, r4
 8008306:	441c      	add	r4, r3
 8008308:	2c00      	cmp	r4, #0
 800830a:	f340 8096 	ble.w	800843a <_strtod_l+0x53a>
 800830e:	f014 030f 	ands.w	r3, r4, #15
 8008312:	d00a      	beq.n	800832a <_strtod_l+0x42a>
 8008314:	495e      	ldr	r1, [pc, #376]	@ (8008490 <_strtod_l+0x590>)
 8008316:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800831a:	4652      	mov	r2, sl
 800831c:	465b      	mov	r3, fp
 800831e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008322:	f7f8 f991 	bl	8000648 <__aeabi_dmul>
 8008326:	4682      	mov	sl, r0
 8008328:	468b      	mov	fp, r1
 800832a:	f034 040f 	bics.w	r4, r4, #15
 800832e:	d073      	beq.n	8008418 <_strtod_l+0x518>
 8008330:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008334:	dd48      	ble.n	80083c8 <_strtod_l+0x4c8>
 8008336:	2400      	movs	r4, #0
 8008338:	46a0      	mov	r8, r4
 800833a:	940a      	str	r4, [sp, #40]	@ 0x28
 800833c:	46a1      	mov	r9, r4
 800833e:	9a05      	ldr	r2, [sp, #20]
 8008340:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008498 <_strtod_l+0x598>
 8008344:	2322      	movs	r3, #34	@ 0x22
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	f04f 0a00 	mov.w	sl, #0
 800834c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	f43f ae0f 	beq.w	8007f72 <_strtod_l+0x72>
 8008354:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008356:	9805      	ldr	r0, [sp, #20]
 8008358:	f002 fee6 	bl	800b128 <_Bfree>
 800835c:	9805      	ldr	r0, [sp, #20]
 800835e:	4649      	mov	r1, r9
 8008360:	f002 fee2 	bl	800b128 <_Bfree>
 8008364:	9805      	ldr	r0, [sp, #20]
 8008366:	4641      	mov	r1, r8
 8008368:	f002 fede 	bl	800b128 <_Bfree>
 800836c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800836e:	9805      	ldr	r0, [sp, #20]
 8008370:	f002 feda 	bl	800b128 <_Bfree>
 8008374:	9805      	ldr	r0, [sp, #20]
 8008376:	4621      	mov	r1, r4
 8008378:	f002 fed6 	bl	800b128 <_Bfree>
 800837c:	e5f9      	b.n	8007f72 <_strtod_l+0x72>
 800837e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008380:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008384:	4293      	cmp	r3, r2
 8008386:	dbbc      	blt.n	8008302 <_strtod_l+0x402>
 8008388:	4c41      	ldr	r4, [pc, #260]	@ (8008490 <_strtod_l+0x590>)
 800838a:	f1c5 050f 	rsb	r5, r5, #15
 800838e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800839a:	f7f8 f955 	bl	8000648 <__aeabi_dmul>
 800839e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a0:	1b5d      	subs	r5, r3, r5
 80083a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083aa:	e78f      	b.n	80082cc <_strtod_l+0x3cc>
 80083ac:	3316      	adds	r3, #22
 80083ae:	dba8      	blt.n	8008302 <_strtod_l+0x402>
 80083b0:	4b37      	ldr	r3, [pc, #220]	@ (8008490 <_strtod_l+0x590>)
 80083b2:	eba9 0808 	sub.w	r8, r9, r8
 80083b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80083ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80083be:	4650      	mov	r0, sl
 80083c0:	4659      	mov	r1, fp
 80083c2:	f7f8 fa6b 	bl	800089c <__aeabi_ddiv>
 80083c6:	e783      	b.n	80082d0 <_strtod_l+0x3d0>
 80083c8:	4b32      	ldr	r3, [pc, #200]	@ (8008494 <_strtod_l+0x594>)
 80083ca:	9308      	str	r3, [sp, #32]
 80083cc:	2300      	movs	r3, #0
 80083ce:	1124      	asrs	r4, r4, #4
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	461e      	mov	r6, r3
 80083d6:	2c01      	cmp	r4, #1
 80083d8:	dc21      	bgt.n	800841e <_strtod_l+0x51e>
 80083da:	b10b      	cbz	r3, 80083e0 <_strtod_l+0x4e0>
 80083dc:	4682      	mov	sl, r0
 80083de:	468b      	mov	fp, r1
 80083e0:	492c      	ldr	r1, [pc, #176]	@ (8008494 <_strtod_l+0x594>)
 80083e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80083e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80083ea:	4652      	mov	r2, sl
 80083ec:	465b      	mov	r3, fp
 80083ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f2:	f7f8 f929 	bl	8000648 <__aeabi_dmul>
 80083f6:	4b28      	ldr	r3, [pc, #160]	@ (8008498 <_strtod_l+0x598>)
 80083f8:	460a      	mov	r2, r1
 80083fa:	400b      	ands	r3, r1
 80083fc:	4927      	ldr	r1, [pc, #156]	@ (800849c <_strtod_l+0x59c>)
 80083fe:	428b      	cmp	r3, r1
 8008400:	4682      	mov	sl, r0
 8008402:	d898      	bhi.n	8008336 <_strtod_l+0x436>
 8008404:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008408:	428b      	cmp	r3, r1
 800840a:	bf86      	itte	hi
 800840c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80084a0 <_strtod_l+0x5a0>
 8008410:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008414:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008418:	2300      	movs	r3, #0
 800841a:	9308      	str	r3, [sp, #32]
 800841c:	e07a      	b.n	8008514 <_strtod_l+0x614>
 800841e:	07e2      	lsls	r2, r4, #31
 8008420:	d505      	bpl.n	800842e <_strtod_l+0x52e>
 8008422:	9b08      	ldr	r3, [sp, #32]
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f8 f90e 	bl	8000648 <__aeabi_dmul>
 800842c:	2301      	movs	r3, #1
 800842e:	9a08      	ldr	r2, [sp, #32]
 8008430:	3208      	adds	r2, #8
 8008432:	3601      	adds	r6, #1
 8008434:	1064      	asrs	r4, r4, #1
 8008436:	9208      	str	r2, [sp, #32]
 8008438:	e7cd      	b.n	80083d6 <_strtod_l+0x4d6>
 800843a:	d0ed      	beq.n	8008418 <_strtod_l+0x518>
 800843c:	4264      	negs	r4, r4
 800843e:	f014 020f 	ands.w	r2, r4, #15
 8008442:	d00a      	beq.n	800845a <_strtod_l+0x55a>
 8008444:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <_strtod_l+0x590>)
 8008446:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844a:	4650      	mov	r0, sl
 800844c:	4659      	mov	r1, fp
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f8 fa23 	bl	800089c <__aeabi_ddiv>
 8008456:	4682      	mov	sl, r0
 8008458:	468b      	mov	fp, r1
 800845a:	1124      	asrs	r4, r4, #4
 800845c:	d0dc      	beq.n	8008418 <_strtod_l+0x518>
 800845e:	2c1f      	cmp	r4, #31
 8008460:	dd20      	ble.n	80084a4 <_strtod_l+0x5a4>
 8008462:	2400      	movs	r4, #0
 8008464:	46a0      	mov	r8, r4
 8008466:	940a      	str	r4, [sp, #40]	@ 0x28
 8008468:	46a1      	mov	r9, r4
 800846a:	9a05      	ldr	r2, [sp, #20]
 800846c:	2322      	movs	r3, #34	@ 0x22
 800846e:	f04f 0a00 	mov.w	sl, #0
 8008472:	f04f 0b00 	mov.w	fp, #0
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e768      	b.n	800834c <_strtod_l+0x44c>
 800847a:	bf00      	nop
 800847c:	0800c725 	.word	0x0800c725
 8008480:	0800c754 	.word	0x0800c754
 8008484:	0800c71d 	.word	0x0800c71d
 8008488:	0800c8b4 	.word	0x0800c8b4
 800848c:	0800cb5b 	.word	0x0800cb5b
 8008490:	0800ca58 	.word	0x0800ca58
 8008494:	0800ca30 	.word	0x0800ca30
 8008498:	7ff00000 	.word	0x7ff00000
 800849c:	7ca00000 	.word	0x7ca00000
 80084a0:	7fefffff 	.word	0x7fefffff
 80084a4:	f014 0310 	ands.w	r3, r4, #16
 80084a8:	bf18      	it	ne
 80084aa:	236a      	movne	r3, #106	@ 0x6a
 80084ac:	4ea9      	ldr	r6, [pc, #676]	@ (8008754 <_strtod_l+0x854>)
 80084ae:	9308      	str	r3, [sp, #32]
 80084b0:	4650      	mov	r0, sl
 80084b2:	4659      	mov	r1, fp
 80084b4:	2300      	movs	r3, #0
 80084b6:	07e2      	lsls	r2, r4, #31
 80084b8:	d504      	bpl.n	80084c4 <_strtod_l+0x5c4>
 80084ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084be:	f7f8 f8c3 	bl	8000648 <__aeabi_dmul>
 80084c2:	2301      	movs	r3, #1
 80084c4:	1064      	asrs	r4, r4, #1
 80084c6:	f106 0608 	add.w	r6, r6, #8
 80084ca:	d1f4      	bne.n	80084b6 <_strtod_l+0x5b6>
 80084cc:	b10b      	cbz	r3, 80084d2 <_strtod_l+0x5d2>
 80084ce:	4682      	mov	sl, r0
 80084d0:	468b      	mov	fp, r1
 80084d2:	9b08      	ldr	r3, [sp, #32]
 80084d4:	b1b3      	cbz	r3, 8008504 <_strtod_l+0x604>
 80084d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80084da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80084de:	2b00      	cmp	r3, #0
 80084e0:	4659      	mov	r1, fp
 80084e2:	dd0f      	ble.n	8008504 <_strtod_l+0x604>
 80084e4:	2b1f      	cmp	r3, #31
 80084e6:	dd55      	ble.n	8008594 <_strtod_l+0x694>
 80084e8:	2b34      	cmp	r3, #52	@ 0x34
 80084ea:	bfde      	ittt	le
 80084ec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80084f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80084f4:	4093      	lslle	r3, r2
 80084f6:	f04f 0a00 	mov.w	sl, #0
 80084fa:	bfcc      	ite	gt
 80084fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008500:	ea03 0b01 	andle.w	fp, r3, r1
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4650      	mov	r0, sl
 800850a:	4659      	mov	r1, fp
 800850c:	f7f8 fb04 	bl	8000b18 <__aeabi_dcmpeq>
 8008510:	2800      	cmp	r0, #0
 8008512:	d1a6      	bne.n	8008462 <_strtod_l+0x562>
 8008514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800851a:	9805      	ldr	r0, [sp, #20]
 800851c:	462b      	mov	r3, r5
 800851e:	463a      	mov	r2, r7
 8008520:	f002 fe6a 	bl	800b1f8 <__s2b>
 8008524:	900a      	str	r0, [sp, #40]	@ 0x28
 8008526:	2800      	cmp	r0, #0
 8008528:	f43f af05 	beq.w	8008336 <_strtod_l+0x436>
 800852c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800852e:	2a00      	cmp	r2, #0
 8008530:	eba9 0308 	sub.w	r3, r9, r8
 8008534:	bfa8      	it	ge
 8008536:	2300      	movge	r3, #0
 8008538:	9312      	str	r3, [sp, #72]	@ 0x48
 800853a:	2400      	movs	r4, #0
 800853c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008540:	9316      	str	r3, [sp, #88]	@ 0x58
 8008542:	46a0      	mov	r8, r4
 8008544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008546:	9805      	ldr	r0, [sp, #20]
 8008548:	6859      	ldr	r1, [r3, #4]
 800854a:	f002 fdad 	bl	800b0a8 <_Balloc>
 800854e:	4681      	mov	r9, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	f43f aef4 	beq.w	800833e <_strtod_l+0x43e>
 8008556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	3202      	adds	r2, #2
 800855c:	f103 010c 	add.w	r1, r3, #12
 8008560:	0092      	lsls	r2, r2, #2
 8008562:	300c      	adds	r0, #12
 8008564:	f000 fc51 	bl	8008e0a <memcpy>
 8008568:	ec4b ab10 	vmov	d0, sl, fp
 800856c:	9805      	ldr	r0, [sp, #20]
 800856e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008570:	a91b      	add	r1, sp, #108	@ 0x6c
 8008572:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008576:	f003 f97b 	bl	800b870 <__d2b>
 800857a:	901a      	str	r0, [sp, #104]	@ 0x68
 800857c:	2800      	cmp	r0, #0
 800857e:	f43f aede 	beq.w	800833e <_strtod_l+0x43e>
 8008582:	9805      	ldr	r0, [sp, #20]
 8008584:	2101      	movs	r1, #1
 8008586:	f002 fecd 	bl	800b324 <__i2b>
 800858a:	4680      	mov	r8, r0
 800858c:	b948      	cbnz	r0, 80085a2 <_strtod_l+0x6a2>
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	e6d4      	b.n	800833e <_strtod_l+0x43e>
 8008594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	ea03 0a0a 	and.w	sl, r3, sl
 80085a0:	e7b0      	b.n	8008504 <_strtod_l+0x604>
 80085a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80085a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	bfab      	itete	ge
 80085aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80085ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80085ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80085b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80085b2:	bfac      	ite	ge
 80085b4:	18ef      	addge	r7, r5, r3
 80085b6:	1b5e      	sublt	r6, r3, r5
 80085b8:	9b08      	ldr	r3, [sp, #32]
 80085ba:	1aed      	subs	r5, r5, r3
 80085bc:	4415      	add	r5, r2
 80085be:	4b66      	ldr	r3, [pc, #408]	@ (8008758 <_strtod_l+0x858>)
 80085c0:	3d01      	subs	r5, #1
 80085c2:	429d      	cmp	r5, r3
 80085c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80085c8:	da50      	bge.n	800866c <_strtod_l+0x76c>
 80085ca:	1b5b      	subs	r3, r3, r5
 80085cc:	2b1f      	cmp	r3, #31
 80085ce:	eba2 0203 	sub.w	r2, r2, r3
 80085d2:	f04f 0101 	mov.w	r1, #1
 80085d6:	dc3d      	bgt.n	8008654 <_strtod_l+0x754>
 80085d8:	fa01 f303 	lsl.w	r3, r1, r3
 80085dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085de:	2300      	movs	r3, #0
 80085e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80085e2:	18bd      	adds	r5, r7, r2
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	42af      	cmp	r7, r5
 80085e8:	4416      	add	r6, r2
 80085ea:	441e      	add	r6, r3
 80085ec:	463b      	mov	r3, r7
 80085ee:	bfa8      	it	ge
 80085f0:	462b      	movge	r3, r5
 80085f2:	42b3      	cmp	r3, r6
 80085f4:	bfa8      	it	ge
 80085f6:	4633      	movge	r3, r6
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfc2      	ittt	gt
 80085fc:	1aed      	subgt	r5, r5, r3
 80085fe:	1af6      	subgt	r6, r6, r3
 8008600:	1aff      	subgt	r7, r7, r3
 8008602:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd16      	ble.n	8008636 <_strtod_l+0x736>
 8008608:	4641      	mov	r1, r8
 800860a:	9805      	ldr	r0, [sp, #20]
 800860c:	461a      	mov	r2, r3
 800860e:	f002 ff49 	bl	800b4a4 <__pow5mult>
 8008612:	4680      	mov	r8, r0
 8008614:	2800      	cmp	r0, #0
 8008616:	d0ba      	beq.n	800858e <_strtod_l+0x68e>
 8008618:	4601      	mov	r1, r0
 800861a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800861c:	9805      	ldr	r0, [sp, #20]
 800861e:	f002 fe97 	bl	800b350 <__multiply>
 8008622:	900e      	str	r0, [sp, #56]	@ 0x38
 8008624:	2800      	cmp	r0, #0
 8008626:	f43f ae8a 	beq.w	800833e <_strtod_l+0x43e>
 800862a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800862c:	9805      	ldr	r0, [sp, #20]
 800862e:	f002 fd7b 	bl	800b128 <_Bfree>
 8008632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008634:	931a      	str	r3, [sp, #104]	@ 0x68
 8008636:	2d00      	cmp	r5, #0
 8008638:	dc1d      	bgt.n	8008676 <_strtod_l+0x776>
 800863a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	dd23      	ble.n	8008688 <_strtod_l+0x788>
 8008640:	4649      	mov	r1, r9
 8008642:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008644:	9805      	ldr	r0, [sp, #20]
 8008646:	f002 ff2d 	bl	800b4a4 <__pow5mult>
 800864a:	4681      	mov	r9, r0
 800864c:	b9e0      	cbnz	r0, 8008688 <_strtod_l+0x788>
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	e674      	b.n	800833e <_strtod_l+0x43e>
 8008654:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008658:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800865c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008660:	35e2      	adds	r5, #226	@ 0xe2
 8008662:	fa01 f305 	lsl.w	r3, r1, r5
 8008666:	9310      	str	r3, [sp, #64]	@ 0x40
 8008668:	9113      	str	r1, [sp, #76]	@ 0x4c
 800866a:	e7ba      	b.n	80085e2 <_strtod_l+0x6e2>
 800866c:	2300      	movs	r3, #0
 800866e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008670:	2301      	movs	r3, #1
 8008672:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008674:	e7b5      	b.n	80085e2 <_strtod_l+0x6e2>
 8008676:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008678:	9805      	ldr	r0, [sp, #20]
 800867a:	462a      	mov	r2, r5
 800867c:	f002 ff6c 	bl	800b558 <__lshift>
 8008680:	901a      	str	r0, [sp, #104]	@ 0x68
 8008682:	2800      	cmp	r0, #0
 8008684:	d1d9      	bne.n	800863a <_strtod_l+0x73a>
 8008686:	e65a      	b.n	800833e <_strtod_l+0x43e>
 8008688:	2e00      	cmp	r6, #0
 800868a:	dd07      	ble.n	800869c <_strtod_l+0x79c>
 800868c:	4649      	mov	r1, r9
 800868e:	9805      	ldr	r0, [sp, #20]
 8008690:	4632      	mov	r2, r6
 8008692:	f002 ff61 	bl	800b558 <__lshift>
 8008696:	4681      	mov	r9, r0
 8008698:	2800      	cmp	r0, #0
 800869a:	d0d8      	beq.n	800864e <_strtod_l+0x74e>
 800869c:	2f00      	cmp	r7, #0
 800869e:	dd08      	ble.n	80086b2 <_strtod_l+0x7b2>
 80086a0:	4641      	mov	r1, r8
 80086a2:	9805      	ldr	r0, [sp, #20]
 80086a4:	463a      	mov	r2, r7
 80086a6:	f002 ff57 	bl	800b558 <__lshift>
 80086aa:	4680      	mov	r8, r0
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f43f ae46 	beq.w	800833e <_strtod_l+0x43e>
 80086b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086b4:	9805      	ldr	r0, [sp, #20]
 80086b6:	464a      	mov	r2, r9
 80086b8:	f002 ffd6 	bl	800b668 <__mdiff>
 80086bc:	4604      	mov	r4, r0
 80086be:	2800      	cmp	r0, #0
 80086c0:	f43f ae3d 	beq.w	800833e <_strtod_l+0x43e>
 80086c4:	68c3      	ldr	r3, [r0, #12]
 80086c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086c8:	2300      	movs	r3, #0
 80086ca:	60c3      	str	r3, [r0, #12]
 80086cc:	4641      	mov	r1, r8
 80086ce:	f002 ffaf 	bl	800b630 <__mcmp>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	da46      	bge.n	8008764 <_strtod_l+0x864>
 80086d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086d8:	ea53 030a 	orrs.w	r3, r3, sl
 80086dc:	d16c      	bne.n	80087b8 <_strtod_l+0x8b8>
 80086de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d168      	bne.n	80087b8 <_strtod_l+0x8b8>
 80086e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086ea:	0d1b      	lsrs	r3, r3, #20
 80086ec:	051b      	lsls	r3, r3, #20
 80086ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086f2:	d961      	bls.n	80087b8 <_strtod_l+0x8b8>
 80086f4:	6963      	ldr	r3, [r4, #20]
 80086f6:	b913      	cbnz	r3, 80086fe <_strtod_l+0x7fe>
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	dd5c      	ble.n	80087b8 <_strtod_l+0x8b8>
 80086fe:	4621      	mov	r1, r4
 8008700:	2201      	movs	r2, #1
 8008702:	9805      	ldr	r0, [sp, #20]
 8008704:	f002 ff28 	bl	800b558 <__lshift>
 8008708:	4641      	mov	r1, r8
 800870a:	4604      	mov	r4, r0
 800870c:	f002 ff90 	bl	800b630 <__mcmp>
 8008710:	2800      	cmp	r0, #0
 8008712:	dd51      	ble.n	80087b8 <_strtod_l+0x8b8>
 8008714:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008718:	9a08      	ldr	r2, [sp, #32]
 800871a:	0d1b      	lsrs	r3, r3, #20
 800871c:	051b      	lsls	r3, r3, #20
 800871e:	2a00      	cmp	r2, #0
 8008720:	d06b      	beq.n	80087fa <_strtod_l+0x8fa>
 8008722:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008726:	d868      	bhi.n	80087fa <_strtod_l+0x8fa>
 8008728:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800872c:	f67f ae9d 	bls.w	800846a <_strtod_l+0x56a>
 8008730:	4b0a      	ldr	r3, [pc, #40]	@ (800875c <_strtod_l+0x85c>)
 8008732:	4650      	mov	r0, sl
 8008734:	4659      	mov	r1, fp
 8008736:	2200      	movs	r2, #0
 8008738:	f7f7 ff86 	bl	8000648 <__aeabi_dmul>
 800873c:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <_strtod_l+0x860>)
 800873e:	400b      	ands	r3, r1
 8008740:	4682      	mov	sl, r0
 8008742:	468b      	mov	fp, r1
 8008744:	2b00      	cmp	r3, #0
 8008746:	f47f ae05 	bne.w	8008354 <_strtod_l+0x454>
 800874a:	9a05      	ldr	r2, [sp, #20]
 800874c:	2322      	movs	r3, #34	@ 0x22
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	e600      	b.n	8008354 <_strtod_l+0x454>
 8008752:	bf00      	nop
 8008754:	0800c780 	.word	0x0800c780
 8008758:	fffffc02 	.word	0xfffffc02
 800875c:	39500000 	.word	0x39500000
 8008760:	7ff00000 	.word	0x7ff00000
 8008764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008768:	d165      	bne.n	8008836 <_strtod_l+0x936>
 800876a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800876c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008770:	b35a      	cbz	r2, 80087ca <_strtod_l+0x8ca>
 8008772:	4a9f      	ldr	r2, [pc, #636]	@ (80089f0 <_strtod_l+0xaf0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d12b      	bne.n	80087d0 <_strtod_l+0x8d0>
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	4651      	mov	r1, sl
 800877c:	b303      	cbz	r3, 80087c0 <_strtod_l+0x8c0>
 800877e:	4b9d      	ldr	r3, [pc, #628]	@ (80089f4 <_strtod_l+0xaf4>)
 8008780:	465a      	mov	r2, fp
 8008782:	4013      	ands	r3, r2
 8008784:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800878c:	d81b      	bhi.n	80087c6 <_strtod_l+0x8c6>
 800878e:	0d1b      	lsrs	r3, r3, #20
 8008790:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	4299      	cmp	r1, r3
 800879a:	d119      	bne.n	80087d0 <_strtod_l+0x8d0>
 800879c:	4b96      	ldr	r3, [pc, #600]	@ (80089f8 <_strtod_l+0xaf8>)
 800879e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d102      	bne.n	80087aa <_strtod_l+0x8aa>
 80087a4:	3101      	adds	r1, #1
 80087a6:	f43f adca 	beq.w	800833e <_strtod_l+0x43e>
 80087aa:	4b92      	ldr	r3, [pc, #584]	@ (80089f4 <_strtod_l+0xaf4>)
 80087ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ae:	401a      	ands	r2, r3
 80087b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80087b4:	f04f 0a00 	mov.w	sl, #0
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1b8      	bne.n	8008730 <_strtod_l+0x830>
 80087be:	e5c9      	b.n	8008354 <_strtod_l+0x454>
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087c4:	e7e8      	b.n	8008798 <_strtod_l+0x898>
 80087c6:	4613      	mov	r3, r2
 80087c8:	e7e6      	b.n	8008798 <_strtod_l+0x898>
 80087ca:	ea53 030a 	orrs.w	r3, r3, sl
 80087ce:	d0a1      	beq.n	8008714 <_strtod_l+0x814>
 80087d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087d2:	b1db      	cbz	r3, 800880c <_strtod_l+0x90c>
 80087d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087d6:	4213      	tst	r3, r2
 80087d8:	d0ee      	beq.n	80087b8 <_strtod_l+0x8b8>
 80087da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087dc:	9a08      	ldr	r2, [sp, #32]
 80087de:	4650      	mov	r0, sl
 80087e0:	4659      	mov	r1, fp
 80087e2:	b1bb      	cbz	r3, 8008814 <_strtod_l+0x914>
 80087e4:	f7ff fb6c 	bl	8007ec0 <sulp>
 80087e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ec:	ec53 2b10 	vmov	r2, r3, d0
 80087f0:	f7f7 fd74 	bl	80002dc <__adddf3>
 80087f4:	4682      	mov	sl, r0
 80087f6:	468b      	mov	fp, r1
 80087f8:	e7de      	b.n	80087b8 <_strtod_l+0x8b8>
 80087fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80087fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008802:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008806:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800880a:	e7d5      	b.n	80087b8 <_strtod_l+0x8b8>
 800880c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800880e:	ea13 0f0a 	tst.w	r3, sl
 8008812:	e7e1      	b.n	80087d8 <_strtod_l+0x8d8>
 8008814:	f7ff fb54 	bl	8007ec0 <sulp>
 8008818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800881c:	ec53 2b10 	vmov	r2, r3, d0
 8008820:	f7f7 fd5a 	bl	80002d8 <__aeabi_dsub>
 8008824:	2200      	movs	r2, #0
 8008826:	2300      	movs	r3, #0
 8008828:	4682      	mov	sl, r0
 800882a:	468b      	mov	fp, r1
 800882c:	f7f8 f974 	bl	8000b18 <__aeabi_dcmpeq>
 8008830:	2800      	cmp	r0, #0
 8008832:	d0c1      	beq.n	80087b8 <_strtod_l+0x8b8>
 8008834:	e619      	b.n	800846a <_strtod_l+0x56a>
 8008836:	4641      	mov	r1, r8
 8008838:	4620      	mov	r0, r4
 800883a:	f003 f871 	bl	800b920 <__ratio>
 800883e:	ec57 6b10 	vmov	r6, r7, d0
 8008842:	2200      	movs	r2, #0
 8008844:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f8 f978 	bl	8000b40 <__aeabi_dcmple>
 8008850:	2800      	cmp	r0, #0
 8008852:	d06f      	beq.n	8008934 <_strtod_l+0xa34>
 8008854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d17a      	bne.n	8008950 <_strtod_l+0xa50>
 800885a:	f1ba 0f00 	cmp.w	sl, #0
 800885e:	d158      	bne.n	8008912 <_strtod_l+0xa12>
 8008860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008866:	2b00      	cmp	r3, #0
 8008868:	d15a      	bne.n	8008920 <_strtod_l+0xa20>
 800886a:	4b64      	ldr	r3, [pc, #400]	@ (80089fc <_strtod_l+0xafc>)
 800886c:	2200      	movs	r2, #0
 800886e:	4630      	mov	r0, r6
 8008870:	4639      	mov	r1, r7
 8008872:	f7f8 f95b 	bl	8000b2c <__aeabi_dcmplt>
 8008876:	2800      	cmp	r0, #0
 8008878:	d159      	bne.n	800892e <_strtod_l+0xa2e>
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	4b60      	ldr	r3, [pc, #384]	@ (8008a00 <_strtod_l+0xb00>)
 8008880:	2200      	movs	r2, #0
 8008882:	f7f7 fee1 	bl	8000648 <__aeabi_dmul>
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800888e:	9606      	str	r6, [sp, #24]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008896:	4d57      	ldr	r5, [pc, #348]	@ (80089f4 <_strtod_l+0xaf4>)
 8008898:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800889c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889e:	401d      	ands	r5, r3
 80088a0:	4b58      	ldr	r3, [pc, #352]	@ (8008a04 <_strtod_l+0xb04>)
 80088a2:	429d      	cmp	r5, r3
 80088a4:	f040 80b2 	bne.w	8008a0c <_strtod_l+0xb0c>
 80088a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80088ae:	ec4b ab10 	vmov	d0, sl, fp
 80088b2:	f002 ff6d 	bl	800b790 <__ulp>
 80088b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088ba:	ec51 0b10 	vmov	r0, r1, d0
 80088be:	f7f7 fec3 	bl	8000648 <__aeabi_dmul>
 80088c2:	4652      	mov	r2, sl
 80088c4:	465b      	mov	r3, fp
 80088c6:	f7f7 fd09 	bl	80002dc <__adddf3>
 80088ca:	460b      	mov	r3, r1
 80088cc:	4949      	ldr	r1, [pc, #292]	@ (80089f4 <_strtod_l+0xaf4>)
 80088ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008a08 <_strtod_l+0xb08>)
 80088d0:	4019      	ands	r1, r3
 80088d2:	4291      	cmp	r1, r2
 80088d4:	4682      	mov	sl, r0
 80088d6:	d942      	bls.n	800895e <_strtod_l+0xa5e>
 80088d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088da:	4b47      	ldr	r3, [pc, #284]	@ (80089f8 <_strtod_l+0xaf8>)
 80088dc:	429a      	cmp	r2, r3
 80088de:	d103      	bne.n	80088e8 <_strtod_l+0x9e8>
 80088e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088e2:	3301      	adds	r3, #1
 80088e4:	f43f ad2b 	beq.w	800833e <_strtod_l+0x43e>
 80088e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80089f8 <_strtod_l+0xaf8>
 80088ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80088f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088f2:	9805      	ldr	r0, [sp, #20]
 80088f4:	f002 fc18 	bl	800b128 <_Bfree>
 80088f8:	9805      	ldr	r0, [sp, #20]
 80088fa:	4649      	mov	r1, r9
 80088fc:	f002 fc14 	bl	800b128 <_Bfree>
 8008900:	9805      	ldr	r0, [sp, #20]
 8008902:	4641      	mov	r1, r8
 8008904:	f002 fc10 	bl	800b128 <_Bfree>
 8008908:	9805      	ldr	r0, [sp, #20]
 800890a:	4621      	mov	r1, r4
 800890c:	f002 fc0c 	bl	800b128 <_Bfree>
 8008910:	e618      	b.n	8008544 <_strtod_l+0x644>
 8008912:	f1ba 0f01 	cmp.w	sl, #1
 8008916:	d103      	bne.n	8008920 <_strtod_l+0xa20>
 8008918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	f43f ada5 	beq.w	800846a <_strtod_l+0x56a>
 8008920:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80089d0 <_strtod_l+0xad0>
 8008924:	4f35      	ldr	r7, [pc, #212]	@ (80089fc <_strtod_l+0xafc>)
 8008926:	ed8d 7b06 	vstr	d7, [sp, #24]
 800892a:	2600      	movs	r6, #0
 800892c:	e7b1      	b.n	8008892 <_strtod_l+0x992>
 800892e:	4f34      	ldr	r7, [pc, #208]	@ (8008a00 <_strtod_l+0xb00>)
 8008930:	2600      	movs	r6, #0
 8008932:	e7aa      	b.n	800888a <_strtod_l+0x98a>
 8008934:	4b32      	ldr	r3, [pc, #200]	@ (8008a00 <_strtod_l+0xb00>)
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	2200      	movs	r2, #0
 800893c:	f7f7 fe84 	bl	8000648 <__aeabi_dmul>
 8008940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d09f      	beq.n	800888a <_strtod_l+0x98a>
 800894a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800894e:	e7a0      	b.n	8008892 <_strtod_l+0x992>
 8008950:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80089d8 <_strtod_l+0xad8>
 8008954:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008958:	ec57 6b17 	vmov	r6, r7, d7
 800895c:	e799      	b.n	8008892 <_strtod_l+0x992>
 800895e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008962:	9b08      	ldr	r3, [sp, #32]
 8008964:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1c1      	bne.n	80088f0 <_strtod_l+0x9f0>
 800896c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008970:	0d1b      	lsrs	r3, r3, #20
 8008972:	051b      	lsls	r3, r3, #20
 8008974:	429d      	cmp	r5, r3
 8008976:	d1bb      	bne.n	80088f0 <_strtod_l+0x9f0>
 8008978:	4630      	mov	r0, r6
 800897a:	4639      	mov	r1, r7
 800897c:	f7f8 f9c4 	bl	8000d08 <__aeabi_d2lz>
 8008980:	f7f7 fe34 	bl	80005ec <__aeabi_l2d>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f7 fca4 	bl	80002d8 <__aeabi_dsub>
 8008990:	460b      	mov	r3, r1
 8008992:	4602      	mov	r2, r0
 8008994:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008998:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800899c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800899e:	ea46 060a 	orr.w	r6, r6, sl
 80089a2:	431e      	orrs	r6, r3
 80089a4:	d06f      	beq.n	8008a86 <_strtod_l+0xb86>
 80089a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80089e0 <_strtod_l+0xae0>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f7f8 f8be 	bl	8000b2c <__aeabi_dcmplt>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f47f accf 	bne.w	8008354 <_strtod_l+0x454>
 80089b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80089e8 <_strtod_l+0xae8>)
 80089b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c0:	f7f8 f8d2 	bl	8000b68 <__aeabi_dcmpgt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d093      	beq.n	80088f0 <_strtod_l+0x9f0>
 80089c8:	e4c4      	b.n	8008354 <_strtod_l+0x454>
 80089ca:	bf00      	nop
 80089cc:	f3af 8000 	nop.w
 80089d0:	00000000 	.word	0x00000000
 80089d4:	bff00000 	.word	0xbff00000
 80089d8:	00000000 	.word	0x00000000
 80089dc:	3ff00000 	.word	0x3ff00000
 80089e0:	94a03595 	.word	0x94a03595
 80089e4:	3fdfffff 	.word	0x3fdfffff
 80089e8:	35afe535 	.word	0x35afe535
 80089ec:	3fe00000 	.word	0x3fe00000
 80089f0:	000fffff 	.word	0x000fffff
 80089f4:	7ff00000 	.word	0x7ff00000
 80089f8:	7fefffff 	.word	0x7fefffff
 80089fc:	3ff00000 	.word	0x3ff00000
 8008a00:	3fe00000 	.word	0x3fe00000
 8008a04:	7fe00000 	.word	0x7fe00000
 8008a08:	7c9fffff 	.word	0x7c9fffff
 8008a0c:	9b08      	ldr	r3, [sp, #32]
 8008a0e:	b323      	cbz	r3, 8008a5a <_strtod_l+0xb5a>
 8008a10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008a14:	d821      	bhi.n	8008a5a <_strtod_l+0xb5a>
 8008a16:	a328      	add	r3, pc, #160	@ (adr r3, 8008ab8 <_strtod_l+0xbb8>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f8 f88e 	bl	8000b40 <__aeabi_dcmple>
 8008a24:	b1a0      	cbz	r0, 8008a50 <_strtod_l+0xb50>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7f8 f8e5 	bl	8000bf8 <__aeabi_d2uiz>
 8008a2e:	2801      	cmp	r0, #1
 8008a30:	bf38      	it	cc
 8008a32:	2001      	movcc	r0, #1
 8008a34:	f7f7 fd8e 	bl	8000554 <__aeabi_ui2d>
 8008a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	b9fb      	cbnz	r3, 8008a80 <_strtod_l+0xb80>
 8008a40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a44:	9014      	str	r0, [sp, #80]	@ 0x50
 8008a46:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008a4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008a56:	1b5b      	subs	r3, r3, r5
 8008a58:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008a62:	f002 fe95 	bl	800b790 <__ulp>
 8008a66:	4650      	mov	r0, sl
 8008a68:	ec53 2b10 	vmov	r2, r3, d0
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	f7f7 fdeb 	bl	8000648 <__aeabi_dmul>
 8008a72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a76:	f7f7 fc31 	bl	80002dc <__adddf3>
 8008a7a:	4682      	mov	sl, r0
 8008a7c:	468b      	mov	fp, r1
 8008a7e:	e770      	b.n	8008962 <_strtod_l+0xa62>
 8008a80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a84:	e7e0      	b.n	8008a48 <_strtod_l+0xb48>
 8008a86:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ac0 <_strtod_l+0xbc0>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f8 f84e 	bl	8000b2c <__aeabi_dcmplt>
 8008a90:	e798      	b.n	80089c4 <_strtod_l+0xac4>
 8008a92:	2300      	movs	r3, #0
 8008a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	f7ff ba6d 	b.w	8007f7a <_strtod_l+0x7a>
 8008aa0:	2a65      	cmp	r2, #101	@ 0x65
 8008aa2:	f43f ab66 	beq.w	8008172 <_strtod_l+0x272>
 8008aa6:	2a45      	cmp	r2, #69	@ 0x45
 8008aa8:	f43f ab63 	beq.w	8008172 <_strtod_l+0x272>
 8008aac:	2301      	movs	r3, #1
 8008aae:	f7ff bb9e 	b.w	80081ee <_strtod_l+0x2ee>
 8008ab2:	bf00      	nop
 8008ab4:	f3af 8000 	nop.w
 8008ab8:	ffc00000 	.word	0xffc00000
 8008abc:	41dfffff 	.word	0x41dfffff
 8008ac0:	94a03595 	.word	0x94a03595
 8008ac4:	3fcfffff 	.word	0x3fcfffff

08008ac8 <_strtod_r>:
 8008ac8:	4b01      	ldr	r3, [pc, #4]	@ (8008ad0 <_strtod_r+0x8>)
 8008aca:	f7ff ba19 	b.w	8007f00 <_strtod_l>
 8008ace:	bf00      	nop
 8008ad0:	20000030 	.word	0x20000030

08008ad4 <_strtol_l.constprop.0>:
 8008ad4:	2b24      	cmp	r3, #36	@ 0x24
 8008ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ada:	4686      	mov	lr, r0
 8008adc:	4690      	mov	r8, r2
 8008ade:	d801      	bhi.n	8008ae4 <_strtol_l.constprop.0+0x10>
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d106      	bne.n	8008af2 <_strtol_l.constprop.0+0x1e>
 8008ae4:	f000 f964 	bl	8008db0 <__errno>
 8008ae8:	2316      	movs	r3, #22
 8008aea:	6003      	str	r3, [r0, #0]
 8008aec:	2000      	movs	r0, #0
 8008aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af2:	4834      	ldr	r0, [pc, #208]	@ (8008bc4 <_strtol_l.constprop.0+0xf0>)
 8008af4:	460d      	mov	r5, r1
 8008af6:	462a      	mov	r2, r5
 8008af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008afc:	5d06      	ldrb	r6, [r0, r4]
 8008afe:	f016 0608 	ands.w	r6, r6, #8
 8008b02:	d1f8      	bne.n	8008af6 <_strtol_l.constprop.0+0x22>
 8008b04:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b06:	d12d      	bne.n	8008b64 <_strtol_l.constprop.0+0x90>
 8008b08:	782c      	ldrb	r4, [r5, #0]
 8008b0a:	2601      	movs	r6, #1
 8008b0c:	1c95      	adds	r5, r2, #2
 8008b0e:	f033 0210 	bics.w	r2, r3, #16
 8008b12:	d109      	bne.n	8008b28 <_strtol_l.constprop.0+0x54>
 8008b14:	2c30      	cmp	r4, #48	@ 0x30
 8008b16:	d12a      	bne.n	8008b6e <_strtol_l.constprop.0+0x9a>
 8008b18:	782a      	ldrb	r2, [r5, #0]
 8008b1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b1e:	2a58      	cmp	r2, #88	@ 0x58
 8008b20:	d125      	bne.n	8008b6e <_strtol_l.constprop.0+0x9a>
 8008b22:	786c      	ldrb	r4, [r5, #1]
 8008b24:	2310      	movs	r3, #16
 8008b26:	3502      	adds	r5, #2
 8008b28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008b2c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008b30:	2200      	movs	r2, #0
 8008b32:	fbbc f9f3 	udiv	r9, ip, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008b40:	2f09      	cmp	r7, #9
 8008b42:	d81b      	bhi.n	8008b7c <_strtol_l.constprop.0+0xa8>
 8008b44:	463c      	mov	r4, r7
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	dd27      	ble.n	8008b9a <_strtol_l.constprop.0+0xc6>
 8008b4a:	1c57      	adds	r7, r2, #1
 8008b4c:	d007      	beq.n	8008b5e <_strtol_l.constprop.0+0x8a>
 8008b4e:	4581      	cmp	r9, r0
 8008b50:	d320      	bcc.n	8008b94 <_strtol_l.constprop.0+0xc0>
 8008b52:	d101      	bne.n	8008b58 <_strtol_l.constprop.0+0x84>
 8008b54:	45a2      	cmp	sl, r4
 8008b56:	db1d      	blt.n	8008b94 <_strtol_l.constprop.0+0xc0>
 8008b58:	fb00 4003 	mla	r0, r0, r3, r4
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b62:	e7eb      	b.n	8008b3c <_strtol_l.constprop.0+0x68>
 8008b64:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b66:	bf04      	itt	eq
 8008b68:	782c      	ldrbeq	r4, [r5, #0]
 8008b6a:	1c95      	addeq	r5, r2, #2
 8008b6c:	e7cf      	b.n	8008b0e <_strtol_l.constprop.0+0x3a>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1da      	bne.n	8008b28 <_strtol_l.constprop.0+0x54>
 8008b72:	2c30      	cmp	r4, #48	@ 0x30
 8008b74:	bf0c      	ite	eq
 8008b76:	2308      	moveq	r3, #8
 8008b78:	230a      	movne	r3, #10
 8008b7a:	e7d5      	b.n	8008b28 <_strtol_l.constprop.0+0x54>
 8008b7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b80:	2f19      	cmp	r7, #25
 8008b82:	d801      	bhi.n	8008b88 <_strtol_l.constprop.0+0xb4>
 8008b84:	3c37      	subs	r4, #55	@ 0x37
 8008b86:	e7de      	b.n	8008b46 <_strtol_l.constprop.0+0x72>
 8008b88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008b8c:	2f19      	cmp	r7, #25
 8008b8e:	d804      	bhi.n	8008b9a <_strtol_l.constprop.0+0xc6>
 8008b90:	3c57      	subs	r4, #87	@ 0x57
 8008b92:	e7d8      	b.n	8008b46 <_strtol_l.constprop.0+0x72>
 8008b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b98:	e7e1      	b.n	8008b5e <_strtol_l.constprop.0+0x8a>
 8008b9a:	1c53      	adds	r3, r2, #1
 8008b9c:	d108      	bne.n	8008bb0 <_strtol_l.constprop.0+0xdc>
 8008b9e:	2322      	movs	r3, #34	@ 0x22
 8008ba0:	f8ce 3000 	str.w	r3, [lr]
 8008ba4:	4660      	mov	r0, ip
 8008ba6:	f1b8 0f00 	cmp.w	r8, #0
 8008baa:	d0a0      	beq.n	8008aee <_strtol_l.constprop.0+0x1a>
 8008bac:	1e69      	subs	r1, r5, #1
 8008bae:	e006      	b.n	8008bbe <_strtol_l.constprop.0+0xea>
 8008bb0:	b106      	cbz	r6, 8008bb4 <_strtol_l.constprop.0+0xe0>
 8008bb2:	4240      	negs	r0, r0
 8008bb4:	f1b8 0f00 	cmp.w	r8, #0
 8008bb8:	d099      	beq.n	8008aee <_strtol_l.constprop.0+0x1a>
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	d1f6      	bne.n	8008bac <_strtol_l.constprop.0+0xd8>
 8008bbe:	f8c8 1000 	str.w	r1, [r8]
 8008bc2:	e794      	b.n	8008aee <_strtol_l.constprop.0+0x1a>
 8008bc4:	0800c7b1 	.word	0x0800c7b1

08008bc8 <_strtol_r>:
 8008bc8:	f7ff bf84 	b.w	8008ad4 <_strtol_l.constprop.0>

08008bcc <_fwalk_sglue>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	4688      	mov	r8, r1
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8008be0:	d505      	bpl.n	8008bee <_fwalk_sglue+0x22>
 8008be2:	6824      	ldr	r4, [r4, #0]
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d1f7      	bne.n	8008bd8 <_fwalk_sglue+0xc>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d907      	bls.n	8008c04 <_fwalk_sglue+0x38>
 8008bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	d003      	beq.n	8008c04 <_fwalk_sglue+0x38>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c0      	blx	r8
 8008c02:	4306      	orrs	r6, r0
 8008c04:	3568      	adds	r5, #104	@ 0x68
 8008c06:	e7e9      	b.n	8008bdc <_fwalk_sglue+0x10>

08008c08 <iprintf>:
 8008c08:	b40f      	push	{r0, r1, r2, r3}
 8008c0a:	b507      	push	{r0, r1, r2, lr}
 8008c0c:	4906      	ldr	r1, [pc, #24]	@ (8008c28 <iprintf+0x20>)
 8008c0e:	ab04      	add	r3, sp, #16
 8008c10:	6808      	ldr	r0, [r1, #0]
 8008c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c16:	6881      	ldr	r1, [r0, #8]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	f001 fe31 	bl	800a880 <_vfiprintf_r>
 8008c1e:	b003      	add	sp, #12
 8008c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c24:	b004      	add	sp, #16
 8008c26:	4770      	bx	lr
 8008c28:	2000019c 	.word	0x2000019c

08008c2c <_puts_r>:
 8008c2c:	6a03      	ldr	r3, [r0, #32]
 8008c2e:	b570      	push	{r4, r5, r6, lr}
 8008c30:	6884      	ldr	r4, [r0, #8]
 8008c32:	4605      	mov	r5, r0
 8008c34:	460e      	mov	r6, r1
 8008c36:	b90b      	cbnz	r3, 8008c3c <_puts_r+0x10>
 8008c38:	f7ff f92a 	bl	8007e90 <__sinit>
 8008c3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c3e:	07db      	lsls	r3, r3, #31
 8008c40:	d405      	bmi.n	8008c4e <_puts_r+0x22>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	0598      	lsls	r0, r3, #22
 8008c46:	d402      	bmi.n	8008c4e <_puts_r+0x22>
 8008c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c4a:	f000 f8dc 	bl	8008e06 <__retarget_lock_acquire_recursive>
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	0719      	lsls	r1, r3, #28
 8008c52:	d502      	bpl.n	8008c5a <_puts_r+0x2e>
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d135      	bne.n	8008cc6 <_puts_r+0x9a>
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f002 ffeb 	bl	800bc38 <__swsetup_r>
 8008c62:	b380      	cbz	r0, 8008cc6 <_puts_r+0x9a>
 8008c64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c6a:	07da      	lsls	r2, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_puts_r+0x4e>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	059b      	lsls	r3, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_puts_r+0x4e>
 8008c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c76:	f000 f8c7 	bl	8008e08 <__retarget_lock_release_recursive>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da04      	bge.n	8008c8c <_puts_r+0x60>
 8008c82:	69a2      	ldr	r2, [r4, #24]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	dc17      	bgt.n	8008cb8 <_puts_r+0x8c>
 8008c88:	290a      	cmp	r1, #10
 8008c8a:	d015      	beq.n	8008cb8 <_puts_r+0x8c>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	6022      	str	r2, [r4, #0]
 8008c92:	7019      	strb	r1, [r3, #0]
 8008c94:	68a3      	ldr	r3, [r4, #8]
 8008c96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	2900      	cmp	r1, #0
 8008ca0:	d1ed      	bne.n	8008c7e <_puts_r+0x52>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	da11      	bge.n	8008cca <_puts_r+0x9e>
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	210a      	movs	r1, #10
 8008caa:	4628      	mov	r0, r5
 8008cac:	f002 ff86 	bl	800bbbc <__swbuf_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d0d7      	beq.n	8008c64 <_puts_r+0x38>
 8008cb4:	250a      	movs	r5, #10
 8008cb6:	e7d7      	b.n	8008c68 <_puts_r+0x3c>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f002 ff7e 	bl	800bbbc <__swbuf_r>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d1e7      	bne.n	8008c94 <_puts_r+0x68>
 8008cc4:	e7ce      	b.n	8008c64 <_puts_r+0x38>
 8008cc6:	3e01      	subs	r6, #1
 8008cc8:	e7e4      	b.n	8008c94 <_puts_r+0x68>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	220a      	movs	r2, #10
 8008cd2:	701a      	strb	r2, [r3, #0]
 8008cd4:	e7ee      	b.n	8008cb4 <_puts_r+0x88>
	...

08008cd8 <puts>:
 8008cd8:	4b02      	ldr	r3, [pc, #8]	@ (8008ce4 <puts+0xc>)
 8008cda:	4601      	mov	r1, r0
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	f7ff bfa5 	b.w	8008c2c <_puts_r>
 8008ce2:	bf00      	nop
 8008ce4:	2000019c 	.word	0x2000019c

08008ce8 <strncmp>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	b16a      	cbz	r2, 8008d08 <strncmp+0x20>
 8008cec:	3901      	subs	r1, #1
 8008cee:	1884      	adds	r4, r0, r2
 8008cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d103      	bne.n	8008d04 <strncmp+0x1c>
 8008cfc:	42a0      	cmp	r0, r4
 8008cfe:	d001      	beq.n	8008d04 <strncmp+0x1c>
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d1f5      	bne.n	8008cf0 <strncmp+0x8>
 8008d04:	1ad0      	subs	r0, r2, r3
 8008d06:	bd10      	pop	{r4, pc}
 8008d08:	4610      	mov	r0, r2
 8008d0a:	e7fc      	b.n	8008d06 <strncmp+0x1e>

08008d0c <memset>:
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d100      	bne.n	8008d16 <memset+0xa>
 8008d14:	4770      	bx	lr
 8008d16:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1a:	e7f9      	b.n	8008d10 <memset+0x4>

08008d1c <_localeconv_r>:
 8008d1c:	4800      	ldr	r0, [pc, #0]	@ (8008d20 <_localeconv_r+0x4>)
 8008d1e:	4770      	bx	lr
 8008d20:	20000120 	.word	0x20000120

08008d24 <_close_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	@ (8008d40 <_close_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7fa f8c3 	bl	8002eba <_close>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_close_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_close_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000788 	.word	0x20000788

08008d44 <_lseek_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	@ (8008d64 <_lseek_r+0x20>)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7fa f8d8 	bl	8002f08 <_lseek>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_lseek_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_lseek_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000788 	.word	0x20000788

08008d68 <_read_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	@ (8008d88 <_read_r+0x20>)
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	4608      	mov	r0, r1
 8008d70:	4611      	mov	r1, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7fa f866 	bl	8002e48 <_read>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_read_r+0x1e>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_read_r+0x1e>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20000788 	.word	0x20000788

08008d8c <_write_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4d07      	ldr	r5, [pc, #28]	@ (8008dac <_write_r+0x20>)
 8008d90:	4604      	mov	r4, r0
 8008d92:	4608      	mov	r0, r1
 8008d94:	4611      	mov	r1, r2
 8008d96:	2200      	movs	r2, #0
 8008d98:	602a      	str	r2, [r5, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f7fa f871 	bl	8002e82 <_write>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d102      	bne.n	8008daa <_write_r+0x1e>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	b103      	cbz	r3, 8008daa <_write_r+0x1e>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	20000788 	.word	0x20000788

08008db0 <__errno>:
 8008db0:	4b01      	ldr	r3, [pc, #4]	@ (8008db8 <__errno+0x8>)
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	2000019c 	.word	0x2000019c

08008dbc <__libc_init_array>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8008df4 <__libc_init_array+0x38>)
 8008dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8008df8 <__libc_init_array+0x3c>)
 8008dc2:	1b64      	subs	r4, r4, r5
 8008dc4:	10a4      	asrs	r4, r4, #2
 8008dc6:	2600      	movs	r6, #0
 8008dc8:	42a6      	cmp	r6, r4
 8008dca:	d109      	bne.n	8008de0 <__libc_init_array+0x24>
 8008dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8008dfc <__libc_init_array+0x40>)
 8008dce:	4c0c      	ldr	r4, [pc, #48]	@ (8008e00 <__libc_init_array+0x44>)
 8008dd0:	f003 fb74 	bl	800c4bc <_init>
 8008dd4:	1b64      	subs	r4, r4, r5
 8008dd6:	10a4      	asrs	r4, r4, #2
 8008dd8:	2600      	movs	r6, #0
 8008dda:	42a6      	cmp	r6, r4
 8008ddc:	d105      	bne.n	8008dea <__libc_init_array+0x2e>
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de4:	4798      	blx	r3
 8008de6:	3601      	adds	r6, #1
 8008de8:	e7ee      	b.n	8008dc8 <__libc_init_array+0xc>
 8008dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dee:	4798      	blx	r3
 8008df0:	3601      	adds	r6, #1
 8008df2:	e7f2      	b.n	8008dda <__libc_init_array+0x1e>
 8008df4:	0800cba4 	.word	0x0800cba4
 8008df8:	0800cba4 	.word	0x0800cba4
 8008dfc:	0800cba4 	.word	0x0800cba4
 8008e00:	0800cba8 	.word	0x0800cba8

08008e04 <__retarget_lock_init_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <__retarget_lock_acquire_recursive>:
 8008e06:	4770      	bx	lr

08008e08 <__retarget_lock_release_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <memcpy>:
 8008e0a:	440a      	add	r2, r1
 8008e0c:	4291      	cmp	r1, r2
 8008e0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e12:	d100      	bne.n	8008e16 <memcpy+0xc>
 8008e14:	4770      	bx	lr
 8008e16:	b510      	push	{r4, lr}
 8008e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e20:	4291      	cmp	r1, r2
 8008e22:	d1f9      	bne.n	8008e18 <memcpy+0xe>
 8008e24:	bd10      	pop	{r4, pc}
	...

08008e28 <nan>:
 8008e28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e30 <nan+0x8>
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	00000000 	.word	0x00000000
 8008e34:	7ff80000 	.word	0x7ff80000

08008e38 <nanf>:
 8008e38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e40 <nanf+0x8>
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	7fc00000 	.word	0x7fc00000

08008e44 <quorem>:
 8008e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	6903      	ldr	r3, [r0, #16]
 8008e4a:	690c      	ldr	r4, [r1, #16]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	4607      	mov	r7, r0
 8008e50:	db7e      	blt.n	8008f50 <quorem+0x10c>
 8008e52:	3c01      	subs	r4, #1
 8008e54:	f101 0814 	add.w	r8, r1, #20
 8008e58:	00a3      	lsls	r3, r4, #2
 8008e5a:	f100 0514 	add.w	r5, r0, #20
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	429a      	cmp	r2, r3
 8008e72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e76:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e7a:	d32e      	bcc.n	8008eda <quorem+0x96>
 8008e7c:	f04f 0a00 	mov.w	sl, #0
 8008e80:	46c4      	mov	ip, r8
 8008e82:	46ae      	mov	lr, r5
 8008e84:	46d3      	mov	fp, sl
 8008e86:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e8a:	b298      	uxth	r0, r3
 8008e8c:	fb06 a000 	mla	r0, r6, r0, sl
 8008e90:	0c02      	lsrs	r2, r0, #16
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	fb06 2303 	mla	r3, r6, r3, r2
 8008e98:	f8de 2000 	ldr.w	r2, [lr]
 8008e9c:	b280      	uxth	r0, r0
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	1a12      	subs	r2, r2, r0
 8008ea2:	445a      	add	r2, fp
 8008ea4:	f8de 0000 	ldr.w	r0, [lr]
 8008ea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008eb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ebc:	45e1      	cmp	r9, ip
 8008ebe:	f84e 2b04 	str.w	r2, [lr], #4
 8008ec2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ec6:	d2de      	bcs.n	8008e86 <quorem+0x42>
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	58eb      	ldr	r3, [r5, r3]
 8008ecc:	b92b      	cbnz	r3, 8008eda <quorem+0x96>
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	3b04      	subs	r3, #4
 8008ed2:	429d      	cmp	r5, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	d32f      	bcc.n	8008f38 <quorem+0xf4>
 8008ed8:	613c      	str	r4, [r7, #16]
 8008eda:	4638      	mov	r0, r7
 8008edc:	f002 fba8 	bl	800b630 <__mcmp>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	db25      	blt.n	8008f30 <quorem+0xec>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eec:	f8d1 c000 	ldr.w	ip, [r1]
 8008ef0:	fa1f fe82 	uxth.w	lr, r2
 8008ef4:	fa1f f38c 	uxth.w	r3, ip
 8008ef8:	eba3 030e 	sub.w	r3, r3, lr
 8008efc:	4403      	add	r3, r0
 8008efe:	0c12      	lsrs	r2, r2, #16
 8008f00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f0e:	45c1      	cmp	r9, r8
 8008f10:	f841 3b04 	str.w	r3, [r1], #4
 8008f14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f18:	d2e6      	bcs.n	8008ee8 <quorem+0xa4>
 8008f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f22:	b922      	cbnz	r2, 8008f2e <quorem+0xea>
 8008f24:	3b04      	subs	r3, #4
 8008f26:	429d      	cmp	r5, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	d30b      	bcc.n	8008f44 <quorem+0x100>
 8008f2c:	613c      	str	r4, [r7, #16]
 8008f2e:	3601      	adds	r6, #1
 8008f30:	4630      	mov	r0, r6
 8008f32:	b003      	add	sp, #12
 8008f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	d1cb      	bne.n	8008ed8 <quorem+0x94>
 8008f40:	3c01      	subs	r4, #1
 8008f42:	e7c6      	b.n	8008ed2 <quorem+0x8e>
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	3b04      	subs	r3, #4
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	d1ef      	bne.n	8008f2c <quorem+0xe8>
 8008f4c:	3c01      	subs	r4, #1
 8008f4e:	e7ea      	b.n	8008f26 <quorem+0xe2>
 8008f50:	2000      	movs	r0, #0
 8008f52:	e7ee      	b.n	8008f32 <quorem+0xee>
 8008f54:	0000      	movs	r0, r0
	...

08008f58 <_dtoa_r>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	69c7      	ldr	r7, [r0, #28]
 8008f5e:	b099      	sub	sp, #100	@ 0x64
 8008f60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f64:	ec55 4b10 	vmov	r4, r5, d0
 8008f68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f6c:	4683      	mov	fp, r0
 8008f6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f72:	b97f      	cbnz	r7, 8008f94 <_dtoa_r+0x3c>
 8008f74:	2010      	movs	r0, #16
 8008f76:	f001 fd9b 	bl	800aab0 <malloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f80:	b920      	cbnz	r0, 8008f8c <_dtoa_r+0x34>
 8008f82:	4ba7      	ldr	r3, [pc, #668]	@ (8009220 <_dtoa_r+0x2c8>)
 8008f84:	21ef      	movs	r1, #239	@ 0xef
 8008f86:	48a7      	ldr	r0, [pc, #668]	@ (8009224 <_dtoa_r+0x2cc>)
 8008f88:	f002 ff68 	bl	800be5c <__assert_func>
 8008f8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f90:	6007      	str	r7, [r0, #0]
 8008f92:	60c7      	str	r7, [r0, #12]
 8008f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	b159      	cbz	r1, 8008fb4 <_dtoa_r+0x5c>
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	604a      	str	r2, [r1, #4]
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4093      	lsls	r3, r2
 8008fa4:	608b      	str	r3, [r1, #8]
 8008fa6:	4658      	mov	r0, fp
 8008fa8:	f002 f8be 	bl	800b128 <_Bfree>
 8008fac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	1e2b      	subs	r3, r5, #0
 8008fb6:	bfb9      	ittee	lt
 8008fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fbc:	9303      	strlt	r3, [sp, #12]
 8008fbe:	2300      	movge	r3, #0
 8008fc0:	6033      	strge	r3, [r6, #0]
 8008fc2:	9f03      	ldr	r7, [sp, #12]
 8008fc4:	4b98      	ldr	r3, [pc, #608]	@ (8009228 <_dtoa_r+0x2d0>)
 8008fc6:	bfbc      	itt	lt
 8008fc8:	2201      	movlt	r2, #1
 8008fca:	6032      	strlt	r2, [r6, #0]
 8008fcc:	43bb      	bics	r3, r7
 8008fce:	d112      	bne.n	8008ff6 <_dtoa_r+0x9e>
 8008fd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fdc:	4323      	orrs	r3, r4
 8008fde:	f000 854d 	beq.w	8009a7c <_dtoa_r+0xb24>
 8008fe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fe4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800923c <_dtoa_r+0x2e4>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 854f 	beq.w	8009a8c <_dtoa_r+0xb34>
 8008fee:	f10a 0303 	add.w	r3, sl, #3
 8008ff2:	f000 bd49 	b.w	8009a88 <_dtoa_r+0xb30>
 8008ff6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	ec51 0b17 	vmov	r0, r1, d7
 8009000:	2300      	movs	r3, #0
 8009002:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009006:	f7f7 fd87 	bl	8000b18 <__aeabi_dcmpeq>
 800900a:	4680      	mov	r8, r0
 800900c:	b158      	cbz	r0, 8009026 <_dtoa_r+0xce>
 800900e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009010:	2301      	movs	r3, #1
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009016:	b113      	cbz	r3, 800901e <_dtoa_r+0xc6>
 8009018:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800901a:	4b84      	ldr	r3, [pc, #528]	@ (800922c <_dtoa_r+0x2d4>)
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009240 <_dtoa_r+0x2e8>
 8009022:	f000 bd33 	b.w	8009a8c <_dtoa_r+0xb34>
 8009026:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800902a:	aa16      	add	r2, sp, #88	@ 0x58
 800902c:	a917      	add	r1, sp, #92	@ 0x5c
 800902e:	4658      	mov	r0, fp
 8009030:	f002 fc1e 	bl	800b870 <__d2b>
 8009034:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009038:	4681      	mov	r9, r0
 800903a:	2e00      	cmp	r6, #0
 800903c:	d077      	beq.n	800912e <_dtoa_r+0x1d6>
 800903e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009040:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800904c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009050:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009054:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009058:	4619      	mov	r1, r3
 800905a:	2200      	movs	r2, #0
 800905c:	4b74      	ldr	r3, [pc, #464]	@ (8009230 <_dtoa_r+0x2d8>)
 800905e:	f7f7 f93b 	bl	80002d8 <__aeabi_dsub>
 8009062:	a369      	add	r3, pc, #420	@ (adr r3, 8009208 <_dtoa_r+0x2b0>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 faee 	bl	8000648 <__aeabi_dmul>
 800906c:	a368      	add	r3, pc, #416	@ (adr r3, 8009210 <_dtoa_r+0x2b8>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f7f7 f933 	bl	80002dc <__adddf3>
 8009076:	4604      	mov	r4, r0
 8009078:	4630      	mov	r0, r6
 800907a:	460d      	mov	r5, r1
 800907c:	f7f7 fa7a 	bl	8000574 <__aeabi_i2d>
 8009080:	a365      	add	r3, pc, #404	@ (adr r3, 8009218 <_dtoa_r+0x2c0>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 fadf 	bl	8000648 <__aeabi_dmul>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 f923 	bl	80002dc <__adddf3>
 8009096:	4604      	mov	r4, r0
 8009098:	460d      	mov	r5, r1
 800909a:	f7f7 fd85 	bl	8000ba8 <__aeabi_d2iz>
 800909e:	2200      	movs	r2, #0
 80090a0:	4607      	mov	r7, r0
 80090a2:	2300      	movs	r3, #0
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f7f7 fd40 	bl	8000b2c <__aeabi_dcmplt>
 80090ac:	b140      	cbz	r0, 80090c0 <_dtoa_r+0x168>
 80090ae:	4638      	mov	r0, r7
 80090b0:	f7f7 fa60 	bl	8000574 <__aeabi_i2d>
 80090b4:	4622      	mov	r2, r4
 80090b6:	462b      	mov	r3, r5
 80090b8:	f7f7 fd2e 	bl	8000b18 <__aeabi_dcmpeq>
 80090bc:	b900      	cbnz	r0, 80090c0 <_dtoa_r+0x168>
 80090be:	3f01      	subs	r7, #1
 80090c0:	2f16      	cmp	r7, #22
 80090c2:	d851      	bhi.n	8009168 <_dtoa_r+0x210>
 80090c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009234 <_dtoa_r+0x2dc>)
 80090c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090d2:	f7f7 fd2b 	bl	8000b2c <__aeabi_dcmplt>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d048      	beq.n	800916c <_dtoa_r+0x214>
 80090da:	3f01      	subs	r7, #1
 80090dc:	2300      	movs	r3, #0
 80090de:	9312      	str	r3, [sp, #72]	@ 0x48
 80090e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090e2:	1b9b      	subs	r3, r3, r6
 80090e4:	1e5a      	subs	r2, r3, #1
 80090e6:	bf44      	itt	mi
 80090e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80090ec:	2300      	movmi	r3, #0
 80090ee:	9208      	str	r2, [sp, #32]
 80090f0:	bf54      	ite	pl
 80090f2:	f04f 0800 	movpl.w	r8, #0
 80090f6:	9308      	strmi	r3, [sp, #32]
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	db39      	blt.n	8009170 <_dtoa_r+0x218>
 80090fc:	9b08      	ldr	r3, [sp, #32]
 80090fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009100:	443b      	add	r3, r7
 8009102:	9308      	str	r3, [sp, #32]
 8009104:	2300      	movs	r3, #0
 8009106:	930a      	str	r3, [sp, #40]	@ 0x28
 8009108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910a:	2b09      	cmp	r3, #9
 800910c:	d864      	bhi.n	80091d8 <_dtoa_r+0x280>
 800910e:	2b05      	cmp	r3, #5
 8009110:	bfc4      	itt	gt
 8009112:	3b04      	subgt	r3, #4
 8009114:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009118:	f1a3 0302 	sub.w	r3, r3, #2
 800911c:	bfcc      	ite	gt
 800911e:	2400      	movgt	r4, #0
 8009120:	2401      	movle	r4, #1
 8009122:	2b03      	cmp	r3, #3
 8009124:	d863      	bhi.n	80091ee <_dtoa_r+0x296>
 8009126:	e8df f003 	tbb	[pc, r3]
 800912a:	372a      	.short	0x372a
 800912c:	5535      	.short	0x5535
 800912e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009132:	441e      	add	r6, r3
 8009134:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009138:	2b20      	cmp	r3, #32
 800913a:	bfc1      	itttt	gt
 800913c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009140:	409f      	lslgt	r7, r3
 8009142:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009146:	fa24 f303 	lsrgt.w	r3, r4, r3
 800914a:	bfd6      	itet	le
 800914c:	f1c3 0320 	rsble	r3, r3, #32
 8009150:	ea47 0003 	orrgt.w	r0, r7, r3
 8009154:	fa04 f003 	lslle.w	r0, r4, r3
 8009158:	f7f7 f9fc 	bl	8000554 <__aeabi_ui2d>
 800915c:	2201      	movs	r2, #1
 800915e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009162:	3e01      	subs	r6, #1
 8009164:	9214      	str	r2, [sp, #80]	@ 0x50
 8009166:	e777      	b.n	8009058 <_dtoa_r+0x100>
 8009168:	2301      	movs	r3, #1
 800916a:	e7b8      	b.n	80090de <_dtoa_r+0x186>
 800916c:	9012      	str	r0, [sp, #72]	@ 0x48
 800916e:	e7b7      	b.n	80090e0 <_dtoa_r+0x188>
 8009170:	427b      	negs	r3, r7
 8009172:	930a      	str	r3, [sp, #40]	@ 0x28
 8009174:	2300      	movs	r3, #0
 8009176:	eba8 0807 	sub.w	r8, r8, r7
 800917a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800917c:	e7c4      	b.n	8009108 <_dtoa_r+0x1b0>
 800917e:	2300      	movs	r3, #0
 8009180:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	dc35      	bgt.n	80091f4 <_dtoa_r+0x29c>
 8009188:	2301      	movs	r3, #1
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	9307      	str	r3, [sp, #28]
 800918e:	461a      	mov	r2, r3
 8009190:	920e      	str	r2, [sp, #56]	@ 0x38
 8009192:	e00b      	b.n	80091ac <_dtoa_r+0x254>
 8009194:	2301      	movs	r3, #1
 8009196:	e7f3      	b.n	8009180 <_dtoa_r+0x228>
 8009198:	2300      	movs	r3, #0
 800919a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800919c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800919e:	18fb      	adds	r3, r7, r3
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	3301      	adds	r3, #1
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	bfb8      	it	lt
 80091aa:	2301      	movlt	r3, #1
 80091ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80091b0:	2100      	movs	r1, #0
 80091b2:	2204      	movs	r2, #4
 80091b4:	f102 0514 	add.w	r5, r2, #20
 80091b8:	429d      	cmp	r5, r3
 80091ba:	d91f      	bls.n	80091fc <_dtoa_r+0x2a4>
 80091bc:	6041      	str	r1, [r0, #4]
 80091be:	4658      	mov	r0, fp
 80091c0:	f001 ff72 	bl	800b0a8 <_Balloc>
 80091c4:	4682      	mov	sl, r0
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d13c      	bne.n	8009244 <_dtoa_r+0x2ec>
 80091ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <_dtoa_r+0x2e0>)
 80091cc:	4602      	mov	r2, r0
 80091ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80091d2:	e6d8      	b.n	8008f86 <_dtoa_r+0x2e>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e7e0      	b.n	800919a <_dtoa_r+0x242>
 80091d8:	2401      	movs	r4, #1
 80091da:	2300      	movs	r3, #0
 80091dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	9307      	str	r3, [sp, #28]
 80091e8:	2200      	movs	r2, #0
 80091ea:	2312      	movs	r3, #18
 80091ec:	e7d0      	b.n	8009190 <_dtoa_r+0x238>
 80091ee:	2301      	movs	r3, #1
 80091f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f2:	e7f5      	b.n	80091e0 <_dtoa_r+0x288>
 80091f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	9307      	str	r3, [sp, #28]
 80091fa:	e7d7      	b.n	80091ac <_dtoa_r+0x254>
 80091fc:	3101      	adds	r1, #1
 80091fe:	0052      	lsls	r2, r2, #1
 8009200:	e7d8      	b.n	80091b4 <_dtoa_r+0x25c>
 8009202:	bf00      	nop
 8009204:	f3af 8000 	nop.w
 8009208:	636f4361 	.word	0x636f4361
 800920c:	3fd287a7 	.word	0x3fd287a7
 8009210:	8b60c8b3 	.word	0x8b60c8b3
 8009214:	3fc68a28 	.word	0x3fc68a28
 8009218:	509f79fb 	.word	0x509f79fb
 800921c:	3fd34413 	.word	0x3fd34413
 8009220:	0800c8be 	.word	0x0800c8be
 8009224:	0800c8d5 	.word	0x0800c8d5
 8009228:	7ff00000 	.word	0x7ff00000
 800922c:	0800c9c6 	.word	0x0800c9c6
 8009230:	3ff80000 	.word	0x3ff80000
 8009234:	0800ca58 	.word	0x0800ca58
 8009238:	0800c92d 	.word	0x0800c92d
 800923c:	0800c8ba 	.word	0x0800c8ba
 8009240:	0800c9c5 	.word	0x0800c9c5
 8009244:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009248:	6018      	str	r0, [r3, #0]
 800924a:	9b07      	ldr	r3, [sp, #28]
 800924c:	2b0e      	cmp	r3, #14
 800924e:	f200 80a4 	bhi.w	800939a <_dtoa_r+0x442>
 8009252:	2c00      	cmp	r4, #0
 8009254:	f000 80a1 	beq.w	800939a <_dtoa_r+0x442>
 8009258:	2f00      	cmp	r7, #0
 800925a:	dd33      	ble.n	80092c4 <_dtoa_r+0x36c>
 800925c:	4bad      	ldr	r3, [pc, #692]	@ (8009514 <_dtoa_r+0x5bc>)
 800925e:	f007 020f 	and.w	r2, r7, #15
 8009262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009266:	ed93 7b00 	vldr	d7, [r3]
 800926a:	05f8      	lsls	r0, r7, #23
 800926c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009270:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009274:	d516      	bpl.n	80092a4 <_dtoa_r+0x34c>
 8009276:	4ba8      	ldr	r3, [pc, #672]	@ (8009518 <_dtoa_r+0x5c0>)
 8009278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800927c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009280:	f7f7 fb0c 	bl	800089c <__aeabi_ddiv>
 8009284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009288:	f004 040f 	and.w	r4, r4, #15
 800928c:	2603      	movs	r6, #3
 800928e:	4da2      	ldr	r5, [pc, #648]	@ (8009518 <_dtoa_r+0x5c0>)
 8009290:	b954      	cbnz	r4, 80092a8 <_dtoa_r+0x350>
 8009292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800929a:	f7f7 faff 	bl	800089c <__aeabi_ddiv>
 800929e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a2:	e028      	b.n	80092f6 <_dtoa_r+0x39e>
 80092a4:	2602      	movs	r6, #2
 80092a6:	e7f2      	b.n	800928e <_dtoa_r+0x336>
 80092a8:	07e1      	lsls	r1, r4, #31
 80092aa:	d508      	bpl.n	80092be <_dtoa_r+0x366>
 80092ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092b4:	f7f7 f9c8 	bl	8000648 <__aeabi_dmul>
 80092b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092bc:	3601      	adds	r6, #1
 80092be:	1064      	asrs	r4, r4, #1
 80092c0:	3508      	adds	r5, #8
 80092c2:	e7e5      	b.n	8009290 <_dtoa_r+0x338>
 80092c4:	f000 80d2 	beq.w	800946c <_dtoa_r+0x514>
 80092c8:	427c      	negs	r4, r7
 80092ca:	4b92      	ldr	r3, [pc, #584]	@ (8009514 <_dtoa_r+0x5bc>)
 80092cc:	4d92      	ldr	r5, [pc, #584]	@ (8009518 <_dtoa_r+0x5c0>)
 80092ce:	f004 020f 	and.w	r2, r4, #15
 80092d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092de:	f7f7 f9b3 	bl	8000648 <__aeabi_dmul>
 80092e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e6:	1124      	asrs	r4, r4, #4
 80092e8:	2300      	movs	r3, #0
 80092ea:	2602      	movs	r6, #2
 80092ec:	2c00      	cmp	r4, #0
 80092ee:	f040 80b2 	bne.w	8009456 <_dtoa_r+0x4fe>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d3      	bne.n	800929e <_dtoa_r+0x346>
 80092f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 80b7 	beq.w	8009470 <_dtoa_r+0x518>
 8009302:	4b86      	ldr	r3, [pc, #536]	@ (800951c <_dtoa_r+0x5c4>)
 8009304:	2200      	movs	r2, #0
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	f7f7 fc0f 	bl	8000b2c <__aeabi_dcmplt>
 800930e:	2800      	cmp	r0, #0
 8009310:	f000 80ae 	beq.w	8009470 <_dtoa_r+0x518>
 8009314:	9b07      	ldr	r3, [sp, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80aa 	beq.w	8009470 <_dtoa_r+0x518>
 800931c:	9b00      	ldr	r3, [sp, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dd37      	ble.n	8009392 <_dtoa_r+0x43a>
 8009322:	1e7b      	subs	r3, r7, #1
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	4620      	mov	r0, r4
 8009328:	4b7d      	ldr	r3, [pc, #500]	@ (8009520 <_dtoa_r+0x5c8>)
 800932a:	2200      	movs	r2, #0
 800932c:	4629      	mov	r1, r5
 800932e:	f7f7 f98b 	bl	8000648 <__aeabi_dmul>
 8009332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009336:	9c00      	ldr	r4, [sp, #0]
 8009338:	3601      	adds	r6, #1
 800933a:	4630      	mov	r0, r6
 800933c:	f7f7 f91a 	bl	8000574 <__aeabi_i2d>
 8009340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009344:	f7f7 f980 	bl	8000648 <__aeabi_dmul>
 8009348:	4b76      	ldr	r3, [pc, #472]	@ (8009524 <_dtoa_r+0x5cc>)
 800934a:	2200      	movs	r2, #0
 800934c:	f7f6 ffc6 	bl	80002dc <__adddf3>
 8009350:	4605      	mov	r5, r0
 8009352:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009356:	2c00      	cmp	r4, #0
 8009358:	f040 808d 	bne.w	8009476 <_dtoa_r+0x51e>
 800935c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009360:	4b71      	ldr	r3, [pc, #452]	@ (8009528 <_dtoa_r+0x5d0>)
 8009362:	2200      	movs	r2, #0
 8009364:	f7f6 ffb8 	bl	80002d8 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009370:	462a      	mov	r2, r5
 8009372:	4633      	mov	r3, r6
 8009374:	f7f7 fbf8 	bl	8000b68 <__aeabi_dcmpgt>
 8009378:	2800      	cmp	r0, #0
 800937a:	f040 828b 	bne.w	8009894 <_dtoa_r+0x93c>
 800937e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009382:	462a      	mov	r2, r5
 8009384:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009388:	f7f7 fbd0 	bl	8000b2c <__aeabi_dcmplt>
 800938c:	2800      	cmp	r0, #0
 800938e:	f040 8128 	bne.w	80095e2 <_dtoa_r+0x68a>
 8009392:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009396:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800939a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800939c:	2b00      	cmp	r3, #0
 800939e:	f2c0 815a 	blt.w	8009656 <_dtoa_r+0x6fe>
 80093a2:	2f0e      	cmp	r7, #14
 80093a4:	f300 8157 	bgt.w	8009656 <_dtoa_r+0x6fe>
 80093a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009514 <_dtoa_r+0x5bc>)
 80093aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093ae:	ed93 7b00 	vldr	d7, [r3]
 80093b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	ed8d 7b00 	vstr	d7, [sp]
 80093ba:	da03      	bge.n	80093c4 <_dtoa_r+0x46c>
 80093bc:	9b07      	ldr	r3, [sp, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f340 8101 	ble.w	80095c6 <_dtoa_r+0x66e>
 80093c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093c8:	4656      	mov	r6, sl
 80093ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f7 fa63 	bl	800089c <__aeabi_ddiv>
 80093d6:	f7f7 fbe7 	bl	8000ba8 <__aeabi_d2iz>
 80093da:	4680      	mov	r8, r0
 80093dc:	f7f7 f8ca 	bl	8000574 <__aeabi_i2d>
 80093e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e4:	f7f7 f930 	bl	8000648 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093f4:	f7f6 ff70 	bl	80002d8 <__aeabi_dsub>
 80093f8:	f806 4b01 	strb.w	r4, [r6], #1
 80093fc:	9d07      	ldr	r5, [sp, #28]
 80093fe:	eba6 040a 	sub.w	r4, r6, sl
 8009402:	42a5      	cmp	r5, r4
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	f040 8117 	bne.w	800963a <_dtoa_r+0x6e2>
 800940c:	f7f6 ff66 	bl	80002dc <__adddf3>
 8009410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009414:	4604      	mov	r4, r0
 8009416:	460d      	mov	r5, r1
 8009418:	f7f7 fba6 	bl	8000b68 <__aeabi_dcmpgt>
 800941c:	2800      	cmp	r0, #0
 800941e:	f040 80f9 	bne.w	8009614 <_dtoa_r+0x6bc>
 8009422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f7 fb75 	bl	8000b18 <__aeabi_dcmpeq>
 800942e:	b118      	cbz	r0, 8009438 <_dtoa_r+0x4e0>
 8009430:	f018 0f01 	tst.w	r8, #1
 8009434:	f040 80ee 	bne.w	8009614 <_dtoa_r+0x6bc>
 8009438:	4649      	mov	r1, r9
 800943a:	4658      	mov	r0, fp
 800943c:	f001 fe74 	bl	800b128 <_Bfree>
 8009440:	2300      	movs	r3, #0
 8009442:	7033      	strb	r3, [r6, #0]
 8009444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009446:	3701      	adds	r7, #1
 8009448:	601f      	str	r7, [r3, #0]
 800944a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 831d 	beq.w	8009a8c <_dtoa_r+0xb34>
 8009452:	601e      	str	r6, [r3, #0]
 8009454:	e31a      	b.n	8009a8c <_dtoa_r+0xb34>
 8009456:	07e2      	lsls	r2, r4, #31
 8009458:	d505      	bpl.n	8009466 <_dtoa_r+0x50e>
 800945a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800945e:	f7f7 f8f3 	bl	8000648 <__aeabi_dmul>
 8009462:	3601      	adds	r6, #1
 8009464:	2301      	movs	r3, #1
 8009466:	1064      	asrs	r4, r4, #1
 8009468:	3508      	adds	r5, #8
 800946a:	e73f      	b.n	80092ec <_dtoa_r+0x394>
 800946c:	2602      	movs	r6, #2
 800946e:	e742      	b.n	80092f6 <_dtoa_r+0x39e>
 8009470:	9c07      	ldr	r4, [sp, #28]
 8009472:	9704      	str	r7, [sp, #16]
 8009474:	e761      	b.n	800933a <_dtoa_r+0x3e2>
 8009476:	4b27      	ldr	r3, [pc, #156]	@ (8009514 <_dtoa_r+0x5bc>)
 8009478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800947a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800947e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009482:	4454      	add	r4, sl
 8009484:	2900      	cmp	r1, #0
 8009486:	d053      	beq.n	8009530 <_dtoa_r+0x5d8>
 8009488:	4928      	ldr	r1, [pc, #160]	@ (800952c <_dtoa_r+0x5d4>)
 800948a:	2000      	movs	r0, #0
 800948c:	f7f7 fa06 	bl	800089c <__aeabi_ddiv>
 8009490:	4633      	mov	r3, r6
 8009492:	462a      	mov	r2, r5
 8009494:	f7f6 ff20 	bl	80002d8 <__aeabi_dsub>
 8009498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800949c:	4656      	mov	r6, sl
 800949e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a2:	f7f7 fb81 	bl	8000ba8 <__aeabi_d2iz>
 80094a6:	4605      	mov	r5, r0
 80094a8:	f7f7 f864 	bl	8000574 <__aeabi_i2d>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b4:	f7f6 ff10 	bl	80002d8 <__aeabi_dsub>
 80094b8:	3530      	adds	r5, #48	@ 0x30
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094c2:	f806 5b01 	strb.w	r5, [r6], #1
 80094c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094ca:	f7f7 fb2f 	bl	8000b2c <__aeabi_dcmplt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d171      	bne.n	80095b6 <_dtoa_r+0x65e>
 80094d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d6:	4911      	ldr	r1, [pc, #68]	@ (800951c <_dtoa_r+0x5c4>)
 80094d8:	2000      	movs	r0, #0
 80094da:	f7f6 fefd 	bl	80002d8 <__aeabi_dsub>
 80094de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094e2:	f7f7 fb23 	bl	8000b2c <__aeabi_dcmplt>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f040 8095 	bne.w	8009616 <_dtoa_r+0x6be>
 80094ec:	42a6      	cmp	r6, r4
 80094ee:	f43f af50 	beq.w	8009392 <_dtoa_r+0x43a>
 80094f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009520 <_dtoa_r+0x5c8>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	f7f7 f8a5 	bl	8000648 <__aeabi_dmul>
 80094fe:	4b08      	ldr	r3, [pc, #32]	@ (8009520 <_dtoa_r+0x5c8>)
 8009500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009504:	2200      	movs	r2, #0
 8009506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950a:	f7f7 f89d 	bl	8000648 <__aeabi_dmul>
 800950e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009512:	e7c4      	b.n	800949e <_dtoa_r+0x546>
 8009514:	0800ca58 	.word	0x0800ca58
 8009518:	0800ca30 	.word	0x0800ca30
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	40240000 	.word	0x40240000
 8009524:	401c0000 	.word	0x401c0000
 8009528:	40140000 	.word	0x40140000
 800952c:	3fe00000 	.word	0x3fe00000
 8009530:	4631      	mov	r1, r6
 8009532:	4628      	mov	r0, r5
 8009534:	f7f7 f888 	bl	8000648 <__aeabi_dmul>
 8009538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800953c:	9415      	str	r4, [sp, #84]	@ 0x54
 800953e:	4656      	mov	r6, sl
 8009540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009544:	f7f7 fb30 	bl	8000ba8 <__aeabi_d2iz>
 8009548:	4605      	mov	r5, r0
 800954a:	f7f7 f813 	bl	8000574 <__aeabi_i2d>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009556:	f7f6 febf 	bl	80002d8 <__aeabi_dsub>
 800955a:	3530      	adds	r5, #48	@ 0x30
 800955c:	f806 5b01 	strb.w	r5, [r6], #1
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	42a6      	cmp	r6, r4
 8009566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	d124      	bne.n	80095ba <_dtoa_r+0x662>
 8009570:	4bac      	ldr	r3, [pc, #688]	@ (8009824 <_dtoa_r+0x8cc>)
 8009572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009576:	f7f6 feb1 	bl	80002dc <__adddf3>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009582:	f7f7 faf1 	bl	8000b68 <__aeabi_dcmpgt>
 8009586:	2800      	cmp	r0, #0
 8009588:	d145      	bne.n	8009616 <_dtoa_r+0x6be>
 800958a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800958e:	49a5      	ldr	r1, [pc, #660]	@ (8009824 <_dtoa_r+0x8cc>)
 8009590:	2000      	movs	r0, #0
 8009592:	f7f6 fea1 	bl	80002d8 <__aeabi_dsub>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959e:	f7f7 fac5 	bl	8000b2c <__aeabi_dcmplt>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f43f aef5 	beq.w	8009392 <_dtoa_r+0x43a>
 80095a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80095aa:	1e73      	subs	r3, r6, #1
 80095ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80095ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095b2:	2b30      	cmp	r3, #48	@ 0x30
 80095b4:	d0f8      	beq.n	80095a8 <_dtoa_r+0x650>
 80095b6:	9f04      	ldr	r7, [sp, #16]
 80095b8:	e73e      	b.n	8009438 <_dtoa_r+0x4e0>
 80095ba:	4b9b      	ldr	r3, [pc, #620]	@ (8009828 <_dtoa_r+0x8d0>)
 80095bc:	f7f7 f844 	bl	8000648 <__aeabi_dmul>
 80095c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c4:	e7bc      	b.n	8009540 <_dtoa_r+0x5e8>
 80095c6:	d10c      	bne.n	80095e2 <_dtoa_r+0x68a>
 80095c8:	4b98      	ldr	r3, [pc, #608]	@ (800982c <_dtoa_r+0x8d4>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095d0:	f7f7 f83a 	bl	8000648 <__aeabi_dmul>
 80095d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d8:	f7f7 fabc 	bl	8000b54 <__aeabi_dcmpge>
 80095dc:	2800      	cmp	r0, #0
 80095de:	f000 8157 	beq.w	8009890 <_dtoa_r+0x938>
 80095e2:	2400      	movs	r4, #0
 80095e4:	4625      	mov	r5, r4
 80095e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e8:	43db      	mvns	r3, r3
 80095ea:	9304      	str	r3, [sp, #16]
 80095ec:	4656      	mov	r6, sl
 80095ee:	2700      	movs	r7, #0
 80095f0:	4621      	mov	r1, r4
 80095f2:	4658      	mov	r0, fp
 80095f4:	f001 fd98 	bl	800b128 <_Bfree>
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	d0dc      	beq.n	80095b6 <_dtoa_r+0x65e>
 80095fc:	b12f      	cbz	r7, 800960a <_dtoa_r+0x6b2>
 80095fe:	42af      	cmp	r7, r5
 8009600:	d003      	beq.n	800960a <_dtoa_r+0x6b2>
 8009602:	4639      	mov	r1, r7
 8009604:	4658      	mov	r0, fp
 8009606:	f001 fd8f 	bl	800b128 <_Bfree>
 800960a:	4629      	mov	r1, r5
 800960c:	4658      	mov	r0, fp
 800960e:	f001 fd8b 	bl	800b128 <_Bfree>
 8009612:	e7d0      	b.n	80095b6 <_dtoa_r+0x65e>
 8009614:	9704      	str	r7, [sp, #16]
 8009616:	4633      	mov	r3, r6
 8009618:	461e      	mov	r6, r3
 800961a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800961e:	2a39      	cmp	r2, #57	@ 0x39
 8009620:	d107      	bne.n	8009632 <_dtoa_r+0x6da>
 8009622:	459a      	cmp	sl, r3
 8009624:	d1f8      	bne.n	8009618 <_dtoa_r+0x6c0>
 8009626:	9a04      	ldr	r2, [sp, #16]
 8009628:	3201      	adds	r2, #1
 800962a:	9204      	str	r2, [sp, #16]
 800962c:	2230      	movs	r2, #48	@ 0x30
 800962e:	f88a 2000 	strb.w	r2, [sl]
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	3201      	adds	r2, #1
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	e7bd      	b.n	80095b6 <_dtoa_r+0x65e>
 800963a:	4b7b      	ldr	r3, [pc, #492]	@ (8009828 <_dtoa_r+0x8d0>)
 800963c:	2200      	movs	r2, #0
 800963e:	f7f7 f803 	bl	8000648 <__aeabi_dmul>
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	460d      	mov	r5, r1
 800964a:	f7f7 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800964e:	2800      	cmp	r0, #0
 8009650:	f43f aebb 	beq.w	80093ca <_dtoa_r+0x472>
 8009654:	e6f0      	b.n	8009438 <_dtoa_r+0x4e0>
 8009656:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009658:	2a00      	cmp	r2, #0
 800965a:	f000 80db 	beq.w	8009814 <_dtoa_r+0x8bc>
 800965e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009660:	2a01      	cmp	r2, #1
 8009662:	f300 80bf 	bgt.w	80097e4 <_dtoa_r+0x88c>
 8009666:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009668:	2a00      	cmp	r2, #0
 800966a:	f000 80b7 	beq.w	80097dc <_dtoa_r+0x884>
 800966e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009672:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009674:	4646      	mov	r6, r8
 8009676:	9a08      	ldr	r2, [sp, #32]
 8009678:	2101      	movs	r1, #1
 800967a:	441a      	add	r2, r3
 800967c:	4658      	mov	r0, fp
 800967e:	4498      	add	r8, r3
 8009680:	9208      	str	r2, [sp, #32]
 8009682:	f001 fe4f 	bl	800b324 <__i2b>
 8009686:	4605      	mov	r5, r0
 8009688:	b15e      	cbz	r6, 80096a2 <_dtoa_r+0x74a>
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	2b00      	cmp	r3, #0
 800968e:	dd08      	ble.n	80096a2 <_dtoa_r+0x74a>
 8009690:	42b3      	cmp	r3, r6
 8009692:	9a08      	ldr	r2, [sp, #32]
 8009694:	bfa8      	it	ge
 8009696:	4633      	movge	r3, r6
 8009698:	eba8 0803 	sub.w	r8, r8, r3
 800969c:	1af6      	subs	r6, r6, r3
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	9308      	str	r3, [sp, #32]
 80096a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a4:	b1f3      	cbz	r3, 80096e4 <_dtoa_r+0x78c>
 80096a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80b7 	beq.w	800981c <_dtoa_r+0x8c4>
 80096ae:	b18c      	cbz	r4, 80096d4 <_dtoa_r+0x77c>
 80096b0:	4629      	mov	r1, r5
 80096b2:	4622      	mov	r2, r4
 80096b4:	4658      	mov	r0, fp
 80096b6:	f001 fef5 	bl	800b4a4 <__pow5mult>
 80096ba:	464a      	mov	r2, r9
 80096bc:	4601      	mov	r1, r0
 80096be:	4605      	mov	r5, r0
 80096c0:	4658      	mov	r0, fp
 80096c2:	f001 fe45 	bl	800b350 <__multiply>
 80096c6:	4649      	mov	r1, r9
 80096c8:	9004      	str	r0, [sp, #16]
 80096ca:	4658      	mov	r0, fp
 80096cc:	f001 fd2c 	bl	800b128 <_Bfree>
 80096d0:	9b04      	ldr	r3, [sp, #16]
 80096d2:	4699      	mov	r9, r3
 80096d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096d6:	1b1a      	subs	r2, r3, r4
 80096d8:	d004      	beq.n	80096e4 <_dtoa_r+0x78c>
 80096da:	4649      	mov	r1, r9
 80096dc:	4658      	mov	r0, fp
 80096de:	f001 fee1 	bl	800b4a4 <__pow5mult>
 80096e2:	4681      	mov	r9, r0
 80096e4:	2101      	movs	r1, #1
 80096e6:	4658      	mov	r0, fp
 80096e8:	f001 fe1c 	bl	800b324 <__i2b>
 80096ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096ee:	4604      	mov	r4, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 81cf 	beq.w	8009a94 <_dtoa_r+0xb3c>
 80096f6:	461a      	mov	r2, r3
 80096f8:	4601      	mov	r1, r0
 80096fa:	4658      	mov	r0, fp
 80096fc:	f001 fed2 	bl	800b4a4 <__pow5mult>
 8009700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009702:	2b01      	cmp	r3, #1
 8009704:	4604      	mov	r4, r0
 8009706:	f300 8095 	bgt.w	8009834 <_dtoa_r+0x8dc>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 8087 	bne.w	8009820 <_dtoa_r+0x8c8>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 8089 	bne.w	8009830 <_dtoa_r+0x8d8>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009724:	0d1b      	lsrs	r3, r3, #20
 8009726:	051b      	lsls	r3, r3, #20
 8009728:	b12b      	cbz	r3, 8009736 <_dtoa_r+0x7de>
 800972a:	9b08      	ldr	r3, [sp, #32]
 800972c:	3301      	adds	r3, #1
 800972e:	9308      	str	r3, [sp, #32]
 8009730:	f108 0801 	add.w	r8, r8, #1
 8009734:	2301      	movs	r3, #1
 8009736:	930a      	str	r3, [sp, #40]	@ 0x28
 8009738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 81b0 	beq.w	8009aa0 <_dtoa_r+0xb48>
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009746:	6918      	ldr	r0, [r3, #16]
 8009748:	f001 fda0 	bl	800b28c <__hi0bits>
 800974c:	f1c0 0020 	rsb	r0, r0, #32
 8009750:	9b08      	ldr	r3, [sp, #32]
 8009752:	4418      	add	r0, r3
 8009754:	f010 001f 	ands.w	r0, r0, #31
 8009758:	d077      	beq.n	800984a <_dtoa_r+0x8f2>
 800975a:	f1c0 0320 	rsb	r3, r0, #32
 800975e:	2b04      	cmp	r3, #4
 8009760:	dd6b      	ble.n	800983a <_dtoa_r+0x8e2>
 8009762:	9b08      	ldr	r3, [sp, #32]
 8009764:	f1c0 001c 	rsb	r0, r0, #28
 8009768:	4403      	add	r3, r0
 800976a:	4480      	add	r8, r0
 800976c:	4406      	add	r6, r0
 800976e:	9308      	str	r3, [sp, #32]
 8009770:	f1b8 0f00 	cmp.w	r8, #0
 8009774:	dd05      	ble.n	8009782 <_dtoa_r+0x82a>
 8009776:	4649      	mov	r1, r9
 8009778:	4642      	mov	r2, r8
 800977a:	4658      	mov	r0, fp
 800977c:	f001 feec 	bl	800b558 <__lshift>
 8009780:	4681      	mov	r9, r0
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	2b00      	cmp	r3, #0
 8009786:	dd05      	ble.n	8009794 <_dtoa_r+0x83c>
 8009788:	4621      	mov	r1, r4
 800978a:	461a      	mov	r2, r3
 800978c:	4658      	mov	r0, fp
 800978e:	f001 fee3 	bl	800b558 <__lshift>
 8009792:	4604      	mov	r4, r0
 8009794:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009796:	2b00      	cmp	r3, #0
 8009798:	d059      	beq.n	800984e <_dtoa_r+0x8f6>
 800979a:	4621      	mov	r1, r4
 800979c:	4648      	mov	r0, r9
 800979e:	f001 ff47 	bl	800b630 <__mcmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	da53      	bge.n	800984e <_dtoa_r+0x8f6>
 80097a6:	1e7b      	subs	r3, r7, #1
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	4649      	mov	r1, r9
 80097ac:	2300      	movs	r3, #0
 80097ae:	220a      	movs	r2, #10
 80097b0:	4658      	mov	r0, fp
 80097b2:	f001 fcdb 	bl	800b16c <__multadd>
 80097b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097b8:	4681      	mov	r9, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 8172 	beq.w	8009aa4 <_dtoa_r+0xb4c>
 80097c0:	2300      	movs	r3, #0
 80097c2:	4629      	mov	r1, r5
 80097c4:	220a      	movs	r2, #10
 80097c6:	4658      	mov	r0, fp
 80097c8:	f001 fcd0 	bl	800b16c <__multadd>
 80097cc:	9b00      	ldr	r3, [sp, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	4605      	mov	r5, r0
 80097d2:	dc67      	bgt.n	80098a4 <_dtoa_r+0x94c>
 80097d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	dc41      	bgt.n	800985e <_dtoa_r+0x906>
 80097da:	e063      	b.n	80098a4 <_dtoa_r+0x94c>
 80097dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097e2:	e746      	b.n	8009672 <_dtoa_r+0x71a>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	1e5c      	subs	r4, r3, #1
 80097e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ea:	42a3      	cmp	r3, r4
 80097ec:	bfbf      	itttt	lt
 80097ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80097f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80097f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80097f4:	1ae3      	sublt	r3, r4, r3
 80097f6:	bfb4      	ite	lt
 80097f8:	18d2      	addlt	r2, r2, r3
 80097fa:	1b1c      	subge	r4, r3, r4
 80097fc:	9b07      	ldr	r3, [sp, #28]
 80097fe:	bfbc      	itt	lt
 8009800:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009802:	2400      	movlt	r4, #0
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfb5      	itete	lt
 8009808:	eba8 0603 	sublt.w	r6, r8, r3
 800980c:	9b07      	ldrge	r3, [sp, #28]
 800980e:	2300      	movlt	r3, #0
 8009810:	4646      	movge	r6, r8
 8009812:	e730      	b.n	8009676 <_dtoa_r+0x71e>
 8009814:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009816:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009818:	4646      	mov	r6, r8
 800981a:	e735      	b.n	8009688 <_dtoa_r+0x730>
 800981c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800981e:	e75c      	b.n	80096da <_dtoa_r+0x782>
 8009820:	2300      	movs	r3, #0
 8009822:	e788      	b.n	8009736 <_dtoa_r+0x7de>
 8009824:	3fe00000 	.word	0x3fe00000
 8009828:	40240000 	.word	0x40240000
 800982c:	40140000 	.word	0x40140000
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	e780      	b.n	8009736 <_dtoa_r+0x7de>
 8009834:	2300      	movs	r3, #0
 8009836:	930a      	str	r3, [sp, #40]	@ 0x28
 8009838:	e782      	b.n	8009740 <_dtoa_r+0x7e8>
 800983a:	d099      	beq.n	8009770 <_dtoa_r+0x818>
 800983c:	9a08      	ldr	r2, [sp, #32]
 800983e:	331c      	adds	r3, #28
 8009840:	441a      	add	r2, r3
 8009842:	4498      	add	r8, r3
 8009844:	441e      	add	r6, r3
 8009846:	9208      	str	r2, [sp, #32]
 8009848:	e792      	b.n	8009770 <_dtoa_r+0x818>
 800984a:	4603      	mov	r3, r0
 800984c:	e7f6      	b.n	800983c <_dtoa_r+0x8e4>
 800984e:	9b07      	ldr	r3, [sp, #28]
 8009850:	9704      	str	r7, [sp, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	dc20      	bgt.n	8009898 <_dtoa_r+0x940>
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985a:	2b02      	cmp	r3, #2
 800985c:	dd1e      	ble.n	800989c <_dtoa_r+0x944>
 800985e:	9b00      	ldr	r3, [sp, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f47f aec0 	bne.w	80095e6 <_dtoa_r+0x68e>
 8009866:	4621      	mov	r1, r4
 8009868:	2205      	movs	r2, #5
 800986a:	4658      	mov	r0, fp
 800986c:	f001 fc7e 	bl	800b16c <__multadd>
 8009870:	4601      	mov	r1, r0
 8009872:	4604      	mov	r4, r0
 8009874:	4648      	mov	r0, r9
 8009876:	f001 fedb 	bl	800b630 <__mcmp>
 800987a:	2800      	cmp	r0, #0
 800987c:	f77f aeb3 	ble.w	80095e6 <_dtoa_r+0x68e>
 8009880:	4656      	mov	r6, sl
 8009882:	2331      	movs	r3, #49	@ 0x31
 8009884:	f806 3b01 	strb.w	r3, [r6], #1
 8009888:	9b04      	ldr	r3, [sp, #16]
 800988a:	3301      	adds	r3, #1
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	e6ae      	b.n	80095ee <_dtoa_r+0x696>
 8009890:	9c07      	ldr	r4, [sp, #28]
 8009892:	9704      	str	r7, [sp, #16]
 8009894:	4625      	mov	r5, r4
 8009896:	e7f3      	b.n	8009880 <_dtoa_r+0x928>
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8104 	beq.w	8009aac <_dtoa_r+0xb54>
 80098a4:	2e00      	cmp	r6, #0
 80098a6:	dd05      	ble.n	80098b4 <_dtoa_r+0x95c>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4632      	mov	r2, r6
 80098ac:	4658      	mov	r0, fp
 80098ae:	f001 fe53 	bl	800b558 <__lshift>
 80098b2:	4605      	mov	r5, r0
 80098b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d05a      	beq.n	8009970 <_dtoa_r+0xa18>
 80098ba:	6869      	ldr	r1, [r5, #4]
 80098bc:	4658      	mov	r0, fp
 80098be:	f001 fbf3 	bl	800b0a8 <_Balloc>
 80098c2:	4606      	mov	r6, r0
 80098c4:	b928      	cbnz	r0, 80098d2 <_dtoa_r+0x97a>
 80098c6:	4b84      	ldr	r3, [pc, #528]	@ (8009ad8 <_dtoa_r+0xb80>)
 80098c8:	4602      	mov	r2, r0
 80098ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098ce:	f7ff bb5a 	b.w	8008f86 <_dtoa_r+0x2e>
 80098d2:	692a      	ldr	r2, [r5, #16]
 80098d4:	3202      	adds	r2, #2
 80098d6:	0092      	lsls	r2, r2, #2
 80098d8:	f105 010c 	add.w	r1, r5, #12
 80098dc:	300c      	adds	r0, #12
 80098de:	f7ff fa94 	bl	8008e0a <memcpy>
 80098e2:	2201      	movs	r2, #1
 80098e4:	4631      	mov	r1, r6
 80098e6:	4658      	mov	r0, fp
 80098e8:	f001 fe36 	bl	800b558 <__lshift>
 80098ec:	f10a 0301 	add.w	r3, sl, #1
 80098f0:	9307      	str	r3, [sp, #28]
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	4453      	add	r3, sl
 80098f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	462f      	mov	r7, r5
 8009900:	930a      	str	r3, [sp, #40]	@ 0x28
 8009902:	4605      	mov	r5, r0
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	4621      	mov	r1, r4
 8009908:	3b01      	subs	r3, #1
 800990a:	4648      	mov	r0, r9
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	f7ff fa99 	bl	8008e44 <quorem>
 8009912:	4639      	mov	r1, r7
 8009914:	9002      	str	r0, [sp, #8]
 8009916:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800991a:	4648      	mov	r0, r9
 800991c:	f001 fe88 	bl	800b630 <__mcmp>
 8009920:	462a      	mov	r2, r5
 8009922:	9008      	str	r0, [sp, #32]
 8009924:	4621      	mov	r1, r4
 8009926:	4658      	mov	r0, fp
 8009928:	f001 fe9e 	bl	800b668 <__mdiff>
 800992c:	68c2      	ldr	r2, [r0, #12]
 800992e:	4606      	mov	r6, r0
 8009930:	bb02      	cbnz	r2, 8009974 <_dtoa_r+0xa1c>
 8009932:	4601      	mov	r1, r0
 8009934:	4648      	mov	r0, r9
 8009936:	f001 fe7b 	bl	800b630 <__mcmp>
 800993a:	4602      	mov	r2, r0
 800993c:	4631      	mov	r1, r6
 800993e:	4658      	mov	r0, fp
 8009940:	920e      	str	r2, [sp, #56]	@ 0x38
 8009942:	f001 fbf1 	bl	800b128 <_Bfree>
 8009946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800994a:	9e07      	ldr	r6, [sp, #28]
 800994c:	ea43 0102 	orr.w	r1, r3, r2
 8009950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009952:	4319      	orrs	r1, r3
 8009954:	d110      	bne.n	8009978 <_dtoa_r+0xa20>
 8009956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800995a:	d029      	beq.n	80099b0 <_dtoa_r+0xa58>
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	2b00      	cmp	r3, #0
 8009960:	dd02      	ble.n	8009968 <_dtoa_r+0xa10>
 8009962:	9b02      	ldr	r3, [sp, #8]
 8009964:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009968:	9b00      	ldr	r3, [sp, #0]
 800996a:	f883 8000 	strb.w	r8, [r3]
 800996e:	e63f      	b.n	80095f0 <_dtoa_r+0x698>
 8009970:	4628      	mov	r0, r5
 8009972:	e7bb      	b.n	80098ec <_dtoa_r+0x994>
 8009974:	2201      	movs	r2, #1
 8009976:	e7e1      	b.n	800993c <_dtoa_r+0x9e4>
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	2b00      	cmp	r3, #0
 800997c:	db04      	blt.n	8009988 <_dtoa_r+0xa30>
 800997e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009980:	430b      	orrs	r3, r1
 8009982:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009984:	430b      	orrs	r3, r1
 8009986:	d120      	bne.n	80099ca <_dtoa_r+0xa72>
 8009988:	2a00      	cmp	r2, #0
 800998a:	dded      	ble.n	8009968 <_dtoa_r+0xa10>
 800998c:	4649      	mov	r1, r9
 800998e:	2201      	movs	r2, #1
 8009990:	4658      	mov	r0, fp
 8009992:	f001 fde1 	bl	800b558 <__lshift>
 8009996:	4621      	mov	r1, r4
 8009998:	4681      	mov	r9, r0
 800999a:	f001 fe49 	bl	800b630 <__mcmp>
 800999e:	2800      	cmp	r0, #0
 80099a0:	dc03      	bgt.n	80099aa <_dtoa_r+0xa52>
 80099a2:	d1e1      	bne.n	8009968 <_dtoa_r+0xa10>
 80099a4:	f018 0f01 	tst.w	r8, #1
 80099a8:	d0de      	beq.n	8009968 <_dtoa_r+0xa10>
 80099aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099ae:	d1d8      	bne.n	8009962 <_dtoa_r+0xa0a>
 80099b0:	9a00      	ldr	r2, [sp, #0]
 80099b2:	2339      	movs	r3, #57	@ 0x39
 80099b4:	7013      	strb	r3, [r2, #0]
 80099b6:	4633      	mov	r3, r6
 80099b8:	461e      	mov	r6, r3
 80099ba:	3b01      	subs	r3, #1
 80099bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099c0:	2a39      	cmp	r2, #57	@ 0x39
 80099c2:	d052      	beq.n	8009a6a <_dtoa_r+0xb12>
 80099c4:	3201      	adds	r2, #1
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e612      	b.n	80095f0 <_dtoa_r+0x698>
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	dd07      	ble.n	80099de <_dtoa_r+0xa86>
 80099ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099d2:	d0ed      	beq.n	80099b0 <_dtoa_r+0xa58>
 80099d4:	9a00      	ldr	r2, [sp, #0]
 80099d6:	f108 0301 	add.w	r3, r8, #1
 80099da:	7013      	strb	r3, [r2, #0]
 80099dc:	e608      	b.n	80095f0 <_dtoa_r+0x698>
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	9a07      	ldr	r2, [sp, #28]
 80099e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80099e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d028      	beq.n	8009a3e <_dtoa_r+0xae6>
 80099ec:	4649      	mov	r1, r9
 80099ee:	2300      	movs	r3, #0
 80099f0:	220a      	movs	r2, #10
 80099f2:	4658      	mov	r0, fp
 80099f4:	f001 fbba 	bl	800b16c <__multadd>
 80099f8:	42af      	cmp	r7, r5
 80099fa:	4681      	mov	r9, r0
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	f04f 020a 	mov.w	r2, #10
 8009a04:	4639      	mov	r1, r7
 8009a06:	4658      	mov	r0, fp
 8009a08:	d107      	bne.n	8009a1a <_dtoa_r+0xac2>
 8009a0a:	f001 fbaf 	bl	800b16c <__multadd>
 8009a0e:	4607      	mov	r7, r0
 8009a10:	4605      	mov	r5, r0
 8009a12:	9b07      	ldr	r3, [sp, #28]
 8009a14:	3301      	adds	r3, #1
 8009a16:	9307      	str	r3, [sp, #28]
 8009a18:	e774      	b.n	8009904 <_dtoa_r+0x9ac>
 8009a1a:	f001 fba7 	bl	800b16c <__multadd>
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4607      	mov	r7, r0
 8009a22:	2300      	movs	r3, #0
 8009a24:	220a      	movs	r2, #10
 8009a26:	4658      	mov	r0, fp
 8009a28:	f001 fba0 	bl	800b16c <__multadd>
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	e7f0      	b.n	8009a12 <_dtoa_r+0xaba>
 8009a30:	9b00      	ldr	r3, [sp, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	bfcc      	ite	gt
 8009a36:	461e      	movgt	r6, r3
 8009a38:	2601      	movle	r6, #1
 8009a3a:	4456      	add	r6, sl
 8009a3c:	2700      	movs	r7, #0
 8009a3e:	4649      	mov	r1, r9
 8009a40:	2201      	movs	r2, #1
 8009a42:	4658      	mov	r0, fp
 8009a44:	f001 fd88 	bl	800b558 <__lshift>
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4681      	mov	r9, r0
 8009a4c:	f001 fdf0 	bl	800b630 <__mcmp>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	dcb0      	bgt.n	80099b6 <_dtoa_r+0xa5e>
 8009a54:	d102      	bne.n	8009a5c <_dtoa_r+0xb04>
 8009a56:	f018 0f01 	tst.w	r8, #1
 8009a5a:	d1ac      	bne.n	80099b6 <_dtoa_r+0xa5e>
 8009a5c:	4633      	mov	r3, r6
 8009a5e:	461e      	mov	r6, r3
 8009a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a64:	2a30      	cmp	r2, #48	@ 0x30
 8009a66:	d0fa      	beq.n	8009a5e <_dtoa_r+0xb06>
 8009a68:	e5c2      	b.n	80095f0 <_dtoa_r+0x698>
 8009a6a:	459a      	cmp	sl, r3
 8009a6c:	d1a4      	bne.n	80099b8 <_dtoa_r+0xa60>
 8009a6e:	9b04      	ldr	r3, [sp, #16]
 8009a70:	3301      	adds	r3, #1
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	2331      	movs	r3, #49	@ 0x31
 8009a76:	f88a 3000 	strb.w	r3, [sl]
 8009a7a:	e5b9      	b.n	80095f0 <_dtoa_r+0x698>
 8009a7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009adc <_dtoa_r+0xb84>
 8009a82:	b11b      	cbz	r3, 8009a8c <_dtoa_r+0xb34>
 8009a84:	f10a 0308 	add.w	r3, sl, #8
 8009a88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	b019      	add	sp, #100	@ 0x64
 8009a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	f77f ae37 	ble.w	800970a <_dtoa_r+0x7b2>
 8009a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	e655      	b.n	8009750 <_dtoa_r+0x7f8>
 8009aa4:	9b00      	ldr	r3, [sp, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f77f aed6 	ble.w	8009858 <_dtoa_r+0x900>
 8009aac:	4656      	mov	r6, sl
 8009aae:	4621      	mov	r1, r4
 8009ab0:	4648      	mov	r0, r9
 8009ab2:	f7ff f9c7 	bl	8008e44 <quorem>
 8009ab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009aba:	f806 8b01 	strb.w	r8, [r6], #1
 8009abe:	9b00      	ldr	r3, [sp, #0]
 8009ac0:	eba6 020a 	sub.w	r2, r6, sl
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	ddb3      	ble.n	8009a30 <_dtoa_r+0xad8>
 8009ac8:	4649      	mov	r1, r9
 8009aca:	2300      	movs	r3, #0
 8009acc:	220a      	movs	r2, #10
 8009ace:	4658      	mov	r0, fp
 8009ad0:	f001 fb4c 	bl	800b16c <__multadd>
 8009ad4:	4681      	mov	r9, r0
 8009ad6:	e7ea      	b.n	8009aae <_dtoa_r+0xb56>
 8009ad8:	0800c92d 	.word	0x0800c92d
 8009adc:	0800c8b1 	.word	0x0800c8b1

08009ae0 <_free_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d041      	beq.n	8009b6c <_free_r+0x8c>
 8009ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aec:	1f0c      	subs	r4, r1, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bfb8      	it	lt
 8009af2:	18e4      	addlt	r4, r4, r3
 8009af4:	f001 facc 	bl	800b090 <__malloc_lock>
 8009af8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b70 <_free_r+0x90>)
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	b933      	cbnz	r3, 8009b0c <_free_r+0x2c>
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	4628      	mov	r0, r5
 8009b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b08:	f001 bac8 	b.w	800b09c <__malloc_unlock>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d908      	bls.n	8009b22 <_free_r+0x42>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	1821      	adds	r1, r4, r0
 8009b14:	428b      	cmp	r3, r1
 8009b16:	bf01      	itttt	eq
 8009b18:	6819      	ldreq	r1, [r3, #0]
 8009b1a:	685b      	ldreq	r3, [r3, #4]
 8009b1c:	1809      	addeq	r1, r1, r0
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	e7ed      	b.n	8009afe <_free_r+0x1e>
 8009b22:	461a      	mov	r2, r3
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b10b      	cbz	r3, 8009b2c <_free_r+0x4c>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d9fa      	bls.n	8009b22 <_free_r+0x42>
 8009b2c:	6811      	ldr	r1, [r2, #0]
 8009b2e:	1850      	adds	r0, r2, r1
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d10b      	bne.n	8009b4c <_free_r+0x6c>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	4401      	add	r1, r0
 8009b38:	1850      	adds	r0, r2, r1
 8009b3a:	4283      	cmp	r3, r0
 8009b3c:	6011      	str	r1, [r2, #0]
 8009b3e:	d1e0      	bne.n	8009b02 <_free_r+0x22>
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	6053      	str	r3, [r2, #4]
 8009b46:	4408      	add	r0, r1
 8009b48:	6010      	str	r0, [r2, #0]
 8009b4a:	e7da      	b.n	8009b02 <_free_r+0x22>
 8009b4c:	d902      	bls.n	8009b54 <_free_r+0x74>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	e7d6      	b.n	8009b02 <_free_r+0x22>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	1821      	adds	r1, r4, r0
 8009b58:	428b      	cmp	r3, r1
 8009b5a:	bf04      	itt	eq
 8009b5c:	6819      	ldreq	r1, [r3, #0]
 8009b5e:	685b      	ldreq	r3, [r3, #4]
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	bf04      	itt	eq
 8009b64:	1809      	addeq	r1, r1, r0
 8009b66:	6021      	streq	r1, [r4, #0]
 8009b68:	6054      	str	r4, [r2, #4]
 8009b6a:	e7ca      	b.n	8009b02 <_free_r+0x22>
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000794 	.word	0x20000794

08009b74 <rshift>:
 8009b74:	6903      	ldr	r3, [r0, #16]
 8009b76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b82:	f100 0414 	add.w	r4, r0, #20
 8009b86:	dd45      	ble.n	8009c14 <rshift+0xa0>
 8009b88:	f011 011f 	ands.w	r1, r1, #31
 8009b8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b94:	d10c      	bne.n	8009bb0 <rshift+0x3c>
 8009b96:	f100 0710 	add.w	r7, r0, #16
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	42b1      	cmp	r1, r6
 8009b9e:	d334      	bcc.n	8009c0a <rshift+0x96>
 8009ba0:	1a9b      	subs	r3, r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	1eea      	subs	r2, r5, #3
 8009ba6:	4296      	cmp	r6, r2
 8009ba8:	bf38      	it	cc
 8009baa:	2300      	movcc	r3, #0
 8009bac:	4423      	add	r3, r4
 8009bae:	e015      	b.n	8009bdc <rshift+0x68>
 8009bb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bb4:	f1c1 0820 	rsb	r8, r1, #32
 8009bb8:	40cf      	lsrs	r7, r1
 8009bba:	f105 0e04 	add.w	lr, r5, #4
 8009bbe:	46a1      	mov	r9, r4
 8009bc0:	4576      	cmp	r6, lr
 8009bc2:	46f4      	mov	ip, lr
 8009bc4:	d815      	bhi.n	8009bf2 <rshift+0x7e>
 8009bc6:	1a9a      	subs	r2, r3, r2
 8009bc8:	0092      	lsls	r2, r2, #2
 8009bca:	3a04      	subs	r2, #4
 8009bcc:	3501      	adds	r5, #1
 8009bce:	42ae      	cmp	r6, r5
 8009bd0:	bf38      	it	cc
 8009bd2:	2200      	movcc	r2, #0
 8009bd4:	18a3      	adds	r3, r4, r2
 8009bd6:	50a7      	str	r7, [r4, r2]
 8009bd8:	b107      	cbz	r7, 8009bdc <rshift+0x68>
 8009bda:	3304      	adds	r3, #4
 8009bdc:	1b1a      	subs	r2, r3, r4
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009be4:	bf08      	it	eq
 8009be6:	2300      	moveq	r3, #0
 8009be8:	6102      	str	r2, [r0, #16]
 8009bea:	bf08      	it	eq
 8009bec:	6143      	streq	r3, [r0, #20]
 8009bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bf2:	f8dc c000 	ldr.w	ip, [ip]
 8009bf6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bfa:	ea4c 0707 	orr.w	r7, ip, r7
 8009bfe:	f849 7b04 	str.w	r7, [r9], #4
 8009c02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c06:	40cf      	lsrs	r7, r1
 8009c08:	e7da      	b.n	8009bc0 <rshift+0x4c>
 8009c0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c12:	e7c3      	b.n	8009b9c <rshift+0x28>
 8009c14:	4623      	mov	r3, r4
 8009c16:	e7e1      	b.n	8009bdc <rshift+0x68>

08009c18 <__hexdig_fun>:
 8009c18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	d802      	bhi.n	8009c26 <__hexdig_fun+0xe>
 8009c20:	3820      	subs	r0, #32
 8009c22:	b2c0      	uxtb	r0, r0
 8009c24:	4770      	bx	lr
 8009c26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d801      	bhi.n	8009c32 <__hexdig_fun+0x1a>
 8009c2e:	3847      	subs	r0, #71	@ 0x47
 8009c30:	e7f7      	b.n	8009c22 <__hexdig_fun+0xa>
 8009c32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c36:	2b05      	cmp	r3, #5
 8009c38:	d801      	bhi.n	8009c3e <__hexdig_fun+0x26>
 8009c3a:	3827      	subs	r0, #39	@ 0x27
 8009c3c:	e7f1      	b.n	8009c22 <__hexdig_fun+0xa>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	4770      	bx	lr
	...

08009c44 <__gethex>:
 8009c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	468a      	mov	sl, r1
 8009c4c:	9302      	str	r3, [sp, #8]
 8009c4e:	680b      	ldr	r3, [r1, #0]
 8009c50:	9001      	str	r0, [sp, #4]
 8009c52:	4690      	mov	r8, r2
 8009c54:	1c9c      	adds	r4, r3, #2
 8009c56:	46a1      	mov	r9, r4
 8009c58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c5c:	2830      	cmp	r0, #48	@ 0x30
 8009c5e:	d0fa      	beq.n	8009c56 <__gethex+0x12>
 8009c60:	eba9 0303 	sub.w	r3, r9, r3
 8009c64:	f1a3 0b02 	sub.w	fp, r3, #2
 8009c68:	f7ff ffd6 	bl	8009c18 <__hexdig_fun>
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d168      	bne.n	8009d44 <__gethex+0x100>
 8009c72:	49a0      	ldr	r1, [pc, #640]	@ (8009ef4 <__gethex+0x2b0>)
 8009c74:	2201      	movs	r2, #1
 8009c76:	4648      	mov	r0, r9
 8009c78:	f7ff f836 	bl	8008ce8 <strncmp>
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d167      	bne.n	8009d52 <__gethex+0x10e>
 8009c82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c86:	4626      	mov	r6, r4
 8009c88:	f7ff ffc6 	bl	8009c18 <__hexdig_fun>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d062      	beq.n	8009d56 <__gethex+0x112>
 8009c90:	4623      	mov	r3, r4
 8009c92:	7818      	ldrb	r0, [r3, #0]
 8009c94:	2830      	cmp	r0, #48	@ 0x30
 8009c96:	4699      	mov	r9, r3
 8009c98:	f103 0301 	add.w	r3, r3, #1
 8009c9c:	d0f9      	beq.n	8009c92 <__gethex+0x4e>
 8009c9e:	f7ff ffbb 	bl	8009c18 <__hexdig_fun>
 8009ca2:	fab0 f580 	clz	r5, r0
 8009ca6:	096d      	lsrs	r5, r5, #5
 8009ca8:	f04f 0b01 	mov.w	fp, #1
 8009cac:	464a      	mov	r2, r9
 8009cae:	4616      	mov	r6, r2
 8009cb0:	3201      	adds	r2, #1
 8009cb2:	7830      	ldrb	r0, [r6, #0]
 8009cb4:	f7ff ffb0 	bl	8009c18 <__hexdig_fun>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1f8      	bne.n	8009cae <__gethex+0x6a>
 8009cbc:	498d      	ldr	r1, [pc, #564]	@ (8009ef4 <__gethex+0x2b0>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff f811 	bl	8008ce8 <strncmp>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d13f      	bne.n	8009d4a <__gethex+0x106>
 8009cca:	b944      	cbnz	r4, 8009cde <__gethex+0x9a>
 8009ccc:	1c74      	adds	r4, r6, #1
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4616      	mov	r6, r2
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	7830      	ldrb	r0, [r6, #0]
 8009cd6:	f7ff ff9f 	bl	8009c18 <__hexdig_fun>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d1f8      	bne.n	8009cd0 <__gethex+0x8c>
 8009cde:	1ba4      	subs	r4, r4, r6
 8009ce0:	00a7      	lsls	r7, r4, #2
 8009ce2:	7833      	ldrb	r3, [r6, #0]
 8009ce4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009ce8:	2b50      	cmp	r3, #80	@ 0x50
 8009cea:	d13e      	bne.n	8009d6a <__gethex+0x126>
 8009cec:	7873      	ldrb	r3, [r6, #1]
 8009cee:	2b2b      	cmp	r3, #43	@ 0x2b
 8009cf0:	d033      	beq.n	8009d5a <__gethex+0x116>
 8009cf2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009cf4:	d034      	beq.n	8009d60 <__gethex+0x11c>
 8009cf6:	1c71      	adds	r1, r6, #1
 8009cf8:	2400      	movs	r4, #0
 8009cfa:	7808      	ldrb	r0, [r1, #0]
 8009cfc:	f7ff ff8c 	bl	8009c18 <__hexdig_fun>
 8009d00:	1e43      	subs	r3, r0, #1
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b18      	cmp	r3, #24
 8009d06:	d830      	bhi.n	8009d6a <__gethex+0x126>
 8009d08:	f1a0 0210 	sub.w	r2, r0, #16
 8009d0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d10:	f7ff ff82 	bl	8009c18 <__hexdig_fun>
 8009d14:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009d18:	fa5f fc8c 	uxtb.w	ip, ip
 8009d1c:	f1bc 0f18 	cmp.w	ip, #24
 8009d20:	f04f 030a 	mov.w	r3, #10
 8009d24:	d91e      	bls.n	8009d64 <__gethex+0x120>
 8009d26:	b104      	cbz	r4, 8009d2a <__gethex+0xe6>
 8009d28:	4252      	negs	r2, r2
 8009d2a:	4417      	add	r7, r2
 8009d2c:	f8ca 1000 	str.w	r1, [sl]
 8009d30:	b1ed      	cbz	r5, 8009d6e <__gethex+0x12a>
 8009d32:	f1bb 0f00 	cmp.w	fp, #0
 8009d36:	bf0c      	ite	eq
 8009d38:	2506      	moveq	r5, #6
 8009d3a:	2500      	movne	r5, #0
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	b005      	add	sp, #20
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	2500      	movs	r5, #0
 8009d46:	462c      	mov	r4, r5
 8009d48:	e7b0      	b.n	8009cac <__gethex+0x68>
 8009d4a:	2c00      	cmp	r4, #0
 8009d4c:	d1c7      	bne.n	8009cde <__gethex+0x9a>
 8009d4e:	4627      	mov	r7, r4
 8009d50:	e7c7      	b.n	8009ce2 <__gethex+0x9e>
 8009d52:	464e      	mov	r6, r9
 8009d54:	462f      	mov	r7, r5
 8009d56:	2501      	movs	r5, #1
 8009d58:	e7c3      	b.n	8009ce2 <__gethex+0x9e>
 8009d5a:	2400      	movs	r4, #0
 8009d5c:	1cb1      	adds	r1, r6, #2
 8009d5e:	e7cc      	b.n	8009cfa <__gethex+0xb6>
 8009d60:	2401      	movs	r4, #1
 8009d62:	e7fb      	b.n	8009d5c <__gethex+0x118>
 8009d64:	fb03 0002 	mla	r0, r3, r2, r0
 8009d68:	e7ce      	b.n	8009d08 <__gethex+0xc4>
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	e7de      	b.n	8009d2c <__gethex+0xe8>
 8009d6e:	eba6 0309 	sub.w	r3, r6, r9
 8009d72:	3b01      	subs	r3, #1
 8009d74:	4629      	mov	r1, r5
 8009d76:	2b07      	cmp	r3, #7
 8009d78:	dc0a      	bgt.n	8009d90 <__gethex+0x14c>
 8009d7a:	9801      	ldr	r0, [sp, #4]
 8009d7c:	f001 f994 	bl	800b0a8 <_Balloc>
 8009d80:	4604      	mov	r4, r0
 8009d82:	b940      	cbnz	r0, 8009d96 <__gethex+0x152>
 8009d84:	4b5c      	ldr	r3, [pc, #368]	@ (8009ef8 <__gethex+0x2b4>)
 8009d86:	4602      	mov	r2, r0
 8009d88:	21e4      	movs	r1, #228	@ 0xe4
 8009d8a:	485c      	ldr	r0, [pc, #368]	@ (8009efc <__gethex+0x2b8>)
 8009d8c:	f002 f866 	bl	800be5c <__assert_func>
 8009d90:	3101      	adds	r1, #1
 8009d92:	105b      	asrs	r3, r3, #1
 8009d94:	e7ef      	b.n	8009d76 <__gethex+0x132>
 8009d96:	f100 0a14 	add.w	sl, r0, #20
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4655      	mov	r5, sl
 8009d9e:	469b      	mov	fp, r3
 8009da0:	45b1      	cmp	r9, r6
 8009da2:	d337      	bcc.n	8009e14 <__gethex+0x1d0>
 8009da4:	f845 bb04 	str.w	fp, [r5], #4
 8009da8:	eba5 050a 	sub.w	r5, r5, sl
 8009dac:	10ad      	asrs	r5, r5, #2
 8009dae:	6125      	str	r5, [r4, #16]
 8009db0:	4658      	mov	r0, fp
 8009db2:	f001 fa6b 	bl	800b28c <__hi0bits>
 8009db6:	016d      	lsls	r5, r5, #5
 8009db8:	f8d8 6000 	ldr.w	r6, [r8]
 8009dbc:	1a2d      	subs	r5, r5, r0
 8009dbe:	42b5      	cmp	r5, r6
 8009dc0:	dd54      	ble.n	8009e6c <__gethex+0x228>
 8009dc2:	1bad      	subs	r5, r5, r6
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f001 fdff 	bl	800b9ca <__any_on>
 8009dcc:	4681      	mov	r9, r0
 8009dce:	b178      	cbz	r0, 8009df0 <__gethex+0x1ac>
 8009dd0:	1e6b      	subs	r3, r5, #1
 8009dd2:	1159      	asrs	r1, r3, #5
 8009dd4:	f003 021f 	and.w	r2, r3, #31
 8009dd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009ddc:	f04f 0901 	mov.w	r9, #1
 8009de0:	fa09 f202 	lsl.w	r2, r9, r2
 8009de4:	420a      	tst	r2, r1
 8009de6:	d003      	beq.n	8009df0 <__gethex+0x1ac>
 8009de8:	454b      	cmp	r3, r9
 8009dea:	dc36      	bgt.n	8009e5a <__gethex+0x216>
 8009dec:	f04f 0902 	mov.w	r9, #2
 8009df0:	4629      	mov	r1, r5
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7ff febe 	bl	8009b74 <rshift>
 8009df8:	442f      	add	r7, r5
 8009dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dfe:	42bb      	cmp	r3, r7
 8009e00:	da42      	bge.n	8009e88 <__gethex+0x244>
 8009e02:	9801      	ldr	r0, [sp, #4]
 8009e04:	4621      	mov	r1, r4
 8009e06:	f001 f98f 	bl	800b128 <_Bfree>
 8009e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	25a3      	movs	r5, #163	@ 0xa3
 8009e12:	e793      	b.n	8009d3c <__gethex+0xf8>
 8009e14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e18:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e1a:	d012      	beq.n	8009e42 <__gethex+0x1fe>
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d104      	bne.n	8009e2a <__gethex+0x1e6>
 8009e20:	f845 bb04 	str.w	fp, [r5], #4
 8009e24:	f04f 0b00 	mov.w	fp, #0
 8009e28:	465b      	mov	r3, fp
 8009e2a:	7830      	ldrb	r0, [r6, #0]
 8009e2c:	9303      	str	r3, [sp, #12]
 8009e2e:	f7ff fef3 	bl	8009c18 <__hexdig_fun>
 8009e32:	9b03      	ldr	r3, [sp, #12]
 8009e34:	f000 000f 	and.w	r0, r0, #15
 8009e38:	4098      	lsls	r0, r3
 8009e3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e3e:	3304      	adds	r3, #4
 8009e40:	e7ae      	b.n	8009da0 <__gethex+0x15c>
 8009e42:	45b1      	cmp	r9, r6
 8009e44:	d8ea      	bhi.n	8009e1c <__gethex+0x1d8>
 8009e46:	492b      	ldr	r1, [pc, #172]	@ (8009ef4 <__gethex+0x2b0>)
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7fe ff4b 	bl	8008ce8 <strncmp>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d1e1      	bne.n	8009e1c <__gethex+0x1d8>
 8009e58:	e7a2      	b.n	8009da0 <__gethex+0x15c>
 8009e5a:	1ea9      	subs	r1, r5, #2
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f001 fdb4 	bl	800b9ca <__any_on>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0c2      	beq.n	8009dec <__gethex+0x1a8>
 8009e66:	f04f 0903 	mov.w	r9, #3
 8009e6a:	e7c1      	b.n	8009df0 <__gethex+0x1ac>
 8009e6c:	da09      	bge.n	8009e82 <__gethex+0x23e>
 8009e6e:	1b75      	subs	r5, r6, r5
 8009e70:	4621      	mov	r1, r4
 8009e72:	9801      	ldr	r0, [sp, #4]
 8009e74:	462a      	mov	r2, r5
 8009e76:	f001 fb6f 	bl	800b558 <__lshift>
 8009e7a:	1b7f      	subs	r7, r7, r5
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	f100 0a14 	add.w	sl, r0, #20
 8009e82:	f04f 0900 	mov.w	r9, #0
 8009e86:	e7b8      	b.n	8009dfa <__gethex+0x1b6>
 8009e88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e8c:	42bd      	cmp	r5, r7
 8009e8e:	dd6f      	ble.n	8009f70 <__gethex+0x32c>
 8009e90:	1bed      	subs	r5, r5, r7
 8009e92:	42ae      	cmp	r6, r5
 8009e94:	dc34      	bgt.n	8009f00 <__gethex+0x2bc>
 8009e96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d022      	beq.n	8009ee4 <__gethex+0x2a0>
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d024      	beq.n	8009eec <__gethex+0x2a8>
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d115      	bne.n	8009ed2 <__gethex+0x28e>
 8009ea6:	42ae      	cmp	r6, r5
 8009ea8:	d113      	bne.n	8009ed2 <__gethex+0x28e>
 8009eaa:	2e01      	cmp	r6, #1
 8009eac:	d10b      	bne.n	8009ec6 <__gethex+0x282>
 8009eae:	9a02      	ldr	r2, [sp, #8]
 8009eb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	6123      	str	r3, [r4, #16]
 8009eba:	f8ca 3000 	str.w	r3, [sl]
 8009ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ec0:	2562      	movs	r5, #98	@ 0x62
 8009ec2:	601c      	str	r4, [r3, #0]
 8009ec4:	e73a      	b.n	8009d3c <__gethex+0xf8>
 8009ec6:	1e71      	subs	r1, r6, #1
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f001 fd7e 	bl	800b9ca <__any_on>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d1ed      	bne.n	8009eae <__gethex+0x26a>
 8009ed2:	9801      	ldr	r0, [sp, #4]
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	f001 f927 	bl	800b128 <_Bfree>
 8009eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009edc:	2300      	movs	r3, #0
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	2550      	movs	r5, #80	@ 0x50
 8009ee2:	e72b      	b.n	8009d3c <__gethex+0xf8>
 8009ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f3      	bne.n	8009ed2 <__gethex+0x28e>
 8009eea:	e7e0      	b.n	8009eae <__gethex+0x26a>
 8009eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1dd      	bne.n	8009eae <__gethex+0x26a>
 8009ef2:	e7ee      	b.n	8009ed2 <__gethex+0x28e>
 8009ef4:	0800c74f 	.word	0x0800c74f
 8009ef8:	0800c92d 	.word	0x0800c92d
 8009efc:	0800c93e 	.word	0x0800c93e
 8009f00:	1e6f      	subs	r7, r5, #1
 8009f02:	f1b9 0f00 	cmp.w	r9, #0
 8009f06:	d130      	bne.n	8009f6a <__gethex+0x326>
 8009f08:	b127      	cbz	r7, 8009f14 <__gethex+0x2d0>
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f001 fd5c 	bl	800b9ca <__any_on>
 8009f12:	4681      	mov	r9, r0
 8009f14:	117a      	asrs	r2, r7, #5
 8009f16:	2301      	movs	r3, #1
 8009f18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f1c:	f007 071f 	and.w	r7, r7, #31
 8009f20:	40bb      	lsls	r3, r7
 8009f22:	4213      	tst	r3, r2
 8009f24:	4629      	mov	r1, r5
 8009f26:	4620      	mov	r0, r4
 8009f28:	bf18      	it	ne
 8009f2a:	f049 0902 	orrne.w	r9, r9, #2
 8009f2e:	f7ff fe21 	bl	8009b74 <rshift>
 8009f32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f36:	1b76      	subs	r6, r6, r5
 8009f38:	2502      	movs	r5, #2
 8009f3a:	f1b9 0f00 	cmp.w	r9, #0
 8009f3e:	d047      	beq.n	8009fd0 <__gethex+0x38c>
 8009f40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d015      	beq.n	8009f74 <__gethex+0x330>
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d017      	beq.n	8009f7c <__gethex+0x338>
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d109      	bne.n	8009f64 <__gethex+0x320>
 8009f50:	f019 0f02 	tst.w	r9, #2
 8009f54:	d006      	beq.n	8009f64 <__gethex+0x320>
 8009f56:	f8da 3000 	ldr.w	r3, [sl]
 8009f5a:	ea49 0903 	orr.w	r9, r9, r3
 8009f5e:	f019 0f01 	tst.w	r9, #1
 8009f62:	d10e      	bne.n	8009f82 <__gethex+0x33e>
 8009f64:	f045 0510 	orr.w	r5, r5, #16
 8009f68:	e032      	b.n	8009fd0 <__gethex+0x38c>
 8009f6a:	f04f 0901 	mov.w	r9, #1
 8009f6e:	e7d1      	b.n	8009f14 <__gethex+0x2d0>
 8009f70:	2501      	movs	r5, #1
 8009f72:	e7e2      	b.n	8009f3a <__gethex+0x2f6>
 8009f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f76:	f1c3 0301 	rsb	r3, r3, #1
 8009f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0f0      	beq.n	8009f64 <__gethex+0x320>
 8009f82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f86:	f104 0314 	add.w	r3, r4, #20
 8009f8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f92:	f04f 0c00 	mov.w	ip, #0
 8009f96:	4618      	mov	r0, r3
 8009f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009fa0:	d01b      	beq.n	8009fda <__gethex+0x396>
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	6002      	str	r2, [r0, #0]
 8009fa6:	2d02      	cmp	r5, #2
 8009fa8:	f104 0314 	add.w	r3, r4, #20
 8009fac:	d13c      	bne.n	800a028 <__gethex+0x3e4>
 8009fae:	f8d8 2000 	ldr.w	r2, [r8]
 8009fb2:	3a01      	subs	r2, #1
 8009fb4:	42b2      	cmp	r2, r6
 8009fb6:	d109      	bne.n	8009fcc <__gethex+0x388>
 8009fb8:	1171      	asrs	r1, r6, #5
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fc0:	f006 061f 	and.w	r6, r6, #31
 8009fc4:	fa02 f606 	lsl.w	r6, r2, r6
 8009fc8:	421e      	tst	r6, r3
 8009fca:	d13a      	bne.n	800a042 <__gethex+0x3fe>
 8009fcc:	f045 0520 	orr.w	r5, r5, #32
 8009fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd2:	601c      	str	r4, [r3, #0]
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	601f      	str	r7, [r3, #0]
 8009fd8:	e6b0      	b.n	8009d3c <__gethex+0xf8>
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009fe0:	d8d9      	bhi.n	8009f96 <__gethex+0x352>
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	459b      	cmp	fp, r3
 8009fe6:	db17      	blt.n	800a018 <__gethex+0x3d4>
 8009fe8:	6861      	ldr	r1, [r4, #4]
 8009fea:	9801      	ldr	r0, [sp, #4]
 8009fec:	3101      	adds	r1, #1
 8009fee:	f001 f85b 	bl	800b0a8 <_Balloc>
 8009ff2:	4681      	mov	r9, r0
 8009ff4:	b918      	cbnz	r0, 8009ffe <__gethex+0x3ba>
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	@ (800a060 <__gethex+0x41c>)
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	2184      	movs	r1, #132	@ 0x84
 8009ffc:	e6c5      	b.n	8009d8a <__gethex+0x146>
 8009ffe:	6922      	ldr	r2, [r4, #16]
 800a000:	3202      	adds	r2, #2
 800a002:	f104 010c 	add.w	r1, r4, #12
 800a006:	0092      	lsls	r2, r2, #2
 800a008:	300c      	adds	r0, #12
 800a00a:	f7fe fefe 	bl	8008e0a <memcpy>
 800a00e:	4621      	mov	r1, r4
 800a010:	9801      	ldr	r0, [sp, #4]
 800a012:	f001 f889 	bl	800b128 <_Bfree>
 800a016:	464c      	mov	r4, r9
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a020:	6122      	str	r2, [r4, #16]
 800a022:	2201      	movs	r2, #1
 800a024:	615a      	str	r2, [r3, #20]
 800a026:	e7be      	b.n	8009fa6 <__gethex+0x362>
 800a028:	6922      	ldr	r2, [r4, #16]
 800a02a:	455a      	cmp	r2, fp
 800a02c:	dd0b      	ble.n	800a046 <__gethex+0x402>
 800a02e:	2101      	movs	r1, #1
 800a030:	4620      	mov	r0, r4
 800a032:	f7ff fd9f 	bl	8009b74 <rshift>
 800a036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a03a:	3701      	adds	r7, #1
 800a03c:	42bb      	cmp	r3, r7
 800a03e:	f6ff aee0 	blt.w	8009e02 <__gethex+0x1be>
 800a042:	2501      	movs	r5, #1
 800a044:	e7c2      	b.n	8009fcc <__gethex+0x388>
 800a046:	f016 061f 	ands.w	r6, r6, #31
 800a04a:	d0fa      	beq.n	800a042 <__gethex+0x3fe>
 800a04c:	4453      	add	r3, sl
 800a04e:	f1c6 0620 	rsb	r6, r6, #32
 800a052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a056:	f001 f919 	bl	800b28c <__hi0bits>
 800a05a:	42b0      	cmp	r0, r6
 800a05c:	dbe7      	blt.n	800a02e <__gethex+0x3ea>
 800a05e:	e7f0      	b.n	800a042 <__gethex+0x3fe>
 800a060:	0800c92d 	.word	0x0800c92d

0800a064 <L_shift>:
 800a064:	f1c2 0208 	rsb	r2, r2, #8
 800a068:	0092      	lsls	r2, r2, #2
 800a06a:	b570      	push	{r4, r5, r6, lr}
 800a06c:	f1c2 0620 	rsb	r6, r2, #32
 800a070:	6843      	ldr	r3, [r0, #4]
 800a072:	6804      	ldr	r4, [r0, #0]
 800a074:	fa03 f506 	lsl.w	r5, r3, r6
 800a078:	432c      	orrs	r4, r5
 800a07a:	40d3      	lsrs	r3, r2
 800a07c:	6004      	str	r4, [r0, #0]
 800a07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a082:	4288      	cmp	r0, r1
 800a084:	d3f4      	bcc.n	800a070 <L_shift+0xc>
 800a086:	bd70      	pop	{r4, r5, r6, pc}

0800a088 <__match>:
 800a088:	b530      	push	{r4, r5, lr}
 800a08a:	6803      	ldr	r3, [r0, #0]
 800a08c:	3301      	adds	r3, #1
 800a08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a092:	b914      	cbnz	r4, 800a09a <__match+0x12>
 800a094:	6003      	str	r3, [r0, #0]
 800a096:	2001      	movs	r0, #1
 800a098:	bd30      	pop	{r4, r5, pc}
 800a09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a09e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a0a2:	2d19      	cmp	r5, #25
 800a0a4:	bf98      	it	ls
 800a0a6:	3220      	addls	r2, #32
 800a0a8:	42a2      	cmp	r2, r4
 800a0aa:	d0f0      	beq.n	800a08e <__match+0x6>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e7f3      	b.n	800a098 <__match+0x10>

0800a0b0 <__hexnan>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	6801      	ldr	r1, [r0, #0]
 800a0b8:	115e      	asrs	r6, r3, #5
 800a0ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0be:	f013 031f 	ands.w	r3, r3, #31
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	bf18      	it	ne
 800a0c6:	3604      	addne	r6, #4
 800a0c8:	2500      	movs	r5, #0
 800a0ca:	1f37      	subs	r7, r6, #4
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	4690      	mov	r8, r2
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0d6:	46b9      	mov	r9, r7
 800a0d8:	463c      	mov	r4, r7
 800a0da:	9502      	str	r5, [sp, #8]
 800a0dc:	46ab      	mov	fp, r5
 800a0de:	784a      	ldrb	r2, [r1, #1]
 800a0e0:	1c4b      	adds	r3, r1, #1
 800a0e2:	9303      	str	r3, [sp, #12]
 800a0e4:	b342      	cbz	r2, 800a138 <__hexnan+0x88>
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	9105      	str	r1, [sp, #20]
 800a0ea:	9204      	str	r2, [sp, #16]
 800a0ec:	f7ff fd94 	bl	8009c18 <__hexdig_fun>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d151      	bne.n	800a198 <__hexnan+0xe8>
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	9905      	ldr	r1, [sp, #20]
 800a0f8:	2a20      	cmp	r2, #32
 800a0fa:	d818      	bhi.n	800a12e <__hexnan+0x7e>
 800a0fc:	9b02      	ldr	r3, [sp, #8]
 800a0fe:	459b      	cmp	fp, r3
 800a100:	dd13      	ble.n	800a12a <__hexnan+0x7a>
 800a102:	454c      	cmp	r4, r9
 800a104:	d206      	bcs.n	800a114 <__hexnan+0x64>
 800a106:	2d07      	cmp	r5, #7
 800a108:	dc04      	bgt.n	800a114 <__hexnan+0x64>
 800a10a:	462a      	mov	r2, r5
 800a10c:	4649      	mov	r1, r9
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff ffa8 	bl	800a064 <L_shift>
 800a114:	4544      	cmp	r4, r8
 800a116:	d952      	bls.n	800a1be <__hexnan+0x10e>
 800a118:	2300      	movs	r3, #0
 800a11a:	f1a4 0904 	sub.w	r9, r4, #4
 800a11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a122:	f8cd b008 	str.w	fp, [sp, #8]
 800a126:	464c      	mov	r4, r9
 800a128:	461d      	mov	r5, r3
 800a12a:	9903      	ldr	r1, [sp, #12]
 800a12c:	e7d7      	b.n	800a0de <__hexnan+0x2e>
 800a12e:	2a29      	cmp	r2, #41	@ 0x29
 800a130:	d157      	bne.n	800a1e2 <__hexnan+0x132>
 800a132:	3102      	adds	r1, #2
 800a134:	f8ca 1000 	str.w	r1, [sl]
 800a138:	f1bb 0f00 	cmp.w	fp, #0
 800a13c:	d051      	beq.n	800a1e2 <__hexnan+0x132>
 800a13e:	454c      	cmp	r4, r9
 800a140:	d206      	bcs.n	800a150 <__hexnan+0xa0>
 800a142:	2d07      	cmp	r5, #7
 800a144:	dc04      	bgt.n	800a150 <__hexnan+0xa0>
 800a146:	462a      	mov	r2, r5
 800a148:	4649      	mov	r1, r9
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7ff ff8a 	bl	800a064 <L_shift>
 800a150:	4544      	cmp	r4, r8
 800a152:	d936      	bls.n	800a1c2 <__hexnan+0x112>
 800a154:	f1a8 0204 	sub.w	r2, r8, #4
 800a158:	4623      	mov	r3, r4
 800a15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a15e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a162:	429f      	cmp	r7, r3
 800a164:	d2f9      	bcs.n	800a15a <__hexnan+0xaa>
 800a166:	1b3b      	subs	r3, r7, r4
 800a168:	f023 0303 	bic.w	r3, r3, #3
 800a16c:	3304      	adds	r3, #4
 800a16e:	3401      	adds	r4, #1
 800a170:	3e03      	subs	r6, #3
 800a172:	42b4      	cmp	r4, r6
 800a174:	bf88      	it	hi
 800a176:	2304      	movhi	r3, #4
 800a178:	4443      	add	r3, r8
 800a17a:	2200      	movs	r2, #0
 800a17c:	f843 2b04 	str.w	r2, [r3], #4
 800a180:	429f      	cmp	r7, r3
 800a182:	d2fb      	bcs.n	800a17c <__hexnan+0xcc>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	b91b      	cbnz	r3, 800a190 <__hexnan+0xe0>
 800a188:	4547      	cmp	r7, r8
 800a18a:	d128      	bne.n	800a1de <__hexnan+0x12e>
 800a18c:	2301      	movs	r3, #1
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	2005      	movs	r0, #5
 800a192:	b007      	add	sp, #28
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	3501      	adds	r5, #1
 800a19a:	2d08      	cmp	r5, #8
 800a19c:	f10b 0b01 	add.w	fp, fp, #1
 800a1a0:	dd06      	ble.n	800a1b0 <__hexnan+0x100>
 800a1a2:	4544      	cmp	r4, r8
 800a1a4:	d9c1      	bls.n	800a12a <__hexnan+0x7a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1ac:	2501      	movs	r5, #1
 800a1ae:	3c04      	subs	r4, #4
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	f000 000f 	and.w	r0, r0, #15
 800a1b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1ba:	6020      	str	r0, [r4, #0]
 800a1bc:	e7b5      	b.n	800a12a <__hexnan+0x7a>
 800a1be:	2508      	movs	r5, #8
 800a1c0:	e7b3      	b.n	800a12a <__hexnan+0x7a>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d0dd      	beq.n	800a184 <__hexnan+0xd4>
 800a1c8:	f1c3 0320 	rsb	r3, r3, #32
 800a1cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1d0:	40da      	lsrs	r2, r3
 800a1d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1dc:	e7d2      	b.n	800a184 <__hexnan+0xd4>
 800a1de:	3f04      	subs	r7, #4
 800a1e0:	e7d0      	b.n	800a184 <__hexnan+0xd4>
 800a1e2:	2004      	movs	r0, #4
 800a1e4:	e7d5      	b.n	800a192 <__hexnan+0xe2>

0800a1e6 <__ssputs_r>:
 800a1e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ea:	688e      	ldr	r6, [r1, #8]
 800a1ec:	461f      	mov	r7, r3
 800a1ee:	42be      	cmp	r6, r7
 800a1f0:	680b      	ldr	r3, [r1, #0]
 800a1f2:	4682      	mov	sl, r0
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	4690      	mov	r8, r2
 800a1f8:	d82d      	bhi.n	800a256 <__ssputs_r+0x70>
 800a1fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a202:	d026      	beq.n	800a252 <__ssputs_r+0x6c>
 800a204:	6965      	ldr	r5, [r4, #20]
 800a206:	6909      	ldr	r1, [r1, #16]
 800a208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a20c:	eba3 0901 	sub.w	r9, r3, r1
 800a210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a214:	1c7b      	adds	r3, r7, #1
 800a216:	444b      	add	r3, r9
 800a218:	106d      	asrs	r5, r5, #1
 800a21a:	429d      	cmp	r5, r3
 800a21c:	bf38      	it	cc
 800a21e:	461d      	movcc	r5, r3
 800a220:	0553      	lsls	r3, r2, #21
 800a222:	d527      	bpl.n	800a274 <__ssputs_r+0x8e>
 800a224:	4629      	mov	r1, r5
 800a226:	f000 fc6d 	bl	800ab04 <_malloc_r>
 800a22a:	4606      	mov	r6, r0
 800a22c:	b360      	cbz	r0, 800a288 <__ssputs_r+0xa2>
 800a22e:	6921      	ldr	r1, [r4, #16]
 800a230:	464a      	mov	r2, r9
 800a232:	f7fe fdea 	bl	8008e0a <memcpy>
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a23c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	6126      	str	r6, [r4, #16]
 800a244:	6165      	str	r5, [r4, #20]
 800a246:	444e      	add	r6, r9
 800a248:	eba5 0509 	sub.w	r5, r5, r9
 800a24c:	6026      	str	r6, [r4, #0]
 800a24e:	60a5      	str	r5, [r4, #8]
 800a250:	463e      	mov	r6, r7
 800a252:	42be      	cmp	r6, r7
 800a254:	d900      	bls.n	800a258 <__ssputs_r+0x72>
 800a256:	463e      	mov	r6, r7
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	4632      	mov	r2, r6
 800a25c:	4641      	mov	r1, r8
 800a25e:	f001 fdb0 	bl	800bdc2 <memmove>
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	1b9b      	subs	r3, r3, r6
 800a266:	60a3      	str	r3, [r4, #8]
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	4433      	add	r3, r6
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	2000      	movs	r0, #0
 800a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a274:	462a      	mov	r2, r5
 800a276:	f001 fc03 	bl	800ba80 <_realloc_r>
 800a27a:	4606      	mov	r6, r0
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d1e0      	bne.n	800a242 <__ssputs_r+0x5c>
 800a280:	6921      	ldr	r1, [r4, #16]
 800a282:	4650      	mov	r0, sl
 800a284:	f7ff fc2c 	bl	8009ae0 <_free_r>
 800a288:	230c      	movs	r3, #12
 800a28a:	f8ca 3000 	str.w	r3, [sl]
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a29a:	e7e9      	b.n	800a270 <__ssputs_r+0x8a>

0800a29c <_svfiprintf_r>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	4698      	mov	r8, r3
 800a2a2:	898b      	ldrh	r3, [r1, #12]
 800a2a4:	061b      	lsls	r3, r3, #24
 800a2a6:	b09d      	sub	sp, #116	@ 0x74
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	d510      	bpl.n	800a2d2 <_svfiprintf_r+0x36>
 800a2b0:	690b      	ldr	r3, [r1, #16]
 800a2b2:	b973      	cbnz	r3, 800a2d2 <_svfiprintf_r+0x36>
 800a2b4:	2140      	movs	r1, #64	@ 0x40
 800a2b6:	f000 fc25 	bl	800ab04 <_malloc_r>
 800a2ba:	6028      	str	r0, [r5, #0]
 800a2bc:	6128      	str	r0, [r5, #16]
 800a2be:	b930      	cbnz	r0, 800a2ce <_svfiprintf_r+0x32>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2c8:	b01d      	add	sp, #116	@ 0x74
 800a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	2340      	movs	r3, #64	@ 0x40
 800a2d0:	616b      	str	r3, [r5, #20]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d6:	2320      	movs	r3, #32
 800a2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e0:	2330      	movs	r3, #48	@ 0x30
 800a2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a480 <_svfiprintf_r+0x1e4>
 800a2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2ea:	f04f 0901 	mov.w	r9, #1
 800a2ee:	4623      	mov	r3, r4
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f6:	b10a      	cbz	r2, 800a2fc <_svfiprintf_r+0x60>
 800a2f8:	2a25      	cmp	r2, #37	@ 0x25
 800a2fa:	d1f9      	bne.n	800a2f0 <_svfiprintf_r+0x54>
 800a2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a300:	d00b      	beq.n	800a31a <_svfiprintf_r+0x7e>
 800a302:	465b      	mov	r3, fp
 800a304:	4622      	mov	r2, r4
 800a306:	4629      	mov	r1, r5
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ff6c 	bl	800a1e6 <__ssputs_r>
 800a30e:	3001      	adds	r0, #1
 800a310:	f000 80a7 	beq.w	800a462 <_svfiprintf_r+0x1c6>
 800a314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a316:	445a      	add	r2, fp
 800a318:	9209      	str	r2, [sp, #36]	@ 0x24
 800a31a:	f89a 3000 	ldrb.w	r3, [sl]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 809f 	beq.w	800a462 <_svfiprintf_r+0x1c6>
 800a324:	2300      	movs	r3, #0
 800a326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32e:	f10a 0a01 	add.w	sl, sl, #1
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	9307      	str	r3, [sp, #28]
 800a336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a33c:	4654      	mov	r4, sl
 800a33e:	2205      	movs	r2, #5
 800a340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a344:	484e      	ldr	r0, [pc, #312]	@ (800a480 <_svfiprintf_r+0x1e4>)
 800a346:	f7f5 ff6b 	bl	8000220 <memchr>
 800a34a:	9a04      	ldr	r2, [sp, #16]
 800a34c:	b9d8      	cbnz	r0, 800a386 <_svfiprintf_r+0xea>
 800a34e:	06d0      	lsls	r0, r2, #27
 800a350:	bf44      	itt	mi
 800a352:	2320      	movmi	r3, #32
 800a354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a358:	0711      	lsls	r1, r2, #28
 800a35a:	bf44      	itt	mi
 800a35c:	232b      	movmi	r3, #43	@ 0x2b
 800a35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a362:	f89a 3000 	ldrb.w	r3, [sl]
 800a366:	2b2a      	cmp	r3, #42	@ 0x2a
 800a368:	d015      	beq.n	800a396 <_svfiprintf_r+0xfa>
 800a36a:	9a07      	ldr	r2, [sp, #28]
 800a36c:	4654      	mov	r4, sl
 800a36e:	2000      	movs	r0, #0
 800a370:	f04f 0c0a 	mov.w	ip, #10
 800a374:	4621      	mov	r1, r4
 800a376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a37a:	3b30      	subs	r3, #48	@ 0x30
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	d94b      	bls.n	800a418 <_svfiprintf_r+0x17c>
 800a380:	b1b0      	cbz	r0, 800a3b0 <_svfiprintf_r+0x114>
 800a382:	9207      	str	r2, [sp, #28]
 800a384:	e014      	b.n	800a3b0 <_svfiprintf_r+0x114>
 800a386:	eba0 0308 	sub.w	r3, r0, r8
 800a38a:	fa09 f303 	lsl.w	r3, r9, r3
 800a38e:	4313      	orrs	r3, r2
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	46a2      	mov	sl, r4
 800a394:	e7d2      	b.n	800a33c <_svfiprintf_r+0xa0>
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	1d19      	adds	r1, r3, #4
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	9103      	str	r1, [sp, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bfbb      	ittet	lt
 800a3a2:	425b      	neglt	r3, r3
 800a3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a8:	9307      	strge	r3, [sp, #28]
 800a3aa:	9307      	strlt	r3, [sp, #28]
 800a3ac:	bfb8      	it	lt
 800a3ae:	9204      	strlt	r2, [sp, #16]
 800a3b0:	7823      	ldrb	r3, [r4, #0]
 800a3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3b4:	d10a      	bne.n	800a3cc <_svfiprintf_r+0x130>
 800a3b6:	7863      	ldrb	r3, [r4, #1]
 800a3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ba:	d132      	bne.n	800a422 <_svfiprintf_r+0x186>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3c8:	3402      	adds	r4, #2
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a490 <_svfiprintf_r+0x1f4>
 800a3d0:	7821      	ldrb	r1, [r4, #0]
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	f7f5 ff23 	bl	8000220 <memchr>
 800a3da:	b138      	cbz	r0, 800a3ec <_svfiprintf_r+0x150>
 800a3dc:	9b04      	ldr	r3, [sp, #16]
 800a3de:	eba0 000a 	sub.w	r0, r0, sl
 800a3e2:	2240      	movs	r2, #64	@ 0x40
 800a3e4:	4082      	lsls	r2, r0
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	3401      	adds	r4, #1
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f0:	4824      	ldr	r0, [pc, #144]	@ (800a484 <_svfiprintf_r+0x1e8>)
 800a3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3f6:	2206      	movs	r2, #6
 800a3f8:	f7f5 ff12 	bl	8000220 <memchr>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d036      	beq.n	800a46e <_svfiprintf_r+0x1d2>
 800a400:	4b21      	ldr	r3, [pc, #132]	@ (800a488 <_svfiprintf_r+0x1ec>)
 800a402:	bb1b      	cbnz	r3, 800a44c <_svfiprintf_r+0x1b0>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	3307      	adds	r3, #7
 800a408:	f023 0307 	bic.w	r3, r3, #7
 800a40c:	3308      	adds	r3, #8
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a412:	4433      	add	r3, r6
 800a414:	9309      	str	r3, [sp, #36]	@ 0x24
 800a416:	e76a      	b.n	800a2ee <_svfiprintf_r+0x52>
 800a418:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41c:	460c      	mov	r4, r1
 800a41e:	2001      	movs	r0, #1
 800a420:	e7a8      	b.n	800a374 <_svfiprintf_r+0xd8>
 800a422:	2300      	movs	r3, #0
 800a424:	3401      	adds	r4, #1
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	4619      	mov	r1, r3
 800a42a:	f04f 0c0a 	mov.w	ip, #10
 800a42e:	4620      	mov	r0, r4
 800a430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a434:	3a30      	subs	r2, #48	@ 0x30
 800a436:	2a09      	cmp	r2, #9
 800a438:	d903      	bls.n	800a442 <_svfiprintf_r+0x1a6>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0c6      	beq.n	800a3cc <_svfiprintf_r+0x130>
 800a43e:	9105      	str	r1, [sp, #20]
 800a440:	e7c4      	b.n	800a3cc <_svfiprintf_r+0x130>
 800a442:	fb0c 2101 	mla	r1, ip, r1, r2
 800a446:	4604      	mov	r4, r0
 800a448:	2301      	movs	r3, #1
 800a44a:	e7f0      	b.n	800a42e <_svfiprintf_r+0x192>
 800a44c:	ab03      	add	r3, sp, #12
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	462a      	mov	r2, r5
 800a452:	4b0e      	ldr	r3, [pc, #56]	@ (800a48c <_svfiprintf_r+0x1f0>)
 800a454:	a904      	add	r1, sp, #16
 800a456:	4638      	mov	r0, r7
 800a458:	f7fc fe32 	bl	80070c0 <_printf_float>
 800a45c:	1c42      	adds	r2, r0, #1
 800a45e:	4606      	mov	r6, r0
 800a460:	d1d6      	bne.n	800a410 <_svfiprintf_r+0x174>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	065b      	lsls	r3, r3, #25
 800a466:	f53f af2d 	bmi.w	800a2c4 <_svfiprintf_r+0x28>
 800a46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a46c:	e72c      	b.n	800a2c8 <_svfiprintf_r+0x2c>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <_svfiprintf_r+0x1f0>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	4638      	mov	r0, r7
 800a47a:	f7fd f8b9 	bl	80075f0 <_printf_i>
 800a47e:	e7ed      	b.n	800a45c <_svfiprintf_r+0x1c0>
 800a480:	0800c99e 	.word	0x0800c99e
 800a484:	0800c9a8 	.word	0x0800c9a8
 800a488:	080070c1 	.word	0x080070c1
 800a48c:	0800a1e7 	.word	0x0800a1e7
 800a490:	0800c9a4 	.word	0x0800c9a4

0800a494 <_sungetc_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	1c4b      	adds	r3, r1, #1
 800a498:	4614      	mov	r4, r2
 800a49a:	d103      	bne.n	800a4a4 <_sungetc_r+0x10>
 800a49c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	8993      	ldrh	r3, [r2, #12]
 800a4a6:	f023 0320 	bic.w	r3, r3, #32
 800a4aa:	8193      	strh	r3, [r2, #12]
 800a4ac:	6853      	ldr	r3, [r2, #4]
 800a4ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a4b0:	b2cd      	uxtb	r5, r1
 800a4b2:	b18a      	cbz	r2, 800a4d8 <_sungetc_r+0x44>
 800a4b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	dd08      	ble.n	800a4cc <_sungetc_r+0x38>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	1e5a      	subs	r2, r3, #1
 800a4be:	6022      	str	r2, [r4, #0]
 800a4c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a4c4:	6863      	ldr	r3, [r4, #4]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	e7e9      	b.n	800a4a0 <_sungetc_r+0xc>
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	f001 fa9d 	bl	800ba0c <__submore>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0f1      	beq.n	800a4ba <_sungetc_r+0x26>
 800a4d6:	e7e1      	b.n	800a49c <_sungetc_r+0x8>
 800a4d8:	6921      	ldr	r1, [r4, #16]
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	b141      	cbz	r1, 800a4f0 <_sungetc_r+0x5c>
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	d206      	bcs.n	800a4f0 <_sungetc_r+0x5c>
 800a4e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a4e6:	42a9      	cmp	r1, r5
 800a4e8:	d102      	bne.n	800a4f0 <_sungetc_r+0x5c>
 800a4ea:	3a01      	subs	r2, #1
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	e7ea      	b.n	800a4c6 <_sungetc_r+0x32>
 800a4f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a4fe:	4623      	mov	r3, r4
 800a500:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	2301      	movs	r3, #1
 800a508:	e7de      	b.n	800a4c8 <_sungetc_r+0x34>

0800a50a <__ssrefill_r>:
 800a50a:	b510      	push	{r4, lr}
 800a50c:	460c      	mov	r4, r1
 800a50e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a510:	b169      	cbz	r1, 800a52e <__ssrefill_r+0x24>
 800a512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a516:	4299      	cmp	r1, r3
 800a518:	d001      	beq.n	800a51e <__ssrefill_r+0x14>
 800a51a:	f7ff fae1 	bl	8009ae0 <_free_r>
 800a51e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	2000      	movs	r0, #0
 800a524:	6360      	str	r0, [r4, #52]	@ 0x34
 800a526:	b113      	cbz	r3, 800a52e <__ssrefill_r+0x24>
 800a528:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	bd10      	pop	{r4, pc}
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	6063      	str	r3, [r4, #4]
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0320 	orr.w	r3, r3, #32
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a542:	e7f3      	b.n	800a52c <__ssrefill_r+0x22>

0800a544 <__ssvfiscanf_r>:
 800a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a548:	460c      	mov	r4, r1
 800a54a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a54e:	2100      	movs	r1, #0
 800a550:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a554:	49a5      	ldr	r1, [pc, #660]	@ (800a7ec <__ssvfiscanf_r+0x2a8>)
 800a556:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a558:	f10d 0804 	add.w	r8, sp, #4
 800a55c:	49a4      	ldr	r1, [pc, #656]	@ (800a7f0 <__ssvfiscanf_r+0x2ac>)
 800a55e:	4fa5      	ldr	r7, [pc, #660]	@ (800a7f4 <__ssvfiscanf_r+0x2b0>)
 800a560:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a564:	4606      	mov	r6, r0
 800a566:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	7813      	ldrb	r3, [r2, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8158 	beq.w	800a822 <__ssvfiscanf_r+0x2de>
 800a572:	5cf9      	ldrb	r1, [r7, r3]
 800a574:	f011 0108 	ands.w	r1, r1, #8
 800a578:	f102 0501 	add.w	r5, r2, #1
 800a57c:	d019      	beq.n	800a5b2 <__ssvfiscanf_r+0x6e>
 800a57e:	6863      	ldr	r3, [r4, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	dd0f      	ble.n	800a5a4 <__ssvfiscanf_r+0x60>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	5cba      	ldrb	r2, [r7, r2]
 800a58a:	0712      	lsls	r2, r2, #28
 800a58c:	d401      	bmi.n	800a592 <__ssvfiscanf_r+0x4e>
 800a58e:	462a      	mov	r2, r5
 800a590:	e7eb      	b.n	800a56a <__ssvfiscanf_r+0x26>
 800a592:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a594:	3201      	adds	r2, #1
 800a596:	9245      	str	r2, [sp, #276]	@ 0x114
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	3301      	adds	r3, #1
 800a59c:	3a01      	subs	r2, #1
 800a59e:	6062      	str	r2, [r4, #4]
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	e7ec      	b.n	800a57e <__ssvfiscanf_r+0x3a>
 800a5a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4798      	blx	r3
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d0e9      	beq.n	800a584 <__ssvfiscanf_r+0x40>
 800a5b0:	e7ed      	b.n	800a58e <__ssvfiscanf_r+0x4a>
 800a5b2:	2b25      	cmp	r3, #37	@ 0x25
 800a5b4:	d012      	beq.n	800a5dc <__ssvfiscanf_r+0x98>
 800a5b6:	4699      	mov	r9, r3
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f340 8093 	ble.w	800a6e6 <__ssvfiscanf_r+0x1a2>
 800a5c0:	6822      	ldr	r2, [r4, #0]
 800a5c2:	7813      	ldrb	r3, [r2, #0]
 800a5c4:	454b      	cmp	r3, r9
 800a5c6:	f040 812c 	bne.w	800a822 <__ssvfiscanf_r+0x2de>
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	6022      	str	r2, [r4, #0]
 800a5d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800a5da:	e7d8      	b.n	800a58e <__ssvfiscanf_r+0x4a>
 800a5dc:	9141      	str	r1, [sp, #260]	@ 0x104
 800a5de:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a5e0:	7853      	ldrb	r3, [r2, #1]
 800a5e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e4:	bf02      	ittt	eq
 800a5e6:	2310      	moveq	r3, #16
 800a5e8:	1c95      	addeq	r5, r2, #2
 800a5ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a5ec:	220a      	movs	r2, #10
 800a5ee:	46a9      	mov	r9, r5
 800a5f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a5f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d91e      	bls.n	800a63a <__ssvfiscanf_r+0xf6>
 800a5fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a7f8 <__ssvfiscanf_r+0x2b4>
 800a600:	2203      	movs	r2, #3
 800a602:	4650      	mov	r0, sl
 800a604:	f7f5 fe0c 	bl	8000220 <memchr>
 800a608:	b138      	cbz	r0, 800a61a <__ssvfiscanf_r+0xd6>
 800a60a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a60c:	eba0 000a 	sub.w	r0, r0, sl
 800a610:	2301      	movs	r3, #1
 800a612:	4083      	lsls	r3, r0
 800a614:	4313      	orrs	r3, r2
 800a616:	9341      	str	r3, [sp, #260]	@ 0x104
 800a618:	464d      	mov	r5, r9
 800a61a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a61e:	2b78      	cmp	r3, #120	@ 0x78
 800a620:	d806      	bhi.n	800a630 <__ssvfiscanf_r+0xec>
 800a622:	2b57      	cmp	r3, #87	@ 0x57
 800a624:	d810      	bhi.n	800a648 <__ssvfiscanf_r+0x104>
 800a626:	2b25      	cmp	r3, #37	@ 0x25
 800a628:	d0c5      	beq.n	800a5b6 <__ssvfiscanf_r+0x72>
 800a62a:	d857      	bhi.n	800a6dc <__ssvfiscanf_r+0x198>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d065      	beq.n	800a6fc <__ssvfiscanf_r+0x1b8>
 800a630:	2303      	movs	r3, #3
 800a632:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a634:	230a      	movs	r3, #10
 800a636:	9342      	str	r3, [sp, #264]	@ 0x108
 800a638:	e078      	b.n	800a72c <__ssvfiscanf_r+0x1e8>
 800a63a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a63c:	fb02 1103 	mla	r1, r2, r3, r1
 800a640:	3930      	subs	r1, #48	@ 0x30
 800a642:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a644:	464d      	mov	r5, r9
 800a646:	e7d2      	b.n	800a5ee <__ssvfiscanf_r+0xaa>
 800a648:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a64c:	2a20      	cmp	r2, #32
 800a64e:	d8ef      	bhi.n	800a630 <__ssvfiscanf_r+0xec>
 800a650:	a101      	add	r1, pc, #4	@ (adr r1, 800a658 <__ssvfiscanf_r+0x114>)
 800a652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a70b 	.word	0x0800a70b
 800a65c:	0800a631 	.word	0x0800a631
 800a660:	0800a631 	.word	0x0800a631
 800a664:	0800a765 	.word	0x0800a765
 800a668:	0800a631 	.word	0x0800a631
 800a66c:	0800a631 	.word	0x0800a631
 800a670:	0800a631 	.word	0x0800a631
 800a674:	0800a631 	.word	0x0800a631
 800a678:	0800a631 	.word	0x0800a631
 800a67c:	0800a631 	.word	0x0800a631
 800a680:	0800a631 	.word	0x0800a631
 800a684:	0800a77b 	.word	0x0800a77b
 800a688:	0800a761 	.word	0x0800a761
 800a68c:	0800a6e3 	.word	0x0800a6e3
 800a690:	0800a6e3 	.word	0x0800a6e3
 800a694:	0800a6e3 	.word	0x0800a6e3
 800a698:	0800a631 	.word	0x0800a631
 800a69c:	0800a71d 	.word	0x0800a71d
 800a6a0:	0800a631 	.word	0x0800a631
 800a6a4:	0800a631 	.word	0x0800a631
 800a6a8:	0800a631 	.word	0x0800a631
 800a6ac:	0800a631 	.word	0x0800a631
 800a6b0:	0800a78b 	.word	0x0800a78b
 800a6b4:	0800a725 	.word	0x0800a725
 800a6b8:	0800a703 	.word	0x0800a703
 800a6bc:	0800a631 	.word	0x0800a631
 800a6c0:	0800a631 	.word	0x0800a631
 800a6c4:	0800a787 	.word	0x0800a787
 800a6c8:	0800a631 	.word	0x0800a631
 800a6cc:	0800a761 	.word	0x0800a761
 800a6d0:	0800a631 	.word	0x0800a631
 800a6d4:	0800a631 	.word	0x0800a631
 800a6d8:	0800a70b 	.word	0x0800a70b
 800a6dc:	3b45      	subs	r3, #69	@ 0x45
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d8a6      	bhi.n	800a630 <__ssvfiscanf_r+0xec>
 800a6e2:	2305      	movs	r3, #5
 800a6e4:	e021      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a6e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4798      	blx	r3
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f af66 	beq.w	800a5c0 <__ssvfiscanf_r+0x7c>
 800a6f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f040 808b 	bne.w	800a812 <__ssvfiscanf_r+0x2ce>
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a700:	e08b      	b.n	800a81a <__ssvfiscanf_r+0x2d6>
 800a702:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a704:	f042 0220 	orr.w	r2, r2, #32
 800a708:	9241      	str	r2, [sp, #260]	@ 0x104
 800a70a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a70c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a710:	9241      	str	r2, [sp, #260]	@ 0x104
 800a712:	2210      	movs	r2, #16
 800a714:	2b6e      	cmp	r3, #110	@ 0x6e
 800a716:	9242      	str	r2, [sp, #264]	@ 0x108
 800a718:	d902      	bls.n	800a720 <__ssvfiscanf_r+0x1dc>
 800a71a:	e005      	b.n	800a728 <__ssvfiscanf_r+0x1e4>
 800a71c:	2300      	movs	r3, #0
 800a71e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a720:	2303      	movs	r3, #3
 800a722:	e002      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a724:	2308      	movs	r3, #8
 800a726:	9342      	str	r3, [sp, #264]	@ 0x108
 800a728:	2304      	movs	r3, #4
 800a72a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd39      	ble.n	800a7a6 <__ssvfiscanf_r+0x262>
 800a732:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a734:	0659      	lsls	r1, r3, #25
 800a736:	d404      	bmi.n	800a742 <__ssvfiscanf_r+0x1fe>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	5cba      	ldrb	r2, [r7, r2]
 800a73e:	0712      	lsls	r2, r2, #28
 800a740:	d438      	bmi.n	800a7b4 <__ssvfiscanf_r+0x270>
 800a742:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a744:	2b02      	cmp	r3, #2
 800a746:	dc47      	bgt.n	800a7d8 <__ssvfiscanf_r+0x294>
 800a748:	466b      	mov	r3, sp
 800a74a:	4622      	mov	r2, r4
 800a74c:	a941      	add	r1, sp, #260	@ 0x104
 800a74e:	4630      	mov	r0, r6
 800a750:	f000 fa6a 	bl	800ac28 <_scanf_chars>
 800a754:	2801      	cmp	r0, #1
 800a756:	d064      	beq.n	800a822 <__ssvfiscanf_r+0x2de>
 800a758:	2802      	cmp	r0, #2
 800a75a:	f47f af18 	bne.w	800a58e <__ssvfiscanf_r+0x4a>
 800a75e:	e7c9      	b.n	800a6f4 <__ssvfiscanf_r+0x1b0>
 800a760:	220a      	movs	r2, #10
 800a762:	e7d7      	b.n	800a714 <__ssvfiscanf_r+0x1d0>
 800a764:	4629      	mov	r1, r5
 800a766:	4640      	mov	r0, r8
 800a768:	f000 fbac 	bl	800aec4 <__sccl>
 800a76c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a772:	9341      	str	r3, [sp, #260]	@ 0x104
 800a774:	4605      	mov	r5, r0
 800a776:	2301      	movs	r3, #1
 800a778:	e7d7      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a77a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a780:	9341      	str	r3, [sp, #260]	@ 0x104
 800a782:	2300      	movs	r3, #0
 800a784:	e7d1      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a786:	2302      	movs	r3, #2
 800a788:	e7cf      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a78a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a78c:	06c3      	lsls	r3, r0, #27
 800a78e:	f53f aefe 	bmi.w	800a58e <__ssvfiscanf_r+0x4a>
 800a792:	9b00      	ldr	r3, [sp, #0]
 800a794:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a796:	1d19      	adds	r1, r3, #4
 800a798:	9100      	str	r1, [sp, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	07c0      	lsls	r0, r0, #31
 800a79e:	bf4c      	ite	mi
 800a7a0:	801a      	strhmi	r2, [r3, #0]
 800a7a2:	601a      	strpl	r2, [r3, #0]
 800a7a4:	e6f3      	b.n	800a58e <__ssvfiscanf_r+0x4a>
 800a7a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4798      	blx	r3
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d0bf      	beq.n	800a732 <__ssvfiscanf_r+0x1ee>
 800a7b2:	e79f      	b.n	800a6f4 <__ssvfiscanf_r+0x1b0>
 800a7b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a7ba:	6862      	ldr	r2, [r4, #4]
 800a7bc:	3a01      	subs	r2, #1
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	6062      	str	r2, [r4, #4]
 800a7c2:	dd02      	ble.n	800a7ca <__ssvfiscanf_r+0x286>
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	e7b6      	b.n	800a738 <__ssvfiscanf_r+0x1f4>
 800a7ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4798      	blx	r3
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0b0      	beq.n	800a738 <__ssvfiscanf_r+0x1f4>
 800a7d6:	e78d      	b.n	800a6f4 <__ssvfiscanf_r+0x1b0>
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	dc0f      	bgt.n	800a7fc <__ssvfiscanf_r+0x2b8>
 800a7dc:	466b      	mov	r3, sp
 800a7de:	4622      	mov	r2, r4
 800a7e0:	a941      	add	r1, sp, #260	@ 0x104
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 fa7a 	bl	800acdc <_scanf_i>
 800a7e8:	e7b4      	b.n	800a754 <__ssvfiscanf_r+0x210>
 800a7ea:	bf00      	nop
 800a7ec:	0800a495 	.word	0x0800a495
 800a7f0:	0800a50b 	.word	0x0800a50b
 800a7f4:	0800c7b1 	.word	0x0800c7b1
 800a7f8:	0800c9a4 	.word	0x0800c9a4
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <__ssvfiscanf_r+0x2e4>)
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f43f aec5 	beq.w	800a58e <__ssvfiscanf_r+0x4a>
 800a804:	466b      	mov	r3, sp
 800a806:	4622      	mov	r2, r4
 800a808:	a941      	add	r1, sp, #260	@ 0x104
 800a80a:	4630      	mov	r0, r6
 800a80c:	f7fd f810 	bl	8007830 <_scanf_float>
 800a810:	e7a0      	b.n	800a754 <__ssvfiscanf_r+0x210>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	065b      	lsls	r3, r3, #25
 800a816:	f53f af71 	bmi.w	800a6fc <__ssvfiscanf_r+0x1b8>
 800a81a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a824:	e7f9      	b.n	800a81a <__ssvfiscanf_r+0x2d6>
 800a826:	bf00      	nop
 800a828:	08007831 	.word	0x08007831

0800a82c <__sfputc_r>:
 800a82c:	6893      	ldr	r3, [r2, #8]
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	b410      	push	{r4}
 800a834:	6093      	str	r3, [r2, #8]
 800a836:	da08      	bge.n	800a84a <__sfputc_r+0x1e>
 800a838:	6994      	ldr	r4, [r2, #24]
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	db01      	blt.n	800a842 <__sfputc_r+0x16>
 800a83e:	290a      	cmp	r1, #10
 800a840:	d103      	bne.n	800a84a <__sfputc_r+0x1e>
 800a842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a846:	f001 b9b9 	b.w	800bbbc <__swbuf_r>
 800a84a:	6813      	ldr	r3, [r2, #0]
 800a84c:	1c58      	adds	r0, r3, #1
 800a84e:	6010      	str	r0, [r2, #0]
 800a850:	7019      	strb	r1, [r3, #0]
 800a852:	4608      	mov	r0, r1
 800a854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <__sfputs_r>:
 800a85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	4614      	mov	r4, r2
 800a862:	18d5      	adds	r5, r2, r3
 800a864:	42ac      	cmp	r4, r5
 800a866:	d101      	bne.n	800a86c <__sfputs_r+0x12>
 800a868:	2000      	movs	r0, #0
 800a86a:	e007      	b.n	800a87c <__sfputs_r+0x22>
 800a86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a870:	463a      	mov	r2, r7
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ffda 	bl	800a82c <__sfputc_r>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d1f3      	bne.n	800a864 <__sfputs_r+0xa>
 800a87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a880 <_vfiprintf_r>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	460d      	mov	r5, r1
 800a886:	b09d      	sub	sp, #116	@ 0x74
 800a888:	4614      	mov	r4, r2
 800a88a:	4698      	mov	r8, r3
 800a88c:	4606      	mov	r6, r0
 800a88e:	b118      	cbz	r0, 800a898 <_vfiprintf_r+0x18>
 800a890:	6a03      	ldr	r3, [r0, #32]
 800a892:	b90b      	cbnz	r3, 800a898 <_vfiprintf_r+0x18>
 800a894:	f7fd fafc 	bl	8007e90 <__sinit>
 800a898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a89a:	07d9      	lsls	r1, r3, #31
 800a89c:	d405      	bmi.n	800a8aa <_vfiprintf_r+0x2a>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	059a      	lsls	r2, r3, #22
 800a8a2:	d402      	bmi.n	800a8aa <_vfiprintf_r+0x2a>
 800a8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8a6:	f7fe faae 	bl	8008e06 <__retarget_lock_acquire_recursive>
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	071b      	lsls	r3, r3, #28
 800a8ae:	d501      	bpl.n	800a8b4 <_vfiprintf_r+0x34>
 800a8b0:	692b      	ldr	r3, [r5, #16]
 800a8b2:	b99b      	cbnz	r3, 800a8dc <_vfiprintf_r+0x5c>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f001 f9be 	bl	800bc38 <__swsetup_r>
 800a8bc:	b170      	cbz	r0, 800a8dc <_vfiprintf_r+0x5c>
 800a8be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8c0:	07dc      	lsls	r4, r3, #31
 800a8c2:	d504      	bpl.n	800a8ce <_vfiprintf_r+0x4e>
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8c8:	b01d      	add	sp, #116	@ 0x74
 800a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	0598      	lsls	r0, r3, #22
 800a8d2:	d4f7      	bmi.n	800a8c4 <_vfiprintf_r+0x44>
 800a8d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8d6:	f7fe fa97 	bl	8008e08 <__retarget_lock_release_recursive>
 800a8da:	e7f3      	b.n	800a8c4 <_vfiprintf_r+0x44>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e0:	2320      	movs	r3, #32
 800a8e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ea:	2330      	movs	r3, #48	@ 0x30
 800a8ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa9c <_vfiprintf_r+0x21c>
 800a8f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8f4:	f04f 0901 	mov.w	r9, #1
 800a8f8:	4623      	mov	r3, r4
 800a8fa:	469a      	mov	sl, r3
 800a8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a900:	b10a      	cbz	r2, 800a906 <_vfiprintf_r+0x86>
 800a902:	2a25      	cmp	r2, #37	@ 0x25
 800a904:	d1f9      	bne.n	800a8fa <_vfiprintf_r+0x7a>
 800a906:	ebba 0b04 	subs.w	fp, sl, r4
 800a90a:	d00b      	beq.n	800a924 <_vfiprintf_r+0xa4>
 800a90c:	465b      	mov	r3, fp
 800a90e:	4622      	mov	r2, r4
 800a910:	4629      	mov	r1, r5
 800a912:	4630      	mov	r0, r6
 800a914:	f7ff ffa1 	bl	800a85a <__sfputs_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	f000 80a7 	beq.w	800aa6c <_vfiprintf_r+0x1ec>
 800a91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a920:	445a      	add	r2, fp
 800a922:	9209      	str	r2, [sp, #36]	@ 0x24
 800a924:	f89a 3000 	ldrb.w	r3, [sl]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 809f 	beq.w	800aa6c <_vfiprintf_r+0x1ec>
 800a92e:	2300      	movs	r3, #0
 800a930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a938:	f10a 0a01 	add.w	sl, sl, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	9307      	str	r3, [sp, #28]
 800a940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a944:	931a      	str	r3, [sp, #104]	@ 0x68
 800a946:	4654      	mov	r4, sl
 800a948:	2205      	movs	r2, #5
 800a94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94e:	4853      	ldr	r0, [pc, #332]	@ (800aa9c <_vfiprintf_r+0x21c>)
 800a950:	f7f5 fc66 	bl	8000220 <memchr>
 800a954:	9a04      	ldr	r2, [sp, #16]
 800a956:	b9d8      	cbnz	r0, 800a990 <_vfiprintf_r+0x110>
 800a958:	06d1      	lsls	r1, r2, #27
 800a95a:	bf44      	itt	mi
 800a95c:	2320      	movmi	r3, #32
 800a95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a962:	0713      	lsls	r3, r2, #28
 800a964:	bf44      	itt	mi
 800a966:	232b      	movmi	r3, #43	@ 0x2b
 800a968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a96c:	f89a 3000 	ldrb.w	r3, [sl]
 800a970:	2b2a      	cmp	r3, #42	@ 0x2a
 800a972:	d015      	beq.n	800a9a0 <_vfiprintf_r+0x120>
 800a974:	9a07      	ldr	r2, [sp, #28]
 800a976:	4654      	mov	r4, sl
 800a978:	2000      	movs	r0, #0
 800a97a:	f04f 0c0a 	mov.w	ip, #10
 800a97e:	4621      	mov	r1, r4
 800a980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a984:	3b30      	subs	r3, #48	@ 0x30
 800a986:	2b09      	cmp	r3, #9
 800a988:	d94b      	bls.n	800aa22 <_vfiprintf_r+0x1a2>
 800a98a:	b1b0      	cbz	r0, 800a9ba <_vfiprintf_r+0x13a>
 800a98c:	9207      	str	r2, [sp, #28]
 800a98e:	e014      	b.n	800a9ba <_vfiprintf_r+0x13a>
 800a990:	eba0 0308 	sub.w	r3, r0, r8
 800a994:	fa09 f303 	lsl.w	r3, r9, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	46a2      	mov	sl, r4
 800a99e:	e7d2      	b.n	800a946 <_vfiprintf_r+0xc6>
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	1d19      	adds	r1, r3, #4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	9103      	str	r1, [sp, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bfbb      	ittet	lt
 800a9ac:	425b      	neglt	r3, r3
 800a9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a9b2:	9307      	strge	r3, [sp, #28]
 800a9b4:	9307      	strlt	r3, [sp, #28]
 800a9b6:	bfb8      	it	lt
 800a9b8:	9204      	strlt	r2, [sp, #16]
 800a9ba:	7823      	ldrb	r3, [r4, #0]
 800a9bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9be:	d10a      	bne.n	800a9d6 <_vfiprintf_r+0x156>
 800a9c0:	7863      	ldrb	r3, [r4, #1]
 800a9c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9c4:	d132      	bne.n	800aa2c <_vfiprintf_r+0x1ac>
 800a9c6:	9b03      	ldr	r3, [sp, #12]
 800a9c8:	1d1a      	adds	r2, r3, #4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	9203      	str	r2, [sp, #12]
 800a9ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9d2:	3402      	adds	r4, #2
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aaac <_vfiprintf_r+0x22c>
 800a9da:	7821      	ldrb	r1, [r4, #0]
 800a9dc:	2203      	movs	r2, #3
 800a9de:	4650      	mov	r0, sl
 800a9e0:	f7f5 fc1e 	bl	8000220 <memchr>
 800a9e4:	b138      	cbz	r0, 800a9f6 <_vfiprintf_r+0x176>
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	eba0 000a 	sub.w	r0, r0, sl
 800a9ec:	2240      	movs	r2, #64	@ 0x40
 800a9ee:	4082      	lsls	r2, r0
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	3401      	adds	r4, #1
 800a9f4:	9304      	str	r3, [sp, #16]
 800a9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fa:	4829      	ldr	r0, [pc, #164]	@ (800aaa0 <_vfiprintf_r+0x220>)
 800a9fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa00:	2206      	movs	r2, #6
 800aa02:	f7f5 fc0d 	bl	8000220 <memchr>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d03f      	beq.n	800aa8a <_vfiprintf_r+0x20a>
 800aa0a:	4b26      	ldr	r3, [pc, #152]	@ (800aaa4 <_vfiprintf_r+0x224>)
 800aa0c:	bb1b      	cbnz	r3, 800aa56 <_vfiprintf_r+0x1d6>
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	3307      	adds	r3, #7
 800aa12:	f023 0307 	bic.w	r3, r3, #7
 800aa16:	3308      	adds	r3, #8
 800aa18:	9303      	str	r3, [sp, #12]
 800aa1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1c:	443b      	add	r3, r7
 800aa1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa20:	e76a      	b.n	800a8f8 <_vfiprintf_r+0x78>
 800aa22:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa26:	460c      	mov	r4, r1
 800aa28:	2001      	movs	r0, #1
 800aa2a:	e7a8      	b.n	800a97e <_vfiprintf_r+0xfe>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	3401      	adds	r4, #1
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	4619      	mov	r1, r3
 800aa34:	f04f 0c0a 	mov.w	ip, #10
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa3e:	3a30      	subs	r2, #48	@ 0x30
 800aa40:	2a09      	cmp	r2, #9
 800aa42:	d903      	bls.n	800aa4c <_vfiprintf_r+0x1cc>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0c6      	beq.n	800a9d6 <_vfiprintf_r+0x156>
 800aa48:	9105      	str	r1, [sp, #20]
 800aa4a:	e7c4      	b.n	800a9d6 <_vfiprintf_r+0x156>
 800aa4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa50:	4604      	mov	r4, r0
 800aa52:	2301      	movs	r3, #1
 800aa54:	e7f0      	b.n	800aa38 <_vfiprintf_r+0x1b8>
 800aa56:	ab03      	add	r3, sp, #12
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	462a      	mov	r2, r5
 800aa5c:	4b12      	ldr	r3, [pc, #72]	@ (800aaa8 <_vfiprintf_r+0x228>)
 800aa5e:	a904      	add	r1, sp, #16
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7fc fb2d 	bl	80070c0 <_printf_float>
 800aa66:	4607      	mov	r7, r0
 800aa68:	1c78      	adds	r0, r7, #1
 800aa6a:	d1d6      	bne.n	800aa1a <_vfiprintf_r+0x19a>
 800aa6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa6e:	07d9      	lsls	r1, r3, #31
 800aa70:	d405      	bmi.n	800aa7e <_vfiprintf_r+0x1fe>
 800aa72:	89ab      	ldrh	r3, [r5, #12]
 800aa74:	059a      	lsls	r2, r3, #22
 800aa76:	d402      	bmi.n	800aa7e <_vfiprintf_r+0x1fe>
 800aa78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa7a:	f7fe f9c5 	bl	8008e08 <__retarget_lock_release_recursive>
 800aa7e:	89ab      	ldrh	r3, [r5, #12]
 800aa80:	065b      	lsls	r3, r3, #25
 800aa82:	f53f af1f 	bmi.w	800a8c4 <_vfiprintf_r+0x44>
 800aa86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa88:	e71e      	b.n	800a8c8 <_vfiprintf_r+0x48>
 800aa8a:	ab03      	add	r3, sp, #12
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4b05      	ldr	r3, [pc, #20]	@ (800aaa8 <_vfiprintf_r+0x228>)
 800aa92:	a904      	add	r1, sp, #16
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7fc fdab 	bl	80075f0 <_printf_i>
 800aa9a:	e7e4      	b.n	800aa66 <_vfiprintf_r+0x1e6>
 800aa9c:	0800c99e 	.word	0x0800c99e
 800aaa0:	0800c9a8 	.word	0x0800c9a8
 800aaa4:	080070c1 	.word	0x080070c1
 800aaa8:	0800a85b 	.word	0x0800a85b
 800aaac:	0800c9a4 	.word	0x0800c9a4

0800aab0 <malloc>:
 800aab0:	4b02      	ldr	r3, [pc, #8]	@ (800aabc <malloc+0xc>)
 800aab2:	4601      	mov	r1, r0
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f000 b825 	b.w	800ab04 <_malloc_r>
 800aaba:	bf00      	nop
 800aabc:	2000019c 	.word	0x2000019c

0800aac0 <sbrk_aligned>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	4e0f      	ldr	r6, [pc, #60]	@ (800ab00 <sbrk_aligned+0x40>)
 800aac4:	460c      	mov	r4, r1
 800aac6:	6831      	ldr	r1, [r6, #0]
 800aac8:	4605      	mov	r5, r0
 800aaca:	b911      	cbnz	r1, 800aad2 <sbrk_aligned+0x12>
 800aacc:	f001 f9b6 	bl	800be3c <_sbrk_r>
 800aad0:	6030      	str	r0, [r6, #0]
 800aad2:	4621      	mov	r1, r4
 800aad4:	4628      	mov	r0, r5
 800aad6:	f001 f9b1 	bl	800be3c <_sbrk_r>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d103      	bne.n	800aae6 <sbrk_aligned+0x26>
 800aade:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aae2:	4620      	mov	r0, r4
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	1cc4      	adds	r4, r0, #3
 800aae8:	f024 0403 	bic.w	r4, r4, #3
 800aaec:	42a0      	cmp	r0, r4
 800aaee:	d0f8      	beq.n	800aae2 <sbrk_aligned+0x22>
 800aaf0:	1a21      	subs	r1, r4, r0
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f001 f9a2 	bl	800be3c <_sbrk_r>
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d1f2      	bne.n	800aae2 <sbrk_aligned+0x22>
 800aafc:	e7ef      	b.n	800aade <sbrk_aligned+0x1e>
 800aafe:	bf00      	nop
 800ab00:	20000790 	.word	0x20000790

0800ab04 <_malloc_r>:
 800ab04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab08:	1ccd      	adds	r5, r1, #3
 800ab0a:	f025 0503 	bic.w	r5, r5, #3
 800ab0e:	3508      	adds	r5, #8
 800ab10:	2d0c      	cmp	r5, #12
 800ab12:	bf38      	it	cc
 800ab14:	250c      	movcc	r5, #12
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	4606      	mov	r6, r0
 800ab1a:	db01      	blt.n	800ab20 <_malloc_r+0x1c>
 800ab1c:	42a9      	cmp	r1, r5
 800ab1e:	d904      	bls.n	800ab2a <_malloc_r+0x26>
 800ab20:	230c      	movs	r3, #12
 800ab22:	6033      	str	r3, [r6, #0]
 800ab24:	2000      	movs	r0, #0
 800ab26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac00 <_malloc_r+0xfc>
 800ab2e:	f000 faaf 	bl	800b090 <__malloc_lock>
 800ab32:	f8d8 3000 	ldr.w	r3, [r8]
 800ab36:	461c      	mov	r4, r3
 800ab38:	bb44      	cbnz	r4, 800ab8c <_malloc_r+0x88>
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f7ff ffbf 	bl	800aac0 <sbrk_aligned>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	4604      	mov	r4, r0
 800ab46:	d158      	bne.n	800abfa <_malloc_r+0xf6>
 800ab48:	f8d8 4000 	ldr.w	r4, [r8]
 800ab4c:	4627      	mov	r7, r4
 800ab4e:	2f00      	cmp	r7, #0
 800ab50:	d143      	bne.n	800abda <_malloc_r+0xd6>
 800ab52:	2c00      	cmp	r4, #0
 800ab54:	d04b      	beq.n	800abee <_malloc_r+0xea>
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	4639      	mov	r1, r7
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	eb04 0903 	add.w	r9, r4, r3
 800ab60:	f001 f96c 	bl	800be3c <_sbrk_r>
 800ab64:	4581      	cmp	r9, r0
 800ab66:	d142      	bne.n	800abee <_malloc_r+0xea>
 800ab68:	6821      	ldr	r1, [r4, #0]
 800ab6a:	1a6d      	subs	r5, r5, r1
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7ff ffa6 	bl	800aac0 <sbrk_aligned>
 800ab74:	3001      	adds	r0, #1
 800ab76:	d03a      	beq.n	800abee <_malloc_r+0xea>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	442b      	add	r3, r5
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	bb62      	cbnz	r2, 800abe0 <_malloc_r+0xdc>
 800ab86:	f8c8 7000 	str.w	r7, [r8]
 800ab8a:	e00f      	b.n	800abac <_malloc_r+0xa8>
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	1b52      	subs	r2, r2, r5
 800ab90:	d420      	bmi.n	800abd4 <_malloc_r+0xd0>
 800ab92:	2a0b      	cmp	r2, #11
 800ab94:	d917      	bls.n	800abc6 <_malloc_r+0xc2>
 800ab96:	1961      	adds	r1, r4, r5
 800ab98:	42a3      	cmp	r3, r4
 800ab9a:	6025      	str	r5, [r4, #0]
 800ab9c:	bf18      	it	ne
 800ab9e:	6059      	strne	r1, [r3, #4]
 800aba0:	6863      	ldr	r3, [r4, #4]
 800aba2:	bf08      	it	eq
 800aba4:	f8c8 1000 	streq.w	r1, [r8]
 800aba8:	5162      	str	r2, [r4, r5]
 800abaa:	604b      	str	r3, [r1, #4]
 800abac:	4630      	mov	r0, r6
 800abae:	f000 fa75 	bl	800b09c <__malloc_unlock>
 800abb2:	f104 000b 	add.w	r0, r4, #11
 800abb6:	1d23      	adds	r3, r4, #4
 800abb8:	f020 0007 	bic.w	r0, r0, #7
 800abbc:	1ac2      	subs	r2, r0, r3
 800abbe:	bf1c      	itt	ne
 800abc0:	1a1b      	subne	r3, r3, r0
 800abc2:	50a3      	strne	r3, [r4, r2]
 800abc4:	e7af      	b.n	800ab26 <_malloc_r+0x22>
 800abc6:	6862      	ldr	r2, [r4, #4]
 800abc8:	42a3      	cmp	r3, r4
 800abca:	bf0c      	ite	eq
 800abcc:	f8c8 2000 	streq.w	r2, [r8]
 800abd0:	605a      	strne	r2, [r3, #4]
 800abd2:	e7eb      	b.n	800abac <_malloc_r+0xa8>
 800abd4:	4623      	mov	r3, r4
 800abd6:	6864      	ldr	r4, [r4, #4]
 800abd8:	e7ae      	b.n	800ab38 <_malloc_r+0x34>
 800abda:	463c      	mov	r4, r7
 800abdc:	687f      	ldr	r7, [r7, #4]
 800abde:	e7b6      	b.n	800ab4e <_malloc_r+0x4a>
 800abe0:	461a      	mov	r2, r3
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	d1fb      	bne.n	800abe0 <_malloc_r+0xdc>
 800abe8:	2300      	movs	r3, #0
 800abea:	6053      	str	r3, [r2, #4]
 800abec:	e7de      	b.n	800abac <_malloc_r+0xa8>
 800abee:	230c      	movs	r3, #12
 800abf0:	6033      	str	r3, [r6, #0]
 800abf2:	4630      	mov	r0, r6
 800abf4:	f000 fa52 	bl	800b09c <__malloc_unlock>
 800abf8:	e794      	b.n	800ab24 <_malloc_r+0x20>
 800abfa:	6005      	str	r5, [r0, #0]
 800abfc:	e7d6      	b.n	800abac <_malloc_r+0xa8>
 800abfe:	bf00      	nop
 800ac00:	20000794 	.word	0x20000794

0800ac04 <__ascii_mbtowc>:
 800ac04:	b082      	sub	sp, #8
 800ac06:	b901      	cbnz	r1, 800ac0a <__ascii_mbtowc+0x6>
 800ac08:	a901      	add	r1, sp, #4
 800ac0a:	b142      	cbz	r2, 800ac1e <__ascii_mbtowc+0x1a>
 800ac0c:	b14b      	cbz	r3, 800ac22 <__ascii_mbtowc+0x1e>
 800ac0e:	7813      	ldrb	r3, [r2, #0]
 800ac10:	600b      	str	r3, [r1, #0]
 800ac12:	7812      	ldrb	r2, [r2, #0]
 800ac14:	1e10      	subs	r0, r2, #0
 800ac16:	bf18      	it	ne
 800ac18:	2001      	movne	r0, #1
 800ac1a:	b002      	add	sp, #8
 800ac1c:	4770      	bx	lr
 800ac1e:	4610      	mov	r0, r2
 800ac20:	e7fb      	b.n	800ac1a <__ascii_mbtowc+0x16>
 800ac22:	f06f 0001 	mvn.w	r0, #1
 800ac26:	e7f8      	b.n	800ac1a <__ascii_mbtowc+0x16>

0800ac28 <_scanf_chars>:
 800ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	4615      	mov	r5, r2
 800ac2e:	688a      	ldr	r2, [r1, #8]
 800ac30:	4680      	mov	r8, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	b932      	cbnz	r2, 800ac44 <_scanf_chars+0x1c>
 800ac36:	698a      	ldr	r2, [r1, #24]
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	bf14      	ite	ne
 800ac3c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800ac40:	2201      	moveq	r2, #1
 800ac42:	608a      	str	r2, [r1, #8]
 800ac44:	6822      	ldr	r2, [r4, #0]
 800ac46:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800acd8 <_scanf_chars+0xb0>
 800ac4a:	06d1      	lsls	r1, r2, #27
 800ac4c:	bf5f      	itttt	pl
 800ac4e:	681a      	ldrpl	r2, [r3, #0]
 800ac50:	1d11      	addpl	r1, r2, #4
 800ac52:	6019      	strpl	r1, [r3, #0]
 800ac54:	6816      	ldrpl	r6, [r2, #0]
 800ac56:	2700      	movs	r7, #0
 800ac58:	69a0      	ldr	r0, [r4, #24]
 800ac5a:	b188      	cbz	r0, 800ac80 <_scanf_chars+0x58>
 800ac5c:	2801      	cmp	r0, #1
 800ac5e:	d107      	bne.n	800ac70 <_scanf_chars+0x48>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	781a      	ldrb	r2, [r3, #0]
 800ac64:	6963      	ldr	r3, [r4, #20]
 800ac66:	5c9b      	ldrb	r3, [r3, r2]
 800ac68:	b953      	cbnz	r3, 800ac80 <_scanf_chars+0x58>
 800ac6a:	2f00      	cmp	r7, #0
 800ac6c:	d031      	beq.n	800acd2 <_scanf_chars+0xaa>
 800ac6e:	e022      	b.n	800acb6 <_scanf_chars+0x8e>
 800ac70:	2802      	cmp	r0, #2
 800ac72:	d120      	bne.n	800acb6 <_scanf_chars+0x8e>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ac7c:	071b      	lsls	r3, r3, #28
 800ac7e:	d41a      	bmi.n	800acb6 <_scanf_chars+0x8e>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	06da      	lsls	r2, r3, #27
 800ac84:	bf5e      	ittt	pl
 800ac86:	682b      	ldrpl	r3, [r5, #0]
 800ac88:	781b      	ldrbpl	r3, [r3, #0]
 800ac8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ac8e:	682a      	ldr	r2, [r5, #0]
 800ac90:	686b      	ldr	r3, [r5, #4]
 800ac92:	3201      	adds	r2, #1
 800ac94:	602a      	str	r2, [r5, #0]
 800ac96:	68a2      	ldr	r2, [r4, #8]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	3a01      	subs	r2, #1
 800ac9c:	606b      	str	r3, [r5, #4]
 800ac9e:	3701      	adds	r7, #1
 800aca0:	60a2      	str	r2, [r4, #8]
 800aca2:	b142      	cbz	r2, 800acb6 <_scanf_chars+0x8e>
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dcd7      	bgt.n	800ac58 <_scanf_chars+0x30>
 800aca8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acac:	4629      	mov	r1, r5
 800acae:	4640      	mov	r0, r8
 800acb0:	4798      	blx	r3
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d0d0      	beq.n	800ac58 <_scanf_chars+0x30>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	f013 0310 	ands.w	r3, r3, #16
 800acbc:	d105      	bne.n	800acca <_scanf_chars+0xa2>
 800acbe:	68e2      	ldr	r2, [r4, #12]
 800acc0:	3201      	adds	r2, #1
 800acc2:	60e2      	str	r2, [r4, #12]
 800acc4:	69a2      	ldr	r2, [r4, #24]
 800acc6:	b102      	cbz	r2, 800acca <_scanf_chars+0xa2>
 800acc8:	7033      	strb	r3, [r6, #0]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	443b      	add	r3, r7
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	bf00      	nop
 800acd8:	0800c7b1 	.word	0x0800c7b1

0800acdc <_scanf_i>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	4698      	mov	r8, r3
 800ace2:	4b74      	ldr	r3, [pc, #464]	@ (800aeb4 <_scanf_i+0x1d8>)
 800ace4:	460c      	mov	r4, r1
 800ace6:	4682      	mov	sl, r0
 800ace8:	4616      	mov	r6, r2
 800acea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800acee:	b087      	sub	sp, #28
 800acf0:	ab03      	add	r3, sp, #12
 800acf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800acf6:	4b70      	ldr	r3, [pc, #448]	@ (800aeb8 <_scanf_i+0x1dc>)
 800acf8:	69a1      	ldr	r1, [r4, #24]
 800acfa:	4a70      	ldr	r2, [pc, #448]	@ (800aebc <_scanf_i+0x1e0>)
 800acfc:	2903      	cmp	r1, #3
 800acfe:	bf08      	it	eq
 800ad00:	461a      	moveq	r2, r3
 800ad02:	68a3      	ldr	r3, [r4, #8]
 800ad04:	9201      	str	r2, [sp, #4]
 800ad06:	1e5a      	subs	r2, r3, #1
 800ad08:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ad0c:	bf88      	it	hi
 800ad0e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ad12:	4627      	mov	r7, r4
 800ad14:	bf82      	ittt	hi
 800ad16:	eb03 0905 	addhi.w	r9, r3, r5
 800ad1a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ad1e:	60a3      	strhi	r3, [r4, #8]
 800ad20:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ad24:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ad28:	bf98      	it	ls
 800ad2a:	f04f 0900 	movls.w	r9, #0
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	463d      	mov	r5, r7
 800ad32:	f04f 0b00 	mov.w	fp, #0
 800ad36:	6831      	ldr	r1, [r6, #0]
 800ad38:	ab03      	add	r3, sp, #12
 800ad3a:	7809      	ldrb	r1, [r1, #0]
 800ad3c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ad40:	2202      	movs	r2, #2
 800ad42:	f7f5 fa6d 	bl	8000220 <memchr>
 800ad46:	b328      	cbz	r0, 800ad94 <_scanf_i+0xb8>
 800ad48:	f1bb 0f01 	cmp.w	fp, #1
 800ad4c:	d159      	bne.n	800ae02 <_scanf_i+0x126>
 800ad4e:	6862      	ldr	r2, [r4, #4]
 800ad50:	b92a      	cbnz	r2, 800ad5e <_scanf_i+0x82>
 800ad52:	6822      	ldr	r2, [r4, #0]
 800ad54:	2108      	movs	r1, #8
 800ad56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad5a:	6061      	str	r1, [r4, #4]
 800ad5c:	6022      	str	r2, [r4, #0]
 800ad5e:	6822      	ldr	r2, [r4, #0]
 800ad60:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ad64:	6022      	str	r2, [r4, #0]
 800ad66:	68a2      	ldr	r2, [r4, #8]
 800ad68:	1e51      	subs	r1, r2, #1
 800ad6a:	60a1      	str	r1, [r4, #8]
 800ad6c:	b192      	cbz	r2, 800ad94 <_scanf_i+0xb8>
 800ad6e:	6832      	ldr	r2, [r6, #0]
 800ad70:	1c51      	adds	r1, r2, #1
 800ad72:	6031      	str	r1, [r6, #0]
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	f805 2b01 	strb.w	r2, [r5], #1
 800ad7a:	6872      	ldr	r2, [r6, #4]
 800ad7c:	3a01      	subs	r2, #1
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	6072      	str	r2, [r6, #4]
 800ad82:	dc07      	bgt.n	800ad94 <_scanf_i+0xb8>
 800ad84:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	4790      	blx	r2
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f040 8085 	bne.w	800ae9e <_scanf_i+0x1c2>
 800ad94:	f10b 0b01 	add.w	fp, fp, #1
 800ad98:	f1bb 0f03 	cmp.w	fp, #3
 800ad9c:	d1cb      	bne.n	800ad36 <_scanf_i+0x5a>
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	b90b      	cbnz	r3, 800ada6 <_scanf_i+0xca>
 800ada2:	230a      	movs	r3, #10
 800ada4:	6063      	str	r3, [r4, #4]
 800ada6:	6863      	ldr	r3, [r4, #4]
 800ada8:	4945      	ldr	r1, [pc, #276]	@ (800aec0 <_scanf_i+0x1e4>)
 800adaa:	6960      	ldr	r0, [r4, #20]
 800adac:	1ac9      	subs	r1, r1, r3
 800adae:	f000 f889 	bl	800aec4 <__sccl>
 800adb2:	f04f 0b00 	mov.w	fp, #0
 800adb6:	68a3      	ldr	r3, [r4, #8]
 800adb8:	6822      	ldr	r2, [r4, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d03d      	beq.n	800ae3a <_scanf_i+0x15e>
 800adbe:	6831      	ldr	r1, [r6, #0]
 800adc0:	6960      	ldr	r0, [r4, #20]
 800adc2:	f891 c000 	ldrb.w	ip, [r1]
 800adc6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800adca:	2800      	cmp	r0, #0
 800adcc:	d035      	beq.n	800ae3a <_scanf_i+0x15e>
 800adce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800add2:	d124      	bne.n	800ae1e <_scanf_i+0x142>
 800add4:	0510      	lsls	r0, r2, #20
 800add6:	d522      	bpl.n	800ae1e <_scanf_i+0x142>
 800add8:	f10b 0b01 	add.w	fp, fp, #1
 800addc:	f1b9 0f00 	cmp.w	r9, #0
 800ade0:	d003      	beq.n	800adea <_scanf_i+0x10e>
 800ade2:	3301      	adds	r3, #1
 800ade4:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ade8:	60a3      	str	r3, [r4, #8]
 800adea:	6873      	ldr	r3, [r6, #4]
 800adec:	3b01      	subs	r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	6073      	str	r3, [r6, #4]
 800adf2:	dd1b      	ble.n	800ae2c <_scanf_i+0x150>
 800adf4:	6833      	ldr	r3, [r6, #0]
 800adf6:	3301      	adds	r3, #1
 800adf8:	6033      	str	r3, [r6, #0]
 800adfa:	68a3      	ldr	r3, [r4, #8]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	60a3      	str	r3, [r4, #8]
 800ae00:	e7d9      	b.n	800adb6 <_scanf_i+0xda>
 800ae02:	f1bb 0f02 	cmp.w	fp, #2
 800ae06:	d1ae      	bne.n	800ad66 <_scanf_i+0x8a>
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ae0e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ae12:	d1bf      	bne.n	800ad94 <_scanf_i+0xb8>
 800ae14:	2110      	movs	r1, #16
 800ae16:	6061      	str	r1, [r4, #4]
 800ae18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae1c:	e7a2      	b.n	800ad64 <_scanf_i+0x88>
 800ae1e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ae22:	6022      	str	r2, [r4, #0]
 800ae24:	780b      	ldrb	r3, [r1, #0]
 800ae26:	f805 3b01 	strb.w	r3, [r5], #1
 800ae2a:	e7de      	b.n	800adea <_scanf_i+0x10e>
 800ae2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae30:	4631      	mov	r1, r6
 800ae32:	4650      	mov	r0, sl
 800ae34:	4798      	blx	r3
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d0df      	beq.n	800adfa <_scanf_i+0x11e>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	05d9      	lsls	r1, r3, #23
 800ae3e:	d50d      	bpl.n	800ae5c <_scanf_i+0x180>
 800ae40:	42bd      	cmp	r5, r7
 800ae42:	d909      	bls.n	800ae58 <_scanf_i+0x17c>
 800ae44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ae48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	4650      	mov	r0, sl
 800ae50:	4798      	blx	r3
 800ae52:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ae56:	464d      	mov	r5, r9
 800ae58:	42bd      	cmp	r5, r7
 800ae5a:	d028      	beq.n	800aeae <_scanf_i+0x1d2>
 800ae5c:	6822      	ldr	r2, [r4, #0]
 800ae5e:	f012 0210 	ands.w	r2, r2, #16
 800ae62:	d113      	bne.n	800ae8c <_scanf_i+0x1b0>
 800ae64:	702a      	strb	r2, [r5, #0]
 800ae66:	6863      	ldr	r3, [r4, #4]
 800ae68:	9e01      	ldr	r6, [sp, #4]
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	4650      	mov	r0, sl
 800ae6e:	47b0      	blx	r6
 800ae70:	f8d8 3000 	ldr.w	r3, [r8]
 800ae74:	6821      	ldr	r1, [r4, #0]
 800ae76:	1d1a      	adds	r2, r3, #4
 800ae78:	f8c8 2000 	str.w	r2, [r8]
 800ae7c:	f011 0f20 	tst.w	r1, #32
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	d00f      	beq.n	800aea4 <_scanf_i+0x1c8>
 800ae84:	6018      	str	r0, [r3, #0]
 800ae86:	68e3      	ldr	r3, [r4, #12]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	60e3      	str	r3, [r4, #12]
 800ae8c:	6923      	ldr	r3, [r4, #16]
 800ae8e:	1bed      	subs	r5, r5, r7
 800ae90:	445d      	add	r5, fp
 800ae92:	442b      	add	r3, r5
 800ae94:	6123      	str	r3, [r4, #16]
 800ae96:	2000      	movs	r0, #0
 800ae98:	b007      	add	sp, #28
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	f04f 0b00 	mov.w	fp, #0
 800aea2:	e7ca      	b.n	800ae3a <_scanf_i+0x15e>
 800aea4:	07ca      	lsls	r2, r1, #31
 800aea6:	bf4c      	ite	mi
 800aea8:	8018      	strhmi	r0, [r3, #0]
 800aeaa:	6018      	strpl	r0, [r3, #0]
 800aeac:	e7eb      	b.n	800ae86 <_scanf_i+0x1aa>
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e7f2      	b.n	800ae98 <_scanf_i+0x1bc>
 800aeb2:	bf00      	nop
 800aeb4:	0800c6c8 	.word	0x0800c6c8
 800aeb8:	08008bc9 	.word	0x08008bc9
 800aebc:	0800bbb9 	.word	0x0800bbb9
 800aec0:	0800c9bf 	.word	0x0800c9bf

0800aec4 <__sccl>:
 800aec4:	b570      	push	{r4, r5, r6, lr}
 800aec6:	780b      	ldrb	r3, [r1, #0]
 800aec8:	4604      	mov	r4, r0
 800aeca:	2b5e      	cmp	r3, #94	@ 0x5e
 800aecc:	bf0b      	itete	eq
 800aece:	784b      	ldrbeq	r3, [r1, #1]
 800aed0:	1c4a      	addne	r2, r1, #1
 800aed2:	1c8a      	addeq	r2, r1, #2
 800aed4:	2100      	movne	r1, #0
 800aed6:	bf08      	it	eq
 800aed8:	2101      	moveq	r1, #1
 800aeda:	3801      	subs	r0, #1
 800aedc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800aee0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aee4:	42a8      	cmp	r0, r5
 800aee6:	d1fb      	bne.n	800aee0 <__sccl+0x1c>
 800aee8:	b90b      	cbnz	r3, 800aeee <__sccl+0x2a>
 800aeea:	1e50      	subs	r0, r2, #1
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	f081 0101 	eor.w	r1, r1, #1
 800aef2:	54e1      	strb	r1, [r4, r3]
 800aef4:	4610      	mov	r0, r2
 800aef6:	4602      	mov	r2, r0
 800aef8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aefc:	2d2d      	cmp	r5, #45	@ 0x2d
 800aefe:	d005      	beq.n	800af0c <__sccl+0x48>
 800af00:	2d5d      	cmp	r5, #93	@ 0x5d
 800af02:	d016      	beq.n	800af32 <__sccl+0x6e>
 800af04:	2d00      	cmp	r5, #0
 800af06:	d0f1      	beq.n	800aeec <__sccl+0x28>
 800af08:	462b      	mov	r3, r5
 800af0a:	e7f2      	b.n	800aef2 <__sccl+0x2e>
 800af0c:	7846      	ldrb	r6, [r0, #1]
 800af0e:	2e5d      	cmp	r6, #93	@ 0x5d
 800af10:	d0fa      	beq.n	800af08 <__sccl+0x44>
 800af12:	42b3      	cmp	r3, r6
 800af14:	dcf8      	bgt.n	800af08 <__sccl+0x44>
 800af16:	3002      	adds	r0, #2
 800af18:	461a      	mov	r2, r3
 800af1a:	3201      	adds	r2, #1
 800af1c:	4296      	cmp	r6, r2
 800af1e:	54a1      	strb	r1, [r4, r2]
 800af20:	dcfb      	bgt.n	800af1a <__sccl+0x56>
 800af22:	1af2      	subs	r2, r6, r3
 800af24:	3a01      	subs	r2, #1
 800af26:	1c5d      	adds	r5, r3, #1
 800af28:	42b3      	cmp	r3, r6
 800af2a:	bfa8      	it	ge
 800af2c:	2200      	movge	r2, #0
 800af2e:	18ab      	adds	r3, r5, r2
 800af30:	e7e1      	b.n	800aef6 <__sccl+0x32>
 800af32:	4610      	mov	r0, r2
 800af34:	e7da      	b.n	800aeec <__sccl+0x28>
	...

0800af38 <__sflush_r>:
 800af38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af40:	0716      	lsls	r6, r2, #28
 800af42:	4605      	mov	r5, r0
 800af44:	460c      	mov	r4, r1
 800af46:	d454      	bmi.n	800aff2 <__sflush_r+0xba>
 800af48:	684b      	ldr	r3, [r1, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dc02      	bgt.n	800af54 <__sflush_r+0x1c>
 800af4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	dd48      	ble.n	800afe6 <__sflush_r+0xae>
 800af54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af56:	2e00      	cmp	r6, #0
 800af58:	d045      	beq.n	800afe6 <__sflush_r+0xae>
 800af5a:	2300      	movs	r3, #0
 800af5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af60:	682f      	ldr	r7, [r5, #0]
 800af62:	6a21      	ldr	r1, [r4, #32]
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	d030      	beq.n	800afca <__sflush_r+0x92>
 800af68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	0759      	lsls	r1, r3, #29
 800af6e:	d505      	bpl.n	800af7c <__sflush_r+0x44>
 800af70:	6863      	ldr	r3, [r4, #4]
 800af72:	1ad2      	subs	r2, r2, r3
 800af74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af76:	b10b      	cbz	r3, 800af7c <__sflush_r+0x44>
 800af78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	2300      	movs	r3, #0
 800af7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af80:	6a21      	ldr	r1, [r4, #32]
 800af82:	4628      	mov	r0, r5
 800af84:	47b0      	blx	r6
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	d106      	bne.n	800af9a <__sflush_r+0x62>
 800af8c:	6829      	ldr	r1, [r5, #0]
 800af8e:	291d      	cmp	r1, #29
 800af90:	d82b      	bhi.n	800afea <__sflush_r+0xb2>
 800af92:	4a2a      	ldr	r2, [pc, #168]	@ (800b03c <__sflush_r+0x104>)
 800af94:	410a      	asrs	r2, r1
 800af96:	07d6      	lsls	r6, r2, #31
 800af98:	d427      	bmi.n	800afea <__sflush_r+0xb2>
 800af9a:	2200      	movs	r2, #0
 800af9c:	6062      	str	r2, [r4, #4]
 800af9e:	04d9      	lsls	r1, r3, #19
 800afa0:	6922      	ldr	r2, [r4, #16]
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	d504      	bpl.n	800afb0 <__sflush_r+0x78>
 800afa6:	1c42      	adds	r2, r0, #1
 800afa8:	d101      	bne.n	800afae <__sflush_r+0x76>
 800afaa:	682b      	ldr	r3, [r5, #0]
 800afac:	b903      	cbnz	r3, 800afb0 <__sflush_r+0x78>
 800afae:	6560      	str	r0, [r4, #84]	@ 0x54
 800afb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afb2:	602f      	str	r7, [r5, #0]
 800afb4:	b1b9      	cbz	r1, 800afe6 <__sflush_r+0xae>
 800afb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afba:	4299      	cmp	r1, r3
 800afbc:	d002      	beq.n	800afc4 <__sflush_r+0x8c>
 800afbe:	4628      	mov	r0, r5
 800afc0:	f7fe fd8e 	bl	8009ae0 <_free_r>
 800afc4:	2300      	movs	r3, #0
 800afc6:	6363      	str	r3, [r4, #52]	@ 0x34
 800afc8:	e00d      	b.n	800afe6 <__sflush_r+0xae>
 800afca:	2301      	movs	r3, #1
 800afcc:	4628      	mov	r0, r5
 800afce:	47b0      	blx	r6
 800afd0:	4602      	mov	r2, r0
 800afd2:	1c50      	adds	r0, r2, #1
 800afd4:	d1c9      	bne.n	800af6a <__sflush_r+0x32>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0c6      	beq.n	800af6a <__sflush_r+0x32>
 800afdc:	2b1d      	cmp	r3, #29
 800afde:	d001      	beq.n	800afe4 <__sflush_r+0xac>
 800afe0:	2b16      	cmp	r3, #22
 800afe2:	d11e      	bne.n	800b022 <__sflush_r+0xea>
 800afe4:	602f      	str	r7, [r5, #0]
 800afe6:	2000      	movs	r0, #0
 800afe8:	e022      	b.n	800b030 <__sflush_r+0xf8>
 800afea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afee:	b21b      	sxth	r3, r3
 800aff0:	e01b      	b.n	800b02a <__sflush_r+0xf2>
 800aff2:	690f      	ldr	r7, [r1, #16]
 800aff4:	2f00      	cmp	r7, #0
 800aff6:	d0f6      	beq.n	800afe6 <__sflush_r+0xae>
 800aff8:	0793      	lsls	r3, r2, #30
 800affa:	680e      	ldr	r6, [r1, #0]
 800affc:	bf08      	it	eq
 800affe:	694b      	ldreq	r3, [r1, #20]
 800b000:	600f      	str	r7, [r1, #0]
 800b002:	bf18      	it	ne
 800b004:	2300      	movne	r3, #0
 800b006:	eba6 0807 	sub.w	r8, r6, r7
 800b00a:	608b      	str	r3, [r1, #8]
 800b00c:	f1b8 0f00 	cmp.w	r8, #0
 800b010:	dde9      	ble.n	800afe6 <__sflush_r+0xae>
 800b012:	6a21      	ldr	r1, [r4, #32]
 800b014:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b016:	4643      	mov	r3, r8
 800b018:	463a      	mov	r2, r7
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b0      	blx	r6
 800b01e:	2800      	cmp	r0, #0
 800b020:	dc08      	bgt.n	800b034 <__sflush_r+0xfc>
 800b022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	4407      	add	r7, r0
 800b036:	eba8 0800 	sub.w	r8, r8, r0
 800b03a:	e7e7      	b.n	800b00c <__sflush_r+0xd4>
 800b03c:	dfbffffe 	.word	0xdfbffffe

0800b040 <_fflush_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	690b      	ldr	r3, [r1, #16]
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	b913      	cbnz	r3, 800b050 <_fflush_r+0x10>
 800b04a:	2500      	movs	r5, #0
 800b04c:	4628      	mov	r0, r5
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	b118      	cbz	r0, 800b05a <_fflush_r+0x1a>
 800b052:	6a03      	ldr	r3, [r0, #32]
 800b054:	b90b      	cbnz	r3, 800b05a <_fflush_r+0x1a>
 800b056:	f7fc ff1b 	bl	8007e90 <__sinit>
 800b05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d0f3      	beq.n	800b04a <_fflush_r+0xa>
 800b062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b064:	07d0      	lsls	r0, r2, #31
 800b066:	d404      	bmi.n	800b072 <_fflush_r+0x32>
 800b068:	0599      	lsls	r1, r3, #22
 800b06a:	d402      	bmi.n	800b072 <_fflush_r+0x32>
 800b06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06e:	f7fd feca 	bl	8008e06 <__retarget_lock_acquire_recursive>
 800b072:	4628      	mov	r0, r5
 800b074:	4621      	mov	r1, r4
 800b076:	f7ff ff5f 	bl	800af38 <__sflush_r>
 800b07a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b07c:	07da      	lsls	r2, r3, #31
 800b07e:	4605      	mov	r5, r0
 800b080:	d4e4      	bmi.n	800b04c <_fflush_r+0xc>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	059b      	lsls	r3, r3, #22
 800b086:	d4e1      	bmi.n	800b04c <_fflush_r+0xc>
 800b088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b08a:	f7fd febd 	bl	8008e08 <__retarget_lock_release_recursive>
 800b08e:	e7dd      	b.n	800b04c <_fflush_r+0xc>

0800b090 <__malloc_lock>:
 800b090:	4801      	ldr	r0, [pc, #4]	@ (800b098 <__malloc_lock+0x8>)
 800b092:	f7fd beb8 	b.w	8008e06 <__retarget_lock_acquire_recursive>
 800b096:	bf00      	nop
 800b098:	2000078c 	.word	0x2000078c

0800b09c <__malloc_unlock>:
 800b09c:	4801      	ldr	r0, [pc, #4]	@ (800b0a4 <__malloc_unlock+0x8>)
 800b09e:	f7fd beb3 	b.w	8008e08 <__retarget_lock_release_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	2000078c 	.word	0x2000078c

0800b0a8 <_Balloc>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	69c6      	ldr	r6, [r0, #28]
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	460d      	mov	r5, r1
 800b0b0:	b976      	cbnz	r6, 800b0d0 <_Balloc+0x28>
 800b0b2:	2010      	movs	r0, #16
 800b0b4:	f7ff fcfc 	bl	800aab0 <malloc>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	61e0      	str	r0, [r4, #28]
 800b0bc:	b920      	cbnz	r0, 800b0c8 <_Balloc+0x20>
 800b0be:	4b18      	ldr	r3, [pc, #96]	@ (800b120 <_Balloc+0x78>)
 800b0c0:	4818      	ldr	r0, [pc, #96]	@ (800b124 <_Balloc+0x7c>)
 800b0c2:	216b      	movs	r1, #107	@ 0x6b
 800b0c4:	f000 feca 	bl	800be5c <__assert_func>
 800b0c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0cc:	6006      	str	r6, [r0, #0]
 800b0ce:	60c6      	str	r6, [r0, #12]
 800b0d0:	69e6      	ldr	r6, [r4, #28]
 800b0d2:	68f3      	ldr	r3, [r6, #12]
 800b0d4:	b183      	cbz	r3, 800b0f8 <_Balloc+0x50>
 800b0d6:	69e3      	ldr	r3, [r4, #28]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0de:	b9b8      	cbnz	r0, 800b110 <_Balloc+0x68>
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b0e6:	1d72      	adds	r2, r6, #5
 800b0e8:	0092      	lsls	r2, r2, #2
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fed4 	bl	800be98 <_calloc_r>
 800b0f0:	b160      	cbz	r0, 800b10c <_Balloc+0x64>
 800b0f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0f6:	e00e      	b.n	800b116 <_Balloc+0x6e>
 800b0f8:	2221      	movs	r2, #33	@ 0x21
 800b0fa:	2104      	movs	r1, #4
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fecb 	bl	800be98 <_calloc_r>
 800b102:	69e3      	ldr	r3, [r4, #28]
 800b104:	60f0      	str	r0, [r6, #12]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e4      	bne.n	800b0d6 <_Balloc+0x2e>
 800b10c:	2000      	movs	r0, #0
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	6802      	ldr	r2, [r0, #0]
 800b112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b116:	2300      	movs	r3, #0
 800b118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b11c:	e7f7      	b.n	800b10e <_Balloc+0x66>
 800b11e:	bf00      	nop
 800b120:	0800c8be 	.word	0x0800c8be
 800b124:	0800c9ca 	.word	0x0800c9ca

0800b128 <_Bfree>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	69c6      	ldr	r6, [r0, #28]
 800b12c:	4605      	mov	r5, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	b976      	cbnz	r6, 800b150 <_Bfree+0x28>
 800b132:	2010      	movs	r0, #16
 800b134:	f7ff fcbc 	bl	800aab0 <malloc>
 800b138:	4602      	mov	r2, r0
 800b13a:	61e8      	str	r0, [r5, #28]
 800b13c:	b920      	cbnz	r0, 800b148 <_Bfree+0x20>
 800b13e:	4b09      	ldr	r3, [pc, #36]	@ (800b164 <_Bfree+0x3c>)
 800b140:	4809      	ldr	r0, [pc, #36]	@ (800b168 <_Bfree+0x40>)
 800b142:	218f      	movs	r1, #143	@ 0x8f
 800b144:	f000 fe8a 	bl	800be5c <__assert_func>
 800b148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b14c:	6006      	str	r6, [r0, #0]
 800b14e:	60c6      	str	r6, [r0, #12]
 800b150:	b13c      	cbz	r4, 800b162 <_Bfree+0x3a>
 800b152:	69eb      	ldr	r3, [r5, #28]
 800b154:	6862      	ldr	r2, [r4, #4]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b15c:	6021      	str	r1, [r4, #0]
 800b15e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	0800c8be 	.word	0x0800c8be
 800b168:	0800c9ca 	.word	0x0800c9ca

0800b16c <__multadd>:
 800b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b170:	690d      	ldr	r5, [r1, #16]
 800b172:	4607      	mov	r7, r0
 800b174:	460c      	mov	r4, r1
 800b176:	461e      	mov	r6, r3
 800b178:	f101 0c14 	add.w	ip, r1, #20
 800b17c:	2000      	movs	r0, #0
 800b17e:	f8dc 3000 	ldr.w	r3, [ip]
 800b182:	b299      	uxth	r1, r3
 800b184:	fb02 6101 	mla	r1, r2, r1, r6
 800b188:	0c1e      	lsrs	r6, r3, #16
 800b18a:	0c0b      	lsrs	r3, r1, #16
 800b18c:	fb02 3306 	mla	r3, r2, r6, r3
 800b190:	b289      	uxth	r1, r1
 800b192:	3001      	adds	r0, #1
 800b194:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b198:	4285      	cmp	r5, r0
 800b19a:	f84c 1b04 	str.w	r1, [ip], #4
 800b19e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1a2:	dcec      	bgt.n	800b17e <__multadd+0x12>
 800b1a4:	b30e      	cbz	r6, 800b1ea <__multadd+0x7e>
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	42ab      	cmp	r3, r5
 800b1aa:	dc19      	bgt.n	800b1e0 <__multadd+0x74>
 800b1ac:	6861      	ldr	r1, [r4, #4]
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	3101      	adds	r1, #1
 800b1b2:	f7ff ff79 	bl	800b0a8 <_Balloc>
 800b1b6:	4680      	mov	r8, r0
 800b1b8:	b928      	cbnz	r0, 800b1c6 <__multadd+0x5a>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f0 <__multadd+0x84>)
 800b1be:	480d      	ldr	r0, [pc, #52]	@ (800b1f4 <__multadd+0x88>)
 800b1c0:	21ba      	movs	r1, #186	@ 0xba
 800b1c2:	f000 fe4b 	bl	800be5c <__assert_func>
 800b1c6:	6922      	ldr	r2, [r4, #16]
 800b1c8:	3202      	adds	r2, #2
 800b1ca:	f104 010c 	add.w	r1, r4, #12
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	300c      	adds	r0, #12
 800b1d2:	f7fd fe1a 	bl	8008e0a <memcpy>
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4638      	mov	r0, r7
 800b1da:	f7ff ffa5 	bl	800b128 <_Bfree>
 800b1de:	4644      	mov	r4, r8
 800b1e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	615e      	str	r6, [r3, #20]
 800b1e8:	6125      	str	r5, [r4, #16]
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f0:	0800c92d 	.word	0x0800c92d
 800b1f4:	0800c9ca 	.word	0x0800c9ca

0800b1f8 <__s2b>:
 800b1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	4615      	mov	r5, r2
 800b200:	461f      	mov	r7, r3
 800b202:	2209      	movs	r2, #9
 800b204:	3308      	adds	r3, #8
 800b206:	4606      	mov	r6, r0
 800b208:	fb93 f3f2 	sdiv	r3, r3, r2
 800b20c:	2100      	movs	r1, #0
 800b20e:	2201      	movs	r2, #1
 800b210:	429a      	cmp	r2, r3
 800b212:	db09      	blt.n	800b228 <__s2b+0x30>
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ff47 	bl	800b0a8 <_Balloc>
 800b21a:	b940      	cbnz	r0, 800b22e <__s2b+0x36>
 800b21c:	4602      	mov	r2, r0
 800b21e:	4b19      	ldr	r3, [pc, #100]	@ (800b284 <__s2b+0x8c>)
 800b220:	4819      	ldr	r0, [pc, #100]	@ (800b288 <__s2b+0x90>)
 800b222:	21d3      	movs	r1, #211	@ 0xd3
 800b224:	f000 fe1a 	bl	800be5c <__assert_func>
 800b228:	0052      	lsls	r2, r2, #1
 800b22a:	3101      	adds	r1, #1
 800b22c:	e7f0      	b.n	800b210 <__s2b+0x18>
 800b22e:	9b08      	ldr	r3, [sp, #32]
 800b230:	6143      	str	r3, [r0, #20]
 800b232:	2d09      	cmp	r5, #9
 800b234:	f04f 0301 	mov.w	r3, #1
 800b238:	6103      	str	r3, [r0, #16]
 800b23a:	dd16      	ble.n	800b26a <__s2b+0x72>
 800b23c:	f104 0909 	add.w	r9, r4, #9
 800b240:	46c8      	mov	r8, r9
 800b242:	442c      	add	r4, r5
 800b244:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b248:	4601      	mov	r1, r0
 800b24a:	3b30      	subs	r3, #48	@ 0x30
 800b24c:	220a      	movs	r2, #10
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ff8c 	bl	800b16c <__multadd>
 800b254:	45a0      	cmp	r8, r4
 800b256:	d1f5      	bne.n	800b244 <__s2b+0x4c>
 800b258:	f1a5 0408 	sub.w	r4, r5, #8
 800b25c:	444c      	add	r4, r9
 800b25e:	1b2d      	subs	r5, r5, r4
 800b260:	1963      	adds	r3, r4, r5
 800b262:	42bb      	cmp	r3, r7
 800b264:	db04      	blt.n	800b270 <__s2b+0x78>
 800b266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26a:	340a      	adds	r4, #10
 800b26c:	2509      	movs	r5, #9
 800b26e:	e7f6      	b.n	800b25e <__s2b+0x66>
 800b270:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b274:	4601      	mov	r1, r0
 800b276:	3b30      	subs	r3, #48	@ 0x30
 800b278:	220a      	movs	r2, #10
 800b27a:	4630      	mov	r0, r6
 800b27c:	f7ff ff76 	bl	800b16c <__multadd>
 800b280:	e7ee      	b.n	800b260 <__s2b+0x68>
 800b282:	bf00      	nop
 800b284:	0800c92d 	.word	0x0800c92d
 800b288:	0800c9ca 	.word	0x0800c9ca

0800b28c <__hi0bits>:
 800b28c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b290:	4603      	mov	r3, r0
 800b292:	bf36      	itet	cc
 800b294:	0403      	lslcc	r3, r0, #16
 800b296:	2000      	movcs	r0, #0
 800b298:	2010      	movcc	r0, #16
 800b29a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b29e:	bf3c      	itt	cc
 800b2a0:	021b      	lslcc	r3, r3, #8
 800b2a2:	3008      	addcc	r0, #8
 800b2a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2a8:	bf3c      	itt	cc
 800b2aa:	011b      	lslcc	r3, r3, #4
 800b2ac:	3004      	addcc	r0, #4
 800b2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2b2:	bf3c      	itt	cc
 800b2b4:	009b      	lslcc	r3, r3, #2
 800b2b6:	3002      	addcc	r0, #2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	db05      	blt.n	800b2c8 <__hi0bits+0x3c>
 800b2bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b2c0:	f100 0001 	add.w	r0, r0, #1
 800b2c4:	bf08      	it	eq
 800b2c6:	2020      	moveq	r0, #32
 800b2c8:	4770      	bx	lr

0800b2ca <__lo0bits>:
 800b2ca:	6803      	ldr	r3, [r0, #0]
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	f013 0007 	ands.w	r0, r3, #7
 800b2d2:	d00b      	beq.n	800b2ec <__lo0bits+0x22>
 800b2d4:	07d9      	lsls	r1, r3, #31
 800b2d6:	d421      	bmi.n	800b31c <__lo0bits+0x52>
 800b2d8:	0798      	lsls	r0, r3, #30
 800b2da:	bf49      	itett	mi
 800b2dc:	085b      	lsrmi	r3, r3, #1
 800b2de:	089b      	lsrpl	r3, r3, #2
 800b2e0:	2001      	movmi	r0, #1
 800b2e2:	6013      	strmi	r3, [r2, #0]
 800b2e4:	bf5c      	itt	pl
 800b2e6:	6013      	strpl	r3, [r2, #0]
 800b2e8:	2002      	movpl	r0, #2
 800b2ea:	4770      	bx	lr
 800b2ec:	b299      	uxth	r1, r3
 800b2ee:	b909      	cbnz	r1, 800b2f4 <__lo0bits+0x2a>
 800b2f0:	0c1b      	lsrs	r3, r3, #16
 800b2f2:	2010      	movs	r0, #16
 800b2f4:	b2d9      	uxtb	r1, r3
 800b2f6:	b909      	cbnz	r1, 800b2fc <__lo0bits+0x32>
 800b2f8:	3008      	adds	r0, #8
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	0719      	lsls	r1, r3, #28
 800b2fe:	bf04      	itt	eq
 800b300:	091b      	lsreq	r3, r3, #4
 800b302:	3004      	addeq	r0, #4
 800b304:	0799      	lsls	r1, r3, #30
 800b306:	bf04      	itt	eq
 800b308:	089b      	lsreq	r3, r3, #2
 800b30a:	3002      	addeq	r0, #2
 800b30c:	07d9      	lsls	r1, r3, #31
 800b30e:	d403      	bmi.n	800b318 <__lo0bits+0x4e>
 800b310:	085b      	lsrs	r3, r3, #1
 800b312:	f100 0001 	add.w	r0, r0, #1
 800b316:	d003      	beq.n	800b320 <__lo0bits+0x56>
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	4770      	bx	lr
 800b31c:	2000      	movs	r0, #0
 800b31e:	4770      	bx	lr
 800b320:	2020      	movs	r0, #32
 800b322:	4770      	bx	lr

0800b324 <__i2b>:
 800b324:	b510      	push	{r4, lr}
 800b326:	460c      	mov	r4, r1
 800b328:	2101      	movs	r1, #1
 800b32a:	f7ff febd 	bl	800b0a8 <_Balloc>
 800b32e:	4602      	mov	r2, r0
 800b330:	b928      	cbnz	r0, 800b33e <__i2b+0x1a>
 800b332:	4b05      	ldr	r3, [pc, #20]	@ (800b348 <__i2b+0x24>)
 800b334:	4805      	ldr	r0, [pc, #20]	@ (800b34c <__i2b+0x28>)
 800b336:	f240 1145 	movw	r1, #325	@ 0x145
 800b33a:	f000 fd8f 	bl	800be5c <__assert_func>
 800b33e:	2301      	movs	r3, #1
 800b340:	6144      	str	r4, [r0, #20]
 800b342:	6103      	str	r3, [r0, #16]
 800b344:	bd10      	pop	{r4, pc}
 800b346:	bf00      	nop
 800b348:	0800c92d 	.word	0x0800c92d
 800b34c:	0800c9ca 	.word	0x0800c9ca

0800b350 <__multiply>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	4614      	mov	r4, r2
 800b356:	690a      	ldr	r2, [r1, #16]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	bfa8      	it	ge
 800b35e:	4623      	movge	r3, r4
 800b360:	460f      	mov	r7, r1
 800b362:	bfa4      	itt	ge
 800b364:	460c      	movge	r4, r1
 800b366:	461f      	movge	r7, r3
 800b368:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b36c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b370:	68a3      	ldr	r3, [r4, #8]
 800b372:	6861      	ldr	r1, [r4, #4]
 800b374:	eb0a 0609 	add.w	r6, sl, r9
 800b378:	42b3      	cmp	r3, r6
 800b37a:	b085      	sub	sp, #20
 800b37c:	bfb8      	it	lt
 800b37e:	3101      	addlt	r1, #1
 800b380:	f7ff fe92 	bl	800b0a8 <_Balloc>
 800b384:	b930      	cbnz	r0, 800b394 <__multiply+0x44>
 800b386:	4602      	mov	r2, r0
 800b388:	4b44      	ldr	r3, [pc, #272]	@ (800b49c <__multiply+0x14c>)
 800b38a:	4845      	ldr	r0, [pc, #276]	@ (800b4a0 <__multiply+0x150>)
 800b38c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b390:	f000 fd64 	bl	800be5c <__assert_func>
 800b394:	f100 0514 	add.w	r5, r0, #20
 800b398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b39c:	462b      	mov	r3, r5
 800b39e:	2200      	movs	r2, #0
 800b3a0:	4543      	cmp	r3, r8
 800b3a2:	d321      	bcc.n	800b3e8 <__multiply+0x98>
 800b3a4:	f107 0114 	add.w	r1, r7, #20
 800b3a8:	f104 0214 	add.w	r2, r4, #20
 800b3ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b3b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b3b4:	9302      	str	r3, [sp, #8]
 800b3b6:	1b13      	subs	r3, r2, r4
 800b3b8:	3b15      	subs	r3, #21
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	3304      	adds	r3, #4
 800b3c0:	f104 0715 	add.w	r7, r4, #21
 800b3c4:	42ba      	cmp	r2, r7
 800b3c6:	bf38      	it	cc
 800b3c8:	2304      	movcc	r3, #4
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	9b02      	ldr	r3, [sp, #8]
 800b3ce:	9103      	str	r1, [sp, #12]
 800b3d0:	428b      	cmp	r3, r1
 800b3d2:	d80c      	bhi.n	800b3ee <__multiply+0x9e>
 800b3d4:	2e00      	cmp	r6, #0
 800b3d6:	dd03      	ble.n	800b3e0 <__multiply+0x90>
 800b3d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d05b      	beq.n	800b498 <__multiply+0x148>
 800b3e0:	6106      	str	r6, [r0, #16]
 800b3e2:	b005      	add	sp, #20
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e8:	f843 2b04 	str.w	r2, [r3], #4
 800b3ec:	e7d8      	b.n	800b3a0 <__multiply+0x50>
 800b3ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800b3f2:	f1ba 0f00 	cmp.w	sl, #0
 800b3f6:	d024      	beq.n	800b442 <__multiply+0xf2>
 800b3f8:	f104 0e14 	add.w	lr, r4, #20
 800b3fc:	46a9      	mov	r9, r5
 800b3fe:	f04f 0c00 	mov.w	ip, #0
 800b402:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b406:	f8d9 3000 	ldr.w	r3, [r9]
 800b40a:	fa1f fb87 	uxth.w	fp, r7
 800b40e:	b29b      	uxth	r3, r3
 800b410:	fb0a 330b 	mla	r3, sl, fp, r3
 800b414:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b418:	f8d9 7000 	ldr.w	r7, [r9]
 800b41c:	4463      	add	r3, ip
 800b41e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b422:	fb0a c70b 	mla	r7, sl, fp, ip
 800b426:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b430:	4572      	cmp	r2, lr
 800b432:	f849 3b04 	str.w	r3, [r9], #4
 800b436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b43a:	d8e2      	bhi.n	800b402 <__multiply+0xb2>
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	f845 c003 	str.w	ip, [r5, r3]
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b448:	3104      	adds	r1, #4
 800b44a:	f1b9 0f00 	cmp.w	r9, #0
 800b44e:	d021      	beq.n	800b494 <__multiply+0x144>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	f104 0c14 	add.w	ip, r4, #20
 800b456:	46ae      	mov	lr, r5
 800b458:	f04f 0a00 	mov.w	sl, #0
 800b45c:	f8bc b000 	ldrh.w	fp, [ip]
 800b460:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b464:	fb09 770b 	mla	r7, r9, fp, r7
 800b468:	4457      	add	r7, sl
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b470:	f84e 3b04 	str.w	r3, [lr], #4
 800b474:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b47c:	f8be 3000 	ldrh.w	r3, [lr]
 800b480:	fb09 330a 	mla	r3, r9, sl, r3
 800b484:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b488:	4562      	cmp	r2, ip
 800b48a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b48e:	d8e5      	bhi.n	800b45c <__multiply+0x10c>
 800b490:	9f01      	ldr	r7, [sp, #4]
 800b492:	51eb      	str	r3, [r5, r7]
 800b494:	3504      	adds	r5, #4
 800b496:	e799      	b.n	800b3cc <__multiply+0x7c>
 800b498:	3e01      	subs	r6, #1
 800b49a:	e79b      	b.n	800b3d4 <__multiply+0x84>
 800b49c:	0800c92d 	.word	0x0800c92d
 800b4a0:	0800c9ca 	.word	0x0800c9ca

0800b4a4 <__pow5mult>:
 800b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a8:	4615      	mov	r5, r2
 800b4aa:	f012 0203 	ands.w	r2, r2, #3
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	460e      	mov	r6, r1
 800b4b2:	d007      	beq.n	800b4c4 <__pow5mult+0x20>
 800b4b4:	4c25      	ldr	r4, [pc, #148]	@ (800b54c <__pow5mult+0xa8>)
 800b4b6:	3a01      	subs	r2, #1
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4be:	f7ff fe55 	bl	800b16c <__multadd>
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	10ad      	asrs	r5, r5, #2
 800b4c6:	d03d      	beq.n	800b544 <__pow5mult+0xa0>
 800b4c8:	69fc      	ldr	r4, [r7, #28]
 800b4ca:	b97c      	cbnz	r4, 800b4ec <__pow5mult+0x48>
 800b4cc:	2010      	movs	r0, #16
 800b4ce:	f7ff faef 	bl	800aab0 <malloc>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	61f8      	str	r0, [r7, #28]
 800b4d6:	b928      	cbnz	r0, 800b4e4 <__pow5mult+0x40>
 800b4d8:	4b1d      	ldr	r3, [pc, #116]	@ (800b550 <__pow5mult+0xac>)
 800b4da:	481e      	ldr	r0, [pc, #120]	@ (800b554 <__pow5mult+0xb0>)
 800b4dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b4e0:	f000 fcbc 	bl	800be5c <__assert_func>
 800b4e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4e8:	6004      	str	r4, [r0, #0]
 800b4ea:	60c4      	str	r4, [r0, #12]
 800b4ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b4f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4f4:	b94c      	cbnz	r4, 800b50a <__pow5mult+0x66>
 800b4f6:	f240 2171 	movw	r1, #625	@ 0x271
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f7ff ff12 	bl	800b324 <__i2b>
 800b500:	2300      	movs	r3, #0
 800b502:	f8c8 0008 	str.w	r0, [r8, #8]
 800b506:	4604      	mov	r4, r0
 800b508:	6003      	str	r3, [r0, #0]
 800b50a:	f04f 0900 	mov.w	r9, #0
 800b50e:	07eb      	lsls	r3, r5, #31
 800b510:	d50a      	bpl.n	800b528 <__pow5mult+0x84>
 800b512:	4631      	mov	r1, r6
 800b514:	4622      	mov	r2, r4
 800b516:	4638      	mov	r0, r7
 800b518:	f7ff ff1a 	bl	800b350 <__multiply>
 800b51c:	4631      	mov	r1, r6
 800b51e:	4680      	mov	r8, r0
 800b520:	4638      	mov	r0, r7
 800b522:	f7ff fe01 	bl	800b128 <_Bfree>
 800b526:	4646      	mov	r6, r8
 800b528:	106d      	asrs	r5, r5, #1
 800b52a:	d00b      	beq.n	800b544 <__pow5mult+0xa0>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	b938      	cbnz	r0, 800b540 <__pow5mult+0x9c>
 800b530:	4622      	mov	r2, r4
 800b532:	4621      	mov	r1, r4
 800b534:	4638      	mov	r0, r7
 800b536:	f7ff ff0b 	bl	800b350 <__multiply>
 800b53a:	6020      	str	r0, [r4, #0]
 800b53c:	f8c0 9000 	str.w	r9, [r0]
 800b540:	4604      	mov	r4, r0
 800b542:	e7e4      	b.n	800b50e <__pow5mult+0x6a>
 800b544:	4630      	mov	r0, r6
 800b546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b54a:	bf00      	nop
 800b54c:	0800ca24 	.word	0x0800ca24
 800b550:	0800c8be 	.word	0x0800c8be
 800b554:	0800c9ca 	.word	0x0800c9ca

0800b558 <__lshift>:
 800b558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b55c:	460c      	mov	r4, r1
 800b55e:	6849      	ldr	r1, [r1, #4]
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	4607      	mov	r7, r0
 800b56a:	4691      	mov	r9, r2
 800b56c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b570:	f108 0601 	add.w	r6, r8, #1
 800b574:	42b3      	cmp	r3, r6
 800b576:	db0b      	blt.n	800b590 <__lshift+0x38>
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff fd95 	bl	800b0a8 <_Balloc>
 800b57e:	4605      	mov	r5, r0
 800b580:	b948      	cbnz	r0, 800b596 <__lshift+0x3e>
 800b582:	4602      	mov	r2, r0
 800b584:	4b28      	ldr	r3, [pc, #160]	@ (800b628 <__lshift+0xd0>)
 800b586:	4829      	ldr	r0, [pc, #164]	@ (800b62c <__lshift+0xd4>)
 800b588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b58c:	f000 fc66 	bl	800be5c <__assert_func>
 800b590:	3101      	adds	r1, #1
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	e7ee      	b.n	800b574 <__lshift+0x1c>
 800b596:	2300      	movs	r3, #0
 800b598:	f100 0114 	add.w	r1, r0, #20
 800b59c:	f100 0210 	add.w	r2, r0, #16
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	4553      	cmp	r3, sl
 800b5a4:	db33      	blt.n	800b60e <__lshift+0xb6>
 800b5a6:	6920      	ldr	r0, [r4, #16]
 800b5a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5ac:	f104 0314 	add.w	r3, r4, #20
 800b5b0:	f019 091f 	ands.w	r9, r9, #31
 800b5b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5bc:	d02b      	beq.n	800b616 <__lshift+0xbe>
 800b5be:	f1c9 0e20 	rsb	lr, r9, #32
 800b5c2:	468a      	mov	sl, r1
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	6818      	ldr	r0, [r3, #0]
 800b5c8:	fa00 f009 	lsl.w	r0, r0, r9
 800b5cc:	4310      	orrs	r0, r2
 800b5ce:	f84a 0b04 	str.w	r0, [sl], #4
 800b5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d6:	459c      	cmp	ip, r3
 800b5d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5dc:	d8f3      	bhi.n	800b5c6 <__lshift+0x6e>
 800b5de:	ebac 0304 	sub.w	r3, ip, r4
 800b5e2:	3b15      	subs	r3, #21
 800b5e4:	f023 0303 	bic.w	r3, r3, #3
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	f104 0015 	add.w	r0, r4, #21
 800b5ee:	4584      	cmp	ip, r0
 800b5f0:	bf38      	it	cc
 800b5f2:	2304      	movcc	r3, #4
 800b5f4:	50ca      	str	r2, [r1, r3]
 800b5f6:	b10a      	cbz	r2, 800b5fc <__lshift+0xa4>
 800b5f8:	f108 0602 	add.w	r6, r8, #2
 800b5fc:	3e01      	subs	r6, #1
 800b5fe:	4638      	mov	r0, r7
 800b600:	612e      	str	r6, [r5, #16]
 800b602:	4621      	mov	r1, r4
 800b604:	f7ff fd90 	bl	800b128 <_Bfree>
 800b608:	4628      	mov	r0, r5
 800b60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b612:	3301      	adds	r3, #1
 800b614:	e7c5      	b.n	800b5a2 <__lshift+0x4a>
 800b616:	3904      	subs	r1, #4
 800b618:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b620:	459c      	cmp	ip, r3
 800b622:	d8f9      	bhi.n	800b618 <__lshift+0xc0>
 800b624:	e7ea      	b.n	800b5fc <__lshift+0xa4>
 800b626:	bf00      	nop
 800b628:	0800c92d 	.word	0x0800c92d
 800b62c:	0800c9ca 	.word	0x0800c9ca

0800b630 <__mcmp>:
 800b630:	690a      	ldr	r2, [r1, #16]
 800b632:	4603      	mov	r3, r0
 800b634:	6900      	ldr	r0, [r0, #16]
 800b636:	1a80      	subs	r0, r0, r2
 800b638:	b530      	push	{r4, r5, lr}
 800b63a:	d10e      	bne.n	800b65a <__mcmp+0x2a>
 800b63c:	3314      	adds	r3, #20
 800b63e:	3114      	adds	r1, #20
 800b640:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b644:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b64c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b650:	4295      	cmp	r5, r2
 800b652:	d003      	beq.n	800b65c <__mcmp+0x2c>
 800b654:	d205      	bcs.n	800b662 <__mcmp+0x32>
 800b656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b65a:	bd30      	pop	{r4, r5, pc}
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	d3f3      	bcc.n	800b648 <__mcmp+0x18>
 800b660:	e7fb      	b.n	800b65a <__mcmp+0x2a>
 800b662:	2001      	movs	r0, #1
 800b664:	e7f9      	b.n	800b65a <__mcmp+0x2a>
	...

0800b668 <__mdiff>:
 800b668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4689      	mov	r9, r1
 800b66e:	4606      	mov	r6, r0
 800b670:	4611      	mov	r1, r2
 800b672:	4648      	mov	r0, r9
 800b674:	4614      	mov	r4, r2
 800b676:	f7ff ffdb 	bl	800b630 <__mcmp>
 800b67a:	1e05      	subs	r5, r0, #0
 800b67c:	d112      	bne.n	800b6a4 <__mdiff+0x3c>
 800b67e:	4629      	mov	r1, r5
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff fd11 	bl	800b0a8 <_Balloc>
 800b686:	4602      	mov	r2, r0
 800b688:	b928      	cbnz	r0, 800b696 <__mdiff+0x2e>
 800b68a:	4b3f      	ldr	r3, [pc, #252]	@ (800b788 <__mdiff+0x120>)
 800b68c:	f240 2137 	movw	r1, #567	@ 0x237
 800b690:	483e      	ldr	r0, [pc, #248]	@ (800b78c <__mdiff+0x124>)
 800b692:	f000 fbe3 	bl	800be5c <__assert_func>
 800b696:	2301      	movs	r3, #1
 800b698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b69c:	4610      	mov	r0, r2
 800b69e:	b003      	add	sp, #12
 800b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a4:	bfbc      	itt	lt
 800b6a6:	464b      	movlt	r3, r9
 800b6a8:	46a1      	movlt	r9, r4
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b6b0:	bfba      	itte	lt
 800b6b2:	461c      	movlt	r4, r3
 800b6b4:	2501      	movlt	r5, #1
 800b6b6:	2500      	movge	r5, #0
 800b6b8:	f7ff fcf6 	bl	800b0a8 <_Balloc>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	b918      	cbnz	r0, 800b6c8 <__mdiff+0x60>
 800b6c0:	4b31      	ldr	r3, [pc, #196]	@ (800b788 <__mdiff+0x120>)
 800b6c2:	f240 2145 	movw	r1, #581	@ 0x245
 800b6c6:	e7e3      	b.n	800b690 <__mdiff+0x28>
 800b6c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b6cc:	6926      	ldr	r6, [r4, #16]
 800b6ce:	60c5      	str	r5, [r0, #12]
 800b6d0:	f109 0310 	add.w	r3, r9, #16
 800b6d4:	f109 0514 	add.w	r5, r9, #20
 800b6d8:	f104 0e14 	add.w	lr, r4, #20
 800b6dc:	f100 0b14 	add.w	fp, r0, #20
 800b6e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b6e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	46d9      	mov	r9, fp
 800b6ec:	f04f 0c00 	mov.w	ip, #0
 800b6f0:	9b01      	ldr	r3, [sp, #4]
 800b6f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b6f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	fa1f f38a 	uxth.w	r3, sl
 800b700:	4619      	mov	r1, r3
 800b702:	b283      	uxth	r3, r0
 800b704:	1acb      	subs	r3, r1, r3
 800b706:	0c00      	lsrs	r0, r0, #16
 800b708:	4463      	add	r3, ip
 800b70a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b70e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b712:	b29b      	uxth	r3, r3
 800b714:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b718:	4576      	cmp	r6, lr
 800b71a:	f849 3b04 	str.w	r3, [r9], #4
 800b71e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b722:	d8e5      	bhi.n	800b6f0 <__mdiff+0x88>
 800b724:	1b33      	subs	r3, r6, r4
 800b726:	3b15      	subs	r3, #21
 800b728:	f023 0303 	bic.w	r3, r3, #3
 800b72c:	3415      	adds	r4, #21
 800b72e:	3304      	adds	r3, #4
 800b730:	42a6      	cmp	r6, r4
 800b732:	bf38      	it	cc
 800b734:	2304      	movcc	r3, #4
 800b736:	441d      	add	r5, r3
 800b738:	445b      	add	r3, fp
 800b73a:	461e      	mov	r6, r3
 800b73c:	462c      	mov	r4, r5
 800b73e:	4544      	cmp	r4, r8
 800b740:	d30e      	bcc.n	800b760 <__mdiff+0xf8>
 800b742:	f108 0103 	add.w	r1, r8, #3
 800b746:	1b49      	subs	r1, r1, r5
 800b748:	f021 0103 	bic.w	r1, r1, #3
 800b74c:	3d03      	subs	r5, #3
 800b74e:	45a8      	cmp	r8, r5
 800b750:	bf38      	it	cc
 800b752:	2100      	movcc	r1, #0
 800b754:	440b      	add	r3, r1
 800b756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b75a:	b191      	cbz	r1, 800b782 <__mdiff+0x11a>
 800b75c:	6117      	str	r7, [r2, #16]
 800b75e:	e79d      	b.n	800b69c <__mdiff+0x34>
 800b760:	f854 1b04 	ldr.w	r1, [r4], #4
 800b764:	46e6      	mov	lr, ip
 800b766:	0c08      	lsrs	r0, r1, #16
 800b768:	fa1c fc81 	uxtah	ip, ip, r1
 800b76c:	4471      	add	r1, lr
 800b76e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b772:	b289      	uxth	r1, r1
 800b774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b778:	f846 1b04 	str.w	r1, [r6], #4
 800b77c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b780:	e7dd      	b.n	800b73e <__mdiff+0xd6>
 800b782:	3f01      	subs	r7, #1
 800b784:	e7e7      	b.n	800b756 <__mdiff+0xee>
 800b786:	bf00      	nop
 800b788:	0800c92d 	.word	0x0800c92d
 800b78c:	0800c9ca 	.word	0x0800c9ca

0800b790 <__ulp>:
 800b790:	b082      	sub	sp, #8
 800b792:	ed8d 0b00 	vstr	d0, [sp]
 800b796:	9a01      	ldr	r2, [sp, #4]
 800b798:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d8 <__ulp+0x48>)
 800b79a:	4013      	ands	r3, r2
 800b79c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc08      	bgt.n	800b7b6 <__ulp+0x26>
 800b7a4:	425b      	negs	r3, r3
 800b7a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b7aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7ae:	da04      	bge.n	800b7ba <__ulp+0x2a>
 800b7b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b7b4:	4113      	asrs	r3, r2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	e008      	b.n	800b7cc <__ulp+0x3c>
 800b7ba:	f1a2 0314 	sub.w	r3, r2, #20
 800b7be:	2b1e      	cmp	r3, #30
 800b7c0:	bfda      	itte	le
 800b7c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b7c6:	40da      	lsrle	r2, r3
 800b7c8:	2201      	movgt	r2, #1
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	ec41 0b10 	vmov	d0, r0, r1
 800b7d4:	b002      	add	sp, #8
 800b7d6:	4770      	bx	lr
 800b7d8:	7ff00000 	.word	0x7ff00000

0800b7dc <__b2d>:
 800b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e0:	6906      	ldr	r6, [r0, #16]
 800b7e2:	f100 0814 	add.w	r8, r0, #20
 800b7e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7ea:	1f37      	subs	r7, r6, #4
 800b7ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	f7ff fd4b 	bl	800b28c <__hi0bits>
 800b7f6:	f1c0 0320 	rsb	r3, r0, #32
 800b7fa:	280a      	cmp	r0, #10
 800b7fc:	600b      	str	r3, [r1, #0]
 800b7fe:	491b      	ldr	r1, [pc, #108]	@ (800b86c <__b2d+0x90>)
 800b800:	dc15      	bgt.n	800b82e <__b2d+0x52>
 800b802:	f1c0 0c0b 	rsb	ip, r0, #11
 800b806:	fa22 f30c 	lsr.w	r3, r2, ip
 800b80a:	45b8      	cmp	r8, r7
 800b80c:	ea43 0501 	orr.w	r5, r3, r1
 800b810:	bf34      	ite	cc
 800b812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b816:	2300      	movcs	r3, #0
 800b818:	3015      	adds	r0, #21
 800b81a:	fa02 f000 	lsl.w	r0, r2, r0
 800b81e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b822:	4303      	orrs	r3, r0
 800b824:	461c      	mov	r4, r3
 800b826:	ec45 4b10 	vmov	d0, r4, r5
 800b82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82e:	45b8      	cmp	r8, r7
 800b830:	bf3a      	itte	cc
 800b832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b836:	f1a6 0708 	subcc.w	r7, r6, #8
 800b83a:	2300      	movcs	r3, #0
 800b83c:	380b      	subs	r0, #11
 800b83e:	d012      	beq.n	800b866 <__b2d+0x8a>
 800b840:	f1c0 0120 	rsb	r1, r0, #32
 800b844:	fa23 f401 	lsr.w	r4, r3, r1
 800b848:	4082      	lsls	r2, r0
 800b84a:	4322      	orrs	r2, r4
 800b84c:	4547      	cmp	r7, r8
 800b84e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b852:	bf8c      	ite	hi
 800b854:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b858:	2200      	movls	r2, #0
 800b85a:	4083      	lsls	r3, r0
 800b85c:	40ca      	lsrs	r2, r1
 800b85e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b862:	4313      	orrs	r3, r2
 800b864:	e7de      	b.n	800b824 <__b2d+0x48>
 800b866:	ea42 0501 	orr.w	r5, r2, r1
 800b86a:	e7db      	b.n	800b824 <__b2d+0x48>
 800b86c:	3ff00000 	.word	0x3ff00000

0800b870 <__d2b>:
 800b870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b874:	460f      	mov	r7, r1
 800b876:	2101      	movs	r1, #1
 800b878:	ec59 8b10 	vmov	r8, r9, d0
 800b87c:	4616      	mov	r6, r2
 800b87e:	f7ff fc13 	bl	800b0a8 <_Balloc>
 800b882:	4604      	mov	r4, r0
 800b884:	b930      	cbnz	r0, 800b894 <__d2b+0x24>
 800b886:	4602      	mov	r2, r0
 800b888:	4b23      	ldr	r3, [pc, #140]	@ (800b918 <__d2b+0xa8>)
 800b88a:	4824      	ldr	r0, [pc, #144]	@ (800b91c <__d2b+0xac>)
 800b88c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b890:	f000 fae4 	bl	800be5c <__assert_func>
 800b894:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b89c:	b10d      	cbz	r5, 800b8a2 <__d2b+0x32>
 800b89e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	f1b8 0300 	subs.w	r3, r8, #0
 800b8a8:	d023      	beq.n	800b8f2 <__d2b+0x82>
 800b8aa:	4668      	mov	r0, sp
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	f7ff fd0c 	bl	800b2ca <__lo0bits>
 800b8b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8b6:	b1d0      	cbz	r0, 800b8ee <__d2b+0x7e>
 800b8b8:	f1c0 0320 	rsb	r3, r0, #32
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	40c2      	lsrs	r2, r0
 800b8c4:	6163      	str	r3, [r4, #20]
 800b8c6:	9201      	str	r2, [sp, #4]
 800b8c8:	9b01      	ldr	r3, [sp, #4]
 800b8ca:	61a3      	str	r3, [r4, #24]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	bf0c      	ite	eq
 800b8d0:	2201      	moveq	r2, #1
 800b8d2:	2202      	movne	r2, #2
 800b8d4:	6122      	str	r2, [r4, #16]
 800b8d6:	b1a5      	cbz	r5, 800b902 <__d2b+0x92>
 800b8d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b8dc:	4405      	add	r5, r0
 800b8de:	603d      	str	r5, [r7, #0]
 800b8e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8e4:	6030      	str	r0, [r6, #0]
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	b003      	add	sp, #12
 800b8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	6161      	str	r1, [r4, #20]
 800b8f0:	e7ea      	b.n	800b8c8 <__d2b+0x58>
 800b8f2:	a801      	add	r0, sp, #4
 800b8f4:	f7ff fce9 	bl	800b2ca <__lo0bits>
 800b8f8:	9b01      	ldr	r3, [sp, #4]
 800b8fa:	6163      	str	r3, [r4, #20]
 800b8fc:	3020      	adds	r0, #32
 800b8fe:	2201      	movs	r2, #1
 800b900:	e7e8      	b.n	800b8d4 <__d2b+0x64>
 800b902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b906:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b90a:	6038      	str	r0, [r7, #0]
 800b90c:	6918      	ldr	r0, [r3, #16]
 800b90e:	f7ff fcbd 	bl	800b28c <__hi0bits>
 800b912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b916:	e7e5      	b.n	800b8e4 <__d2b+0x74>
 800b918:	0800c92d 	.word	0x0800c92d
 800b91c:	0800c9ca 	.word	0x0800c9ca

0800b920 <__ratio>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	b085      	sub	sp, #20
 800b926:	e9cd 1000 	strd	r1, r0, [sp]
 800b92a:	a902      	add	r1, sp, #8
 800b92c:	f7ff ff56 	bl	800b7dc <__b2d>
 800b930:	9800      	ldr	r0, [sp, #0]
 800b932:	a903      	add	r1, sp, #12
 800b934:	ec55 4b10 	vmov	r4, r5, d0
 800b938:	f7ff ff50 	bl	800b7dc <__b2d>
 800b93c:	9b01      	ldr	r3, [sp, #4]
 800b93e:	6919      	ldr	r1, [r3, #16]
 800b940:	9b00      	ldr	r3, [sp, #0]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	1ac9      	subs	r1, r1, r3
 800b946:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b94a:	1a9b      	subs	r3, r3, r2
 800b94c:	ec5b ab10 	vmov	sl, fp, d0
 800b950:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b954:	2b00      	cmp	r3, #0
 800b956:	bfce      	itee	gt
 800b958:	462a      	movgt	r2, r5
 800b95a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b95e:	465a      	movle	r2, fp
 800b960:	462f      	mov	r7, r5
 800b962:	46d9      	mov	r9, fp
 800b964:	bfcc      	ite	gt
 800b966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b96a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b96e:	464b      	mov	r3, r9
 800b970:	4652      	mov	r2, sl
 800b972:	4620      	mov	r0, r4
 800b974:	4639      	mov	r1, r7
 800b976:	f7f4 ff91 	bl	800089c <__aeabi_ddiv>
 800b97a:	ec41 0b10 	vmov	d0, r0, r1
 800b97e:	b005      	add	sp, #20
 800b980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b984 <__copybits>:
 800b984:	3901      	subs	r1, #1
 800b986:	b570      	push	{r4, r5, r6, lr}
 800b988:	1149      	asrs	r1, r1, #5
 800b98a:	6914      	ldr	r4, [r2, #16]
 800b98c:	3101      	adds	r1, #1
 800b98e:	f102 0314 	add.w	r3, r2, #20
 800b992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b99a:	1f05      	subs	r5, r0, #4
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	d30c      	bcc.n	800b9ba <__copybits+0x36>
 800b9a0:	1aa3      	subs	r3, r4, r2
 800b9a2:	3b11      	subs	r3, #17
 800b9a4:	f023 0303 	bic.w	r3, r3, #3
 800b9a8:	3211      	adds	r2, #17
 800b9aa:	42a2      	cmp	r2, r4
 800b9ac:	bf88      	it	hi
 800b9ae:	2300      	movhi	r3, #0
 800b9b0:	4418      	add	r0, r3
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4288      	cmp	r0, r1
 800b9b6:	d305      	bcc.n	800b9c4 <__copybits+0x40>
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800b9be:	f845 6f04 	str.w	r6, [r5, #4]!
 800b9c2:	e7eb      	b.n	800b99c <__copybits+0x18>
 800b9c4:	f840 3b04 	str.w	r3, [r0], #4
 800b9c8:	e7f4      	b.n	800b9b4 <__copybits+0x30>

0800b9ca <__any_on>:
 800b9ca:	f100 0214 	add.w	r2, r0, #20
 800b9ce:	6900      	ldr	r0, [r0, #16]
 800b9d0:	114b      	asrs	r3, r1, #5
 800b9d2:	4298      	cmp	r0, r3
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	db11      	blt.n	800b9fc <__any_on+0x32>
 800b9d8:	dd0a      	ble.n	800b9f0 <__any_on+0x26>
 800b9da:	f011 011f 	ands.w	r1, r1, #31
 800b9de:	d007      	beq.n	800b9f0 <__any_on+0x26>
 800b9e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9e4:	fa24 f001 	lsr.w	r0, r4, r1
 800b9e8:	fa00 f101 	lsl.w	r1, r0, r1
 800b9ec:	428c      	cmp	r4, r1
 800b9ee:	d10b      	bne.n	800ba08 <__any_on+0x3e>
 800b9f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d803      	bhi.n	800ba00 <__any_on+0x36>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	bd10      	pop	{r4, pc}
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	e7f7      	b.n	800b9f0 <__any_on+0x26>
 800ba00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba04:	2900      	cmp	r1, #0
 800ba06:	d0f5      	beq.n	800b9f4 <__any_on+0x2a>
 800ba08:	2001      	movs	r0, #1
 800ba0a:	e7f6      	b.n	800b9fa <__any_on+0x30>

0800ba0c <__submore>:
 800ba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba10:	460c      	mov	r4, r1
 800ba12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ba14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	d11d      	bne.n	800ba58 <__submore+0x4c>
 800ba1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ba20:	f7ff f870 	bl	800ab04 <_malloc_r>
 800ba24:	b918      	cbnz	r0, 800ba2e <__submore+0x22>
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba32:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ba34:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ba38:	6360      	str	r0, [r4, #52]	@ 0x34
 800ba3a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ba3e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ba42:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ba46:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ba4a:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ba4e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ba52:	6020      	str	r0, [r4, #0]
 800ba54:	2000      	movs	r0, #0
 800ba56:	e7e8      	b.n	800ba2a <__submore+0x1e>
 800ba58:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ba5a:	0077      	lsls	r7, r6, #1
 800ba5c:	463a      	mov	r2, r7
 800ba5e:	f000 f80f 	bl	800ba80 <_realloc_r>
 800ba62:	4605      	mov	r5, r0
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d0de      	beq.n	800ba26 <__submore+0x1a>
 800ba68:	eb00 0806 	add.w	r8, r0, r6
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	4632      	mov	r2, r6
 800ba70:	4640      	mov	r0, r8
 800ba72:	f7fd f9ca 	bl	8008e0a <memcpy>
 800ba76:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ba7a:	f8c4 8000 	str.w	r8, [r4]
 800ba7e:	e7e9      	b.n	800ba54 <__submore+0x48>

0800ba80 <_realloc_r>:
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	4680      	mov	r8, r0
 800ba86:	4615      	mov	r5, r2
 800ba88:	460c      	mov	r4, r1
 800ba8a:	b921      	cbnz	r1, 800ba96 <_realloc_r+0x16>
 800ba8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba90:	4611      	mov	r1, r2
 800ba92:	f7ff b837 	b.w	800ab04 <_malloc_r>
 800ba96:	b92a      	cbnz	r2, 800baa4 <_realloc_r+0x24>
 800ba98:	f7fe f822 	bl	8009ae0 <_free_r>
 800ba9c:	2400      	movs	r4, #0
 800ba9e:	4620      	mov	r0, r4
 800baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa4:	f000 fa0c 	bl	800bec0 <_malloc_usable_size_r>
 800baa8:	4285      	cmp	r5, r0
 800baaa:	4606      	mov	r6, r0
 800baac:	d802      	bhi.n	800bab4 <_realloc_r+0x34>
 800baae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bab2:	d8f4      	bhi.n	800ba9e <_realloc_r+0x1e>
 800bab4:	4629      	mov	r1, r5
 800bab6:	4640      	mov	r0, r8
 800bab8:	f7ff f824 	bl	800ab04 <_malloc_r>
 800babc:	4607      	mov	r7, r0
 800babe:	2800      	cmp	r0, #0
 800bac0:	d0ec      	beq.n	800ba9c <_realloc_r+0x1c>
 800bac2:	42b5      	cmp	r5, r6
 800bac4:	462a      	mov	r2, r5
 800bac6:	4621      	mov	r1, r4
 800bac8:	bf28      	it	cs
 800baca:	4632      	movcs	r2, r6
 800bacc:	f7fd f99d 	bl	8008e0a <memcpy>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4640      	mov	r0, r8
 800bad4:	f7fe f804 	bl	8009ae0 <_free_r>
 800bad8:	463c      	mov	r4, r7
 800bada:	e7e0      	b.n	800ba9e <_realloc_r+0x1e>

0800badc <_strtoul_l.constprop.0>:
 800badc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bae0:	4e34      	ldr	r6, [pc, #208]	@ (800bbb4 <_strtoul_l.constprop.0+0xd8>)
 800bae2:	4686      	mov	lr, r0
 800bae4:	460d      	mov	r5, r1
 800bae6:	4628      	mov	r0, r5
 800bae8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baec:	5d37      	ldrb	r7, [r6, r4]
 800baee:	f017 0708 	ands.w	r7, r7, #8
 800baf2:	d1f8      	bne.n	800bae6 <_strtoul_l.constprop.0+0xa>
 800baf4:	2c2d      	cmp	r4, #45	@ 0x2d
 800baf6:	d12f      	bne.n	800bb58 <_strtoul_l.constprop.0+0x7c>
 800baf8:	782c      	ldrb	r4, [r5, #0]
 800bafa:	2701      	movs	r7, #1
 800bafc:	1c85      	adds	r5, r0, #2
 800bafe:	f033 0010 	bics.w	r0, r3, #16
 800bb02:	d109      	bne.n	800bb18 <_strtoul_l.constprop.0+0x3c>
 800bb04:	2c30      	cmp	r4, #48	@ 0x30
 800bb06:	d12c      	bne.n	800bb62 <_strtoul_l.constprop.0+0x86>
 800bb08:	7828      	ldrb	r0, [r5, #0]
 800bb0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bb0e:	2858      	cmp	r0, #88	@ 0x58
 800bb10:	d127      	bne.n	800bb62 <_strtoul_l.constprop.0+0x86>
 800bb12:	786c      	ldrb	r4, [r5, #1]
 800bb14:	2310      	movs	r3, #16
 800bb16:	3502      	adds	r5, #2
 800bb18:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800bb1c:	2600      	movs	r6, #0
 800bb1e:	fbb8 f8f3 	udiv	r8, r8, r3
 800bb22:	fb03 f908 	mul.w	r9, r3, r8
 800bb26:	ea6f 0909 	mvn.w	r9, r9
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bb30:	f1bc 0f09 	cmp.w	ip, #9
 800bb34:	d81c      	bhi.n	800bb70 <_strtoul_l.constprop.0+0x94>
 800bb36:	4664      	mov	r4, ip
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	dd2a      	ble.n	800bb92 <_strtoul_l.constprop.0+0xb6>
 800bb3c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800bb40:	d007      	beq.n	800bb52 <_strtoul_l.constprop.0+0x76>
 800bb42:	4580      	cmp	r8, r0
 800bb44:	d322      	bcc.n	800bb8c <_strtoul_l.constprop.0+0xb0>
 800bb46:	d101      	bne.n	800bb4c <_strtoul_l.constprop.0+0x70>
 800bb48:	45a1      	cmp	r9, r4
 800bb4a:	db1f      	blt.n	800bb8c <_strtoul_l.constprop.0+0xb0>
 800bb4c:	fb00 4003 	mla	r0, r0, r3, r4
 800bb50:	2601      	movs	r6, #1
 800bb52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb56:	e7e9      	b.n	800bb2c <_strtoul_l.constprop.0+0x50>
 800bb58:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb5a:	bf04      	itt	eq
 800bb5c:	782c      	ldrbeq	r4, [r5, #0]
 800bb5e:	1c85      	addeq	r5, r0, #2
 800bb60:	e7cd      	b.n	800bafe <_strtoul_l.constprop.0+0x22>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1d8      	bne.n	800bb18 <_strtoul_l.constprop.0+0x3c>
 800bb66:	2c30      	cmp	r4, #48	@ 0x30
 800bb68:	bf0c      	ite	eq
 800bb6a:	2308      	moveq	r3, #8
 800bb6c:	230a      	movne	r3, #10
 800bb6e:	e7d3      	b.n	800bb18 <_strtoul_l.constprop.0+0x3c>
 800bb70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bb74:	f1bc 0f19 	cmp.w	ip, #25
 800bb78:	d801      	bhi.n	800bb7e <_strtoul_l.constprop.0+0xa2>
 800bb7a:	3c37      	subs	r4, #55	@ 0x37
 800bb7c:	e7dc      	b.n	800bb38 <_strtoul_l.constprop.0+0x5c>
 800bb7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bb82:	f1bc 0f19 	cmp.w	ip, #25
 800bb86:	d804      	bhi.n	800bb92 <_strtoul_l.constprop.0+0xb6>
 800bb88:	3c57      	subs	r4, #87	@ 0x57
 800bb8a:	e7d5      	b.n	800bb38 <_strtoul_l.constprop.0+0x5c>
 800bb8c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800bb90:	e7df      	b.n	800bb52 <_strtoul_l.constprop.0+0x76>
 800bb92:	1c73      	adds	r3, r6, #1
 800bb94:	d106      	bne.n	800bba4 <_strtoul_l.constprop.0+0xc8>
 800bb96:	2322      	movs	r3, #34	@ 0x22
 800bb98:	f8ce 3000 	str.w	r3, [lr]
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	b932      	cbnz	r2, 800bbae <_strtoul_l.constprop.0+0xd2>
 800bba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bba4:	b107      	cbz	r7, 800bba8 <_strtoul_l.constprop.0+0xcc>
 800bba6:	4240      	negs	r0, r0
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	d0f9      	beq.n	800bba0 <_strtoul_l.constprop.0+0xc4>
 800bbac:	b106      	cbz	r6, 800bbb0 <_strtoul_l.constprop.0+0xd4>
 800bbae:	1e69      	subs	r1, r5, #1
 800bbb0:	6011      	str	r1, [r2, #0]
 800bbb2:	e7f5      	b.n	800bba0 <_strtoul_l.constprop.0+0xc4>
 800bbb4:	0800c7b1 	.word	0x0800c7b1

0800bbb8 <_strtoul_r>:
 800bbb8:	f7ff bf90 	b.w	800badc <_strtoul_l.constprop.0>

0800bbbc <__swbuf_r>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	460e      	mov	r6, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	b118      	cbz	r0, 800bbce <__swbuf_r+0x12>
 800bbc6:	6a03      	ldr	r3, [r0, #32]
 800bbc8:	b90b      	cbnz	r3, 800bbce <__swbuf_r+0x12>
 800bbca:	f7fc f961 	bl	8007e90 <__sinit>
 800bbce:	69a3      	ldr	r3, [r4, #24]
 800bbd0:	60a3      	str	r3, [r4, #8]
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	071a      	lsls	r2, r3, #28
 800bbd6:	d501      	bpl.n	800bbdc <__swbuf_r+0x20>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	b943      	cbnz	r3, 800bbee <__swbuf_r+0x32>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 f82a 	bl	800bc38 <__swsetup_r>
 800bbe4:	b118      	cbz	r0, 800bbee <__swbuf_r+0x32>
 800bbe6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bbea:	4638      	mov	r0, r7
 800bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbee:	6823      	ldr	r3, [r4, #0]
 800bbf0:	6922      	ldr	r2, [r4, #16]
 800bbf2:	1a98      	subs	r0, r3, r2
 800bbf4:	6963      	ldr	r3, [r4, #20]
 800bbf6:	b2f6      	uxtb	r6, r6
 800bbf8:	4283      	cmp	r3, r0
 800bbfa:	4637      	mov	r7, r6
 800bbfc:	dc05      	bgt.n	800bc0a <__swbuf_r+0x4e>
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f7ff fa1d 	bl	800b040 <_fflush_r>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d1ed      	bne.n	800bbe6 <__swbuf_r+0x2a>
 800bc0a:	68a3      	ldr	r3, [r4, #8]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	60a3      	str	r3, [r4, #8]
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	6022      	str	r2, [r4, #0]
 800bc16:	701e      	strb	r6, [r3, #0]
 800bc18:	6962      	ldr	r2, [r4, #20]
 800bc1a:	1c43      	adds	r3, r0, #1
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d004      	beq.n	800bc2a <__swbuf_r+0x6e>
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	07db      	lsls	r3, r3, #31
 800bc24:	d5e1      	bpl.n	800bbea <__swbuf_r+0x2e>
 800bc26:	2e0a      	cmp	r6, #10
 800bc28:	d1df      	bne.n	800bbea <__swbuf_r+0x2e>
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f7ff fa07 	bl	800b040 <_fflush_r>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d0d9      	beq.n	800bbea <__swbuf_r+0x2e>
 800bc36:	e7d6      	b.n	800bbe6 <__swbuf_r+0x2a>

0800bc38 <__swsetup_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4b29      	ldr	r3, [pc, #164]	@ (800bce0 <__swsetup_r+0xa8>)
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	460c      	mov	r4, r1
 800bc42:	b118      	cbz	r0, 800bc4c <__swsetup_r+0x14>
 800bc44:	6a03      	ldr	r3, [r0, #32]
 800bc46:	b90b      	cbnz	r3, 800bc4c <__swsetup_r+0x14>
 800bc48:	f7fc f922 	bl	8007e90 <__sinit>
 800bc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc50:	0719      	lsls	r1, r3, #28
 800bc52:	d422      	bmi.n	800bc9a <__swsetup_r+0x62>
 800bc54:	06da      	lsls	r2, r3, #27
 800bc56:	d407      	bmi.n	800bc68 <__swsetup_r+0x30>
 800bc58:	2209      	movs	r2, #9
 800bc5a:	602a      	str	r2, [r5, #0]
 800bc5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc66:	e033      	b.n	800bcd0 <__swsetup_r+0x98>
 800bc68:	0758      	lsls	r0, r3, #29
 800bc6a:	d512      	bpl.n	800bc92 <__swsetup_r+0x5a>
 800bc6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc6e:	b141      	cbz	r1, 800bc82 <__swsetup_r+0x4a>
 800bc70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc74:	4299      	cmp	r1, r3
 800bc76:	d002      	beq.n	800bc7e <__swsetup_r+0x46>
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f7fd ff31 	bl	8009ae0 <_free_r>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc88:	81a3      	strh	r3, [r4, #12]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	6063      	str	r3, [r4, #4]
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	89a3      	ldrh	r3, [r4, #12]
 800bc94:	f043 0308 	orr.w	r3, r3, #8
 800bc98:	81a3      	strh	r3, [r4, #12]
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	b94b      	cbnz	r3, 800bcb2 <__swsetup_r+0x7a>
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bca8:	d003      	beq.n	800bcb2 <__swsetup_r+0x7a>
 800bcaa:	4621      	mov	r1, r4
 800bcac:	4628      	mov	r0, r5
 800bcae:	f000 f84c 	bl	800bd4a <__smakebuf_r>
 800bcb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb6:	f013 0201 	ands.w	r2, r3, #1
 800bcba:	d00a      	beq.n	800bcd2 <__swsetup_r+0x9a>
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	60a2      	str	r2, [r4, #8]
 800bcc0:	6962      	ldr	r2, [r4, #20]
 800bcc2:	4252      	negs	r2, r2
 800bcc4:	61a2      	str	r2, [r4, #24]
 800bcc6:	6922      	ldr	r2, [r4, #16]
 800bcc8:	b942      	cbnz	r2, 800bcdc <__swsetup_r+0xa4>
 800bcca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bcce:	d1c5      	bne.n	800bc5c <__swsetup_r+0x24>
 800bcd0:	bd38      	pop	{r3, r4, r5, pc}
 800bcd2:	0799      	lsls	r1, r3, #30
 800bcd4:	bf58      	it	pl
 800bcd6:	6962      	ldrpl	r2, [r4, #20]
 800bcd8:	60a2      	str	r2, [r4, #8]
 800bcda:	e7f4      	b.n	800bcc6 <__swsetup_r+0x8e>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e7f7      	b.n	800bcd0 <__swsetup_r+0x98>
 800bce0:	2000019c 	.word	0x2000019c

0800bce4 <__ascii_wctomb>:
 800bce4:	4603      	mov	r3, r0
 800bce6:	4608      	mov	r0, r1
 800bce8:	b141      	cbz	r1, 800bcfc <__ascii_wctomb+0x18>
 800bcea:	2aff      	cmp	r2, #255	@ 0xff
 800bcec:	d904      	bls.n	800bcf8 <__ascii_wctomb+0x14>
 800bcee:	228a      	movs	r2, #138	@ 0x8a
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcf6:	4770      	bx	lr
 800bcf8:	700a      	strb	r2, [r1, #0]
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	4770      	bx	lr

0800bcfe <__swhatbuf_r>:
 800bcfe:	b570      	push	{r4, r5, r6, lr}
 800bd00:	460c      	mov	r4, r1
 800bd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd06:	2900      	cmp	r1, #0
 800bd08:	b096      	sub	sp, #88	@ 0x58
 800bd0a:	4615      	mov	r5, r2
 800bd0c:	461e      	mov	r6, r3
 800bd0e:	da0d      	bge.n	800bd2c <__swhatbuf_r+0x2e>
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd16:	f04f 0100 	mov.w	r1, #0
 800bd1a:	bf14      	ite	ne
 800bd1c:	2340      	movne	r3, #64	@ 0x40
 800bd1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd22:	2000      	movs	r0, #0
 800bd24:	6031      	str	r1, [r6, #0]
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	b016      	add	sp, #88	@ 0x58
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}
 800bd2c:	466a      	mov	r2, sp
 800bd2e:	f000 f863 	bl	800bdf8 <_fstat_r>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	dbec      	blt.n	800bd10 <__swhatbuf_r+0x12>
 800bd36:	9901      	ldr	r1, [sp, #4]
 800bd38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd40:	4259      	negs	r1, r3
 800bd42:	4159      	adcs	r1, r3
 800bd44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd48:	e7eb      	b.n	800bd22 <__swhatbuf_r+0x24>

0800bd4a <__smakebuf_r>:
 800bd4a:	898b      	ldrh	r3, [r1, #12]
 800bd4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd4e:	079d      	lsls	r5, r3, #30
 800bd50:	4606      	mov	r6, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	d507      	bpl.n	800bd66 <__smakebuf_r+0x1c>
 800bd56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	6123      	str	r3, [r4, #16]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	6163      	str	r3, [r4, #20]
 800bd62:	b003      	add	sp, #12
 800bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd66:	ab01      	add	r3, sp, #4
 800bd68:	466a      	mov	r2, sp
 800bd6a:	f7ff ffc8 	bl	800bcfe <__swhatbuf_r>
 800bd6e:	9f00      	ldr	r7, [sp, #0]
 800bd70:	4605      	mov	r5, r0
 800bd72:	4639      	mov	r1, r7
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7fe fec5 	bl	800ab04 <_malloc_r>
 800bd7a:	b948      	cbnz	r0, 800bd90 <__smakebuf_r+0x46>
 800bd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd80:	059a      	lsls	r2, r3, #22
 800bd82:	d4ee      	bmi.n	800bd62 <__smakebuf_r+0x18>
 800bd84:	f023 0303 	bic.w	r3, r3, #3
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	e7e2      	b.n	800bd56 <__smakebuf_r+0xc>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	6020      	str	r0, [r4, #0]
 800bd94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	9b01      	ldr	r3, [sp, #4]
 800bd9c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bda0:	b15b      	cbz	r3, 800bdba <__smakebuf_r+0x70>
 800bda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda6:	4630      	mov	r0, r6
 800bda8:	f000 f838 	bl	800be1c <_isatty_r>
 800bdac:	b128      	cbz	r0, 800bdba <__smakebuf_r+0x70>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	f043 0301 	orr.w	r3, r3, #1
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	431d      	orrs	r5, r3
 800bdbe:	81a5      	strh	r5, [r4, #12]
 800bdc0:	e7cf      	b.n	800bd62 <__smakebuf_r+0x18>

0800bdc2 <memmove>:
 800bdc2:	4288      	cmp	r0, r1
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	eb01 0402 	add.w	r4, r1, r2
 800bdca:	d902      	bls.n	800bdd2 <memmove+0x10>
 800bdcc:	4284      	cmp	r4, r0
 800bdce:	4623      	mov	r3, r4
 800bdd0:	d807      	bhi.n	800bde2 <memmove+0x20>
 800bdd2:	1e43      	subs	r3, r0, #1
 800bdd4:	42a1      	cmp	r1, r4
 800bdd6:	d008      	beq.n	800bdea <memmove+0x28>
 800bdd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bddc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bde0:	e7f8      	b.n	800bdd4 <memmove+0x12>
 800bde2:	4402      	add	r2, r0
 800bde4:	4601      	mov	r1, r0
 800bde6:	428a      	cmp	r2, r1
 800bde8:	d100      	bne.n	800bdec <memmove+0x2a>
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdf0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdf4:	e7f7      	b.n	800bde6 <memmove+0x24>
	...

0800bdf8 <_fstat_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d07      	ldr	r5, [pc, #28]	@ (800be18 <_fstat_r+0x20>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	4611      	mov	r1, r2
 800be04:	602b      	str	r3, [r5, #0]
 800be06:	f7f7 f864 	bl	8002ed2 <_fstat>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	d102      	bne.n	800be14 <_fstat_r+0x1c>
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	b103      	cbz	r3, 800be14 <_fstat_r+0x1c>
 800be12:	6023      	str	r3, [r4, #0]
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	bf00      	nop
 800be18:	20000788 	.word	0x20000788

0800be1c <_isatty_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d06      	ldr	r5, [pc, #24]	@ (800be38 <_isatty_r+0x1c>)
 800be20:	2300      	movs	r3, #0
 800be22:	4604      	mov	r4, r0
 800be24:	4608      	mov	r0, r1
 800be26:	602b      	str	r3, [r5, #0]
 800be28:	f7f7 f863 	bl	8002ef2 <_isatty>
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	d102      	bne.n	800be36 <_isatty_r+0x1a>
 800be30:	682b      	ldr	r3, [r5, #0]
 800be32:	b103      	cbz	r3, 800be36 <_isatty_r+0x1a>
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	bd38      	pop	{r3, r4, r5, pc}
 800be38:	20000788 	.word	0x20000788

0800be3c <_sbrk_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d06      	ldr	r5, [pc, #24]	@ (800be58 <_sbrk_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	f7f7 f86c 	bl	8002f24 <_sbrk>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_sbrk_r+0x1a>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_sbrk_r+0x1a>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20000788 	.word	0x20000788

0800be5c <__assert_func>:
 800be5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be5e:	4614      	mov	r4, r2
 800be60:	461a      	mov	r2, r3
 800be62:	4b09      	ldr	r3, [pc, #36]	@ (800be88 <__assert_func+0x2c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4605      	mov	r5, r0
 800be68:	68d8      	ldr	r0, [r3, #12]
 800be6a:	b954      	cbnz	r4, 800be82 <__assert_func+0x26>
 800be6c:	4b07      	ldr	r3, [pc, #28]	@ (800be8c <__assert_func+0x30>)
 800be6e:	461c      	mov	r4, r3
 800be70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be74:	9100      	str	r1, [sp, #0]
 800be76:	462b      	mov	r3, r5
 800be78:	4905      	ldr	r1, [pc, #20]	@ (800be90 <__assert_func+0x34>)
 800be7a:	f000 f829 	bl	800bed0 <fiprintf>
 800be7e:	f000 f839 	bl	800bef4 <abort>
 800be82:	4b04      	ldr	r3, [pc, #16]	@ (800be94 <__assert_func+0x38>)
 800be84:	e7f4      	b.n	800be70 <__assert_func+0x14>
 800be86:	bf00      	nop
 800be88:	2000019c 	.word	0x2000019c
 800be8c:	0800cb5b 	.word	0x0800cb5b
 800be90:	0800cb2d 	.word	0x0800cb2d
 800be94:	0800cb20 	.word	0x0800cb20

0800be98 <_calloc_r>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	fba1 5402 	umull	r5, r4, r1, r2
 800be9e:	b93c      	cbnz	r4, 800beb0 <_calloc_r+0x18>
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7fe fe2f 	bl	800ab04 <_malloc_r>
 800bea6:	4606      	mov	r6, r0
 800bea8:	b928      	cbnz	r0, 800beb6 <_calloc_r+0x1e>
 800beaa:	2600      	movs	r6, #0
 800beac:	4630      	mov	r0, r6
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	220c      	movs	r2, #12
 800beb2:	6002      	str	r2, [r0, #0]
 800beb4:	e7f9      	b.n	800beaa <_calloc_r+0x12>
 800beb6:	462a      	mov	r2, r5
 800beb8:	4621      	mov	r1, r4
 800beba:	f7fc ff27 	bl	8008d0c <memset>
 800bebe:	e7f5      	b.n	800beac <_calloc_r+0x14>

0800bec0 <_malloc_usable_size_r>:
 800bec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec4:	1f18      	subs	r0, r3, #4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfbc      	itt	lt
 800beca:	580b      	ldrlt	r3, [r1, r0]
 800becc:	18c0      	addlt	r0, r0, r3
 800bece:	4770      	bx	lr

0800bed0 <fiprintf>:
 800bed0:	b40e      	push	{r1, r2, r3}
 800bed2:	b503      	push	{r0, r1, lr}
 800bed4:	4601      	mov	r1, r0
 800bed6:	ab03      	add	r3, sp, #12
 800bed8:	4805      	ldr	r0, [pc, #20]	@ (800bef0 <fiprintf+0x20>)
 800beda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bede:	6800      	ldr	r0, [r0, #0]
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	f7fe fccd 	bl	800a880 <_vfiprintf_r>
 800bee6:	b002      	add	sp, #8
 800bee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800beec:	b003      	add	sp, #12
 800beee:	4770      	bx	lr
 800bef0:	2000019c 	.word	0x2000019c

0800bef4 <abort>:
 800bef4:	b508      	push	{r3, lr}
 800bef6:	2006      	movs	r0, #6
 800bef8:	f000 f82c 	bl	800bf54 <raise>
 800befc:	2001      	movs	r0, #1
 800befe:	f7f6 ff98 	bl	8002e32 <_exit>

0800bf02 <_raise_r>:
 800bf02:	291f      	cmp	r1, #31
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	4605      	mov	r5, r0
 800bf08:	460c      	mov	r4, r1
 800bf0a:	d904      	bls.n	800bf16 <_raise_r+0x14>
 800bf0c:	2316      	movs	r3, #22
 800bf0e:	6003      	str	r3, [r0, #0]
 800bf10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf14:	bd38      	pop	{r3, r4, r5, pc}
 800bf16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf18:	b112      	cbz	r2, 800bf20 <_raise_r+0x1e>
 800bf1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf1e:	b94b      	cbnz	r3, 800bf34 <_raise_r+0x32>
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 f831 	bl	800bf88 <_getpid_r>
 800bf26:	4622      	mov	r2, r4
 800bf28:	4601      	mov	r1, r0
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf30:	f000 b818 	b.w	800bf64 <_kill_r>
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d00a      	beq.n	800bf4e <_raise_r+0x4c>
 800bf38:	1c59      	adds	r1, r3, #1
 800bf3a:	d103      	bne.n	800bf44 <_raise_r+0x42>
 800bf3c:	2316      	movs	r3, #22
 800bf3e:	6003      	str	r3, [r0, #0]
 800bf40:	2001      	movs	r0, #1
 800bf42:	e7e7      	b.n	800bf14 <_raise_r+0x12>
 800bf44:	2100      	movs	r1, #0
 800bf46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4798      	blx	r3
 800bf4e:	2000      	movs	r0, #0
 800bf50:	e7e0      	b.n	800bf14 <_raise_r+0x12>
	...

0800bf54 <raise>:
 800bf54:	4b02      	ldr	r3, [pc, #8]	@ (800bf60 <raise+0xc>)
 800bf56:	4601      	mov	r1, r0
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	f7ff bfd2 	b.w	800bf02 <_raise_r>
 800bf5e:	bf00      	nop
 800bf60:	2000019c 	.word	0x2000019c

0800bf64 <_kill_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d07      	ldr	r5, [pc, #28]	@ (800bf84 <_kill_r+0x20>)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4611      	mov	r1, r2
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f7f6 ff4e 	bl	8002e12 <_kill>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d102      	bne.n	800bf80 <_kill_r+0x1c>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	b103      	cbz	r3, 800bf80 <_kill_r+0x1c>
 800bf7e:	6023      	str	r3, [r4, #0]
 800bf80:	bd38      	pop	{r3, r4, r5, pc}
 800bf82:	bf00      	nop
 800bf84:	20000788 	.word	0x20000788

0800bf88 <_getpid_r>:
 800bf88:	f7f6 bf3b 	b.w	8002e02 <_getpid>

0800bf8c <atan2f>:
 800bf8c:	f000 b83e 	b.w	800c00c <__ieee754_atan2f>

0800bf90 <fmodf>:
 800bf90:	b508      	push	{r3, lr}
 800bf92:	ed2d 8b02 	vpush	{d8}
 800bf96:	eef0 8a40 	vmov.f32	s17, s0
 800bf9a:	eeb0 8a60 	vmov.f32	s16, s1
 800bf9e:	f000 f8d9 	bl	800c154 <__ieee754_fmodf>
 800bfa2:	eef4 8a48 	vcmp.f32	s17, s16
 800bfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfaa:	d60c      	bvs.n	800bfc6 <fmodf+0x36>
 800bfac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bfcc <fmodf+0x3c>
 800bfb0:	eeb4 8a68 	vcmp.f32	s16, s17
 800bfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb8:	d105      	bne.n	800bfc6 <fmodf+0x36>
 800bfba:	f7fc fef9 	bl	8008db0 <__errno>
 800bfbe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bfc2:	2321      	movs	r3, #33	@ 0x21
 800bfc4:	6003      	str	r3, [r0, #0]
 800bfc6:	ecbd 8b02 	vpop	{d8}
 800bfca:	bd08      	pop	{r3, pc}
 800bfcc:	00000000 	.word	0x00000000

0800bfd0 <sqrtf>:
 800bfd0:	b508      	push	{r3, lr}
 800bfd2:	ed2d 8b02 	vpush	{d8}
 800bfd6:	eeb0 8a40 	vmov.f32	s16, s0
 800bfda:	f000 f8b7 	bl	800c14c <__ieee754_sqrtf>
 800bfde:	eeb4 8a48 	vcmp.f32	s16, s16
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	d60c      	bvs.n	800c002 <sqrtf+0x32>
 800bfe8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c008 <sqrtf+0x38>
 800bfec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff4:	d505      	bpl.n	800c002 <sqrtf+0x32>
 800bff6:	f7fc fedb 	bl	8008db0 <__errno>
 800bffa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bffe:	2321      	movs	r3, #33	@ 0x21
 800c000:	6003      	str	r3, [r0, #0]
 800c002:	ecbd 8b02 	vpop	{d8}
 800c006:	bd08      	pop	{r3, pc}
 800c008:	00000000 	.word	0x00000000

0800c00c <__ieee754_atan2f>:
 800c00c:	ee10 2a90 	vmov	r2, s1
 800c010:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c014:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c018:	b510      	push	{r4, lr}
 800c01a:	eef0 7a40 	vmov.f32	s15, s0
 800c01e:	d806      	bhi.n	800c02e <__ieee754_atan2f+0x22>
 800c020:	ee10 0a10 	vmov	r0, s0
 800c024:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c028:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c02c:	d904      	bls.n	800c038 <__ieee754_atan2f+0x2c>
 800c02e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c032:	eeb0 0a67 	vmov.f32	s0, s15
 800c036:	bd10      	pop	{r4, pc}
 800c038:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c03c:	d103      	bne.n	800c046 <__ieee754_atan2f+0x3a>
 800c03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c042:	f000 b95f 	b.w	800c304 <atanf>
 800c046:	1794      	asrs	r4, r2, #30
 800c048:	f004 0402 	and.w	r4, r4, #2
 800c04c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c050:	b943      	cbnz	r3, 800c064 <__ieee754_atan2f+0x58>
 800c052:	2c02      	cmp	r4, #2
 800c054:	d05e      	beq.n	800c114 <__ieee754_atan2f+0x108>
 800c056:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c128 <__ieee754_atan2f+0x11c>
 800c05a:	2c03      	cmp	r4, #3
 800c05c:	bf08      	it	eq
 800c05e:	eef0 7a47 	vmoveq.f32	s15, s14
 800c062:	e7e6      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c064:	b941      	cbnz	r1, 800c078 <__ieee754_atan2f+0x6c>
 800c066:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c12c <__ieee754_atan2f+0x120>
 800c06a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c130 <__ieee754_atan2f+0x124>
 800c06e:	2800      	cmp	r0, #0
 800c070:	bfb8      	it	lt
 800c072:	eef0 7a47 	vmovlt.f32	s15, s14
 800c076:	e7dc      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c078:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c07c:	d110      	bne.n	800c0a0 <__ieee754_atan2f+0x94>
 800c07e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c082:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c086:	d107      	bne.n	800c098 <__ieee754_atan2f+0x8c>
 800c088:	2c02      	cmp	r4, #2
 800c08a:	d846      	bhi.n	800c11a <__ieee754_atan2f+0x10e>
 800c08c:	4b29      	ldr	r3, [pc, #164]	@ (800c134 <__ieee754_atan2f+0x128>)
 800c08e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c092:	edd3 7a00 	vldr	s15, [r3]
 800c096:	e7cc      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c098:	2c02      	cmp	r4, #2
 800c09a:	d841      	bhi.n	800c120 <__ieee754_atan2f+0x114>
 800c09c:	4b26      	ldr	r3, [pc, #152]	@ (800c138 <__ieee754_atan2f+0x12c>)
 800c09e:	e7f6      	b.n	800c08e <__ieee754_atan2f+0x82>
 800c0a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c0a4:	d0df      	beq.n	800c066 <__ieee754_atan2f+0x5a>
 800c0a6:	1a5b      	subs	r3, r3, r1
 800c0a8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c0ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c0b0:	da1a      	bge.n	800c0e8 <__ieee754_atan2f+0xdc>
 800c0b2:	2a00      	cmp	r2, #0
 800c0b4:	da01      	bge.n	800c0ba <__ieee754_atan2f+0xae>
 800c0b6:	313c      	adds	r1, #60	@ 0x3c
 800c0b8:	db19      	blt.n	800c0ee <__ieee754_atan2f+0xe2>
 800c0ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c0be:	f000 f9f5 	bl	800c4ac <fabsf>
 800c0c2:	f000 f91f 	bl	800c304 <atanf>
 800c0c6:	eef0 7a40 	vmov.f32	s15, s0
 800c0ca:	2c01      	cmp	r4, #1
 800c0cc:	d012      	beq.n	800c0f4 <__ieee754_atan2f+0xe8>
 800c0ce:	2c02      	cmp	r4, #2
 800c0d0:	d017      	beq.n	800c102 <__ieee754_atan2f+0xf6>
 800c0d2:	2c00      	cmp	r4, #0
 800c0d4:	d0ad      	beq.n	800c032 <__ieee754_atan2f+0x26>
 800c0d6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c13c <__ieee754_atan2f+0x130>
 800c0da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0de:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c140 <__ieee754_atan2f+0x134>
 800c0e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0e6:	e7a4      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c0e8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c12c <__ieee754_atan2f+0x120>
 800c0ec:	e7ed      	b.n	800c0ca <__ieee754_atan2f+0xbe>
 800c0ee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c144 <__ieee754_atan2f+0x138>
 800c0f2:	e7ea      	b.n	800c0ca <__ieee754_atan2f+0xbe>
 800c0f4:	ee17 3a90 	vmov	r3, s15
 800c0f8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c0fc:	ee07 3a90 	vmov	s15, r3
 800c100:	e797      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c102:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c13c <__ieee754_atan2f+0x130>
 800c106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c10a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c140 <__ieee754_atan2f+0x134>
 800c10e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c112:	e78e      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c114:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c140 <__ieee754_atan2f+0x134>
 800c118:	e78b      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c11a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c148 <__ieee754_atan2f+0x13c>
 800c11e:	e788      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c120:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c144 <__ieee754_atan2f+0x138>
 800c124:	e785      	b.n	800c032 <__ieee754_atan2f+0x26>
 800c126:	bf00      	nop
 800c128:	c0490fdb 	.word	0xc0490fdb
 800c12c:	3fc90fdb 	.word	0x3fc90fdb
 800c130:	bfc90fdb 	.word	0xbfc90fdb
 800c134:	0800cb68 	.word	0x0800cb68
 800c138:	0800cb5c 	.word	0x0800cb5c
 800c13c:	33bbbd2e 	.word	0x33bbbd2e
 800c140:	40490fdb 	.word	0x40490fdb
 800c144:	00000000 	.word	0x00000000
 800c148:	3f490fdb 	.word	0x3f490fdb

0800c14c <__ieee754_sqrtf>:
 800c14c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c150:	4770      	bx	lr
	...

0800c154 <__ieee754_fmodf>:
 800c154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c156:	ee10 5a90 	vmov	r5, s1
 800c15a:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800c15e:	1e43      	subs	r3, r0, #1
 800c160:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c164:	d206      	bcs.n	800c174 <__ieee754_fmodf+0x20>
 800c166:	ee10 3a10 	vmov	r3, s0
 800c16a:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800c16e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c172:	d304      	bcc.n	800c17e <__ieee754_fmodf+0x2a>
 800c174:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c178:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c17e:	4286      	cmp	r6, r0
 800c180:	dbfc      	blt.n	800c17c <__ieee754_fmodf+0x28>
 800c182:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800c186:	d105      	bne.n	800c194 <__ieee754_fmodf+0x40>
 800c188:	4b32      	ldr	r3, [pc, #200]	@ (800c254 <__ieee754_fmodf+0x100>)
 800c18a:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800c18e:	ed93 0a00 	vldr	s0, [r3]
 800c192:	e7f3      	b.n	800c17c <__ieee754_fmodf+0x28>
 800c194:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c198:	d140      	bne.n	800c21c <__ieee754_fmodf+0xc8>
 800c19a:	0232      	lsls	r2, r6, #8
 800c19c:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	dc38      	bgt.n	800c216 <__ieee754_fmodf+0xc2>
 800c1a4:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800c1a8:	d13e      	bne.n	800c228 <__ieee754_fmodf+0xd4>
 800c1aa:	0207      	lsls	r7, r0, #8
 800c1ac:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	da36      	bge.n	800c222 <__ieee754_fmodf+0xce>
 800c1b4:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800c1b8:	bfb9      	ittee	lt
 800c1ba:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800c1be:	1a5b      	sublt	r3, r3, r1
 800c1c0:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800c1c4:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800c1c8:	bfb8      	it	lt
 800c1ca:	fa06 f303 	lsllt.w	r3, r6, r3
 800c1ce:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c1d2:	bfb5      	itete	lt
 800c1d4:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800c1d8:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800c1dc:	1aad      	sublt	r5, r5, r2
 800c1de:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800c1e2:	bfb8      	it	lt
 800c1e4:	40a8      	lsllt	r0, r5
 800c1e6:	1a89      	subs	r1, r1, r2
 800c1e8:	1a1d      	subs	r5, r3, r0
 800c1ea:	bb01      	cbnz	r1, 800c22e <__ieee754_fmodf+0xda>
 800c1ec:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800c1f0:	bf38      	it	cc
 800c1f2:	462b      	movcc	r3, r5
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0c7      	beq.n	800c188 <__ieee754_fmodf+0x34>
 800c1f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c1fc:	db1f      	blt.n	800c23e <__ieee754_fmodf+0xea>
 800c1fe:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c202:	db1f      	blt.n	800c244 <__ieee754_fmodf+0xf0>
 800c204:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c208:	327f      	adds	r2, #127	@ 0x7f
 800c20a:	4323      	orrs	r3, r4
 800c20c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c210:	ee00 3a10 	vmov	s0, r3
 800c214:	e7b2      	b.n	800c17c <__ieee754_fmodf+0x28>
 800c216:	3901      	subs	r1, #1
 800c218:	0052      	lsls	r2, r2, #1
 800c21a:	e7c1      	b.n	800c1a0 <__ieee754_fmodf+0x4c>
 800c21c:	15f1      	asrs	r1, r6, #23
 800c21e:	397f      	subs	r1, #127	@ 0x7f
 800c220:	e7c0      	b.n	800c1a4 <__ieee754_fmodf+0x50>
 800c222:	3a01      	subs	r2, #1
 800c224:	007f      	lsls	r7, r7, #1
 800c226:	e7c3      	b.n	800c1b0 <__ieee754_fmodf+0x5c>
 800c228:	15c2      	asrs	r2, r0, #23
 800c22a:	3a7f      	subs	r2, #127	@ 0x7f
 800c22c:	e7c2      	b.n	800c1b4 <__ieee754_fmodf+0x60>
 800c22e:	2d00      	cmp	r5, #0
 800c230:	da02      	bge.n	800c238 <__ieee754_fmodf+0xe4>
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	3901      	subs	r1, #1
 800c236:	e7d7      	b.n	800c1e8 <__ieee754_fmodf+0x94>
 800c238:	d0a6      	beq.n	800c188 <__ieee754_fmodf+0x34>
 800c23a:	006b      	lsls	r3, r5, #1
 800c23c:	e7fa      	b.n	800c234 <__ieee754_fmodf+0xe0>
 800c23e:	005b      	lsls	r3, r3, #1
 800c240:	3a01      	subs	r2, #1
 800c242:	e7d9      	b.n	800c1f8 <__ieee754_fmodf+0xa4>
 800c244:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c248:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c24c:	3282      	adds	r2, #130	@ 0x82
 800c24e:	4113      	asrs	r3, r2
 800c250:	4323      	orrs	r3, r4
 800c252:	e7dd      	b.n	800c210 <__ieee754_fmodf+0xbc>
 800c254:	0800cb74 	.word	0x0800cb74

0800c258 <fmaxf>:
 800c258:	b508      	push	{r3, lr}
 800c25a:	ed2d 8b02 	vpush	{d8}
 800c25e:	eeb0 8a40 	vmov.f32	s16, s0
 800c262:	eef0 8a60 	vmov.f32	s17, s1
 800c266:	f000 f831 	bl	800c2cc <__fpclassifyf>
 800c26a:	b930      	cbnz	r0, 800c27a <fmaxf+0x22>
 800c26c:	eeb0 8a68 	vmov.f32	s16, s17
 800c270:	eeb0 0a48 	vmov.f32	s0, s16
 800c274:	ecbd 8b02 	vpop	{d8}
 800c278:	bd08      	pop	{r3, pc}
 800c27a:	eeb0 0a68 	vmov.f32	s0, s17
 800c27e:	f000 f825 	bl	800c2cc <__fpclassifyf>
 800c282:	2800      	cmp	r0, #0
 800c284:	d0f4      	beq.n	800c270 <fmaxf+0x18>
 800c286:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28e:	dded      	ble.n	800c26c <fmaxf+0x14>
 800c290:	e7ee      	b.n	800c270 <fmaxf+0x18>

0800c292 <fminf>:
 800c292:	b508      	push	{r3, lr}
 800c294:	ed2d 8b02 	vpush	{d8}
 800c298:	eeb0 8a40 	vmov.f32	s16, s0
 800c29c:	eef0 8a60 	vmov.f32	s17, s1
 800c2a0:	f000 f814 	bl	800c2cc <__fpclassifyf>
 800c2a4:	b930      	cbnz	r0, 800c2b4 <fminf+0x22>
 800c2a6:	eeb0 8a68 	vmov.f32	s16, s17
 800c2aa:	eeb0 0a48 	vmov.f32	s0, s16
 800c2ae:	ecbd 8b02 	vpop	{d8}
 800c2b2:	bd08      	pop	{r3, pc}
 800c2b4:	eeb0 0a68 	vmov.f32	s0, s17
 800c2b8:	f000 f808 	bl	800c2cc <__fpclassifyf>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d0f4      	beq.n	800c2aa <fminf+0x18>
 800c2c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	d5ed      	bpl.n	800c2a6 <fminf+0x14>
 800c2ca:	e7ee      	b.n	800c2aa <fminf+0x18>

0800c2cc <__fpclassifyf>:
 800c2cc:	ee10 3a10 	vmov	r3, s0
 800c2d0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c2d4:	d00d      	beq.n	800c2f2 <__fpclassifyf+0x26>
 800c2d6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c2da:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c2de:	d30a      	bcc.n	800c2f6 <__fpclassifyf+0x2a>
 800c2e0:	4b07      	ldr	r3, [pc, #28]	@ (800c300 <__fpclassifyf+0x34>)
 800c2e2:	1e42      	subs	r2, r0, #1
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d908      	bls.n	800c2fa <__fpclassifyf+0x2e>
 800c2e8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c2ec:	4258      	negs	r0, r3
 800c2ee:	4158      	adcs	r0, r3
 800c2f0:	4770      	bx	lr
 800c2f2:	2002      	movs	r0, #2
 800c2f4:	4770      	bx	lr
 800c2f6:	2004      	movs	r0, #4
 800c2f8:	4770      	bx	lr
 800c2fa:	2003      	movs	r0, #3
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	007ffffe 	.word	0x007ffffe

0800c304 <atanf>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	ee10 5a10 	vmov	r5, s0
 800c30a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c30e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c312:	eef0 7a40 	vmov.f32	s15, s0
 800c316:	d310      	bcc.n	800c33a <atanf+0x36>
 800c318:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c31c:	d904      	bls.n	800c328 <atanf+0x24>
 800c31e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c322:	eeb0 0a67 	vmov.f32	s0, s15
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c460 <atanf+0x15c>
 800c32c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c464 <atanf+0x160>
 800c330:	2d00      	cmp	r5, #0
 800c332:	bfc8      	it	gt
 800c334:	eef0 7a47 	vmovgt.f32	s15, s14
 800c338:	e7f3      	b.n	800c322 <atanf+0x1e>
 800c33a:	4b4b      	ldr	r3, [pc, #300]	@ (800c468 <atanf+0x164>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	d810      	bhi.n	800c362 <atanf+0x5e>
 800c340:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c344:	d20a      	bcs.n	800c35c <atanf+0x58>
 800c346:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c46c <atanf+0x168>
 800c34a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c34e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c352:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c35a:	dce2      	bgt.n	800c322 <atanf+0x1e>
 800c35c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c360:	e013      	b.n	800c38a <atanf+0x86>
 800c362:	f000 f8a3 	bl	800c4ac <fabsf>
 800c366:	4b42      	ldr	r3, [pc, #264]	@ (800c470 <atanf+0x16c>)
 800c368:	429c      	cmp	r4, r3
 800c36a:	d84f      	bhi.n	800c40c <atanf+0x108>
 800c36c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c370:	429c      	cmp	r4, r3
 800c372:	d841      	bhi.n	800c3f8 <atanf+0xf4>
 800c374:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c378:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c37c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c380:	2300      	movs	r3, #0
 800c382:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c390:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c474 <atanf+0x170>
 800c394:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c478 <atanf+0x174>
 800c398:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c47c <atanf+0x178>
 800c39c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c3a0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c3a4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c480 <atanf+0x17c>
 800c3a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c3ac:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c484 <atanf+0x180>
 800c3b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c3b4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c488 <atanf+0x184>
 800c3b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c3bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c48c <atanf+0x188>
 800c3c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c3c4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c490 <atanf+0x18c>
 800c3c8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c3cc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c494 <atanf+0x190>
 800c3d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c3d4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c498 <atanf+0x194>
 800c3d8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c3dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c49c <atanf+0x198>
 800c3e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c3e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c3e8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c3ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c3f0:	d121      	bne.n	800c436 <atanf+0x132>
 800c3f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3f6:	e794      	b.n	800c322 <atanf+0x1e>
 800c3f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c3fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c400:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c404:	2301      	movs	r3, #1
 800c406:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c40a:	e7be      	b.n	800c38a <atanf+0x86>
 800c40c:	4b24      	ldr	r3, [pc, #144]	@ (800c4a0 <atanf+0x19c>)
 800c40e:	429c      	cmp	r4, r3
 800c410:	d80b      	bhi.n	800c42a <atanf+0x126>
 800c412:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c41a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c41e:	2302      	movs	r3, #2
 800c420:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c428:	e7af      	b.n	800c38a <atanf+0x86>
 800c42a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c42e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c432:	2303      	movs	r3, #3
 800c434:	e7a9      	b.n	800c38a <atanf+0x86>
 800c436:	4a1b      	ldr	r2, [pc, #108]	@ (800c4a4 <atanf+0x1a0>)
 800c438:	491b      	ldr	r1, [pc, #108]	@ (800c4a8 <atanf+0x1a4>)
 800c43a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c43e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c442:	edd3 6a00 	vldr	s13, [r3]
 800c446:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c450:	edd2 7a00 	vldr	s15, [r2]
 800c454:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c458:	bfb8      	it	lt
 800c45a:	eef1 7a67 	vneglt.f32	s15, s15
 800c45e:	e760      	b.n	800c322 <atanf+0x1e>
 800c460:	bfc90fdb 	.word	0xbfc90fdb
 800c464:	3fc90fdb 	.word	0x3fc90fdb
 800c468:	3edfffff 	.word	0x3edfffff
 800c46c:	7149f2ca 	.word	0x7149f2ca
 800c470:	3f97ffff 	.word	0x3f97ffff
 800c474:	3c8569d7 	.word	0x3c8569d7
 800c478:	3d4bda59 	.word	0x3d4bda59
 800c47c:	bd6ef16b 	.word	0xbd6ef16b
 800c480:	3d886b35 	.word	0x3d886b35
 800c484:	3dba2e6e 	.word	0x3dba2e6e
 800c488:	3e124925 	.word	0x3e124925
 800c48c:	3eaaaaab 	.word	0x3eaaaaab
 800c490:	bd15a221 	.word	0xbd15a221
 800c494:	bd9d8795 	.word	0xbd9d8795
 800c498:	bde38e38 	.word	0xbde38e38
 800c49c:	be4ccccd 	.word	0xbe4ccccd
 800c4a0:	401bffff 	.word	0x401bffff
 800c4a4:	0800cb8c 	.word	0x0800cb8c
 800c4a8:	0800cb7c 	.word	0x0800cb7c

0800c4ac <fabsf>:
 800c4ac:	ee10 3a10 	vmov	r3, s0
 800c4b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4b4:	ee00 3a10 	vmov	s0, r3
 800c4b8:	4770      	bx	lr
	...

0800c4bc <_init>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	bf00      	nop
 800c4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c2:	bc08      	pop	{r3}
 800c4c4:	469e      	mov	lr, r3
 800c4c6:	4770      	bx	lr

0800c4c8 <_fini>:
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	bf00      	nop
 800c4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ce:	bc08      	pop	{r3}
 800c4d0:	469e      	mov	lr, r3
 800c4d2:	4770      	bx	lr
