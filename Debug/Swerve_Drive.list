
Swerve_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006b8c  08006b8c  00007b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd4  08006dd4  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd4  08006dd4  00007dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ddc  08006ddc  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ddc  08006ddc  00007ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08006de4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000080  08006e64  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08006e64  0000861c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149db  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acc  00000000  00000000  0001ca8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0001f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e10  00000000  00000000  00020770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ccd  00000000  00000000  00021580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015061  00000000  00000000  0004924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe8b3  00000000  00000000  0005e2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015cb61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f8  00000000  00000000  0015cba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0016229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006b74 	.word	0x08006b74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08006b74 	.word	0x08006b74

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <JOYSTICK_Init>:
static char _data_buffer[256];
static uint16_t _buf_index = 0;
static JoystickData _current_data = {0};
static bool _new_data_available = false;

void JOYSTICK_Init(UART_HandleTypeDef *huart) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    _huart = huart;
 80005c8:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <JOYSTICK_Init+0x28>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
    memset(_data_buffer, 0, sizeof(_data_buffer));
 80005ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d2:	2100      	movs	r1, #0
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <JOYSTICK_Init+0x2c>)
 80005d6:	f004 fff7 	bl	80055c8 <memset>
    _buf_index = 0;
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <JOYSTICK_Init+0x30>)
 80005dc:	2200      	movs	r2, #0
 80005de:	801a      	strh	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	200000a0 	.word	0x200000a0
 80005f0:	200001a0 	.word	0x200001a0

080005f4 <JOYSTICK_Process>:

void JOYSTICK_SetTimeout(uint32_t timeout) {
    _timeout = timeout;
}

void JOYSTICK_Process(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b090      	sub	sp, #64	@ 0x40
 80005f8:	af08      	add	r7, sp, #32
    char c;

    // Read until buffer full or newline received
    while (_buf_index < sizeof(_data_buffer) - 1) {
 80005fa:	e050      	b.n	800069e <JOYSTICK_Process+0xaa>
        if (HAL_UART_Receive(_huart, (uint8_t *)&c, 1, _timeout) == HAL_OK) {
 80005fc:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <JOYSTICK_Process+0xc0>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	4b2d      	ldr	r3, [pc, #180]	@ (80006b8 <JOYSTICK_Process+0xc4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f107 011f 	add.w	r1, r7, #31
 8000608:	2201      	movs	r2, #1
 800060a:	f003 ffb3 	bl	8004574 <HAL_UART_Receive>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d149      	bne.n	80006a8 <JOYSTICK_Process+0xb4>
            if (c == '\n') {
 8000614:	7ffb      	ldrb	r3, [r7, #31]
 8000616:	2b0a      	cmp	r3, #10
 8000618:	d137      	bne.n	800068a <JOYSTICK_Process+0x96>
                // Process complete message
                _data_buffer[_buf_index] = '\0';
 800061a:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <JOYSTICK_Process+0xc8>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <JOYSTICK_Process+0xcc>)
 8000622:	2100      	movs	r1, #0
 8000624:	5499      	strb	r1, [r3, r2]

                // Temporary variables for parsing
                uint16_t dpad, buttons, misc;
                int32_t ax, ay, rax, ray, brake, throttle;

                sscanf(_data_buffer,
 8000626:	f107 011a 	add.w	r1, r7, #26
 800062a:	f107 021c 	add.w	r2, r7, #28
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	9306      	str	r3, [sp, #24]
 8000634:	463b      	mov	r3, r7
 8000636:	9305      	str	r3, [sp, #20]
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	9304      	str	r3, [sp, #16]
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9303      	str	r3, [sp, #12]
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	460b      	mov	r3, r1
 8000656:	491b      	ldr	r1, [pc, #108]	@ (80006c4 <JOYSTICK_Process+0xd0>)
 8000658:	4819      	ldr	r0, [pc, #100]	@ (80006c0 <JOYSTICK_Process+0xcc>)
 800065a:	f004 fe71 	bl	8005340 <siscanf>
                       "dpad: 0x%04hx, buttons: 0x%04hx, axis L: %ld, %ld, axis R: %ld, %ld, brake: %ld, throttle: %ld, misc: 0x%04hx",
                       &dpad, &buttons, &ax, &ay, &rax, &ray, &brake, &throttle, &misc);

                // Update data structure
                _current_data.axisX = ax;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4a19      	ldr	r2, [pc, #100]	@ (80006c8 <JOYSTICK_Process+0xd4>)
 8000662:	6013      	str	r3, [r2, #0]
                _current_data.axisY = ay;
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <JOYSTICK_Process+0xd4>)
 8000668:	6053      	str	r3, [r2, #4]
                _current_data.axisRX = rax;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <JOYSTICK_Process+0xd4>)
 800066e:	6093      	str	r3, [r2, #8]
                _new_data_available = true;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <JOYSTICK_Process+0xd8>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]

                // Reset buffer
                memset(_data_buffer, 0, sizeof(_data_buffer));
 8000676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800067a:	2100      	movs	r1, #0
 800067c:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <JOYSTICK_Process+0xcc>)
 800067e:	f004 ffa3 	bl	80055c8 <memset>
                _buf_index = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <JOYSTICK_Process+0xc8>)
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
                break;
 8000688:	e00f      	b.n	80006aa <JOYSTICK_Process+0xb6>
            }
            _data_buffer[_buf_index++] = c;
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <JOYSTICK_Process+0xc8>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	b291      	uxth	r1, r2
 8000692:	4a0a      	ldr	r2, [pc, #40]	@ (80006bc <JOYSTICK_Process+0xc8>)
 8000694:	8011      	strh	r1, [r2, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	7ff9      	ldrb	r1, [r7, #31]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <JOYSTICK_Process+0xcc>)
 800069c:	5499      	strb	r1, [r3, r2]
    while (_buf_index < sizeof(_data_buffer) - 1) {
 800069e:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <JOYSTICK_Process+0xc8>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80006a4:	d9aa      	bls.n	80005fc <JOYSTICK_Process+0x8>
        } else {
            // Timeout occurred
            break;
        }
    }
}
 80006a6:	e000      	b.n	80006aa <JOYSTICK_Process+0xb6>
            break;
 80006a8:	bf00      	nop
}
 80006aa:	bf00      	nop
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	20000000 	.word	0x20000000
 80006bc:	200001a0 	.word	0x200001a0
 80006c0:	200000a0 	.word	0x200000a0
 80006c4:	08006b8c 	.word	0x08006b8c
 80006c8:	200001a4 	.word	0x200001a4
 80006cc:	200001b4 	.word	0x200001b4

080006d0 <JOYSTICK_NewDataAvailable>:

bool JOYSTICK_NewDataAvailable(void) {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
    return _new_data_available;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <JOYSTICK_NewDataAvailable+0x14>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	200001b4 	.word	0x200001b4

080006e8 <JOYSTICK_GetData>:

JoystickData JOYSTICK_GetData(void) {
 80006e8:	b490      	push	{r4, r7}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    _new_data_available = false;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <JOYSTICK_GetData+0x28>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
    return _current_data;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <JOYSTICK_GetData+0x2c>)
 80006fa:	461c      	mov	r4, r3
 80006fc:	4613      	mov	r3, r2
 80006fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bc90      	pop	{r4, r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	200001b4 	.word	0x200001b4
 8000714:	200001a4 	.word	0x200001a4

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f001 f939 	bl	8001994 <HAL_Init>

  /* USER CODE BEGIN Init */
  JOYSTICK_Init(&huart3);  // Pass your UART handle
 8000722:	483d      	ldr	r0, [pc, #244]	@ (8000818 <main+0x100>)
 8000724:	f7ff ff4c 	bl	80005c0 <JOYSTICK_Init>
//  JOYSTICK_SetTimeout(50); // Optional: Set custom timeout

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f884 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 fbe4 	bl	8000ef8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000730:	f000 f8cc 	bl	80008cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000734:	f000 f99e 	bl	8000a74 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000738:	f000 fa8a 	bl	8000c50 <MX_TIM4_Init>
  MX_TIM3_Init();
 800073c:	f000 fa32 	bl	8000ba4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000740:	f000 fadc 	bl	8000cfc <MX_TIM5_Init>
  MX_TIM8_Init();
 8000744:	f000 fb30 	bl	8000da8 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000748:	f000 fb88 	bl	8000e5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 ff6d 	bl	800162c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000752:	2101      	movs	r1, #1
 8000754:	2000      	movs	r0, #0
 8000756:	f000 ffcb 	bl	80016f0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800075a:	4b30      	ldr	r3, [pc, #192]	@ (800081c <main+0x104>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000762:	4b2e      	ldr	r3, [pc, #184]	@ (800081c <main+0x104>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000768:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <main+0x104>)
 800076a:	2200      	movs	r2, #0
 800076c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800076e:	4b2b      	ldr	r3, [pc, #172]	@ (800081c <main+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000774:	4b29      	ldr	r3, [pc, #164]	@ (800081c <main+0x104>)
 8000776:	2200      	movs	r2, #0
 8000778:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800077a:	4928      	ldr	r1, [pc, #160]	@ (800081c <main+0x104>)
 800077c:	2000      	movs	r0, #0
 800077e:	f001 f837 	bl	80017f0 <BSP_COM_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x74>
  {
    Error_Handler();
 8000788:	f000 fc22 	bl	8000fd0 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800078c:	4824      	ldr	r0, [pc, #144]	@ (8000820 <main+0x108>)
 800078e:	f004 ff09 	bl	80055a4 <iprintf>

  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 ff80 	bl	8001698 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000798:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <main+0x10c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d105      	bne.n	80007ac <main+0x94>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80007a0:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <main+0x10c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 ff8c 	bl	80016c4 <BSP_LED_Toggle>
      /* ..... Perform your action ..... */
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    JOYSTICK_Process();
 80007ac:	f7ff ff22 	bl	80005f4 <JOYSTICK_Process>

    if (JOYSTICK_NewDataAvailable()) {
 80007b0:	f7ff ff8e 	bl	80006d0 <JOYSTICK_NewDataAvailable>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d02a      	beq.n	8000810 <main+0xf8>
        JoystickData data = JOYSTICK_GetData();
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff93 	bl	80006e8 <JOYSTICK_GetData>
#ifdef DEBUG_PRINT
        printf("X: %ld, Y: %ld, RX: %ld\n", data.axisX, data.axisY, data.axisRX);
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <main+0x110>)
 80007ca:	f004 feeb 	bl	80055a4 <iprintf>
#endif
       float xSpeed = (float)data.axisX / 512.0f;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d8:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800082c <main+0x114>
 80007dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007e0:	edc7 7a07 	vstr	s15, [r7, #28]
       float ySpeed = (float)data.axisY / -512.0f;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ee:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000830 <main+0x118>
 80007f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f6:	edc7 7a06 	vstr	s15, [r7, #24]
       float rot = (float)data.axisRX / 512.0f;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000804:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800082c <main+0x114>
 8000808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800080c:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    HAL_Delay(10);
 8000810:	200a      	movs	r0, #10
 8000812:	f001 f92f 	bl	8001a74 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8000816:	e7bf      	b.n	8000798 <main+0x80>
 8000818:	20000394 	.word	0x20000394
 800081c:	200001b8 	.word	0x200001b8
 8000820:	08006bfc 	.word	0x08006bfc
 8000824:	200001c8 	.word	0x200001c8
 8000828:	08006c18 	.word	0x08006c18
 800082c:	44000000 	.word	0x44000000
 8000830:	c4000000 	.word	0xc4000000

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	@ 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	2238      	movs	r2, #56	@ 0x38
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fec0 	bl	80055c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000856:	2000      	movs	r0, #0
 8000858:	f001 fc52 	bl	8002100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2340      	movs	r3, #64	@ 0x40
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086e:	2302      	movs	r3, #2
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000872:	2304      	movs	r3, #4
 8000874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000876:	2355      	movs	r3, #85	@ 0x55
 8000878:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800087e:	2302      	movs	r3, #2
 8000880:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fcec 	bl	8002268 <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000896:	f000 fb9b 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2303      	movs	r3, #3
 80008a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2104      	movs	r1, #4
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 ffea 	bl	800288c <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008be:	f000 fb87 	bl	8000fd0 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	@ 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09c      	sub	sp, #112	@ 0x70
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2234      	movs	r2, #52	@ 0x34
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fe5e 	bl	80055c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090c:	4b57      	ldr	r3, [pc, #348]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 800090e:	4a58      	ldr	r2, [pc, #352]	@ (8000a70 <MX_TIM1_Init+0x1a4>)
 8000910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000912:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000914:	22a9      	movs	r2, #169	@ 0xa9
 8000916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b54      	ldr	r3, [pc, #336]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 800091e:	4b53      	ldr	r3, [pc, #332]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000920:	22c7      	movs	r2, #199	@ 0xc7
 8000922:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b51      	ldr	r3, [pc, #324]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092a:	4b50      	ldr	r3, [pc, #320]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000936:	484d      	ldr	r0, [pc, #308]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000938:	f002 fc12 	bl	8003160 <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000942:	f000 fb45 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000950:	4619      	mov	r1, r3
 8000952:	4846      	ldr	r0, [pc, #280]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000954:	f002 fe76 	bl	8003644 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800095e:	f000 fb37 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000962:	4842      	ldr	r0, [pc, #264]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000964:	f002 fc53 	bl	800320e <HAL_TIM_PWM_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800096e:	f000 fb2f 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000982:	4619      	mov	r1, r3
 8000984:	4839      	ldr	r0, [pc, #228]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000986:	f003 fbed 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000990:	f000 fb1e 	bl	8000fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000994:	2360      	movs	r3, #96	@ 0x60
 8000996:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	482c      	ldr	r0, [pc, #176]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 80009ba:	f002 fd2f 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009c4:	f000 fb04 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009cc:	2204      	movs	r2, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4826      	ldr	r0, [pc, #152]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 80009d2:	f002 fd23 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80009dc:	f000 faf8 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009e4:	2208      	movs	r2, #8
 80009e6:	4619      	mov	r1, r3
 80009e8:	4820      	ldr	r0, [pc, #128]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 80009ea:	f002 fd17 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80009f4:	f000 faec 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009fc:	220c      	movs	r2, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	481a      	ldr	r0, [pc, #104]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000a02:	f002 fd0b 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000a0c:	f000 fae0 	bl	8000fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000a4e:	f003 fc1f 	bl	8004290 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000a58:	f000 faba 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <MX_TIM1_Init+0x1a0>)
 8000a5e:	f000 fc09 	bl	8001274 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3770      	adds	r7, #112	@ 0x70
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001cc 	.word	0x200001cc
 8000a70:	40012c00 	.word	0x40012c00

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000aae:	4b3c      	ldr	r3, [pc, #240]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000ab0:	22a9      	movs	r2, #169	@ 0xa9
 8000ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000aba:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000abc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ace:	4834      	ldr	r0, [pc, #208]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000ad0:	f002 fb46 	bl	8003160 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 fa79 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482d      	ldr	r0, [pc, #180]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000aec:	f002 fdaa 	bl	8003644 <HAL_TIM_ConfigClockSource>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000af6:	f000 fa6b 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000afa:	4829      	ldr	r0, [pc, #164]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000afc:	f002 fb87 	bl	800320e <HAL_TIM_PWM_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b06:	f000 fa63 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4821      	ldr	r0, [pc, #132]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000b1a:	f003 fb23 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b24:	f000 fa54 	bl	8000fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b28:	2360      	movs	r3, #96	@ 0x60
 8000b2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1099;
 8000b2c:	f240 434b 	movw	r3, #1099	@ 0x44b
 8000b30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000b42:	f002 fc6b 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b4c:	f000 fa40 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2204      	movs	r2, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000b58:	f002 fc60 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000b62:	f000 fa35 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	2208      	movs	r2, #8
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000b6e:	f002 fc55 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000b78:	f000 fa2a 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000b84:	f002 fc4a 	bl	800341c <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8000b8e:	f000 fa1f 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b92:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <MX_TIM2_Init+0x12c>)
 8000b94:	f000 fb6e 	bl	8001274 <HAL_TIM_MspPostInit>

}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	@ 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000218 	.word	0x20000218

08000ba4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2224      	movs	r2, #36	@ 0x24
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fd08 	bl	80055c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	@ (8000c4c <MX_TIM3_Init+0xa8>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000bd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000c14:	f002 fb5c 	bl	80032d0 <HAL_TIM_Encoder_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c1e:	f000 f9d7 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <MX_TIM3_Init+0xa4>)
 8000c30:	f003 fa98 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c3a:	f000 f9c9 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	@ 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000264 	.word	0x20000264
 8000c4c:	40000400 	.word	0x40000400

08000c50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2224      	movs	r2, #36	@ 0x24
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 fcb2 	bl	80055c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <MX_TIM4_Init+0xa8>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cac:	2301      	movs	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000cc0:	f002 fb06 	bl	80032d0 <HAL_TIM_Encoder_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cca:	f000 f981 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_TIM4_Init+0xa4>)
 8000cdc:	f003 fa42 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000ce6:	f000 f973 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	@ 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002b0 	.word	0x200002b0
 8000cf8:	40000800 	.word	0x40000800

08000cfc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	@ 0x30
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2224      	movs	r2, #36	@ 0x24
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fc5c 	bl	80055c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <MX_TIM5_Init+0xa8>)
 8000d1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000d50:	2305      	movs	r3, #5
 8000d52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000d60:	2305      	movs	r3, #5
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d6c:	f002 fab0 	bl	80032d0 <HAL_TIM_Encoder_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000d76:	f000 f92b 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d82:	463b      	mov	r3, r7
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <MX_TIM5_Init+0xa4>)
 8000d88:	f003 f9ec 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000d92:	f000 f91d 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	@ 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200002fc 	.word	0x200002fc
 8000da4:	40000c00 	.word	0x40000c00

08000da8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2224      	movs	r2, #36	@ 0x24
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fc06 	bl	80055c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dc6:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000dc8:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_TIM8_Init+0xb0>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dde:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000e02:	2305      	movs	r3, #5
 8000e04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000e12:	2305      	movs	r3, #5
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000e1e:	f002 fa57 	bl	80032d0 <HAL_TIM_Encoder_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000e28:	f000 f8d2 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_TIM8_Init+0xac>)
 8000e3e:	f003 f991 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000e48:	f000 f8c2 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	@ 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000348 	.word	0x20000348
 8000e58:	40013400 	.word	0x40013400

08000e5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <MX_USART3_UART_Init+0x94>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e68:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <MX_USART3_UART_Init+0x98>)
 8000e6a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e72:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e80:	220c      	movs	r2, #12
 8000e82:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea2:	4812      	ldr	r0, [pc, #72]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000ea4:	f003 fa88 	bl	80043b8 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000eae:	f000 f88f 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	480d      	ldr	r0, [pc, #52]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000eb6:	f004 f979 	bl	80051ac <HAL_UARTEx_SetTxFifoThreshold>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000ec0:	f000 f886 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000ec8:	f004 f9ae 	bl	8005228 <HAL_UARTEx_SetRxFifoThreshold>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000ed2:	f000 f87d 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_USART3_UART_Init+0x90>)
 8000ed8:	f004 f92f 	bl	800513a <HAL_UARTEx_DisableFifoMode>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000ee2:	f000 f875 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000394 	.word	0x20000394
 8000ef0:	40004800 	.word	0x40004800
 8000ef4:	0007a120 	.word	0x0007a120

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a11      	ldr	r2, [pc, #68]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_GPIO_Init+0xa8>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000f74:	480b      	ldr	r0, [pc, #44]	@ (8000fa4 <MX_GPIO_Init+0xac>)
 8000f76:	f001 f891 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8000f7a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_GPIO_Init+0xac>)
 8000f94:	f000 ff00 	bl	8001d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	@ 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <BSP_PB_Callback+0x24>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200001c8 	.word	0x200001c8

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <Error_Handler+0x8>

08000fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <HAL_MspInit+0x44>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <HAL_MspInit+0x44>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_MspInit+0x44>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001004:	6593      	str	r3, [r2, #88]	@ 0x58
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_MspInit+0x44>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001012:	f001 f919 	bl	8002248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a13      	ldr	r2, [pc, #76]	@ (8001080 <HAL_TIM_Base_MspInit+0x5c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10c      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <HAL_TIM_Base_MspInit+0x60>)
 800103c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001040:	6613      	str	r3, [r2, #96]	@ 0x60
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104e:	e010      	b.n	8001072 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001058:	d10b      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_TIM_Base_MspInit+0x60>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a09      	ldr	r2, [pc, #36]	@ (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_TIM_Base_MspInit+0x60>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40012c00 	.word	0x40012c00
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b090      	sub	sp, #64	@ 0x40
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001258 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d129      	bne.n	80010fe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010aa:	4b6c      	ldr	r3, [pc, #432]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	4a6b      	ldr	r2, [pc, #428]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010b6:	4b69      	ldr	r3, [pc, #420]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b66      	ldr	r3, [pc, #408]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a65      	ldr	r2, [pc, #404]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b63      	ldr	r3, [pc, #396]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010da:	2350      	movs	r3, #80	@ 0x50
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ea:	2302      	movs	r3, #2
 80010ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f000 fe4e 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80010fc:	e0a7      	b.n	800124e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d12a      	bne.n	800115e <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001108:	4b54      	ldr	r3, [pc, #336]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	4a53      	ldr	r2, [pc, #332]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6593      	str	r3, [r2, #88]	@ 0x58
 8001114:	4b51      	ldr	r3, [pc, #324]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	623b      	str	r3, [r7, #32]
 800111e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b4e      	ldr	r3, [pc, #312]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	4a4d      	ldr	r2, [pc, #308]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112c:	4b4b      	ldr	r3, [pc, #300]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001138:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800114a:	230a      	movs	r3, #10
 800114c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f000 fe1e 	bl	8001d98 <HAL_GPIO_Init>
}
 800115c:	e077      	b.n	800124e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a40      	ldr	r2, [pc, #256]	@ (8001264 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d145      	bne.n	80011f4 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001168:	4b3c      	ldr	r3, [pc, #240]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	4a3b      	ldr	r2, [pc, #236]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6593      	str	r3, [r2, #88]	@ 0x58
 8001174:	4b39      	ldr	r3, [pc, #228]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b36      	ldr	r3, [pc, #216]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	4a35      	ldr	r2, [pc, #212]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001186:	f043 0302 	orr.w	r3, r3, #2
 800118a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118c:	4b33      	ldr	r3, [pc, #204]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b30      	ldr	r3, [pc, #192]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	4a2f      	ldr	r2, [pc, #188]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b0:	2304      	movs	r3, #4
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011c0:	2302      	movs	r3, #2
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4827      	ldr	r0, [pc, #156]	@ (8001268 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80011cc:	f000 fde4 	bl	8001d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80011e2:	2301      	movs	r3, #1
 80011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ea:	4619      	mov	r1, r3
 80011ec:	481f      	ldr	r0, [pc, #124]	@ (800126c <HAL_TIM_Encoder_MspInit+0x1e4>)
 80011ee:	f000 fdd3 	bl	8001d98 <HAL_GPIO_Init>
}
 80011f2:	e02c      	b.n	800124e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d127      	bne.n	800124e <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001202:	4a16      	ldr	r2, [pc, #88]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001204:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001208:	6613      	str	r3, [r2, #96]	@ 0x60
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800122e:	23c0      	movs	r3, #192	@ 0xc0
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800123e:	2304      	movs	r3, #4
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4808      	ldr	r0, [pc, #32]	@ (800126c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800124a:	f000 fda5 	bl	8001d98 <HAL_GPIO_Init>
}
 800124e:	bf00      	nop
 8001250:	3740      	adds	r7, #64	@ 0x40
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40000400 	.word	0x40000400
 800125c:	40021000 	.word	0x40021000
 8001260:	40000800 	.word	0x40000800
 8001264:	40000c00 	.word	0x40000c00
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	40013400 	.word	0x40013400

08001274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2b      	ldr	r2, [pc, #172]	@ (8001340 <HAL_TIM_MspPostInit+0xcc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11c      	bne.n	80012d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_TIM_MspPostInit+0xd0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a2a      	ldr	r2, [pc, #168]	@ (8001344 <HAL_TIM_MspPostInit+0xd0>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_TIM_MspPostInit+0xd0>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Steering_PWM1_Pin|Steering_PWM2_Pin|Steering_PWM3_Pin|Steering_PWM4_Pin;
 80012ae:	230f      	movs	r3, #15
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80012be:	2302      	movs	r3, #2
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	481f      	ldr	r0, [pc, #124]	@ (8001348 <HAL_TIM_MspPostInit+0xd4>)
 80012ca:	f000 fd65 	bl	8001d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012ce:	e033      	b.n	8001338 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d8:	d12e      	bne.n	8001338 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_TIM_MspPostInit+0xd0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <HAL_TIM_MspPostInit+0xd0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_TIM_MspPostInit+0xd0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Driving_PWM1_Pin|Driving_PWM2_Pin;
 80012f2:	2303      	movs	r3, #3
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001302:	2301      	movs	r3, #1
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001310:	f000 fd42 	bl	8001d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Driving_PWM3_Pin|Driving_PWM4_Pin;
 8001314:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001326:	230a      	movs	r3, #10
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001334:	f000 fd30 	bl	8001d98 <HAL_GPIO_Init>
}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40012c00 	.word	0x40012c00
 8001344:	40021000 	.word	0x40021000
 8001348:	48000800 	.word	0x48000800

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09e      	sub	sp, #120	@ 0x78
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	2254      	movs	r2, #84	@ 0x54
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f004 f92b 	bl	80055c8 <memset>
  if(huart->Instance==USART3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <HAL_UART_MspInit+0xa8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d136      	bne.n	80013ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800137c:	2304      	movs	r3, #4
 800137e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fc9b 	bl	8002cc4 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001394:	f7ff fe1c 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_UART_MspInit+0xac>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	4a16      	ldr	r2, [pc, #88]	@ (80013f8 <HAL_UART_MspInit+0xac>)
 800139e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_UART_MspInit+0xac>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_UART_MspInit+0xac>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	4a10      	ldr	r2, [pc, #64]	@ (80013f8 <HAL_UART_MspInit+0xac>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_UART_MspInit+0xac>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013da:	2307      	movs	r3, #7
 80013dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <HAL_UART_MspInit+0xb0>)
 80013e6:	f000 fcd7 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80013ea:	bf00      	nop
 80013ec:	3778      	adds	r7, #120	@ 0x78
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40004800 	.word	0x40004800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000400 	.word	0x48000400

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <NMI_Handler+0x4>

08001408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <MemManage_Handler+0x4>

08001418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <UsageFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 faef 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f9b2 	bl	80017cc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
  }

  return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e009      	b.n	80014cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f9f7 	bl	80018b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf1      	blt.n	80014b8 <_write+0x12>
  }
  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_close>:

int _close(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001506:	605a      	str	r2, [r3, #4]
  return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f004 f874 	bl	8005664 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	20000428 	.word	0x20000428
 80015b0:	20000620 	.word	0x20000620

080015b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff ffea 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f004 f833 	bl	8005670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff f885 	bl	8000718 <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   r0, =_estack
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800161c:	08006de4 	.word	0x08006de4
  ldr r2, =_sbss
 8001620:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001624:	2000061c 	.word	0x2000061c

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <BSP_LED_Init+0x64>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <BSP_LED_Init+0x64>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <BSP_LED_Init+0x64>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800164e:	2320      	movs	r3, #32
 8001650:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a0c      	ldr	r2, [pc, #48]	@ (8001694 <BSP_LED_Init+0x68>)
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	f107 020c 	add.w	r2, r7, #12
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fb93 	bl	8001d98 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <BSP_LED_Init+0x68>)
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	2120      	movs	r1, #32
 800167c:	2200      	movs	r2, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fd0c 	bl	800209c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	20000008 	.word	0x20000008

08001698 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4a06      	ldr	r2, [pc, #24]	@ (80016c0 <BSP_LED_On+0x28>)
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	2120      	movs	r1, #32
 80016ac:	2201      	movs	r2, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fcf4 	bl	800209c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008

080016c4 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4a06      	ldr	r2, [pc, #24]	@ (80016ec <BSP_LED_Toggle+0x28>)
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	2220      	movs	r2, #32
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fcf6 	bl	80020cc <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008

080016f0 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	460a      	mov	r2, r1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001700:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <BSP_PB_Init+0xc4>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <BSP_PB_Init+0xc4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <BSP_PB_Init+0xc4>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800171e:	2302      	movs	r3, #2
 8001720:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10c      	bne.n	8001746 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <BSP_PB_Init+0xc8>)
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	f107 020c 	add.w	r2, r7, #12
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fb2a 	bl	8001d98 <HAL_GPIO_Init>
 8001744:	e031      	b.n	80017aa <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001746:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800174a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4a1a      	ldr	r2, [pc, #104]	@ (80017b8 <BSP_PB_Init+0xc8>)
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	f107 020c 	add.w	r2, r7, #12
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fb1c 	bl	8001d98 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4a15      	ldr	r2, [pc, #84]	@ (80017bc <BSP_PB_Init+0xcc>)
 8001766:	441a      	add	r2, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4915      	ldr	r1, [pc, #84]	@ (80017c0 <BSP_PB_Init+0xd0>)
 800176c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f000 facc 	bl	8001d10 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <BSP_PB_Init+0xcc>)
 800177e:	1898      	adds	r0, r3, r2
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <BSP_PB_Init+0xd4>)
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	461a      	mov	r2, r3
 800178a:	2100      	movs	r1, #0
 800178c:	f000 faa3 	bl	8001cd6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001790:	2028      	movs	r0, #40	@ 0x28
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <BSP_PB_Init+0xd8>)
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	f000 fa66 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80017a2:	2328      	movs	r3, #40	@ 0x28
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fa7c 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	2000042c 	.word	0x2000042c
 80017c0:	08006c58 	.word	0x08006c58
 80017c4:	20000014 	.word	0x20000014
 80017c8:	20000018 	.word	0x20000018

080017cc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <BSP_PB_IRQHandler+0x20>)
 80017dc:	4413      	add	r3, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 faaa 	bl	8001d38 <HAL_EXTI_IRQHandler>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000042c 	.word	0x2000042c

080017f0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d903      	bls.n	800180e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001806:	f06f 0301 	mvn.w	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e018      	b.n	8001840 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2294      	movs	r2, #148	@ 0x94
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <BSP_COM_Init+0x5c>)
 8001818:	4413      	add	r3, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f86e 	bl	80018fc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2294      	movs	r2, #148	@ 0x94
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <BSP_COM_Init+0x5c>)
 800182a:	4413      	add	r3, r2
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f80e 	bl	8001850 <MX_LPUART1_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800183a:	f06f 0303 	mvn.w	r3, #3
 800183e:	e000      	b.n	8001842 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001840:	68fb      	ldr	r3, [r7, #12]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000434 	.word	0x20000434

08001850 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_LPUART1_Init+0x60>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	220c      	movs	r2, #12
 800186e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	895b      	ldrh	r3, [r3, #10]
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	891b      	ldrh	r3, [r3, #8]
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	899b      	ldrh	r3, [r3, #12]
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800189c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f002 fd8a 	bl	80043b8 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000010 	.word	0x20000010

080018b4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <__io_putchar+0x30>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	2394      	movs	r3, #148	@ 0x94
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <__io_putchar+0x34>)
 80018ca:	1898      	adds	r0, r3, r2
 80018cc:	1d39      	adds	r1, r7, #4
 80018ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d2:	2201      	movs	r2, #1
 80018d4:	f002 fdc0 	bl	8004458 <HAL_UART_Transmit>
  return ch;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200004c8 	.word	0x200004c8
 80018e8:	20000434 	.word	0x20000434

080018ec <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fb59 	bl	8000fa8 <BSP_PB_Callback>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001904:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <COM1_MspInit+0x94>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001908:	4a21      	ldr	r2, [pc, #132]	@ (8001990 <COM1_MspInit+0x94>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <COM1_MspInit+0x94>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <COM1_MspInit+0x94>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001920:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <COM1_MspInit+0x94>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <COM1_MspInit+0x94>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <COM1_MspInit+0x94>)
 8001936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001938:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <COM1_MspInit+0x94>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <COM1_MspInit+0x94>)
 8001942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800194c:	2304      	movs	r3, #4
 800194e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001958:	2301      	movs	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800195c:	230c      	movs	r3, #12
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f000 fa15 	bl	8001d98 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800196e:	2308      	movs	r3, #8
 8001970:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001976:	230c      	movs	r3, #12
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001984:	f000 fa08 	bl	8001d98 <HAL_GPIO_Init>
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199e:	2003      	movs	r0, #3
 80019a0:	f000 f95a 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 f80d 	bl	80019c4 <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	e001      	b.n	80019ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b6:	f7ff fb11 	bl	8000fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ba:	79fb      	ldrb	r3, [r7, #7]

}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_InitTick+0x68>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d022      	beq.n	8001a1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_InitTick+0x6c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_InitTick+0x68>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f966 	bl	8001cbe <HAL_SYSTICK_Config>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10f      	bne.n	8001a18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	d809      	bhi.n	8001a12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fe:	2200      	movs	r2, #0
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a06:	f000 f932 	bl	8001c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <HAL_InitTick+0x70>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e007      	b.n	8001a22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e004      	b.n	8001a22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e001      	b.n	8001a22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000020 	.word	0x20000020
 8001a30:	20000004 	.word	0x20000004
 8001a34:	2000001c 	.word	0x2000001c

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <HAL_IncTick+0x1c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a03      	ldr	r2, [pc, #12]	@ (8001a54 <HAL_IncTick+0x1c>)
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	200004cc 	.word	0x200004cc
 8001a58:	20000020 	.word	0x20000020

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200004cc 	.word	0x200004cc

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a8c:	d004      	beq.n	8001a98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_Delay+0x40>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a98:	bf00      	nop
 8001a9a:	f7ff ffdf 	bl	8001a5c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d8f7      	bhi.n	8001a9a <HAL_Delay+0x26>
  {
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000020 	.word	0x20000020

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	@ (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	@ (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff40 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff90 	bl	8001bac <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5f 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff33 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa4 	bl	8001c14 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b087      	sub	sp, #28
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d103      	bne.n	8001cf6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]
      break;
 8001cf4:	e005      	b.n	8001d02 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8001d00:	bf00      	nop
  }

  return status;
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e003      	b.n	8001d2c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2201      	movs	r2, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	015a      	lsls	r2, r3, #5
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <HAL_EXTI_IRQHandler+0x5c>)
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4798      	blx	r3
    }
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40010414 	.word	0x40010414

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001da6:	e15a      	b.n	800205e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 814c 	beq.w	8002058 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d017      	beq.n	8001e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d123      	bne.n	8001eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0203 	and.w	r2, r3, #3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80a6 	beq.w	8002058 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	@ (800207c <HAL_GPIO_Init+0x2e4>)
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f10:	4a5a      	ldr	r2, [pc, #360]	@ (800207c <HAL_GPIO_Init+0x2e4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f18:	4b58      	ldr	r3, [pc, #352]	@ (800207c <HAL_GPIO_Init+0x2e4>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f24:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f4e:	d01f      	beq.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a4c      	ldr	r2, [pc, #304]	@ (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x1f4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1f0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4a      	ldr	r2, [pc, #296]	@ (800208c <HAL_GPIO_Init+0x2f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1ec>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a49      	ldr	r2, [pc, #292]	@ (8002090 <HAL_GPIO_Init+0x2f8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1e8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a48      	ldr	r2, [pc, #288]	@ (8002094 <HAL_GPIO_Init+0x2fc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1e4>
 8001f78:	2305      	movs	r3, #5
 8001f7a:	e00a      	b.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	e008      	b.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e006      	b.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f84:	2303      	movs	r3, #3
 8001f86:	e004      	b.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_GPIO_Init+0x1fa>
 8001f90:	2300      	movs	r3, #0
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	f002 0203 	and.w	r2, r2, #3
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa2:	4937      	ldr	r1, [pc, #220]	@ (8002080 <HAL_GPIO_Init+0x2e8>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb0:	4b39      	ldr	r3, [pc, #228]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fd4:	4a30      	ldr	r2, [pc, #192]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fda:	4b2f      	ldr	r3, [pc, #188]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ffe:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002004:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_GPIO_Init+0x300>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002052:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <HAL_GPIO_Init+0x300>)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f ae9d 	bne.w	8001da8 <HAL_GPIO_Init+0x10>
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	48000400 	.word	0x48000400
 8002088:	48000800 	.word	0x48000800
 800208c:	48000c00 	.word	0x48000c00
 8002090:	48001000 	.word	0x48001000
 8002094:	48001400 	.word	0x48001400
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43d9      	mvns	r1, r3
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	400b      	ands	r3, r1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d141      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800210e:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211a:	d131      	bne.n	8002180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800211c:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002122:	4a46      	ldr	r2, [pc, #280]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800212c:	4b43      	ldr	r3, [pc, #268]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002134:	4a41      	ldr	r2, [pc, #260]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800213c:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2232      	movs	r2, #50	@ 0x32
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	4a3f      	ldr	r2, [pc, #252]	@ (8002244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	3301      	adds	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002152:	e002      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3b01      	subs	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002166:	d102      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f2      	bne.n	8002154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216e:	4b33      	ldr	r3, [pc, #204]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800217a:	d158      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e057      	b.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002180:	4b2e      	ldr	r3, [pc, #184]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002186:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800218c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002190:	e04d      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d141      	bne.n	800221e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800219a:	4b28      	ldr	r3, [pc, #160]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a6:	d131      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ae:	4a23      	ldr	r2, [pc, #140]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b8:	4b20      	ldr	r3, [pc, #128]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c0:	4a1e      	ldr	r2, [pc, #120]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2232      	movs	r2, #50	@ 0x32
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	0c9b      	lsrs	r3, r3, #18
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021de:	e002      	b.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f2:	d102      	bne.n	80021fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f2      	bne.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002206:	d112      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e011      	b.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002212:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800221c:	e007      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40007000 	.word	0x40007000
 8002240:	20000004 	.word	0x20000004
 8002244:	431bde83 	.word	0x431bde83

08002248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002256:	6093      	str	r3, [r2, #8]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40007000 	.word	0x40007000

08002268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e2fe      	b.n	8002878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d075      	beq.n	8002372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4b97      	ldr	r3, [pc, #604]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	4b94      	ldr	r3, [pc, #592]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3e>
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_OscConfig+0x44>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b8d      	ldr	r3, [pc, #564]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05b      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d157      	bne.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e2d9      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x74>
 80022ce:	4b85      	ldr	r3, [pc, #532]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a84      	ldr	r2, [pc, #528]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b7f      	ldr	r3, [pc, #508]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7e      	ldr	r2, [pc, #504]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b7c      	ldr	r3, [pc, #496]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7b      	ldr	r2, [pc, #492]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 8002300:	4b78      	ldr	r3, [pc, #480]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a77      	ldr	r2, [pc, #476]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b75      	ldr	r3, [pc, #468]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a74      	ldr	r2, [pc, #464]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fb9c 	bl	8001a5c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fb98 	bl	8001a5c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e29e      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xc0>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fb88 	bl	8001a5c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fb84 	bl	8001a5c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e28a      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	4b60      	ldr	r3, [pc, #384]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d075      	beq.n	800246a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b59      	ldr	r3, [pc, #356]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4b56      	ldr	r3, [pc, #344]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d102      	bne.n	800239e <HAL_RCC_OscConfig+0x136>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_OscConfig+0x13c>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d11f      	bne.n	80023e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	4b4f      	ldr	r3, [pc, #316]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x154>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e25d      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b49      	ldr	r3, [pc, #292]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	4946      	ldr	r1, [pc, #280]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d0:	4b45      	ldr	r3, [pc, #276]	@ (80024e8 <HAL_RCC_OscConfig+0x280>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff faf5 	bl	80019c4 <HAL_InitTick>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d043      	beq.n	8002468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e249      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d023      	beq.n	8002434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3c      	ldr	r2, [pc, #240]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff fb30 	bl	8001a5c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7ff fb2c 	bl	8001a5c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e232      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	492d      	ldr	r1, [pc, #180]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
 8002432:	e01a      	b.n	800246a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002434:	4b2b      	ldr	r3, [pc, #172]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a2a      	ldr	r2, [pc, #168]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 800243a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff fb0c 	bl	8001a5c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7ff fb08 	bl	8001a5c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e20e      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245a:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1e0>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d041      	beq.n	80024fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247e:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002484:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7ff fae5 	bl	8001a5c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002496:	f7ff fae1 	bl	8001a5c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e1e7      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80024aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ef      	beq.n	8002496 <HAL_RCC_OscConfig+0x22e>
 80024b6:	e020      	b.n	80024fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7ff fac8 	bl	8001a5c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ce:	e00d      	b.n	80024ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff fac4 	bl	8001a5c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d906      	bls.n	80024ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1ca      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ea      	bne.n	80024d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80a6 	beq.w	8002654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800250c:	4b84      	ldr	r3, [pc, #528]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_OscConfig+0x2b4>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x2b6>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b7f      	ldr	r3, [pc, #508]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	4a7e      	ldr	r2, [pc, #504]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252c:	6593      	str	r3, [r2, #88]	@ 0x58
 800252e:	4b7c      	ldr	r3, [pc, #496]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253e:	4b79      	ldr	r3, [pc, #484]	@ (8002724 <HAL_RCC_OscConfig+0x4bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254a:	4b76      	ldr	r3, [pc, #472]	@ (8002724 <HAL_RCC_OscConfig+0x4bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a75      	ldr	r2, [pc, #468]	@ (8002724 <HAL_RCC_OscConfig+0x4bc>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7ff fa81 	bl	8001a5c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7ff fa7d 	bl	8001a5c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e183      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002570:	4b6c      	ldr	r3, [pc, #432]	@ (8002724 <HAL_RCC_OscConfig+0x4bc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d108      	bne.n	8002596 <HAL_RCC_OscConfig+0x32e>
 8002584:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002594:	e024      	b.n	80025e0 <HAL_RCC_OscConfig+0x378>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d110      	bne.n	80025c0 <HAL_RCC_OscConfig+0x358>
 800259e:	4b60      	ldr	r3, [pc, #384]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a4:	4a5e      	ldr	r2, [pc, #376]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025be:	e00f      	b.n	80025e0 <HAL_RCC_OscConfig+0x378>
 80025c0:	4b57      	ldr	r3, [pc, #348]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	4a56      	ldr	r2, [pc, #344]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff fa38 	bl	8001a5c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7ff fa34 	bl	8001a5c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e138      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002606:	4b46      	ldr	r3, [pc, #280]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ed      	beq.n	80025f0 <HAL_RCC_OscConfig+0x388>
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff fa21 	bl	8001a5c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7ff fa1d 	bl	8001a5c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e121      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ed      	bne.n	800261e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002642:	7ffb      	ldrb	r3, [r7, #31]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b35      	ldr	r3, [pc, #212]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	4a34      	ldr	r2, [pc, #208]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d03c      	beq.n	80026da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002668:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 800266a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800266e:	4a2c      	ldr	r2, [pc, #176]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff f9f0 	bl	8001a5c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002680:	f7ff f9ec 	bl	8001a5c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0f2      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002692:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ef      	beq.n	8002680 <HAL_RCC_OscConfig+0x418>
 80026a0:	e01b      	b.n	80026da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80026a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff f9d3 	bl	8001a5c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ba:	f7ff f9cf 	bl	8001a5c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0d5      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80026ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ef      	bne.n	80026ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80c9 	beq.w	8002876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	f000 8083 	beq.w	80027f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d15e      	bne.n	80027b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff f9a9 	bl	8001a5c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	e00c      	b.n	8002728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7ff f9a5 	bl	8001a5c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d905      	bls.n	8002728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0ab      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ec      	bne.n	800270e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002734:	4b52      	ldr	r3, [pc, #328]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	4b52      	ldr	r3, [pc, #328]	@ (8002884 <HAL_RCC_OscConfig+0x61c>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6a11      	ldr	r1, [r2, #32]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002744:	3a01      	subs	r2, #1
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800274e:	0212      	lsls	r2, r2, #8
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002756:	0852      	lsrs	r2, r2, #1
 8002758:	3a01      	subs	r2, #1
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002762:	0852      	lsrs	r2, r2, #1
 8002764:	3a01      	subs	r2, #1
 8002766:	0652      	lsls	r2, r2, #25
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800276e:	06d2      	lsls	r2, r2, #27
 8002770:	430a      	orrs	r2, r1
 8002772:	4943      	ldr	r1, [pc, #268]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 8002774:	4313      	orrs	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a40      	ldr	r2, [pc, #256]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a3d      	ldr	r2, [pc, #244]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f964 	bl	8001a5c <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff f960 	bl	8001a5c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e066      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	4b35      	ldr	r3, [pc, #212]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x530>
 80027b6:	e05e      	b.n	8002876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a30      	ldr	r2, [pc, #192]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 80027be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f94a 	bl	8001a5c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7ff f946 	bl	8001a5c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04c      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027de:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027ea:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	4924      	ldr	r1, [pc, #144]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 80027f0:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_RCC_OscConfig+0x620>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
 80027f6:	e03e      	b.n	8002876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e039      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002804:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_RCC_OscConfig+0x618>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	429a      	cmp	r2, r3
 8002816:	d12c      	bne.n	8002872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	3b01      	subs	r3, #1
 8002824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d123      	bne.n	8002872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d11b      	bne.n	8002872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d113      	bne.n	8002872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	019f800c 	.word	0x019f800c
 8002888:	feeefffc 	.word	0xfeeefffc

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e11e      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b91      	ldr	r3, [pc, #580]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b8e      	ldr	r3, [pc, #568]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 020f 	bic.w	r2, r3, #15
 80028ba:	498c      	ldr	r1, [pc, #560]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b8a      	ldr	r3, [pc, #552]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e106      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d073      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d129      	bne.n	800293c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e8:	4b81      	ldr	r3, [pc, #516]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0f4      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028f8:	f000 f99e 	bl	8002c38 <RCC_GetSysClockFreqFromPLLSource>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4a7c      	ldr	r2, [pc, #496]	@ (8002af4 <HAL_RCC_ClockConfig+0x268>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d93f      	bls.n	8002986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002906:	4b7a      	ldr	r3, [pc, #488]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d033      	beq.n	8002986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	d12f      	bne.n	8002986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002926:	4b72      	ldr	r3, [pc, #456]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800292e:	4a70      	ldr	r2, [pc, #448]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e024      	b.n	8002986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002944:	4b6a      	ldr	r3, [pc, #424]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0c6      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	4b66      	ldr	r3, [pc, #408]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0be      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002964:	f000 f8ce 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4a61      	ldr	r2, [pc, #388]	@ (8002af4 <HAL_RCC_ClockConfig+0x268>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d909      	bls.n	8002986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002972:	4b5f      	ldr	r3, [pc, #380]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800297a:	4a5d      	ldr	r2, [pc, #372]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 800297c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b5a      	ldr	r3, [pc, #360]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4957      	ldr	r1, [pc, #348]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7ff f860 	bl	8001a5c <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7ff f85c 	bl	8001a5c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e095      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b4e      	ldr	r3, [pc, #312]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d023      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b43      	ldr	r3, [pc, #268]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a42      	ldr	r2, [pc, #264]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029f8:	4b3d      	ldr	r3, [pc, #244]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a00:	4a3b      	ldr	r2, [pc, #236]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4936      	ldr	r1, [pc, #216]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b80      	cmp	r3, #128	@ 0x80
 8002a20:	d105      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a22:	4b33      	ldr	r3, [pc, #204]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d21d      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 020f 	bic.w	r2, r3, #15
 8002a44:	4929      	ldr	r1, [pc, #164]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f806 	bl	8001a5c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7ff f802 	bl	8001a5c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e03b      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1ed      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4917      	ldr	r1, [pc, #92]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490f      	ldr	r1, [pc, #60]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab6:	f000 f825 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <HAL_RCC_ClockConfig+0x264>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490c      	ldr	r1, [pc, #48]	@ (8002af8 <HAL_RCC_ClockConfig+0x26c>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <HAL_RCC_ClockConfig+0x270>)
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x274>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe ff72 	bl	80019c4 <HAL_InitTick>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	04c4b400 	.word	0x04c4b400
 8002af8:	08006c40 	.word	0x08006c40
 8002afc:	20000004 	.word	0x20000004
 8002b00:	2000001c 	.word	0x2000001c

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d102      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b16:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e047      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b1c:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b28:	4b26      	ldr	r3, [pc, #152]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e03e      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b2e:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d136      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b3a:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d10c      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b58:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b62:	68d2      	ldr	r2, [r2, #12]
 8002b64:	0a12      	lsrs	r2, r2, #8
 8002b66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
      break;
 8002b70:	e00c      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b72:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	0a12      	lsrs	r2, r2, #8
 8002b80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
      break;
 8002b8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0e5b      	lsrs	r3, r3, #25
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	e001      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bac:	693b      	ldr	r3, [r7, #16]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	016e3600 	.word	0x016e3600

08002bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	@ (8002bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002be4:	f7ff fff0 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4904      	ldr	r1, [pc, #16]	@ (8002c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08006c50 	.word	0x08006c50

08002c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c10:	f7ff ffda 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0adb      	lsrs	r3, r3, #11
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4904      	ldr	r1, [pc, #16]	@ (8002c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	08006c50 	.word	0x08006c50

08002c38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d10c      	bne.n	8002c76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c5c:	4a17      	ldr	r2, [pc, #92]	@ (8002cbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c66:	68d2      	ldr	r2, [r2, #12]
 8002c68:	0a12      	lsrs	r2, r2, #8
 8002c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
    break;
 8002c74:	e00c      	b.n	8002c90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	0a12      	lsrs	r2, r2, #8
 8002c84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    break;
 8002c8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c90:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0e5b      	lsrs	r3, r3, #25
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002caa:	687b      	ldr	r3, [r7, #4]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	016e3600 	.word	0x016e3600
 8002cc0:	00f42400 	.word	0x00f42400

08002cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8098 	beq.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b43      	ldr	r3, [pc, #268]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b40      	ldr	r3, [pc, #256]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a39      	ldr	r2, [pc, #228]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fe9f 	bl	8001a5c <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d20:	e009      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe fe9b 	bl	8001a5c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d902      	bls.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	74fb      	strb	r3, [r7, #19]
        break;
 8002d34:	e005      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	4b30      	ldr	r3, [pc, #192]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0ef      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d159      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d48:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01e      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d019      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d64:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d70:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d76:	4a1f      	ldr	r2, [pc, #124]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d80:	4b1c      	ldr	r3, [pc, #112]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	4a1b      	ldr	r2, [pc, #108]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d90:	4a18      	ldr	r2, [pc, #96]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fe5b 	bl	8001a5c <HAL_GetTick>
 8002da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fe57 	bl	8001a5c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d902      	bls.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc0:	e006      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ec      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd6:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de4:	4903      	ldr	r1, [pc, #12]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dec:	e008      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	74bb      	strb	r3, [r7, #18]
 8002df2:	e005      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e00:	7c7b      	ldrb	r3, [r7, #17]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4ba7      	ldr	r3, [pc, #668]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	4aa6      	ldr	r2, [pc, #664]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e1e:	4ba1      	ldr	r3, [pc, #644]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	f023 0203 	bic.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	499d      	ldr	r1, [pc, #628]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e40:	4b98      	ldr	r3, [pc, #608]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	f023 020c 	bic.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4995      	ldr	r1, [pc, #596]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e62:	4b90      	ldr	r3, [pc, #576]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	498c      	ldr	r1, [pc, #560]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e84:	4b87      	ldr	r3, [pc, #540]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	4984      	ldr	r1, [pc, #528]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	497b      	ldr	r1, [pc, #492]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ec8:	4b76      	ldr	r3, [pc, #472]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ece:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	4973      	ldr	r1, [pc, #460]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eea:	4b6e      	ldr	r3, [pc, #440]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	496a      	ldr	r1, [pc, #424]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f0c:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4962      	ldr	r1, [pc, #392]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	4959      	ldr	r1, [pc, #356]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f50:	4b54      	ldr	r3, [pc, #336]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	4951      	ldr	r1, [pc, #324]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f72:	4b4c      	ldr	r3, [pc, #304]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	4948      	ldr	r1, [pc, #288]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f94:	4b43      	ldr	r3, [pc, #268]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4940      	ldr	r1, [pc, #256]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fbe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fcc:	4b35      	ldr	r3, [pc, #212]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	4932      	ldr	r1, [pc, #200]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fec:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ff6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003004:	4b27      	ldr	r3, [pc, #156]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	4924      	ldr	r1, [pc, #144]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003022:	d105      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003024:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800302e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003042:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304a:	4916      	ldr	r1, [pc, #88]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800305a:	d105      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a10      	ldr	r2, [pc, #64]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003066:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003092:	d109      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a02      	ldr	r2, [pc, #8]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800309e:	60d3      	str	r3, [r2, #12]
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030b4:	4b29      	ldr	r3, [pc, #164]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	4926      	ldr	r1, [pc, #152]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030d2:	d105      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030d4:	4b21      	ldr	r3, [pc, #132]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a20      	ldr	r2, [pc, #128]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d015      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fa:	4918      	ldr	r1, [pc, #96]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310a:	d105      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800310c:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a12      	ldr	r2, [pc, #72]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003116:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003124:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	490a      	ldr	r1, [pc, #40]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a04      	ldr	r2, [pc, #16]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800314e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003150:	7cbb      	ldrb	r3, [r7, #18]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e049      	b.n	8003206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd ff4c 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fb66 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e049      	b.n	80032b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f841 	bl	80032bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f000 fb0f 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e097      	b.n	8003414 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fd fec5 	bl	8001088 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 faa3 	bl	8003870 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4313      	orrs	r3, r2
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003370:	f023 030c 	bic.w	r3, r3, #12
 8003374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800337c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	4313      	orrs	r3, r2
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	011a      	lsls	r2, r3, #4
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	031b      	lsls	r3, r3, #12
 80033a0:	4313      	orrs	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	4313      	orrs	r3, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003436:	2302      	movs	r3, #2
 8003438:	e0ff      	b.n	800363a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b14      	cmp	r3, #20
 8003446:	f200 80f0 	bhi.w	800362a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800344a:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080034a5 	.word	0x080034a5
 8003454:	0800362b 	.word	0x0800362b
 8003458:	0800362b 	.word	0x0800362b
 800345c:	0800362b 	.word	0x0800362b
 8003460:	080034e5 	.word	0x080034e5
 8003464:	0800362b 	.word	0x0800362b
 8003468:	0800362b 	.word	0x0800362b
 800346c:	0800362b 	.word	0x0800362b
 8003470:	08003527 	.word	0x08003527
 8003474:	0800362b 	.word	0x0800362b
 8003478:	0800362b 	.word	0x0800362b
 800347c:	0800362b 	.word	0x0800362b
 8003480:	08003567 	.word	0x08003567
 8003484:	0800362b 	.word	0x0800362b
 8003488:	0800362b 	.word	0x0800362b
 800348c:	0800362b 	.word	0x0800362b
 8003490:	080035a9 	.word	0x080035a9
 8003494:	0800362b 	.word	0x0800362b
 8003498:	0800362b 	.word	0x0800362b
 800349c:	0800362b 	.word	0x0800362b
 80034a0:	080035e9 	.word	0x080035e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa94 	bl	80039d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
      break;
 80034e2:	e0a5      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fb0e 	bl	8003b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	619a      	str	r2, [r3, #24]
      break;
 8003524:	e084      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb81 	bl	8003c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0208 	orr.w	r2, r2, #8
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0204 	bic.w	r2, r2, #4
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
      break;
 8003564:	e064      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fbf3 	bl	8003d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
      break;
 80035a6:	e043      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fc66 	bl	8003e80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80035e6:	e023      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fcb0 	bl	8003f54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003602:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003612:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003628:	e002      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
      break;
 800362e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop

08003644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_TIM_ConfigClockSource+0x1c>
 800365c:	2302      	movs	r3, #2
 800365e:	e0f6      	b.n	800384e <HAL_TIM_ConfigClockSource+0x20a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800367e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800368a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6f      	ldr	r2, [pc, #444]	@ (8003858 <HAL_TIM_ConfigClockSource+0x214>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f000 80c1 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 80036a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003858 <HAL_TIM_ConfigClockSource+0x214>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f200 80c6 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 80036a8:	4a6c      	ldr	r2, [pc, #432]	@ (800385c <HAL_TIM_ConfigClockSource+0x218>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f000 80b9 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 80036b0:	4a6a      	ldr	r2, [pc, #424]	@ (800385c <HAL_TIM_ConfigClockSource+0x218>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f200 80be 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 80036b8:	4a69      	ldr	r2, [pc, #420]	@ (8003860 <HAL_TIM_ConfigClockSource+0x21c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f000 80b1 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 80036c0:	4a67      	ldr	r2, [pc, #412]	@ (8003860 <HAL_TIM_ConfigClockSource+0x21c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	f200 80b6 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 80036c8:	4a66      	ldr	r2, [pc, #408]	@ (8003864 <HAL_TIM_ConfigClockSource+0x220>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f000 80a9 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 80036d0:	4a64      	ldr	r2, [pc, #400]	@ (8003864 <HAL_TIM_ConfigClockSource+0x220>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f200 80ae 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 80036d8:	4a63      	ldr	r2, [pc, #396]	@ (8003868 <HAL_TIM_ConfigClockSource+0x224>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f000 80a1 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 80036e0:	4a61      	ldr	r2, [pc, #388]	@ (8003868 <HAL_TIM_ConfigClockSource+0x224>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f200 80a6 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 80036e8:	4a60      	ldr	r2, [pc, #384]	@ (800386c <HAL_TIM_ConfigClockSource+0x228>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	f000 8099 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 80036f0:	4a5e      	ldr	r2, [pc, #376]	@ (800386c <HAL_TIM_ConfigClockSource+0x228>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	f200 809e 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 80036f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036fc:	f000 8091 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 8003700:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003704:	f200 8096 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370c:	f000 8089 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003714:	f200 808e 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371c:	d03e      	beq.n	800379c <HAL_TIM_ConfigClockSource+0x158>
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003722:	f200 8087 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	f000 8086 	beq.w	800383a <HAL_TIM_ConfigClockSource+0x1f6>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	d87f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d01a      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x12a>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d87b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d050      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x19e>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d877      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d03c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x17e>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d873      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d058      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x1be>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d86f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d064      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d86b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d060      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d867      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05c      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 8003768:	2b10      	cmp	r3, #16
 800376a:	d05a      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x1de>
 800376c:	e062      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377e:	f000 fcd1 	bl	8004124 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	609a      	str	r2, [r3, #8]
      break;
 800379a:	e04f      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ac:	f000 fcba 	bl	8004124 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037be:	609a      	str	r2, [r3, #8]
      break;
 80037c0:	e03c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 fc2c 	bl	800402c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2150      	movs	r1, #80	@ 0x50
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fc85 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 80037e0:	e02c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 fc4b 	bl	800408a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2160      	movs	r1, #96	@ 0x60
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fc75 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003800:	e01c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	461a      	mov	r2, r3
 8003810:	f000 fc0c 	bl	800402c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2140      	movs	r1, #64	@ 0x40
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fc65 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003820:	e00c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 fc5c 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003832:	e003      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e000      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800383a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	00100070 	.word	0x00100070
 800385c:	00100060 	.word	0x00100060
 8003860:	00100050 	.word	0x00100050
 8003864:	00100040 	.word	0x00100040
 8003868:	00100030 	.word	0x00100030
 800386c:	00100020 	.word	0x00100020

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a4c      	ldr	r2, [pc, #304]	@ (80039b4 <TIM_Base_SetConfig+0x144>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d017      	beq.n	80038b8 <TIM_Base_SetConfig+0x48>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388e:	d013      	beq.n	80038b8 <TIM_Base_SetConfig+0x48>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a49      	ldr	r2, [pc, #292]	@ (80039b8 <TIM_Base_SetConfig+0x148>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x48>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a48      	ldr	r2, [pc, #288]	@ (80039bc <TIM_Base_SetConfig+0x14c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x48>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a47      	ldr	r2, [pc, #284]	@ (80039c0 <TIM_Base_SetConfig+0x150>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x48>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a46      	ldr	r2, [pc, #280]	@ (80039c4 <TIM_Base_SetConfig+0x154>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x48>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a45      	ldr	r2, [pc, #276]	@ (80039c8 <TIM_Base_SetConfig+0x158>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a39      	ldr	r2, [pc, #228]	@ (80039b4 <TIM_Base_SetConfig+0x144>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d023      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d8:	d01f      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a36      	ldr	r2, [pc, #216]	@ (80039b8 <TIM_Base_SetConfig+0x148>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01b      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a35      	ldr	r2, [pc, #212]	@ (80039bc <TIM_Base_SetConfig+0x14c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d017      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a34      	ldr	r2, [pc, #208]	@ (80039c0 <TIM_Base_SetConfig+0x150>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a33      	ldr	r2, [pc, #204]	@ (80039c4 <TIM_Base_SetConfig+0x154>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a33      	ldr	r2, [pc, #204]	@ (80039cc <TIM_Base_SetConfig+0x15c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a32      	ldr	r2, [pc, #200]	@ (80039d0 <TIM_Base_SetConfig+0x160>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a31      	ldr	r2, [pc, #196]	@ (80039d4 <TIM_Base_SetConfig+0x164>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <TIM_Base_SetConfig+0x158>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <TIM_Base_SetConfig+0x144>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x110>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <TIM_Base_SetConfig+0x154>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x110>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <TIM_Base_SetConfig+0x15c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x110>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a19      	ldr	r2, [pc, #100]	@ (80039d0 <TIM_Base_SetConfig+0x160>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x110>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <TIM_Base_SetConfig+0x164>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x110>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a13      	ldr	r2, [pc, #76]	@ (80039c8 <TIM_Base_SetConfig+0x158>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
  }
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40015000 	.word	0x40015000
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800

080039d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 0201 	bic.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 0302 	bic.w	r3, r3, #2
 8003a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a30      	ldr	r2, [pc, #192]	@ (8003af4 <TIM_OC1_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <TIM_OC1_SetConfig+0x88>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003af8 <TIM_OC1_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00f      	beq.n	8003a60 <TIM_OC1_SetConfig+0x88>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2e      	ldr	r2, [pc, #184]	@ (8003afc <TIM_OC1_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_OC1_SetConfig+0x88>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b00 <TIM_OC1_SetConfig+0x128>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC1_SetConfig+0x88>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <TIM_OC1_SetConfig+0x12c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC1_SetConfig+0x88>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b08 <TIM_OC1_SetConfig+0x130>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10c      	bne.n	8003a7a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0308 	bic.w	r3, r3, #8
 8003a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0304 	bic.w	r3, r3, #4
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <TIM_OC1_SetConfig+0x11c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <TIM_OC1_SetConfig+0xd2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <TIM_OC1_SetConfig+0x120>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00f      	beq.n	8003aaa <TIM_OC1_SetConfig+0xd2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003afc <TIM_OC1_SetConfig+0x124>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <TIM_OC1_SetConfig+0xd2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1a      	ldr	r2, [pc, #104]	@ (8003b00 <TIM_OC1_SetConfig+0x128>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_OC1_SetConfig+0xd2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <TIM_OC1_SetConfig+0x12c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_OC1_SetConfig+0xd2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <TIM_OC1_SetConfig+0x130>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d111      	bne.n	8003ace <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40013400 	.word	0x40013400
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	40015000 	.word	0x40015000

08003b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 0210 	bic.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0320 	bic.w	r3, r3, #32
 8003b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c1c <TIM_OC2_SetConfig+0x110>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_OC2_SetConfig+0x74>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	@ (8003c20 <TIM_OC2_SetConfig+0x114>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC2_SetConfig+0x74>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c24 <TIM_OC2_SetConfig+0x118>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d10d      	bne.n	8003b9c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003c1c <TIM_OC2_SetConfig+0x110>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <TIM_OC2_SetConfig+0xc0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <TIM_OC2_SetConfig+0x114>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_OC2_SetConfig+0xc0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	@ (8003c28 <TIM_OC2_SetConfig+0x11c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_OC2_SetConfig+0xc0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <TIM_OC2_SetConfig+0x120>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_OC2_SetConfig+0xc0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <TIM_OC2_SetConfig+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC2_SetConfig+0xc0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a17      	ldr	r2, [pc, #92]	@ (8003c24 <TIM_OC2_SetConfig+0x118>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d113      	bne.n	8003bf4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40013400 	.word	0x40013400
 8003c24:	40015000 	.word	0x40015000
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2b      	ldr	r2, [pc, #172]	@ (8003d40 <TIM_OC3_SetConfig+0x10c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d007      	beq.n	8003ca6 <TIM_OC3_SetConfig+0x72>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2a      	ldr	r2, [pc, #168]	@ (8003d44 <TIM_OC3_SetConfig+0x110>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <TIM_OC3_SetConfig+0x72>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a29      	ldr	r2, [pc, #164]	@ (8003d48 <TIM_OC3_SetConfig+0x114>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10d      	bne.n	8003cc2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <TIM_OC3_SetConfig+0x10c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <TIM_OC3_SetConfig+0xbe>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d44 <TIM_OC3_SetConfig+0x110>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00f      	beq.n	8003cf2 <TIM_OC3_SetConfig+0xbe>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d4c <TIM_OC3_SetConfig+0x118>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_OC3_SetConfig+0xbe>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d50 <TIM_OC3_SetConfig+0x11c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <TIM_OC3_SetConfig+0xbe>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d54 <TIM_OC3_SetConfig+0x120>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_OC3_SetConfig+0xbe>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a16      	ldr	r2, [pc, #88]	@ (8003d48 <TIM_OC3_SetConfig+0x114>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d113      	bne.n	8003d1a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	621a      	str	r2, [r3, #32]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40013400 	.word	0x40013400
 8003d48:	40015000 	.word	0x40015000
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800

08003d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e68 <TIM_OC4_SetConfig+0x110>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <TIM_OC4_SetConfig+0x74>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8003e6c <TIM_OC4_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC4_SetConfig+0x74>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <TIM_OC4_SetConfig+0x118>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10d      	bne.n	8003de8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	031b      	lsls	r3, r3, #12
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003de6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1f      	ldr	r2, [pc, #124]	@ (8003e68 <TIM_OC4_SetConfig+0x110>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <TIM_OC4_SetConfig+0xc0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <TIM_OC4_SetConfig+0x114>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <TIM_OC4_SetConfig+0xc0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <TIM_OC4_SetConfig+0x11c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_OC4_SetConfig+0xc0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <TIM_OC4_SetConfig+0x120>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_OC4_SetConfig+0xc0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <TIM_OC4_SetConfig+0x124>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC4_SetConfig+0xc0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a17      	ldr	r2, [pc, #92]	@ (8003e70 <TIM_OC4_SetConfig+0x118>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d113      	bne.n	8003e40 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40015000 	.word	0x40015000
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ec4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	@ (8003f3c <TIM_OC5_SetConfig+0xbc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <TIM_OC5_SetConfig+0x82>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a18      	ldr	r2, [pc, #96]	@ (8003f40 <TIM_OC5_SetConfig+0xc0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <TIM_OC5_SetConfig+0x82>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a17      	ldr	r2, [pc, #92]	@ (8003f44 <TIM_OC5_SetConfig+0xc4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <TIM_OC5_SetConfig+0x82>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a16      	ldr	r2, [pc, #88]	@ (8003f48 <TIM_OC5_SetConfig+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_OC5_SetConfig+0x82>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <TIM_OC5_SetConfig+0xcc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_OC5_SetConfig+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <TIM_OC5_SetConfig+0xd0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d109      	bne.n	8003f16 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	621a      	str	r2, [r3, #32]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800
 8003f50:	40015000 	.word	0x40015000

08003f54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	051b      	lsls	r3, r3, #20
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a1a      	ldr	r2, [pc, #104]	@ (8004014 <TIM_OC6_SetConfig+0xc0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x84>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <TIM_OC6_SetConfig+0xc4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00f      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x84>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a18      	ldr	r2, [pc, #96]	@ (800401c <TIM_OC6_SetConfig+0xc8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x84>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <TIM_OC6_SetConfig+0xcc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x84>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <TIM_OC6_SetConfig+0xd0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_OC6_SetConfig+0x84>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	@ (8004028 <TIM_OC6_SetConfig+0xd4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d109      	bne.n	8003fec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40013400 	.word	0x40013400
 800401c:	40014000 	.word	0x40014000
 8004020:	40014400 	.word	0x40014400
 8004024:	40014800 	.word	0x40014800
 8004028:	40015000 	.word	0x40015000

0800402c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408a:	b480      	push	{r7}
 800408c:	b087      	sub	sp, #28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 0210 	bic.w	r2, r3, #16
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	f043 0307 	orr.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800413e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	021a      	lsls	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	431a      	orrs	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e074      	b.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a34      	ldr	r2, [pc, #208]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a31      	ldr	r2, [pc, #196]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a21      	ldr	r2, [pc, #132]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fc:	d01d      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a18      	ldr	r2, [pc, #96]	@ (800428c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a11      	ldr	r2, [pc, #68]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10c      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40015000 	.word	0x40015000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000

08004290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e078      	b.n	800439e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1c      	ldr	r2, [pc, #112]	@ (80043ac <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1b      	ldr	r2, [pc, #108]	@ (80043b0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a19      	ldr	r2, [pc, #100]	@ (80043b4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d11c      	bne.n	800438c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	051b      	lsls	r3, r3, #20
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40013400 	.word	0x40013400
 80043b4:	40015000 	.word	0x40015000

080043b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e042      	b.n	8004450 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fc ffb5 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2224      	movs	r2, #36	@ 0x24
 80043e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fc7a 	bl	8004cfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f97b 	bl	8004704 <UART_SetConfig>
 800440e:	4603      	mov	r3, r0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01b      	b.n	8004450 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fcf9 	bl	8004e40 <UART_CheckIdleState>
 800444e:	4603      	mov	r3, r0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	2b20      	cmp	r3, #32
 8004470:	d17b      	bne.n	800456a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_UART_Transmit+0x26>
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e074      	b.n	800456c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2221      	movs	r2, #33	@ 0x21
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004492:	f7fd fae3 	bl	8001a5c <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044b0:	d108      	bne.n	80044c4 <HAL_UART_Transmit+0x6c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e003      	b.n	80044cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044cc:	e030      	b.n	8004530 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2180      	movs	r1, #128	@ 0x80
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fd5b 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e03d      	b.n	800456c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004504:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	3302      	adds	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e007      	b.n	800451e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1c8      	bne.n	80044ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	2140      	movs	r1, #64	@ 0x40
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fd24 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e006      	b.n	800456c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	@ 0x28
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800458a:	2b20      	cmp	r3, #32
 800458c:	f040 80b5 	bne.w	80046fa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Receive+0x28>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0ad      	b.n	80046fc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2222      	movs	r2, #34	@ 0x22
 80045ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045b6:	f7fd fa51 	bl	8001a5c <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88fa      	ldrh	r2, [r7, #6]
 80045c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d4:	d10e      	bne.n	80045f4 <HAL_UART_Receive+0x80>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d105      	bne.n	80045ea <HAL_UART_Receive+0x76>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80045e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045e8:	e02d      	b.n	8004646 <HAL_UART_Receive+0xd2>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	22ff      	movs	r2, #255	@ 0xff
 80045ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045f2:	e028      	b.n	8004646 <HAL_UART_Receive+0xd2>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_UART_Receive+0xa4>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <HAL_UART_Receive+0x9a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	22ff      	movs	r2, #255	@ 0xff
 8004608:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800460c:	e01b      	b.n	8004646 <HAL_UART_Receive+0xd2>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	227f      	movs	r2, #127	@ 0x7f
 8004612:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004616:	e016      	b.n	8004646 <HAL_UART_Receive+0xd2>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004620:	d10d      	bne.n	800463e <HAL_UART_Receive+0xca>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <HAL_UART_Receive+0xc0>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	227f      	movs	r2, #127	@ 0x7f
 800462e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004632:	e008      	b.n	8004646 <HAL_UART_Receive+0xd2>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	223f      	movs	r2, #63	@ 0x3f
 8004638:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800463c:	e003      	b.n	8004646 <HAL_UART_Receive+0xd2>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800464c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004656:	d108      	bne.n	800466a <HAL_UART_Receive+0xf6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e003      	b.n	8004672 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004672:	e036      	b.n	80046e2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	2120      	movs	r1, #32
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fc88 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e032      	b.n	80046fc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	8a7b      	ldrh	r3, [r7, #18]
 80046a6:	4013      	ands	r3, r2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3302      	adds	r3, #2
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e00c      	b.n	80046d0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	8a7b      	ldrh	r3, [r7, #18]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4013      	ands	r3, r2
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3301      	adds	r3, #1
 80046ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1c2      	bne.n	8004674 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b08c      	sub	sp, #48	@ 0x30
 800470a:	af00      	add	r7, sp, #0
 800470c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	431a      	orrs	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	431a      	orrs	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4313      	orrs	r3, r2
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4baa      	ldr	r3, [pc, #680]	@ (80049dc <UART_SetConfig+0x2d8>)
 8004734:	4013      	ands	r3, r2
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800473c:	430b      	orrs	r3, r1
 800473e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a9f      	ldr	r2, [pc, #636]	@ (80049e0 <UART_SetConfig+0x2dc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800476c:	4313      	orrs	r3, r2
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800477a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f023 010f 	bic.w	r1, r3, #15
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a90      	ldr	r2, [pc, #576]	@ (80049e4 <UART_SetConfig+0x2e0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d125      	bne.n	80047f4 <UART_SetConfig+0xf0>
 80047a8:	4b8f      	ldr	r3, [pc, #572]	@ (80049e8 <UART_SetConfig+0x2e4>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d81a      	bhi.n	80047ec <UART_SetConfig+0xe8>
 80047b6:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <UART_SetConfig+0xb8>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047dd 	.word	0x080047dd
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d2:	e116      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047da:	e112      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e2:	e10e      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ea:	e10a      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f2:	e106      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a7c      	ldr	r2, [pc, #496]	@ (80049ec <UART_SetConfig+0x2e8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d138      	bne.n	8004870 <UART_SetConfig+0x16c>
 80047fe:	4b7a      	ldr	r3, [pc, #488]	@ (80049e8 <UART_SetConfig+0x2e4>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d82d      	bhi.n	8004868 <UART_SetConfig+0x164>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <UART_SetConfig+0x110>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004849 	.word	0x08004849
 8004818:	08004869 	.word	0x08004869
 800481c:	08004869 	.word	0x08004869
 8004820:	08004869 	.word	0x08004869
 8004824:	08004859 	.word	0x08004859
 8004828:	08004869 	.word	0x08004869
 800482c:	08004869 	.word	0x08004869
 8004830:	08004869 	.word	0x08004869
 8004834:	08004851 	.word	0x08004851
 8004838:	08004869 	.word	0x08004869
 800483c:	08004869 	.word	0x08004869
 8004840:	08004869 	.word	0x08004869
 8004844:	08004861 	.word	0x08004861
 8004848:	2300      	movs	r3, #0
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484e:	e0d8      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004856:	e0d4      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485e:	e0d0      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004866:	e0cc      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486e:	e0c8      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5e      	ldr	r2, [pc, #376]	@ (80049f0 <UART_SetConfig+0x2ec>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d125      	bne.n	80048c6 <UART_SetConfig+0x1c2>
 800487a:	4b5b      	ldr	r3, [pc, #364]	@ (80049e8 <UART_SetConfig+0x2e4>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004884:	2b30      	cmp	r3, #48	@ 0x30
 8004886:	d016      	beq.n	80048b6 <UART_SetConfig+0x1b2>
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d818      	bhi.n	80048be <UART_SetConfig+0x1ba>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d00a      	beq.n	80048a6 <UART_SetConfig+0x1a2>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d814      	bhi.n	80048be <UART_SetConfig+0x1ba>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <UART_SetConfig+0x19a>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d008      	beq.n	80048ae <UART_SetConfig+0x1aa>
 800489c:	e00f      	b.n	80048be <UART_SetConfig+0x1ba>
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a4:	e0ad      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80048a6:	2302      	movs	r3, #2
 80048a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ac:	e0a9      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80048ae:	2304      	movs	r3, #4
 80048b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b4:	e0a5      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80048b6:	2308      	movs	r3, #8
 80048b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048bc:	e0a1      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80048be:	2310      	movs	r3, #16
 80048c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c4:	e09d      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a4a      	ldr	r2, [pc, #296]	@ (80049f4 <UART_SetConfig+0x2f0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d125      	bne.n	800491c <UART_SetConfig+0x218>
 80048d0:	4b45      	ldr	r3, [pc, #276]	@ (80049e8 <UART_SetConfig+0x2e4>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048da:	2bc0      	cmp	r3, #192	@ 0xc0
 80048dc:	d016      	beq.n	800490c <UART_SetConfig+0x208>
 80048de:	2bc0      	cmp	r3, #192	@ 0xc0
 80048e0:	d818      	bhi.n	8004914 <UART_SetConfig+0x210>
 80048e2:	2b80      	cmp	r3, #128	@ 0x80
 80048e4:	d00a      	beq.n	80048fc <UART_SetConfig+0x1f8>
 80048e6:	2b80      	cmp	r3, #128	@ 0x80
 80048e8:	d814      	bhi.n	8004914 <UART_SetConfig+0x210>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <UART_SetConfig+0x1f0>
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d008      	beq.n	8004904 <UART_SetConfig+0x200>
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x210>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	e082      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004902:	e07e      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e07a      	b.n	8004a02 <UART_SetConfig+0x2fe>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e076      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e072      	b.n	8004a02 <UART_SetConfig+0x2fe>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a35      	ldr	r2, [pc, #212]	@ (80049f8 <UART_SetConfig+0x2f4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d12a      	bne.n	800497c <UART_SetConfig+0x278>
 8004926:	4b30      	ldr	r3, [pc, #192]	@ (80049e8 <UART_SetConfig+0x2e4>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004934:	d01a      	beq.n	800496c <UART_SetConfig+0x268>
 8004936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800493a:	d81b      	bhi.n	8004974 <UART_SetConfig+0x270>
 800493c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004940:	d00c      	beq.n	800495c <UART_SetConfig+0x258>
 8004942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004946:	d815      	bhi.n	8004974 <UART_SetConfig+0x270>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <UART_SetConfig+0x250>
 800494c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004950:	d008      	beq.n	8004964 <UART_SetConfig+0x260>
 8004952:	e00f      	b.n	8004974 <UART_SetConfig+0x270>
 8004954:	2300      	movs	r3, #0
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495a:	e052      	b.n	8004a02 <UART_SetConfig+0x2fe>
 800495c:	2302      	movs	r3, #2
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004962:	e04e      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004964:	2304      	movs	r3, #4
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e04a      	b.n	8004a02 <UART_SetConfig+0x2fe>
 800496c:	2308      	movs	r3, #8
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e046      	b.n	8004a02 <UART_SetConfig+0x2fe>
 8004974:	2310      	movs	r3, #16
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497a:	e042      	b.n	8004a02 <UART_SetConfig+0x2fe>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <UART_SetConfig+0x2dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d13a      	bne.n	80049fc <UART_SetConfig+0x2f8>
 8004986:	4b18      	ldr	r3, [pc, #96]	@ (80049e8 <UART_SetConfig+0x2e4>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004990:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004994:	d01a      	beq.n	80049cc <UART_SetConfig+0x2c8>
 8004996:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800499a:	d81b      	bhi.n	80049d4 <UART_SetConfig+0x2d0>
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a0:	d00c      	beq.n	80049bc <UART_SetConfig+0x2b8>
 80049a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049a6:	d815      	bhi.n	80049d4 <UART_SetConfig+0x2d0>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <UART_SetConfig+0x2b0>
 80049ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b0:	d008      	beq.n	80049c4 <UART_SetConfig+0x2c0>
 80049b2:	e00f      	b.n	80049d4 <UART_SetConfig+0x2d0>
 80049b4:	2300      	movs	r3, #0
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ba:	e022      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80049bc:	2302      	movs	r3, #2
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c2:	e01e      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80049c4:	2304      	movs	r3, #4
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ca:	e01a      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80049cc:	2308      	movs	r3, #8
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d2:	e016      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80049d4:	2310      	movs	r3, #16
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049da:	e012      	b.n	8004a02 <UART_SetConfig+0x2fe>
 80049dc:	cfff69f3 	.word	0xcfff69f3
 80049e0:	40008000 	.word	0x40008000
 80049e4:	40013800 	.word	0x40013800
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40004400 	.word	0x40004400
 80049f0:	40004800 	.word	0x40004800
 80049f4:	40004c00 	.word	0x40004c00
 80049f8:	40005000 	.word	0x40005000
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4aae      	ldr	r2, [pc, #696]	@ (8004cc0 <UART_SetConfig+0x5bc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f040 8097 	bne.w	8004b3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d823      	bhi.n	8004a5e <UART_SetConfig+0x35a>
 8004a16:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <UART_SetConfig+0x318>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a5f 	.word	0x08004a5f
 8004a2c:	08004a4f 	.word	0x08004a4f
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a5f 	.word	0x08004a5f
 8004a38:	08004a5f 	.word	0x08004a5f
 8004a3c:	08004a57 	.word	0x08004a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a40:	f7fe f8ce 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8004a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a46:	e010      	b.n	8004a6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a48:	4b9e      	ldr	r3, [pc, #632]	@ (8004cc4 <UART_SetConfig+0x5c0>)
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a4c:	e00d      	b.n	8004a6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4e:	f7fe f859 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8004a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a54:	e009      	b.n	8004a6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a5c:	e005      	b.n	8004a6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8130 	beq.w	8004cd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	4a94      	ldr	r2, [pc, #592]	@ (8004cc8 <UART_SetConfig+0x5c4>)
 8004a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d305      	bcc.n	8004aa2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d903      	bls.n	8004aaa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004aa8:	e113      	b.n	8004cd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	2200      	movs	r2, #0
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	60fa      	str	r2, [r7, #12]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	4a84      	ldr	r2, [pc, #528]	@ (8004cc8 <UART_SetConfig+0x5c4>)
 8004ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2200      	movs	r2, #0
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004acc:	f7fb fc00 	bl	80002d0 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	020b      	lsls	r3, r1, #8
 8004ae2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ae6:	0202      	lsls	r2, r0, #8
 8004ae8:	6979      	ldr	r1, [r7, #20]
 8004aea:	6849      	ldr	r1, [r1, #4]
 8004aec:	0849      	lsrs	r1, r1, #1
 8004aee:	2000      	movs	r0, #0
 8004af0:	460c      	mov	r4, r1
 8004af2:	4605      	mov	r5, r0
 8004af4:	eb12 0804 	adds.w	r8, r2, r4
 8004af8:	eb43 0905 	adc.w	r9, r3, r5
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	469a      	mov	sl, r3
 8004b04:	4693      	mov	fp, r2
 8004b06:	4652      	mov	r2, sl
 8004b08:	465b      	mov	r3, fp
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	f7fb fbdf 	bl	80002d0 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4613      	mov	r3, r2
 8004b18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b20:	d308      	bcc.n	8004b34 <UART_SetConfig+0x430>
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b28:	d204      	bcs.n	8004b34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	e0ce      	b.n	8004cd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b3a:	e0ca      	b.n	8004cd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b44:	d166      	bne.n	8004c14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d827      	bhi.n	8004b9e <UART_SetConfig+0x49a>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <UART_SetConfig+0x450>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7fe f832 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8004b7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b7e:	e014      	b.n	8004baa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe f844 	bl	8002c0c <HAL_RCC_GetPCLK2Freq>
 8004b84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b86:	e010      	b.n	8004baa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc4 <UART_SetConfig+0x5c0>)
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b8c:	e00d      	b.n	8004baa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7fd ffb9 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8004b92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b94:	e009      	b.n	8004baa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b9c:	e005      	b.n	8004baa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8090 	beq.w	8004cd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	4a44      	ldr	r2, [pc, #272]	@ (8004cc8 <UART_SetConfig+0x5c4>)
 8004bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc4:	005a      	lsls	r2, r3, #1
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	441a      	add	r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	d916      	bls.n	8004c0c <UART_SetConfig+0x508>
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be4:	d212      	bcs.n	8004c0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f023 030f 	bic.w	r3, r3, #15
 8004bee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	8bfb      	ldrh	r3, [r7, #30]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	8bfa      	ldrh	r2, [r7, #30]
 8004c08:	60da      	str	r2, [r3, #12]
 8004c0a:	e062      	b.n	8004cd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c12:	e05e      	b.n	8004cd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d828      	bhi.n	8004c6e <UART_SetConfig+0x56a>
 8004c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <UART_SetConfig+0x520>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c59 	.word	0x08004c59
 8004c30:	08004c6f 	.word	0x08004c6f
 8004c34:	08004c5f 	.word	0x08004c5f
 8004c38:	08004c6f 	.word	0x08004c6f
 8004c3c:	08004c6f 	.word	0x08004c6f
 8004c40:	08004c6f 	.word	0x08004c6f
 8004c44:	08004c67 	.word	0x08004c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fd ffca 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c4e:	e014      	b.n	8004c7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c50:	f7fd ffdc 	bl	8002c0c <HAL_RCC_GetPCLK2Freq>
 8004c54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c56:	e010      	b.n	8004c7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c58:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <UART_SetConfig+0x5c0>)
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c5c:	e00d      	b.n	8004c7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c5e:	f7fd ff51 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c64:	e009      	b.n	8004c7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c6c:	e005      	b.n	8004c7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c78:	bf00      	nop
    }

    if (pclk != 0U)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d028      	beq.n	8004cd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	4a10      	ldr	r2, [pc, #64]	@ (8004cc8 <UART_SetConfig+0x5c4>)
 8004c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	441a      	add	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b0f      	cmp	r3, #15
 8004ca8:	d910      	bls.n	8004ccc <UART_SetConfig+0x5c8>
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb0:	d20c      	bcs.n	8004ccc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	e009      	b.n	8004cd2 <UART_SetConfig+0x5ce>
 8004cbe:	bf00      	nop
 8004cc0:	40008000 	.word	0x40008000
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	08006c5c 	.word	0x08006c5c
      }
      else
      {
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2200      	movs	r2, #0
 8004cec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004cee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3730      	adds	r7, #48	@ 0x30
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dfa:	d10a      	bne.n	8004e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b098      	sub	sp, #96	@ 0x60
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e50:	f7fc fe04 	bl	8001a5c <HAL_GetTick>
 8004e54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d12f      	bne.n	8004ec4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f88e 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d022      	beq.n	8004ec4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	e853 3f00 	ldrex	r3, [r3]
 8004e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e6      	bne.n	8004e7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e063      	b.n	8004f8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d149      	bne.n	8004f66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eda:	2200      	movs	r2, #0
 8004edc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f857 	bl	8004f94 <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d03c      	beq.n	8004f66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e6      	bne.n	8004eec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3308      	adds	r3, #8
 8004f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f3e:	61fa      	str	r2, [r7, #28]
 8004f40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	69b9      	ldr	r1, [r7, #24]
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e012      	b.n	8004f8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3758      	adds	r7, #88	@ 0x58
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa4:	e04f      	b.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fac:	d04b      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fc fd55 	bl	8001a5c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e04e      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d037      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b80      	cmp	r3, #128	@ 0x80
 8004fda:	d034      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b40      	cmp	r3, #64	@ 0x40
 8004fe0:	d031      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d110      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f838 	bl	800506e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2208      	movs	r2, #8
 8005002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e029      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800501c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005020:	d111      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800502a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f81e 	bl	800506e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e00f      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d0a0      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800506e:	b480      	push	{r7}
 8005070:	b095      	sub	sp, #84	@ 0x54
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005094:	643b      	str	r3, [r7, #64]	@ 0x40
 8005096:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800509a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e6      	bne.n	8005076 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3308      	adds	r3, #8
 80050ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d118      	bne.n	800511a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0310 	bic.w	r3, r3, #16
 80050fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	613b      	str	r3, [r7, #16]
   return(result);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800512e:	bf00      	nop
 8005130:	3754      	adds	r7, #84	@ 0x54
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UARTEx_DisableFifoMode+0x16>
 800514c:	2302      	movs	r3, #2
 800514e:	e027      	b.n	80051a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	@ 0x24
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800517e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e02d      	b.n	8005220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2224      	movs	r2, #36	@ 0x24
 80051d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f84f 	bl	80052a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e02d      	b.n	800529c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	@ 0x24
 800524c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f811 	bl	80052a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d108      	bne.n	80052c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052c4:	e031      	b.n	800532a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052c6:	2308      	movs	r3, #8
 80052c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052ca:	2308      	movs	r3, #8
 80052cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	0e5b      	lsrs	r3, r3, #25
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	0f5b      	lsrs	r3, r3, #29
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	7b3a      	ldrb	r2, [r7, #12]
 80052f2:	4911      	ldr	r1, [pc, #68]	@ (8005338 <UARTEx_SetNbDataToProcess+0x94>)
 80052f4:	5c8a      	ldrb	r2, [r1, r2]
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052fa:	7b3a      	ldrb	r2, [r7, #12]
 80052fc:	490f      	ldr	r1, [pc, #60]	@ (800533c <UARTEx_SetNbDataToProcess+0x98>)
 80052fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005300:	fb93 f3f2 	sdiv	r3, r3, r2
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	7b7a      	ldrb	r2, [r7, #13]
 8005310:	4909      	ldr	r1, [pc, #36]	@ (8005338 <UARTEx_SetNbDataToProcess+0x94>)
 8005312:	5c8a      	ldrb	r2, [r1, r2]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005318:	7b7a      	ldrb	r2, [r7, #13]
 800531a:	4908      	ldr	r1, [pc, #32]	@ (800533c <UARTEx_SetNbDataToProcess+0x98>)
 800531c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800531e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	08006c74 	.word	0x08006c74
 800533c:	08006c7c 	.word	0x08006c7c

08005340 <siscanf>:
 8005340:	b40e      	push	{r1, r2, r3}
 8005342:	b530      	push	{r4, r5, lr}
 8005344:	b09c      	sub	sp, #112	@ 0x70
 8005346:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005348:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800534c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005350:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005354:	9002      	str	r0, [sp, #8]
 8005356:	9006      	str	r0, [sp, #24]
 8005358:	f7fa ff62 	bl	8000220 <strlen>
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <siscanf+0x4c>)
 800535e:	9003      	str	r0, [sp, #12]
 8005360:	9007      	str	r0, [sp, #28]
 8005362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005364:	480a      	ldr	r0, [pc, #40]	@ (8005390 <siscanf+0x50>)
 8005366:	9401      	str	r4, [sp, #4]
 8005368:	2300      	movs	r3, #0
 800536a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800536c:	9314      	str	r3, [sp, #80]	@ 0x50
 800536e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005372:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005376:	462a      	mov	r2, r5
 8005378:	4623      	mov	r3, r4
 800537a:	a902      	add	r1, sp, #8
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f000 fa41 	bl	8005804 <__ssvfiscanf_r>
 8005382:	b01c      	add	sp, #112	@ 0x70
 8005384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005388:	b003      	add	sp, #12
 800538a:	4770      	bx	lr
 800538c:	080053b7 	.word	0x080053b7
 8005390:	20000030 	.word	0x20000030

08005394 <__sread>:
 8005394:	b510      	push	{r4, lr}
 8005396:	460c      	mov	r4, r1
 8005398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539c:	f000 f93e 	bl	800561c <_read_r>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	bfab      	itete	ge
 80053a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053a6:	89a3      	ldrhlt	r3, [r4, #12]
 80053a8:	181b      	addge	r3, r3, r0
 80053aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053ae:	bfac      	ite	ge
 80053b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053b2:	81a3      	strhlt	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__seofread>:
 80053b6:	2000      	movs	r0, #0
 80053b8:	4770      	bx	lr

080053ba <__swrite>:
 80053ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	461f      	mov	r7, r3
 80053c0:	898b      	ldrh	r3, [r1, #12]
 80053c2:	05db      	lsls	r3, r3, #23
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	4616      	mov	r6, r2
 80053ca:	d505      	bpl.n	80053d8 <__swrite+0x1e>
 80053cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d0:	2302      	movs	r3, #2
 80053d2:	2200      	movs	r2, #0
 80053d4:	f000 f910 	bl	80055f8 <_lseek_r>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	4632      	mov	r2, r6
 80053e6:	463b      	mov	r3, r7
 80053e8:	4628      	mov	r0, r5
 80053ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ee:	f000 b927 	b.w	8005640 <_write_r>

080053f2 <__sseek>:
 80053f2:	b510      	push	{r4, lr}
 80053f4:	460c      	mov	r4, r1
 80053f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fa:	f000 f8fd 	bl	80055f8 <_lseek_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	bf15      	itete	ne
 8005404:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005406:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800540a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800540e:	81a3      	strheq	r3, [r4, #12]
 8005410:	bf18      	it	ne
 8005412:	81a3      	strhne	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__sclose>:
 8005416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541a:	f000 b8dd 	b.w	80055d8 <_close_r>
	...

08005420 <std>:
 8005420:	2300      	movs	r3, #0
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
 8005426:	e9c0 3300 	strd	r3, r3, [r0]
 800542a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800542e:	6083      	str	r3, [r0, #8]
 8005430:	8181      	strh	r1, [r0, #12]
 8005432:	6643      	str	r3, [r0, #100]	@ 0x64
 8005434:	81c2      	strh	r2, [r0, #14]
 8005436:	6183      	str	r3, [r0, #24]
 8005438:	4619      	mov	r1, r3
 800543a:	2208      	movs	r2, #8
 800543c:	305c      	adds	r0, #92	@ 0x5c
 800543e:	f000 f8c3 	bl	80055c8 <memset>
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <std+0x58>)
 8005444:	6263      	str	r3, [r4, #36]	@ 0x24
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <std+0x5c>)
 8005448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <std+0x60>)
 800544c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800544e:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <std+0x64>)
 8005450:	6323      	str	r3, [r4, #48]	@ 0x30
 8005452:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <std+0x68>)
 8005454:	6224      	str	r4, [r4, #32]
 8005456:	429c      	cmp	r4, r3
 8005458:	d006      	beq.n	8005468 <std+0x48>
 800545a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800545e:	4294      	cmp	r4, r2
 8005460:	d002      	beq.n	8005468 <std+0x48>
 8005462:	33d0      	adds	r3, #208	@ 0xd0
 8005464:	429c      	cmp	r4, r3
 8005466:	d105      	bne.n	8005474 <std+0x54>
 8005468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005470:	f000 b922 	b.w	80056b8 <__retarget_lock_init_recursive>
 8005474:	bd10      	pop	{r4, pc}
 8005476:	bf00      	nop
 8005478:	08005395 	.word	0x08005395
 800547c:	080053bb 	.word	0x080053bb
 8005480:	080053f3 	.word	0x080053f3
 8005484:	08005417 	.word	0x08005417
 8005488:	200004d0 	.word	0x200004d0

0800548c <stdio_exit_handler>:
 800548c:	4a02      	ldr	r2, [pc, #8]	@ (8005498 <stdio_exit_handler+0xc>)
 800548e:	4903      	ldr	r1, [pc, #12]	@ (800549c <stdio_exit_handler+0x10>)
 8005490:	4803      	ldr	r0, [pc, #12]	@ (80054a0 <stdio_exit_handler+0x14>)
 8005492:	f000 b869 	b.w	8005568 <_fwalk_sglue>
 8005496:	bf00      	nop
 8005498:	20000024 	.word	0x20000024
 800549c:	080065e9 	.word	0x080065e9
 80054a0:	20000034 	.word	0x20000034

080054a4 <cleanup_stdio>:
 80054a4:	6841      	ldr	r1, [r0, #4]
 80054a6:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <cleanup_stdio+0x34>)
 80054a8:	4299      	cmp	r1, r3
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	d001      	beq.n	80054b4 <cleanup_stdio+0x10>
 80054b0:	f001 f89a 	bl	80065e8 <_fflush_r>
 80054b4:	68a1      	ldr	r1, [r4, #8]
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <cleanup_stdio+0x38>)
 80054b8:	4299      	cmp	r1, r3
 80054ba:	d002      	beq.n	80054c2 <cleanup_stdio+0x1e>
 80054bc:	4620      	mov	r0, r4
 80054be:	f001 f893 	bl	80065e8 <_fflush_r>
 80054c2:	68e1      	ldr	r1, [r4, #12]
 80054c4:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <cleanup_stdio+0x3c>)
 80054c6:	4299      	cmp	r1, r3
 80054c8:	d004      	beq.n	80054d4 <cleanup_stdio+0x30>
 80054ca:	4620      	mov	r0, r4
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	f001 b88a 	b.w	80065e8 <_fflush_r>
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	200004d0 	.word	0x200004d0
 80054dc:	20000538 	.word	0x20000538
 80054e0:	200005a0 	.word	0x200005a0

080054e4 <global_stdio_init.part.0>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <global_stdio_init.part.0+0x30>)
 80054e8:	4c0b      	ldr	r4, [pc, #44]	@ (8005518 <global_stdio_init.part.0+0x34>)
 80054ea:	4a0c      	ldr	r2, [pc, #48]	@ (800551c <global_stdio_init.part.0+0x38>)
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	4620      	mov	r0, r4
 80054f0:	2200      	movs	r2, #0
 80054f2:	2104      	movs	r1, #4
 80054f4:	f7ff ff94 	bl	8005420 <std>
 80054f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054fc:	2201      	movs	r2, #1
 80054fe:	2109      	movs	r1, #9
 8005500:	f7ff ff8e 	bl	8005420 <std>
 8005504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005508:	2202      	movs	r2, #2
 800550a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550e:	2112      	movs	r1, #18
 8005510:	f7ff bf86 	b.w	8005420 <std>
 8005514:	20000608 	.word	0x20000608
 8005518:	200004d0 	.word	0x200004d0
 800551c:	0800548d 	.word	0x0800548d

08005520 <__sfp_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	@ (8005528 <__sfp_lock_acquire+0x8>)
 8005522:	f000 b8ca 	b.w	80056ba <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	20000611 	.word	0x20000611

0800552c <__sfp_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	@ (8005534 <__sfp_lock_release+0x8>)
 800552e:	f000 b8c5 	b.w	80056bc <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	20000611 	.word	0x20000611

08005538 <__sinit>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	f7ff fff0 	bl	8005520 <__sfp_lock_acquire>
 8005540:	6a23      	ldr	r3, [r4, #32]
 8005542:	b11b      	cbz	r3, 800554c <__sinit+0x14>
 8005544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005548:	f7ff bff0 	b.w	800552c <__sfp_lock_release>
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <__sinit+0x28>)
 800554e:	6223      	str	r3, [r4, #32]
 8005550:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <__sinit+0x2c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f5      	bne.n	8005544 <__sinit+0xc>
 8005558:	f7ff ffc4 	bl	80054e4 <global_stdio_init.part.0>
 800555c:	e7f2      	b.n	8005544 <__sinit+0xc>
 800555e:	bf00      	nop
 8005560:	080054a5 	.word	0x080054a5
 8005564:	20000608 	.word	0x20000608

08005568 <_fwalk_sglue>:
 8005568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800556c:	4607      	mov	r7, r0
 800556e:	4688      	mov	r8, r1
 8005570:	4614      	mov	r4, r2
 8005572:	2600      	movs	r6, #0
 8005574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005578:	f1b9 0901 	subs.w	r9, r9, #1
 800557c:	d505      	bpl.n	800558a <_fwalk_sglue+0x22>
 800557e:	6824      	ldr	r4, [r4, #0]
 8005580:	2c00      	cmp	r4, #0
 8005582:	d1f7      	bne.n	8005574 <_fwalk_sglue+0xc>
 8005584:	4630      	mov	r0, r6
 8005586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800558a:	89ab      	ldrh	r3, [r5, #12]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d907      	bls.n	80055a0 <_fwalk_sglue+0x38>
 8005590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005594:	3301      	adds	r3, #1
 8005596:	d003      	beq.n	80055a0 <_fwalk_sglue+0x38>
 8005598:	4629      	mov	r1, r5
 800559a:	4638      	mov	r0, r7
 800559c:	47c0      	blx	r8
 800559e:	4306      	orrs	r6, r0
 80055a0:	3568      	adds	r5, #104	@ 0x68
 80055a2:	e7e9      	b.n	8005578 <_fwalk_sglue+0x10>

080055a4 <iprintf>:
 80055a4:	b40f      	push	{r0, r1, r2, r3}
 80055a6:	b507      	push	{r0, r1, r2, lr}
 80055a8:	4906      	ldr	r1, [pc, #24]	@ (80055c4 <iprintf+0x20>)
 80055aa:	ab04      	add	r3, sp, #16
 80055ac:	6808      	ldr	r0, [r1, #0]
 80055ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b2:	6881      	ldr	r1, [r0, #8]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	f000 fac3 	bl	8005b40 <_vfiprintf_r>
 80055ba:	b003      	add	sp, #12
 80055bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr
 80055c4:	20000030 	.word	0x20000030

080055c8 <memset>:
 80055c8:	4402      	add	r2, r0
 80055ca:	4603      	mov	r3, r0
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d100      	bne.n	80055d2 <memset+0xa>
 80055d0:	4770      	bx	lr
 80055d2:	f803 1b01 	strb.w	r1, [r3], #1
 80055d6:	e7f9      	b.n	80055cc <memset+0x4>

080055d8 <_close_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d06      	ldr	r5, [pc, #24]	@ (80055f4 <_close_r+0x1c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fb ff7b 	bl	80014de <_close>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_close_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_close_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	2000060c 	.word	0x2000060c

080055f8 <_lseek_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d07      	ldr	r5, [pc, #28]	@ (8005618 <_lseek_r+0x20>)
 80055fc:	4604      	mov	r4, r0
 80055fe:	4608      	mov	r0, r1
 8005600:	4611      	mov	r1, r2
 8005602:	2200      	movs	r2, #0
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f7fb ff90 	bl	800152c <_lseek>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_lseek_r+0x1e>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_lseek_r+0x1e>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	2000060c 	.word	0x2000060c

0800561c <_read_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d07      	ldr	r5, [pc, #28]	@ (800563c <_read_r+0x20>)
 8005620:	4604      	mov	r4, r0
 8005622:	4608      	mov	r0, r1
 8005624:	4611      	mov	r1, r2
 8005626:	2200      	movs	r2, #0
 8005628:	602a      	str	r2, [r5, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	f7fb ff1e 	bl	800146c <_read>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_read_r+0x1e>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_read_r+0x1e>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	2000060c 	.word	0x2000060c

08005640 <_write_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d07      	ldr	r5, [pc, #28]	@ (8005660 <_write_r+0x20>)
 8005644:	4604      	mov	r4, r0
 8005646:	4608      	mov	r0, r1
 8005648:	4611      	mov	r1, r2
 800564a:	2200      	movs	r2, #0
 800564c:	602a      	str	r2, [r5, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	f7fb ff29 	bl	80014a6 <_write>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_write_r+0x1e>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_write_r+0x1e>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	2000060c 	.word	0x2000060c

08005664 <__errno>:
 8005664:	4b01      	ldr	r3, [pc, #4]	@ (800566c <__errno+0x8>)
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000030 	.word	0x20000030

08005670 <__libc_init_array>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4d0d      	ldr	r5, [pc, #52]	@ (80056a8 <__libc_init_array+0x38>)
 8005674:	4c0d      	ldr	r4, [pc, #52]	@ (80056ac <__libc_init_array+0x3c>)
 8005676:	1b64      	subs	r4, r4, r5
 8005678:	10a4      	asrs	r4, r4, #2
 800567a:	2600      	movs	r6, #0
 800567c:	42a6      	cmp	r6, r4
 800567e:	d109      	bne.n	8005694 <__libc_init_array+0x24>
 8005680:	4d0b      	ldr	r5, [pc, #44]	@ (80056b0 <__libc_init_array+0x40>)
 8005682:	4c0c      	ldr	r4, [pc, #48]	@ (80056b4 <__libc_init_array+0x44>)
 8005684:	f001 fa76 	bl	8006b74 <_init>
 8005688:	1b64      	subs	r4, r4, r5
 800568a:	10a4      	asrs	r4, r4, #2
 800568c:	2600      	movs	r6, #0
 800568e:	42a6      	cmp	r6, r4
 8005690:	d105      	bne.n	800569e <__libc_init_array+0x2e>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	f855 3b04 	ldr.w	r3, [r5], #4
 8005698:	4798      	blx	r3
 800569a:	3601      	adds	r6, #1
 800569c:	e7ee      	b.n	800567c <__libc_init_array+0xc>
 800569e:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a2:	4798      	blx	r3
 80056a4:	3601      	adds	r6, #1
 80056a6:	e7f2      	b.n	800568e <__libc_init_array+0x1e>
 80056a8:	08006ddc 	.word	0x08006ddc
 80056ac:	08006ddc 	.word	0x08006ddc
 80056b0:	08006ddc 	.word	0x08006ddc
 80056b4:	08006de0 	.word	0x08006de0

080056b8 <__retarget_lock_init_recursive>:
 80056b8:	4770      	bx	lr

080056ba <__retarget_lock_acquire_recursive>:
 80056ba:	4770      	bx	lr

080056bc <__retarget_lock_release_recursive>:
 80056bc:	4770      	bx	lr
	...

080056c0 <_free_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4605      	mov	r5, r0
 80056c4:	2900      	cmp	r1, #0
 80056c6:	d041      	beq.n	800574c <_free_r+0x8c>
 80056c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056cc:	1f0c      	subs	r4, r1, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfb8      	it	lt
 80056d2:	18e4      	addlt	r4, r4, r3
 80056d4:	f000 ffb0 	bl	8006638 <__malloc_lock>
 80056d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <_free_r+0x90>)
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	b933      	cbnz	r3, 80056ec <_free_r+0x2c>
 80056de:	6063      	str	r3, [r4, #4]
 80056e0:	6014      	str	r4, [r2, #0]
 80056e2:	4628      	mov	r0, r5
 80056e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056e8:	f000 bfac 	b.w	8006644 <__malloc_unlock>
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	d908      	bls.n	8005702 <_free_r+0x42>
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	1821      	adds	r1, r4, r0
 80056f4:	428b      	cmp	r3, r1
 80056f6:	bf01      	itttt	eq
 80056f8:	6819      	ldreq	r1, [r3, #0]
 80056fa:	685b      	ldreq	r3, [r3, #4]
 80056fc:	1809      	addeq	r1, r1, r0
 80056fe:	6021      	streq	r1, [r4, #0]
 8005700:	e7ed      	b.n	80056de <_free_r+0x1e>
 8005702:	461a      	mov	r2, r3
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	b10b      	cbz	r3, 800570c <_free_r+0x4c>
 8005708:	42a3      	cmp	r3, r4
 800570a:	d9fa      	bls.n	8005702 <_free_r+0x42>
 800570c:	6811      	ldr	r1, [r2, #0]
 800570e:	1850      	adds	r0, r2, r1
 8005710:	42a0      	cmp	r0, r4
 8005712:	d10b      	bne.n	800572c <_free_r+0x6c>
 8005714:	6820      	ldr	r0, [r4, #0]
 8005716:	4401      	add	r1, r0
 8005718:	1850      	adds	r0, r2, r1
 800571a:	4283      	cmp	r3, r0
 800571c:	6011      	str	r1, [r2, #0]
 800571e:	d1e0      	bne.n	80056e2 <_free_r+0x22>
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	6053      	str	r3, [r2, #4]
 8005726:	4408      	add	r0, r1
 8005728:	6010      	str	r0, [r2, #0]
 800572a:	e7da      	b.n	80056e2 <_free_r+0x22>
 800572c:	d902      	bls.n	8005734 <_free_r+0x74>
 800572e:	230c      	movs	r3, #12
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	e7d6      	b.n	80056e2 <_free_r+0x22>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	1821      	adds	r1, r4, r0
 8005738:	428b      	cmp	r3, r1
 800573a:	bf04      	itt	eq
 800573c:	6819      	ldreq	r1, [r3, #0]
 800573e:	685b      	ldreq	r3, [r3, #4]
 8005740:	6063      	str	r3, [r4, #4]
 8005742:	bf04      	itt	eq
 8005744:	1809      	addeq	r1, r1, r0
 8005746:	6021      	streq	r1, [r4, #0]
 8005748:	6054      	str	r4, [r2, #4]
 800574a:	e7ca      	b.n	80056e2 <_free_r+0x22>
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	bf00      	nop
 8005750:	20000618 	.word	0x20000618

08005754 <_sungetc_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	1c4b      	adds	r3, r1, #1
 8005758:	4614      	mov	r4, r2
 800575a:	d103      	bne.n	8005764 <_sungetc_r+0x10>
 800575c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005760:	4628      	mov	r0, r5
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	8993      	ldrh	r3, [r2, #12]
 8005766:	f023 0320 	bic.w	r3, r3, #32
 800576a:	8193      	strh	r3, [r2, #12]
 800576c:	6853      	ldr	r3, [r2, #4]
 800576e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005770:	b2cd      	uxtb	r5, r1
 8005772:	b18a      	cbz	r2, 8005798 <_sungetc_r+0x44>
 8005774:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005776:	429a      	cmp	r2, r3
 8005778:	dd08      	ble.n	800578c <_sungetc_r+0x38>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	1e5a      	subs	r2, r3, #1
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	3301      	adds	r3, #1
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	e7e9      	b.n	8005760 <_sungetc_r+0xc>
 800578c:	4621      	mov	r1, r4
 800578e:	f000 ff5f 	bl	8006650 <__submore>
 8005792:	2800      	cmp	r0, #0
 8005794:	d0f1      	beq.n	800577a <_sungetc_r+0x26>
 8005796:	e7e1      	b.n	800575c <_sungetc_r+0x8>
 8005798:	6921      	ldr	r1, [r4, #16]
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	b141      	cbz	r1, 80057b0 <_sungetc_r+0x5c>
 800579e:	4291      	cmp	r1, r2
 80057a0:	d206      	bcs.n	80057b0 <_sungetc_r+0x5c>
 80057a2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80057a6:	42a9      	cmp	r1, r5
 80057a8:	d102      	bne.n	80057b0 <_sungetc_r+0x5c>
 80057aa:	3a01      	subs	r2, #1
 80057ac:	6022      	str	r2, [r4, #0]
 80057ae:	e7ea      	b.n	8005786 <_sungetc_r+0x32>
 80057b0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80057b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80057ba:	2303      	movs	r3, #3
 80057bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80057be:	4623      	mov	r3, r4
 80057c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	2301      	movs	r3, #1
 80057c8:	e7de      	b.n	8005788 <_sungetc_r+0x34>

080057ca <__ssrefill_r>:
 80057ca:	b510      	push	{r4, lr}
 80057cc:	460c      	mov	r4, r1
 80057ce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80057d0:	b169      	cbz	r1, 80057ee <__ssrefill_r+0x24>
 80057d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057d6:	4299      	cmp	r1, r3
 80057d8:	d001      	beq.n	80057de <__ssrefill_r+0x14>
 80057da:	f7ff ff71 	bl	80056c0 <_free_r>
 80057de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057e0:	6063      	str	r3, [r4, #4]
 80057e2:	2000      	movs	r0, #0
 80057e4:	6360      	str	r0, [r4, #52]	@ 0x34
 80057e6:	b113      	cbz	r3, 80057ee <__ssrefill_r+0x24>
 80057e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	6063      	str	r3, [r4, #4]
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f043 0320 	orr.w	r3, r3, #32
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005802:	e7f3      	b.n	80057ec <__ssrefill_r+0x22>

08005804 <__ssvfiscanf_r>:
 8005804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	460c      	mov	r4, r1
 800580a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800580e:	2100      	movs	r1, #0
 8005810:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005814:	49a5      	ldr	r1, [pc, #660]	@ (8005aac <__ssvfiscanf_r+0x2a8>)
 8005816:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005818:	f10d 0804 	add.w	r8, sp, #4
 800581c:	49a4      	ldr	r1, [pc, #656]	@ (8005ab0 <__ssvfiscanf_r+0x2ac>)
 800581e:	4fa5      	ldr	r7, [pc, #660]	@ (8005ab4 <__ssvfiscanf_r+0x2b0>)
 8005820:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005824:	4606      	mov	r6, r0
 8005826:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	7813      	ldrb	r3, [r2, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8158 	beq.w	8005ae2 <__ssvfiscanf_r+0x2de>
 8005832:	5cf9      	ldrb	r1, [r7, r3]
 8005834:	f011 0108 	ands.w	r1, r1, #8
 8005838:	f102 0501 	add.w	r5, r2, #1
 800583c:	d019      	beq.n	8005872 <__ssvfiscanf_r+0x6e>
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dd0f      	ble.n	8005864 <__ssvfiscanf_r+0x60>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	5cba      	ldrb	r2, [r7, r2]
 800584a:	0712      	lsls	r2, r2, #28
 800584c:	d401      	bmi.n	8005852 <__ssvfiscanf_r+0x4e>
 800584e:	462a      	mov	r2, r5
 8005850:	e7eb      	b.n	800582a <__ssvfiscanf_r+0x26>
 8005852:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005854:	3201      	adds	r2, #1
 8005856:	9245      	str	r2, [sp, #276]	@ 0x114
 8005858:	6862      	ldr	r2, [r4, #4]
 800585a:	3301      	adds	r3, #1
 800585c:	3a01      	subs	r2, #1
 800585e:	6062      	str	r2, [r4, #4]
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	e7ec      	b.n	800583e <__ssvfiscanf_r+0x3a>
 8005864:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005866:	4621      	mov	r1, r4
 8005868:	4630      	mov	r0, r6
 800586a:	4798      	blx	r3
 800586c:	2800      	cmp	r0, #0
 800586e:	d0e9      	beq.n	8005844 <__ssvfiscanf_r+0x40>
 8005870:	e7ed      	b.n	800584e <__ssvfiscanf_r+0x4a>
 8005872:	2b25      	cmp	r3, #37	@ 0x25
 8005874:	d012      	beq.n	800589c <__ssvfiscanf_r+0x98>
 8005876:	4699      	mov	r9, r3
 8005878:	6863      	ldr	r3, [r4, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f340 8093 	ble.w	80059a6 <__ssvfiscanf_r+0x1a2>
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	7813      	ldrb	r3, [r2, #0]
 8005884:	454b      	cmp	r3, r9
 8005886:	f040 812c 	bne.w	8005ae2 <__ssvfiscanf_r+0x2de>
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	3b01      	subs	r3, #1
 800588e:	6063      	str	r3, [r4, #4]
 8005890:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005892:	3201      	adds	r2, #1
 8005894:	3301      	adds	r3, #1
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	9345      	str	r3, [sp, #276]	@ 0x114
 800589a:	e7d8      	b.n	800584e <__ssvfiscanf_r+0x4a>
 800589c:	9141      	str	r1, [sp, #260]	@ 0x104
 800589e:	9143      	str	r1, [sp, #268]	@ 0x10c
 80058a0:	7853      	ldrb	r3, [r2, #1]
 80058a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80058a4:	bf02      	ittt	eq
 80058a6:	2310      	moveq	r3, #16
 80058a8:	1c95      	addeq	r5, r2, #2
 80058aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 80058ac:	220a      	movs	r2, #10
 80058ae:	46a9      	mov	r9, r5
 80058b0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80058b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d91e      	bls.n	80058fa <__ssvfiscanf_r+0xf6>
 80058bc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005ab8 <__ssvfiscanf_r+0x2b4>
 80058c0:	2203      	movs	r2, #3
 80058c2:	4650      	mov	r0, sl
 80058c4:	f7fa fcb4 	bl	8000230 <memchr>
 80058c8:	b138      	cbz	r0, 80058da <__ssvfiscanf_r+0xd6>
 80058ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80058cc:	eba0 000a 	sub.w	r0, r0, sl
 80058d0:	2301      	movs	r3, #1
 80058d2:	4083      	lsls	r3, r0
 80058d4:	4313      	orrs	r3, r2
 80058d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80058d8:	464d      	mov	r5, r9
 80058da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058de:	2b78      	cmp	r3, #120	@ 0x78
 80058e0:	d806      	bhi.n	80058f0 <__ssvfiscanf_r+0xec>
 80058e2:	2b57      	cmp	r3, #87	@ 0x57
 80058e4:	d810      	bhi.n	8005908 <__ssvfiscanf_r+0x104>
 80058e6:	2b25      	cmp	r3, #37	@ 0x25
 80058e8:	d0c5      	beq.n	8005876 <__ssvfiscanf_r+0x72>
 80058ea:	d857      	bhi.n	800599c <__ssvfiscanf_r+0x198>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d065      	beq.n	80059bc <__ssvfiscanf_r+0x1b8>
 80058f0:	2303      	movs	r3, #3
 80058f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80058f4:	230a      	movs	r3, #10
 80058f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80058f8:	e078      	b.n	80059ec <__ssvfiscanf_r+0x1e8>
 80058fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80058fc:	fb02 1103 	mla	r1, r2, r3, r1
 8005900:	3930      	subs	r1, #48	@ 0x30
 8005902:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005904:	464d      	mov	r5, r9
 8005906:	e7d2      	b.n	80058ae <__ssvfiscanf_r+0xaa>
 8005908:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800590c:	2a20      	cmp	r2, #32
 800590e:	d8ef      	bhi.n	80058f0 <__ssvfiscanf_r+0xec>
 8005910:	a101      	add	r1, pc, #4	@ (adr r1, 8005918 <__ssvfiscanf_r+0x114>)
 8005912:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005916:	bf00      	nop
 8005918:	080059cb 	.word	0x080059cb
 800591c:	080058f1 	.word	0x080058f1
 8005920:	080058f1 	.word	0x080058f1
 8005924:	08005a25 	.word	0x08005a25
 8005928:	080058f1 	.word	0x080058f1
 800592c:	080058f1 	.word	0x080058f1
 8005930:	080058f1 	.word	0x080058f1
 8005934:	080058f1 	.word	0x080058f1
 8005938:	080058f1 	.word	0x080058f1
 800593c:	080058f1 	.word	0x080058f1
 8005940:	080058f1 	.word	0x080058f1
 8005944:	08005a3b 	.word	0x08005a3b
 8005948:	08005a21 	.word	0x08005a21
 800594c:	080059a3 	.word	0x080059a3
 8005950:	080059a3 	.word	0x080059a3
 8005954:	080059a3 	.word	0x080059a3
 8005958:	080058f1 	.word	0x080058f1
 800595c:	080059dd 	.word	0x080059dd
 8005960:	080058f1 	.word	0x080058f1
 8005964:	080058f1 	.word	0x080058f1
 8005968:	080058f1 	.word	0x080058f1
 800596c:	080058f1 	.word	0x080058f1
 8005970:	08005a4b 	.word	0x08005a4b
 8005974:	080059e5 	.word	0x080059e5
 8005978:	080059c3 	.word	0x080059c3
 800597c:	080058f1 	.word	0x080058f1
 8005980:	080058f1 	.word	0x080058f1
 8005984:	08005a47 	.word	0x08005a47
 8005988:	080058f1 	.word	0x080058f1
 800598c:	08005a21 	.word	0x08005a21
 8005990:	080058f1 	.word	0x080058f1
 8005994:	080058f1 	.word	0x080058f1
 8005998:	080059cb 	.word	0x080059cb
 800599c:	3b45      	subs	r3, #69	@ 0x45
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d8a6      	bhi.n	80058f0 <__ssvfiscanf_r+0xec>
 80059a2:	2305      	movs	r3, #5
 80059a4:	e021      	b.n	80059ea <__ssvfiscanf_r+0x1e6>
 80059a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80059a8:	4621      	mov	r1, r4
 80059aa:	4630      	mov	r0, r6
 80059ac:	4798      	blx	r3
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f43f af66 	beq.w	8005880 <__ssvfiscanf_r+0x7c>
 80059b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f040 808b 	bne.w	8005ad2 <__ssvfiscanf_r+0x2ce>
 80059bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059c0:	e08b      	b.n	8005ada <__ssvfiscanf_r+0x2d6>
 80059c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80059c4:	f042 0220 	orr.w	r2, r2, #32
 80059c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80059ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80059cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80059d2:	2210      	movs	r2, #16
 80059d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80059d6:	9242      	str	r2, [sp, #264]	@ 0x108
 80059d8:	d902      	bls.n	80059e0 <__ssvfiscanf_r+0x1dc>
 80059da:	e005      	b.n	80059e8 <__ssvfiscanf_r+0x1e4>
 80059dc:	2300      	movs	r3, #0
 80059de:	9342      	str	r3, [sp, #264]	@ 0x108
 80059e0:	2303      	movs	r3, #3
 80059e2:	e002      	b.n	80059ea <__ssvfiscanf_r+0x1e6>
 80059e4:	2308      	movs	r3, #8
 80059e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80059e8:	2304      	movs	r3, #4
 80059ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dd39      	ble.n	8005a66 <__ssvfiscanf_r+0x262>
 80059f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80059f4:	0659      	lsls	r1, r3, #25
 80059f6:	d404      	bmi.n	8005a02 <__ssvfiscanf_r+0x1fe>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	781a      	ldrb	r2, [r3, #0]
 80059fc:	5cba      	ldrb	r2, [r7, r2]
 80059fe:	0712      	lsls	r2, r2, #28
 8005a00:	d438      	bmi.n	8005a74 <__ssvfiscanf_r+0x270>
 8005a02:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	dc47      	bgt.n	8005a98 <__ssvfiscanf_r+0x294>
 8005a08:	466b      	mov	r3, sp
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	a941      	add	r1, sp, #260	@ 0x104
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f000 fbde 	bl	80061d0 <_scanf_chars>
 8005a14:	2801      	cmp	r0, #1
 8005a16:	d064      	beq.n	8005ae2 <__ssvfiscanf_r+0x2de>
 8005a18:	2802      	cmp	r0, #2
 8005a1a:	f47f af18 	bne.w	800584e <__ssvfiscanf_r+0x4a>
 8005a1e:	e7c9      	b.n	80059b4 <__ssvfiscanf_r+0x1b0>
 8005a20:	220a      	movs	r2, #10
 8005a22:	e7d7      	b.n	80059d4 <__ssvfiscanf_r+0x1d0>
 8005a24:	4629      	mov	r1, r5
 8005a26:	4640      	mov	r0, r8
 8005a28:	f000 fd20 	bl	800646c <__sccl>
 8005a2c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a32:	9341      	str	r3, [sp, #260]	@ 0x104
 8005a34:	4605      	mov	r5, r0
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7d7      	b.n	80059ea <__ssvfiscanf_r+0x1e6>
 8005a3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a40:	9341      	str	r3, [sp, #260]	@ 0x104
 8005a42:	2300      	movs	r3, #0
 8005a44:	e7d1      	b.n	80059ea <__ssvfiscanf_r+0x1e6>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e7cf      	b.n	80059ea <__ssvfiscanf_r+0x1e6>
 8005a4a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005a4c:	06c3      	lsls	r3, r0, #27
 8005a4e:	f53f aefe 	bmi.w	800584e <__ssvfiscanf_r+0x4a>
 8005a52:	9b00      	ldr	r3, [sp, #0]
 8005a54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005a56:	1d19      	adds	r1, r3, #4
 8005a58:	9100      	str	r1, [sp, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	07c0      	lsls	r0, r0, #31
 8005a5e:	bf4c      	ite	mi
 8005a60:	801a      	strhmi	r2, [r3, #0]
 8005a62:	601a      	strpl	r2, [r3, #0]
 8005a64:	e6f3      	b.n	800584e <__ssvfiscanf_r+0x4a>
 8005a66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4798      	blx	r3
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0bf      	beq.n	80059f2 <__ssvfiscanf_r+0x1ee>
 8005a72:	e79f      	b.n	80059b4 <__ssvfiscanf_r+0x1b0>
 8005a74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005a76:	3201      	adds	r2, #1
 8005a78:	9245      	str	r2, [sp, #276]	@ 0x114
 8005a7a:	6862      	ldr	r2, [r4, #4]
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	6062      	str	r2, [r4, #4]
 8005a82:	dd02      	ble.n	8005a8a <__ssvfiscanf_r+0x286>
 8005a84:	3301      	adds	r3, #1
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	e7b6      	b.n	80059f8 <__ssvfiscanf_r+0x1f4>
 8005a8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4798      	blx	r3
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0b0      	beq.n	80059f8 <__ssvfiscanf_r+0x1f4>
 8005a96:	e78d      	b.n	80059b4 <__ssvfiscanf_r+0x1b0>
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	dc0f      	bgt.n	8005abc <__ssvfiscanf_r+0x2b8>
 8005a9c:	466b      	mov	r3, sp
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	a941      	add	r1, sp, #260	@ 0x104
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f000 fbee 	bl	8006284 <_scanf_i>
 8005aa8:	e7b4      	b.n	8005a14 <__ssvfiscanf_r+0x210>
 8005aaa:	bf00      	nop
 8005aac:	08005755 	.word	0x08005755
 8005ab0:	080057cb 	.word	0x080057cb
 8005ab4:	08006cd3 	.word	0x08006cd3
 8005ab8:	08006c84 	.word	0x08006c84
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <__ssvfiscanf_r+0x2e4>)
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f43f aec5 	beq.w	800584e <__ssvfiscanf_r+0x4a>
 8005ac4:	466b      	mov	r3, sp
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	a941      	add	r1, sp, #260	@ 0x104
 8005aca:	4630      	mov	r0, r6
 8005acc:	f3af 8000 	nop.w
 8005ad0:	e7a0      	b.n	8005a14 <__ssvfiscanf_r+0x210>
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	065b      	lsls	r3, r3, #25
 8005ad6:	f53f af71 	bmi.w	80059bc <__ssvfiscanf_r+0x1b8>
 8005ada:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005ae4:	e7f9      	b.n	8005ada <__ssvfiscanf_r+0x2d6>
 8005ae6:	bf00      	nop
 8005ae8:	00000000 	.word	0x00000000

08005aec <__sfputc_r>:
 8005aec:	6893      	ldr	r3, [r2, #8]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	b410      	push	{r4}
 8005af4:	6093      	str	r3, [r2, #8]
 8005af6:	da08      	bge.n	8005b0a <__sfputc_r+0x1e>
 8005af8:	6994      	ldr	r4, [r2, #24]
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	db01      	blt.n	8005b02 <__sfputc_r+0x16>
 8005afe:	290a      	cmp	r1, #10
 8005b00:	d103      	bne.n	8005b0a <__sfputc_r+0x1e>
 8005b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b06:	f000 bef7 	b.w	80068f8 <__swbuf_r>
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	1c58      	adds	r0, r3, #1
 8005b0e:	6010      	str	r0, [r2, #0]
 8005b10:	7019      	strb	r1, [r3, #0]
 8005b12:	4608      	mov	r0, r1
 8005b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <__sfputs_r>:
 8005b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460f      	mov	r7, r1
 8005b20:	4614      	mov	r4, r2
 8005b22:	18d5      	adds	r5, r2, r3
 8005b24:	42ac      	cmp	r4, r5
 8005b26:	d101      	bne.n	8005b2c <__sfputs_r+0x12>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e007      	b.n	8005b3c <__sfputs_r+0x22>
 8005b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b30:	463a      	mov	r2, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff ffda 	bl	8005aec <__sfputc_r>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d1f3      	bne.n	8005b24 <__sfputs_r+0xa>
 8005b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b40 <_vfiprintf_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	460d      	mov	r5, r1
 8005b46:	b09d      	sub	sp, #116	@ 0x74
 8005b48:	4614      	mov	r4, r2
 8005b4a:	4698      	mov	r8, r3
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	b118      	cbz	r0, 8005b58 <_vfiprintf_r+0x18>
 8005b50:	6a03      	ldr	r3, [r0, #32]
 8005b52:	b90b      	cbnz	r3, 8005b58 <_vfiprintf_r+0x18>
 8005b54:	f7ff fcf0 	bl	8005538 <__sinit>
 8005b58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b5a:	07d9      	lsls	r1, r3, #31
 8005b5c:	d405      	bmi.n	8005b6a <_vfiprintf_r+0x2a>
 8005b5e:	89ab      	ldrh	r3, [r5, #12]
 8005b60:	059a      	lsls	r2, r3, #22
 8005b62:	d402      	bmi.n	8005b6a <_vfiprintf_r+0x2a>
 8005b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b66:	f7ff fda8 	bl	80056ba <__retarget_lock_acquire_recursive>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	071b      	lsls	r3, r3, #28
 8005b6e:	d501      	bpl.n	8005b74 <_vfiprintf_r+0x34>
 8005b70:	692b      	ldr	r3, [r5, #16]
 8005b72:	b99b      	cbnz	r3, 8005b9c <_vfiprintf_r+0x5c>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4630      	mov	r0, r6
 8005b78:	f000 fefc 	bl	8006974 <__swsetup_r>
 8005b7c:	b170      	cbz	r0, 8005b9c <_vfiprintf_r+0x5c>
 8005b7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b80:	07dc      	lsls	r4, r3, #31
 8005b82:	d504      	bpl.n	8005b8e <_vfiprintf_r+0x4e>
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b88:	b01d      	add	sp, #116	@ 0x74
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	0598      	lsls	r0, r3, #22
 8005b92:	d4f7      	bmi.n	8005b84 <_vfiprintf_r+0x44>
 8005b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b96:	f7ff fd91 	bl	80056bc <__retarget_lock_release_recursive>
 8005b9a:	e7f3      	b.n	8005b84 <_vfiprintf_r+0x44>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005baa:	2330      	movs	r3, #48	@ 0x30
 8005bac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d5c <_vfiprintf_r+0x21c>
 8005bb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bb4:	f04f 0901 	mov.w	r9, #1
 8005bb8:	4623      	mov	r3, r4
 8005bba:	469a      	mov	sl, r3
 8005bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc0:	b10a      	cbz	r2, 8005bc6 <_vfiprintf_r+0x86>
 8005bc2:	2a25      	cmp	r2, #37	@ 0x25
 8005bc4:	d1f9      	bne.n	8005bba <_vfiprintf_r+0x7a>
 8005bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8005bca:	d00b      	beq.n	8005be4 <_vfiprintf_r+0xa4>
 8005bcc:	465b      	mov	r3, fp
 8005bce:	4622      	mov	r2, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ffa1 	bl	8005b1a <__sfputs_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	f000 80a7 	beq.w	8005d2c <_vfiprintf_r+0x1ec>
 8005bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005be0:	445a      	add	r2, fp
 8005be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005be4:	f89a 3000 	ldrb.w	r3, [sl]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 809f 	beq.w	8005d2c <_vfiprintf_r+0x1ec>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf8:	f10a 0a01 	add.w	sl, sl, #1
 8005bfc:	9304      	str	r3, [sp, #16]
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c04:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c06:	4654      	mov	r4, sl
 8005c08:	2205      	movs	r2, #5
 8005c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0e:	4853      	ldr	r0, [pc, #332]	@ (8005d5c <_vfiprintf_r+0x21c>)
 8005c10:	f7fa fb0e 	bl	8000230 <memchr>
 8005c14:	9a04      	ldr	r2, [sp, #16]
 8005c16:	b9d8      	cbnz	r0, 8005c50 <_vfiprintf_r+0x110>
 8005c18:	06d1      	lsls	r1, r2, #27
 8005c1a:	bf44      	itt	mi
 8005c1c:	2320      	movmi	r3, #32
 8005c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c22:	0713      	lsls	r3, r2, #28
 8005c24:	bf44      	itt	mi
 8005c26:	232b      	movmi	r3, #43	@ 0x2b
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c32:	d015      	beq.n	8005c60 <_vfiprintf_r+0x120>
 8005c34:	9a07      	ldr	r2, [sp, #28]
 8005c36:	4654      	mov	r4, sl
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f04f 0c0a 	mov.w	ip, #10
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c44:	3b30      	subs	r3, #48	@ 0x30
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d94b      	bls.n	8005ce2 <_vfiprintf_r+0x1a2>
 8005c4a:	b1b0      	cbz	r0, 8005c7a <_vfiprintf_r+0x13a>
 8005c4c:	9207      	str	r2, [sp, #28]
 8005c4e:	e014      	b.n	8005c7a <_vfiprintf_r+0x13a>
 8005c50:	eba0 0308 	sub.w	r3, r0, r8
 8005c54:	fa09 f303 	lsl.w	r3, r9, r3
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	46a2      	mov	sl, r4
 8005c5e:	e7d2      	b.n	8005c06 <_vfiprintf_r+0xc6>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d19      	adds	r1, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9103      	str	r1, [sp, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bfbb      	ittet	lt
 8005c6c:	425b      	neglt	r3, r3
 8005c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c72:	9307      	strge	r3, [sp, #28]
 8005c74:	9307      	strlt	r3, [sp, #28]
 8005c76:	bfb8      	it	lt
 8005c78:	9204      	strlt	r2, [sp, #16]
 8005c7a:	7823      	ldrb	r3, [r4, #0]
 8005c7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c7e:	d10a      	bne.n	8005c96 <_vfiprintf_r+0x156>
 8005c80:	7863      	ldrb	r3, [r4, #1]
 8005c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c84:	d132      	bne.n	8005cec <_vfiprintf_r+0x1ac>
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	9203      	str	r2, [sp, #12]
 8005c8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c92:	3402      	adds	r4, #2
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d6c <_vfiprintf_r+0x22c>
 8005c9a:	7821      	ldrb	r1, [r4, #0]
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	f7fa fac6 	bl	8000230 <memchr>
 8005ca4:	b138      	cbz	r0, 8005cb6 <_vfiprintf_r+0x176>
 8005ca6:	9b04      	ldr	r3, [sp, #16]
 8005ca8:	eba0 000a 	sub.w	r0, r0, sl
 8005cac:	2240      	movs	r2, #64	@ 0x40
 8005cae:	4082      	lsls	r2, r0
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	3401      	adds	r4, #1
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cba:	4829      	ldr	r0, [pc, #164]	@ (8005d60 <_vfiprintf_r+0x220>)
 8005cbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cc0:	2206      	movs	r2, #6
 8005cc2:	f7fa fab5 	bl	8000230 <memchr>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d03f      	beq.n	8005d4a <_vfiprintf_r+0x20a>
 8005cca:	4b26      	ldr	r3, [pc, #152]	@ (8005d64 <_vfiprintf_r+0x224>)
 8005ccc:	bb1b      	cbnz	r3, 8005d16 <_vfiprintf_r+0x1d6>
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	3307      	adds	r3, #7
 8005cd2:	f023 0307 	bic.w	r3, r3, #7
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	9303      	str	r3, [sp, #12]
 8005cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cdc:	443b      	add	r3, r7
 8005cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ce0:	e76a      	b.n	8005bb8 <_vfiprintf_r+0x78>
 8005ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	2001      	movs	r0, #1
 8005cea:	e7a8      	b.n	8005c3e <_vfiprintf_r+0xfe>
 8005cec:	2300      	movs	r3, #0
 8005cee:	3401      	adds	r4, #1
 8005cf0:	9305      	str	r3, [sp, #20]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f04f 0c0a 	mov.w	ip, #10
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cfe:	3a30      	subs	r2, #48	@ 0x30
 8005d00:	2a09      	cmp	r2, #9
 8005d02:	d903      	bls.n	8005d0c <_vfiprintf_r+0x1cc>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0c6      	beq.n	8005c96 <_vfiprintf_r+0x156>
 8005d08:	9105      	str	r1, [sp, #20]
 8005d0a:	e7c4      	b.n	8005c96 <_vfiprintf_r+0x156>
 8005d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d10:	4604      	mov	r4, r0
 8005d12:	2301      	movs	r3, #1
 8005d14:	e7f0      	b.n	8005cf8 <_vfiprintf_r+0x1b8>
 8005d16:	ab03      	add	r3, sp, #12
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	462a      	mov	r2, r5
 8005d1c:	4b12      	ldr	r3, [pc, #72]	@ (8005d68 <_vfiprintf_r+0x228>)
 8005d1e:	a904      	add	r1, sp, #16
 8005d20:	4630      	mov	r0, r6
 8005d22:	f3af 8000 	nop.w
 8005d26:	4607      	mov	r7, r0
 8005d28:	1c78      	adds	r0, r7, #1
 8005d2a:	d1d6      	bne.n	8005cda <_vfiprintf_r+0x19a>
 8005d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d2e:	07d9      	lsls	r1, r3, #31
 8005d30:	d405      	bmi.n	8005d3e <_vfiprintf_r+0x1fe>
 8005d32:	89ab      	ldrh	r3, [r5, #12]
 8005d34:	059a      	lsls	r2, r3, #22
 8005d36:	d402      	bmi.n	8005d3e <_vfiprintf_r+0x1fe>
 8005d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d3a:	f7ff fcbf 	bl	80056bc <__retarget_lock_release_recursive>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	065b      	lsls	r3, r3, #25
 8005d42:	f53f af1f 	bmi.w	8005b84 <_vfiprintf_r+0x44>
 8005d46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d48:	e71e      	b.n	8005b88 <_vfiprintf_r+0x48>
 8005d4a:	ab03      	add	r3, sp, #12
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	462a      	mov	r2, r5
 8005d50:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <_vfiprintf_r+0x228>)
 8005d52:	a904      	add	r1, sp, #16
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 f91b 	bl	8005f90 <_printf_i>
 8005d5a:	e7e4      	b.n	8005d26 <_vfiprintf_r+0x1e6>
 8005d5c:	08006c88 	.word	0x08006c88
 8005d60:	08006c8e 	.word	0x08006c8e
 8005d64:	00000000 	.word	0x00000000
 8005d68:	08005b1b 	.word	0x08005b1b
 8005d6c:	08006c84 	.word	0x08006c84

08005d70 <sbrk_aligned>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4e0f      	ldr	r6, [pc, #60]	@ (8005db0 <sbrk_aligned+0x40>)
 8005d74:	460c      	mov	r4, r1
 8005d76:	6831      	ldr	r1, [r6, #0]
 8005d78:	4605      	mov	r5, r0
 8005d7a:	b911      	cbnz	r1, 8005d82 <sbrk_aligned+0x12>
 8005d7c:	f000 fed4 	bl	8006b28 <_sbrk_r>
 8005d80:	6030      	str	r0, [r6, #0]
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 fecf 	bl	8006b28 <_sbrk_r>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	d103      	bne.n	8005d96 <sbrk_aligned+0x26>
 8005d8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d92:	4620      	mov	r0, r4
 8005d94:	bd70      	pop	{r4, r5, r6, pc}
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d0f8      	beq.n	8005d92 <sbrk_aligned+0x22>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 fec0 	bl	8006b28 <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d1f2      	bne.n	8005d92 <sbrk_aligned+0x22>
 8005dac:	e7ef      	b.n	8005d8e <sbrk_aligned+0x1e>
 8005dae:	bf00      	nop
 8005db0:	20000614 	.word	0x20000614

08005db4 <_malloc_r>:
 8005db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db8:	1ccd      	adds	r5, r1, #3
 8005dba:	f025 0503 	bic.w	r5, r5, #3
 8005dbe:	3508      	adds	r5, #8
 8005dc0:	2d0c      	cmp	r5, #12
 8005dc2:	bf38      	it	cc
 8005dc4:	250c      	movcc	r5, #12
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	4606      	mov	r6, r0
 8005dca:	db01      	blt.n	8005dd0 <_malloc_r+0x1c>
 8005dcc:	42a9      	cmp	r1, r5
 8005dce:	d904      	bls.n	8005dda <_malloc_r+0x26>
 8005dd0:	230c      	movs	r3, #12
 8005dd2:	6033      	str	r3, [r6, #0]
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eb0 <_malloc_r+0xfc>
 8005dde:	f000 fc2b 	bl	8006638 <__malloc_lock>
 8005de2:	f8d8 3000 	ldr.w	r3, [r8]
 8005de6:	461c      	mov	r4, r3
 8005de8:	bb44      	cbnz	r4, 8005e3c <_malloc_r+0x88>
 8005dea:	4629      	mov	r1, r5
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7ff ffbf 	bl	8005d70 <sbrk_aligned>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	4604      	mov	r4, r0
 8005df6:	d158      	bne.n	8005eaa <_malloc_r+0xf6>
 8005df8:	f8d8 4000 	ldr.w	r4, [r8]
 8005dfc:	4627      	mov	r7, r4
 8005dfe:	2f00      	cmp	r7, #0
 8005e00:	d143      	bne.n	8005e8a <_malloc_r+0xd6>
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	d04b      	beq.n	8005e9e <_malloc_r+0xea>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	eb04 0903 	add.w	r9, r4, r3
 8005e10:	f000 fe8a 	bl	8006b28 <_sbrk_r>
 8005e14:	4581      	cmp	r9, r0
 8005e16:	d142      	bne.n	8005e9e <_malloc_r+0xea>
 8005e18:	6821      	ldr	r1, [r4, #0]
 8005e1a:	1a6d      	subs	r5, r5, r1
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ffa6 	bl	8005d70 <sbrk_aligned>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d03a      	beq.n	8005e9e <_malloc_r+0xea>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	442b      	add	r3, r5
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	bb62      	cbnz	r2, 8005e90 <_malloc_r+0xdc>
 8005e36:	f8c8 7000 	str.w	r7, [r8]
 8005e3a:	e00f      	b.n	8005e5c <_malloc_r+0xa8>
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	1b52      	subs	r2, r2, r5
 8005e40:	d420      	bmi.n	8005e84 <_malloc_r+0xd0>
 8005e42:	2a0b      	cmp	r2, #11
 8005e44:	d917      	bls.n	8005e76 <_malloc_r+0xc2>
 8005e46:	1961      	adds	r1, r4, r5
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	6025      	str	r5, [r4, #0]
 8005e4c:	bf18      	it	ne
 8005e4e:	6059      	strne	r1, [r3, #4]
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	bf08      	it	eq
 8005e54:	f8c8 1000 	streq.w	r1, [r8]
 8005e58:	5162      	str	r2, [r4, r5]
 8005e5a:	604b      	str	r3, [r1, #4]
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 fbf1 	bl	8006644 <__malloc_unlock>
 8005e62:	f104 000b 	add.w	r0, r4, #11
 8005e66:	1d23      	adds	r3, r4, #4
 8005e68:	f020 0007 	bic.w	r0, r0, #7
 8005e6c:	1ac2      	subs	r2, r0, r3
 8005e6e:	bf1c      	itt	ne
 8005e70:	1a1b      	subne	r3, r3, r0
 8005e72:	50a3      	strne	r3, [r4, r2]
 8005e74:	e7af      	b.n	8005dd6 <_malloc_r+0x22>
 8005e76:	6862      	ldr	r2, [r4, #4]
 8005e78:	42a3      	cmp	r3, r4
 8005e7a:	bf0c      	ite	eq
 8005e7c:	f8c8 2000 	streq.w	r2, [r8]
 8005e80:	605a      	strne	r2, [r3, #4]
 8005e82:	e7eb      	b.n	8005e5c <_malloc_r+0xa8>
 8005e84:	4623      	mov	r3, r4
 8005e86:	6864      	ldr	r4, [r4, #4]
 8005e88:	e7ae      	b.n	8005de8 <_malloc_r+0x34>
 8005e8a:	463c      	mov	r4, r7
 8005e8c:	687f      	ldr	r7, [r7, #4]
 8005e8e:	e7b6      	b.n	8005dfe <_malloc_r+0x4a>
 8005e90:	461a      	mov	r2, r3
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d1fb      	bne.n	8005e90 <_malloc_r+0xdc>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6053      	str	r3, [r2, #4]
 8005e9c:	e7de      	b.n	8005e5c <_malloc_r+0xa8>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f000 fbce 	bl	8006644 <__malloc_unlock>
 8005ea8:	e794      	b.n	8005dd4 <_malloc_r+0x20>
 8005eaa:	6005      	str	r5, [r0, #0]
 8005eac:	e7d6      	b.n	8005e5c <_malloc_r+0xa8>
 8005eae:	bf00      	nop
 8005eb0:	20000618 	.word	0x20000618

08005eb4 <_printf_common>:
 8005eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	4616      	mov	r6, r2
 8005eba:	4698      	mov	r8, r3
 8005ebc:	688a      	ldr	r2, [r1, #8]
 8005ebe:	690b      	ldr	r3, [r1, #16]
 8005ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	bfb8      	it	lt
 8005ec8:	4613      	movlt	r3, r2
 8005eca:	6033      	str	r3, [r6, #0]
 8005ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	b10a      	cbz	r2, 8005eda <_printf_common+0x26>
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	0699      	lsls	r1, r3, #26
 8005ede:	bf42      	ittt	mi
 8005ee0:	6833      	ldrmi	r3, [r6, #0]
 8005ee2:	3302      	addmi	r3, #2
 8005ee4:	6033      	strmi	r3, [r6, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	f015 0506 	ands.w	r5, r5, #6
 8005eec:	d106      	bne.n	8005efc <_printf_common+0x48>
 8005eee:	f104 0a19 	add.w	sl, r4, #25
 8005ef2:	68e3      	ldr	r3, [r4, #12]
 8005ef4:	6832      	ldr	r2, [r6, #0]
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	dc26      	bgt.n	8005f4a <_printf_common+0x96>
 8005efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	3b00      	subs	r3, #0
 8005f04:	bf18      	it	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	0692      	lsls	r2, r2, #26
 8005f0a:	d42b      	bmi.n	8005f64 <_printf_common+0xb0>
 8005f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f10:	4641      	mov	r1, r8
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c8      	blx	r9
 8005f16:	3001      	adds	r0, #1
 8005f18:	d01e      	beq.n	8005f58 <_printf_common+0xa4>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	6922      	ldr	r2, [r4, #16]
 8005f1e:	f003 0306 	and.w	r3, r3, #6
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	bf02      	ittt	eq
 8005f26:	68e5      	ldreq	r5, [r4, #12]
 8005f28:	6833      	ldreq	r3, [r6, #0]
 8005f2a:	1aed      	subeq	r5, r5, r3
 8005f2c:	68a3      	ldr	r3, [r4, #8]
 8005f2e:	bf0c      	ite	eq
 8005f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f34:	2500      	movne	r5, #0
 8005f36:	4293      	cmp	r3, r2
 8005f38:	bfc4      	itt	gt
 8005f3a:	1a9b      	subgt	r3, r3, r2
 8005f3c:	18ed      	addgt	r5, r5, r3
 8005f3e:	2600      	movs	r6, #0
 8005f40:	341a      	adds	r4, #26
 8005f42:	42b5      	cmp	r5, r6
 8005f44:	d11a      	bne.n	8005f7c <_printf_common+0xc8>
 8005f46:	2000      	movs	r0, #0
 8005f48:	e008      	b.n	8005f5c <_printf_common+0xa8>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	4641      	mov	r1, r8
 8005f50:	4638      	mov	r0, r7
 8005f52:	47c8      	blx	r9
 8005f54:	3001      	adds	r0, #1
 8005f56:	d103      	bne.n	8005f60 <_printf_common+0xac>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f60:	3501      	adds	r5, #1
 8005f62:	e7c6      	b.n	8005ef2 <_printf_common+0x3e>
 8005f64:	18e1      	adds	r1, r4, r3
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	2030      	movs	r0, #48	@ 0x30
 8005f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f6e:	4422      	add	r2, r4
 8005f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f78:	3302      	adds	r3, #2
 8005f7a:	e7c7      	b.n	8005f0c <_printf_common+0x58>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4641      	mov	r1, r8
 8005f82:	4638      	mov	r0, r7
 8005f84:	47c8      	blx	r9
 8005f86:	3001      	adds	r0, #1
 8005f88:	d0e6      	beq.n	8005f58 <_printf_common+0xa4>
 8005f8a:	3601      	adds	r6, #1
 8005f8c:	e7d9      	b.n	8005f42 <_printf_common+0x8e>
	...

08005f90 <_printf_i>:
 8005f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f94:	7e0f      	ldrb	r7, [r1, #24]
 8005f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f98:	2f78      	cmp	r7, #120	@ 0x78
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	469a      	mov	sl, r3
 8005fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fa6:	d807      	bhi.n	8005fb8 <_printf_i+0x28>
 8005fa8:	2f62      	cmp	r7, #98	@ 0x62
 8005faa:	d80a      	bhi.n	8005fc2 <_printf_i+0x32>
 8005fac:	2f00      	cmp	r7, #0
 8005fae:	f000 80d2 	beq.w	8006156 <_printf_i+0x1c6>
 8005fb2:	2f58      	cmp	r7, #88	@ 0x58
 8005fb4:	f000 80b9 	beq.w	800612a <_printf_i+0x19a>
 8005fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fc0:	e03a      	b.n	8006038 <_printf_i+0xa8>
 8005fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fc6:	2b15      	cmp	r3, #21
 8005fc8:	d8f6      	bhi.n	8005fb8 <_printf_i+0x28>
 8005fca:	a101      	add	r1, pc, #4	@ (adr r1, 8005fd0 <_printf_i+0x40>)
 8005fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fd0:	08006029 	.word	0x08006029
 8005fd4:	0800603d 	.word	0x0800603d
 8005fd8:	08005fb9 	.word	0x08005fb9
 8005fdc:	08005fb9 	.word	0x08005fb9
 8005fe0:	08005fb9 	.word	0x08005fb9
 8005fe4:	08005fb9 	.word	0x08005fb9
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	08005fb9 	.word	0x08005fb9
 8005ff0:	08005fb9 	.word	0x08005fb9
 8005ff4:	08005fb9 	.word	0x08005fb9
 8005ff8:	08005fb9 	.word	0x08005fb9
 8005ffc:	0800613d 	.word	0x0800613d
 8006000:	08006067 	.word	0x08006067
 8006004:	080060f7 	.word	0x080060f7
 8006008:	08005fb9 	.word	0x08005fb9
 800600c:	08005fb9 	.word	0x08005fb9
 8006010:	0800615f 	.word	0x0800615f
 8006014:	08005fb9 	.word	0x08005fb9
 8006018:	08006067 	.word	0x08006067
 800601c:	08005fb9 	.word	0x08005fb9
 8006020:	08005fb9 	.word	0x08005fb9
 8006024:	080060ff 	.word	0x080060ff
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	1d1a      	adds	r2, r3, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6032      	str	r2, [r6, #0]
 8006030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006038:	2301      	movs	r3, #1
 800603a:	e09d      	b.n	8006178 <_printf_i+0x1e8>
 800603c:	6833      	ldr	r3, [r6, #0]
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	1d19      	adds	r1, r3, #4
 8006042:	6031      	str	r1, [r6, #0]
 8006044:	0606      	lsls	r6, r0, #24
 8006046:	d501      	bpl.n	800604c <_printf_i+0xbc>
 8006048:	681d      	ldr	r5, [r3, #0]
 800604a:	e003      	b.n	8006054 <_printf_i+0xc4>
 800604c:	0645      	lsls	r5, r0, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0xb8>
 8006050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006054:	2d00      	cmp	r5, #0
 8006056:	da03      	bge.n	8006060 <_printf_i+0xd0>
 8006058:	232d      	movs	r3, #45	@ 0x2d
 800605a:	426d      	negs	r5, r5
 800605c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006060:	4859      	ldr	r0, [pc, #356]	@ (80061c8 <_printf_i+0x238>)
 8006062:	230a      	movs	r3, #10
 8006064:	e011      	b.n	800608a <_printf_i+0xfa>
 8006066:	6821      	ldr	r1, [r4, #0]
 8006068:	6833      	ldr	r3, [r6, #0]
 800606a:	0608      	lsls	r0, r1, #24
 800606c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006070:	d402      	bmi.n	8006078 <_printf_i+0xe8>
 8006072:	0649      	lsls	r1, r1, #25
 8006074:	bf48      	it	mi
 8006076:	b2ad      	uxthmi	r5, r5
 8006078:	2f6f      	cmp	r7, #111	@ 0x6f
 800607a:	4853      	ldr	r0, [pc, #332]	@ (80061c8 <_printf_i+0x238>)
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	bf14      	ite	ne
 8006080:	230a      	movne	r3, #10
 8006082:	2308      	moveq	r3, #8
 8006084:	2100      	movs	r1, #0
 8006086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800608a:	6866      	ldr	r6, [r4, #4]
 800608c:	60a6      	str	r6, [r4, #8]
 800608e:	2e00      	cmp	r6, #0
 8006090:	bfa2      	ittt	ge
 8006092:	6821      	ldrge	r1, [r4, #0]
 8006094:	f021 0104 	bicge.w	r1, r1, #4
 8006098:	6021      	strge	r1, [r4, #0]
 800609a:	b90d      	cbnz	r5, 80060a0 <_printf_i+0x110>
 800609c:	2e00      	cmp	r6, #0
 800609e:	d04b      	beq.n	8006138 <_printf_i+0x1a8>
 80060a0:	4616      	mov	r6, r2
 80060a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80060a6:	fb03 5711 	mls	r7, r3, r1, r5
 80060aa:	5dc7      	ldrb	r7, [r0, r7]
 80060ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060b0:	462f      	mov	r7, r5
 80060b2:	42bb      	cmp	r3, r7
 80060b4:	460d      	mov	r5, r1
 80060b6:	d9f4      	bls.n	80060a2 <_printf_i+0x112>
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d10b      	bne.n	80060d4 <_printf_i+0x144>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	07df      	lsls	r7, r3, #31
 80060c0:	d508      	bpl.n	80060d4 <_printf_i+0x144>
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	6861      	ldr	r1, [r4, #4]
 80060c6:	4299      	cmp	r1, r3
 80060c8:	bfde      	ittt	le
 80060ca:	2330      	movle	r3, #48	@ 0x30
 80060cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80060d4:	1b92      	subs	r2, r2, r6
 80060d6:	6122      	str	r2, [r4, #16]
 80060d8:	f8cd a000 	str.w	sl, [sp]
 80060dc:	464b      	mov	r3, r9
 80060de:	aa03      	add	r2, sp, #12
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7ff fee6 	bl	8005eb4 <_printf_common>
 80060e8:	3001      	adds	r0, #1
 80060ea:	d14a      	bne.n	8006182 <_printf_i+0x1f2>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f0:	b004      	add	sp, #16
 80060f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	f043 0320 	orr.w	r3, r3, #32
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	4833      	ldr	r0, [pc, #204]	@ (80061cc <_printf_i+0x23c>)
 8006100:	2778      	movs	r7, #120	@ 0x78
 8006102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	6831      	ldr	r1, [r6, #0]
 800610a:	061f      	lsls	r7, r3, #24
 800610c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006110:	d402      	bmi.n	8006118 <_printf_i+0x188>
 8006112:	065f      	lsls	r7, r3, #25
 8006114:	bf48      	it	mi
 8006116:	b2ad      	uxthmi	r5, r5
 8006118:	6031      	str	r1, [r6, #0]
 800611a:	07d9      	lsls	r1, r3, #31
 800611c:	bf44      	itt	mi
 800611e:	f043 0320 	orrmi.w	r3, r3, #32
 8006122:	6023      	strmi	r3, [r4, #0]
 8006124:	b11d      	cbz	r5, 800612e <_printf_i+0x19e>
 8006126:	2310      	movs	r3, #16
 8006128:	e7ac      	b.n	8006084 <_printf_i+0xf4>
 800612a:	4827      	ldr	r0, [pc, #156]	@ (80061c8 <_printf_i+0x238>)
 800612c:	e7e9      	b.n	8006102 <_printf_i+0x172>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	f023 0320 	bic.w	r3, r3, #32
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	e7f6      	b.n	8006126 <_printf_i+0x196>
 8006138:	4616      	mov	r6, r2
 800613a:	e7bd      	b.n	80060b8 <_printf_i+0x128>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	6961      	ldr	r1, [r4, #20]
 8006142:	1d18      	adds	r0, r3, #4
 8006144:	6030      	str	r0, [r6, #0]
 8006146:	062e      	lsls	r6, r5, #24
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	d501      	bpl.n	8006150 <_printf_i+0x1c0>
 800614c:	6019      	str	r1, [r3, #0]
 800614e:	e002      	b.n	8006156 <_printf_i+0x1c6>
 8006150:	0668      	lsls	r0, r5, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0x1bc>
 8006154:	8019      	strh	r1, [r3, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	4616      	mov	r6, r2
 800615c:	e7bc      	b.n	80060d8 <_printf_i+0x148>
 800615e:	6833      	ldr	r3, [r6, #0]
 8006160:	1d1a      	adds	r2, r3, #4
 8006162:	6032      	str	r2, [r6, #0]
 8006164:	681e      	ldr	r6, [r3, #0]
 8006166:	6862      	ldr	r2, [r4, #4]
 8006168:	2100      	movs	r1, #0
 800616a:	4630      	mov	r0, r6
 800616c:	f7fa f860 	bl	8000230 <memchr>
 8006170:	b108      	cbz	r0, 8006176 <_printf_i+0x1e6>
 8006172:	1b80      	subs	r0, r0, r6
 8006174:	6060      	str	r0, [r4, #4]
 8006176:	6863      	ldr	r3, [r4, #4]
 8006178:	6123      	str	r3, [r4, #16]
 800617a:	2300      	movs	r3, #0
 800617c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006180:	e7aa      	b.n	80060d8 <_printf_i+0x148>
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	4632      	mov	r2, r6
 8006186:	4649      	mov	r1, r9
 8006188:	4640      	mov	r0, r8
 800618a:	47d0      	blx	sl
 800618c:	3001      	adds	r0, #1
 800618e:	d0ad      	beq.n	80060ec <_printf_i+0x15c>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	079b      	lsls	r3, r3, #30
 8006194:	d413      	bmi.n	80061be <_printf_i+0x22e>
 8006196:	68e0      	ldr	r0, [r4, #12]
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	4298      	cmp	r0, r3
 800619c:	bfb8      	it	lt
 800619e:	4618      	movlt	r0, r3
 80061a0:	e7a6      	b.n	80060f0 <_printf_i+0x160>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4632      	mov	r2, r6
 80061a6:	4649      	mov	r1, r9
 80061a8:	4640      	mov	r0, r8
 80061aa:	47d0      	blx	sl
 80061ac:	3001      	adds	r0, #1
 80061ae:	d09d      	beq.n	80060ec <_printf_i+0x15c>
 80061b0:	3501      	adds	r5, #1
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	9903      	ldr	r1, [sp, #12]
 80061b6:	1a5b      	subs	r3, r3, r1
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	dcf2      	bgt.n	80061a2 <_printf_i+0x212>
 80061bc:	e7eb      	b.n	8006196 <_printf_i+0x206>
 80061be:	2500      	movs	r5, #0
 80061c0:	f104 0619 	add.w	r6, r4, #25
 80061c4:	e7f5      	b.n	80061b2 <_printf_i+0x222>
 80061c6:	bf00      	nop
 80061c8:	08006c95 	.word	0x08006c95
 80061cc:	08006ca6 	.word	0x08006ca6

080061d0 <_scanf_chars>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4615      	mov	r5, r2
 80061d6:	688a      	ldr	r2, [r1, #8]
 80061d8:	4680      	mov	r8, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	b932      	cbnz	r2, 80061ec <_scanf_chars+0x1c>
 80061de:	698a      	ldr	r2, [r1, #24]
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	bf14      	ite	ne
 80061e4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80061e8:	2201      	moveq	r2, #1
 80061ea:	608a      	str	r2, [r1, #8]
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006280 <_scanf_chars+0xb0>
 80061f2:	06d1      	lsls	r1, r2, #27
 80061f4:	bf5f      	itttt	pl
 80061f6:	681a      	ldrpl	r2, [r3, #0]
 80061f8:	1d11      	addpl	r1, r2, #4
 80061fa:	6019      	strpl	r1, [r3, #0]
 80061fc:	6816      	ldrpl	r6, [r2, #0]
 80061fe:	2700      	movs	r7, #0
 8006200:	69a0      	ldr	r0, [r4, #24]
 8006202:	b188      	cbz	r0, 8006228 <_scanf_chars+0x58>
 8006204:	2801      	cmp	r0, #1
 8006206:	d107      	bne.n	8006218 <_scanf_chars+0x48>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	6963      	ldr	r3, [r4, #20]
 800620e:	5c9b      	ldrb	r3, [r3, r2]
 8006210:	b953      	cbnz	r3, 8006228 <_scanf_chars+0x58>
 8006212:	2f00      	cmp	r7, #0
 8006214:	d031      	beq.n	800627a <_scanf_chars+0xaa>
 8006216:	e022      	b.n	800625e <_scanf_chars+0x8e>
 8006218:	2802      	cmp	r0, #2
 800621a:	d120      	bne.n	800625e <_scanf_chars+0x8e>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006224:	071b      	lsls	r3, r3, #28
 8006226:	d41a      	bmi.n	800625e <_scanf_chars+0x8e>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	06da      	lsls	r2, r3, #27
 800622c:	bf5e      	ittt	pl
 800622e:	682b      	ldrpl	r3, [r5, #0]
 8006230:	781b      	ldrbpl	r3, [r3, #0]
 8006232:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006236:	682a      	ldr	r2, [r5, #0]
 8006238:	686b      	ldr	r3, [r5, #4]
 800623a:	3201      	adds	r2, #1
 800623c:	602a      	str	r2, [r5, #0]
 800623e:	68a2      	ldr	r2, [r4, #8]
 8006240:	3b01      	subs	r3, #1
 8006242:	3a01      	subs	r2, #1
 8006244:	606b      	str	r3, [r5, #4]
 8006246:	3701      	adds	r7, #1
 8006248:	60a2      	str	r2, [r4, #8]
 800624a:	b142      	cbz	r2, 800625e <_scanf_chars+0x8e>
 800624c:	2b00      	cmp	r3, #0
 800624e:	dcd7      	bgt.n	8006200 <_scanf_chars+0x30>
 8006250:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006254:	4629      	mov	r1, r5
 8006256:	4640      	mov	r0, r8
 8006258:	4798      	blx	r3
 800625a:	2800      	cmp	r0, #0
 800625c:	d0d0      	beq.n	8006200 <_scanf_chars+0x30>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	f013 0310 	ands.w	r3, r3, #16
 8006264:	d105      	bne.n	8006272 <_scanf_chars+0xa2>
 8006266:	68e2      	ldr	r2, [r4, #12]
 8006268:	3201      	adds	r2, #1
 800626a:	60e2      	str	r2, [r4, #12]
 800626c:	69a2      	ldr	r2, [r4, #24]
 800626e:	b102      	cbz	r2, 8006272 <_scanf_chars+0xa2>
 8006270:	7033      	strb	r3, [r6, #0]
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	443b      	add	r3, r7
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	2000      	movs	r0, #0
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	bf00      	nop
 8006280:	08006cd3 	.word	0x08006cd3

08006284 <_scanf_i>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	4698      	mov	r8, r3
 800628a:	4b74      	ldr	r3, [pc, #464]	@ (800645c <_scanf_i+0x1d8>)
 800628c:	460c      	mov	r4, r1
 800628e:	4682      	mov	sl, r0
 8006290:	4616      	mov	r6, r2
 8006292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006296:	b087      	sub	sp, #28
 8006298:	ab03      	add	r3, sp, #12
 800629a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800629e:	4b70      	ldr	r3, [pc, #448]	@ (8006460 <_scanf_i+0x1dc>)
 80062a0:	69a1      	ldr	r1, [r4, #24]
 80062a2:	4a70      	ldr	r2, [pc, #448]	@ (8006464 <_scanf_i+0x1e0>)
 80062a4:	2903      	cmp	r1, #3
 80062a6:	bf08      	it	eq
 80062a8:	461a      	moveq	r2, r3
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	9201      	str	r2, [sp, #4]
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80062b4:	bf88      	it	hi
 80062b6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80062ba:	4627      	mov	r7, r4
 80062bc:	bf82      	ittt	hi
 80062be:	eb03 0905 	addhi.w	r9, r3, r5
 80062c2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80062c6:	60a3      	strhi	r3, [r4, #8]
 80062c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80062cc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80062d0:	bf98      	it	ls
 80062d2:	f04f 0900 	movls.w	r9, #0
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	463d      	mov	r5, r7
 80062da:	f04f 0b00 	mov.w	fp, #0
 80062de:	6831      	ldr	r1, [r6, #0]
 80062e0:	ab03      	add	r3, sp, #12
 80062e2:	7809      	ldrb	r1, [r1, #0]
 80062e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f7f9 ffa1 	bl	8000230 <memchr>
 80062ee:	b328      	cbz	r0, 800633c <_scanf_i+0xb8>
 80062f0:	f1bb 0f01 	cmp.w	fp, #1
 80062f4:	d159      	bne.n	80063aa <_scanf_i+0x126>
 80062f6:	6862      	ldr	r2, [r4, #4]
 80062f8:	b92a      	cbnz	r2, 8006306 <_scanf_i+0x82>
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	2108      	movs	r1, #8
 80062fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006302:	6061      	str	r1, [r4, #4]
 8006304:	6022      	str	r2, [r4, #0]
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800630c:	6022      	str	r2, [r4, #0]
 800630e:	68a2      	ldr	r2, [r4, #8]
 8006310:	1e51      	subs	r1, r2, #1
 8006312:	60a1      	str	r1, [r4, #8]
 8006314:	b192      	cbz	r2, 800633c <_scanf_i+0xb8>
 8006316:	6832      	ldr	r2, [r6, #0]
 8006318:	1c51      	adds	r1, r2, #1
 800631a:	6031      	str	r1, [r6, #0]
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	f805 2b01 	strb.w	r2, [r5], #1
 8006322:	6872      	ldr	r2, [r6, #4]
 8006324:	3a01      	subs	r2, #1
 8006326:	2a00      	cmp	r2, #0
 8006328:	6072      	str	r2, [r6, #4]
 800632a:	dc07      	bgt.n	800633c <_scanf_i+0xb8>
 800632c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006330:	4631      	mov	r1, r6
 8006332:	4650      	mov	r0, sl
 8006334:	4790      	blx	r2
 8006336:	2800      	cmp	r0, #0
 8006338:	f040 8085 	bne.w	8006446 <_scanf_i+0x1c2>
 800633c:	f10b 0b01 	add.w	fp, fp, #1
 8006340:	f1bb 0f03 	cmp.w	fp, #3
 8006344:	d1cb      	bne.n	80062de <_scanf_i+0x5a>
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	b90b      	cbnz	r3, 800634e <_scanf_i+0xca>
 800634a:	230a      	movs	r3, #10
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	4945      	ldr	r1, [pc, #276]	@ (8006468 <_scanf_i+0x1e4>)
 8006352:	6960      	ldr	r0, [r4, #20]
 8006354:	1ac9      	subs	r1, r1, r3
 8006356:	f000 f889 	bl	800646c <__sccl>
 800635a:	f04f 0b00 	mov.w	fp, #0
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d03d      	beq.n	80063e2 <_scanf_i+0x15e>
 8006366:	6831      	ldr	r1, [r6, #0]
 8006368:	6960      	ldr	r0, [r4, #20]
 800636a:	f891 c000 	ldrb.w	ip, [r1]
 800636e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006372:	2800      	cmp	r0, #0
 8006374:	d035      	beq.n	80063e2 <_scanf_i+0x15e>
 8006376:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800637a:	d124      	bne.n	80063c6 <_scanf_i+0x142>
 800637c:	0510      	lsls	r0, r2, #20
 800637e:	d522      	bpl.n	80063c6 <_scanf_i+0x142>
 8006380:	f10b 0b01 	add.w	fp, fp, #1
 8006384:	f1b9 0f00 	cmp.w	r9, #0
 8006388:	d003      	beq.n	8006392 <_scanf_i+0x10e>
 800638a:	3301      	adds	r3, #1
 800638c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006390:	60a3      	str	r3, [r4, #8]
 8006392:	6873      	ldr	r3, [r6, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	6073      	str	r3, [r6, #4]
 800639a:	dd1b      	ble.n	80063d4 <_scanf_i+0x150>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	e7d9      	b.n	800635e <_scanf_i+0xda>
 80063aa:	f1bb 0f02 	cmp.w	fp, #2
 80063ae:	d1ae      	bne.n	800630e <_scanf_i+0x8a>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80063b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80063ba:	d1bf      	bne.n	800633c <_scanf_i+0xb8>
 80063bc:	2110      	movs	r1, #16
 80063be:	6061      	str	r1, [r4, #4]
 80063c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063c4:	e7a2      	b.n	800630c <_scanf_i+0x88>
 80063c6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	780b      	ldrb	r3, [r1, #0]
 80063ce:	f805 3b01 	strb.w	r3, [r5], #1
 80063d2:	e7de      	b.n	8006392 <_scanf_i+0x10e>
 80063d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80063d8:	4631      	mov	r1, r6
 80063da:	4650      	mov	r0, sl
 80063dc:	4798      	blx	r3
 80063de:	2800      	cmp	r0, #0
 80063e0:	d0df      	beq.n	80063a2 <_scanf_i+0x11e>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	05d9      	lsls	r1, r3, #23
 80063e6:	d50d      	bpl.n	8006404 <_scanf_i+0x180>
 80063e8:	42bd      	cmp	r5, r7
 80063ea:	d909      	bls.n	8006400 <_scanf_i+0x17c>
 80063ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80063f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063f4:	4632      	mov	r2, r6
 80063f6:	4650      	mov	r0, sl
 80063f8:	4798      	blx	r3
 80063fa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80063fe:	464d      	mov	r5, r9
 8006400:	42bd      	cmp	r5, r7
 8006402:	d028      	beq.n	8006456 <_scanf_i+0x1d2>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	f012 0210 	ands.w	r2, r2, #16
 800640a:	d113      	bne.n	8006434 <_scanf_i+0x1b0>
 800640c:	702a      	strb	r2, [r5, #0]
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	9e01      	ldr	r6, [sp, #4]
 8006412:	4639      	mov	r1, r7
 8006414:	4650      	mov	r0, sl
 8006416:	47b0      	blx	r6
 8006418:	f8d8 3000 	ldr.w	r3, [r8]
 800641c:	6821      	ldr	r1, [r4, #0]
 800641e:	1d1a      	adds	r2, r3, #4
 8006420:	f8c8 2000 	str.w	r2, [r8]
 8006424:	f011 0f20 	tst.w	r1, #32
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	d00f      	beq.n	800644c <_scanf_i+0x1c8>
 800642c:	6018      	str	r0, [r3, #0]
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60e3      	str	r3, [r4, #12]
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	1bed      	subs	r5, r5, r7
 8006438:	445d      	add	r5, fp
 800643a:	442b      	add	r3, r5
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	2000      	movs	r0, #0
 8006440:	b007      	add	sp, #28
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	f04f 0b00 	mov.w	fp, #0
 800644a:	e7ca      	b.n	80063e2 <_scanf_i+0x15e>
 800644c:	07ca      	lsls	r2, r1, #31
 800644e:	bf4c      	ite	mi
 8006450:	8018      	strhmi	r0, [r3, #0]
 8006452:	6018      	strpl	r0, [r3, #0]
 8006454:	e7eb      	b.n	800642e <_scanf_i+0x1aa>
 8006456:	2001      	movs	r0, #1
 8006458:	e7f2      	b.n	8006440 <_scanf_i+0x1bc>
 800645a:	bf00      	nop
 800645c:	08006c34 	.word	0x08006c34
 8006460:	08006815 	.word	0x08006815
 8006464:	080068f5 	.word	0x080068f5
 8006468:	08006cc7 	.word	0x08006cc7

0800646c <__sccl>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	780b      	ldrb	r3, [r1, #0]
 8006470:	4604      	mov	r4, r0
 8006472:	2b5e      	cmp	r3, #94	@ 0x5e
 8006474:	bf0b      	itete	eq
 8006476:	784b      	ldrbeq	r3, [r1, #1]
 8006478:	1c4a      	addne	r2, r1, #1
 800647a:	1c8a      	addeq	r2, r1, #2
 800647c:	2100      	movne	r1, #0
 800647e:	bf08      	it	eq
 8006480:	2101      	moveq	r1, #1
 8006482:	3801      	subs	r0, #1
 8006484:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006488:	f800 1f01 	strb.w	r1, [r0, #1]!
 800648c:	42a8      	cmp	r0, r5
 800648e:	d1fb      	bne.n	8006488 <__sccl+0x1c>
 8006490:	b90b      	cbnz	r3, 8006496 <__sccl+0x2a>
 8006492:	1e50      	subs	r0, r2, #1
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	f081 0101 	eor.w	r1, r1, #1
 800649a:	54e1      	strb	r1, [r4, r3]
 800649c:	4610      	mov	r0, r2
 800649e:	4602      	mov	r2, r0
 80064a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80064a4:	2d2d      	cmp	r5, #45	@ 0x2d
 80064a6:	d005      	beq.n	80064b4 <__sccl+0x48>
 80064a8:	2d5d      	cmp	r5, #93	@ 0x5d
 80064aa:	d016      	beq.n	80064da <__sccl+0x6e>
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	d0f1      	beq.n	8006494 <__sccl+0x28>
 80064b0:	462b      	mov	r3, r5
 80064b2:	e7f2      	b.n	800649a <__sccl+0x2e>
 80064b4:	7846      	ldrb	r6, [r0, #1]
 80064b6:	2e5d      	cmp	r6, #93	@ 0x5d
 80064b8:	d0fa      	beq.n	80064b0 <__sccl+0x44>
 80064ba:	42b3      	cmp	r3, r6
 80064bc:	dcf8      	bgt.n	80064b0 <__sccl+0x44>
 80064be:	3002      	adds	r0, #2
 80064c0:	461a      	mov	r2, r3
 80064c2:	3201      	adds	r2, #1
 80064c4:	4296      	cmp	r6, r2
 80064c6:	54a1      	strb	r1, [r4, r2]
 80064c8:	dcfb      	bgt.n	80064c2 <__sccl+0x56>
 80064ca:	1af2      	subs	r2, r6, r3
 80064cc:	3a01      	subs	r2, #1
 80064ce:	1c5d      	adds	r5, r3, #1
 80064d0:	42b3      	cmp	r3, r6
 80064d2:	bfa8      	it	ge
 80064d4:	2200      	movge	r2, #0
 80064d6:	18ab      	adds	r3, r5, r2
 80064d8:	e7e1      	b.n	800649e <__sccl+0x32>
 80064da:	4610      	mov	r0, r2
 80064dc:	e7da      	b.n	8006494 <__sccl+0x28>
	...

080064e0 <__sflush_r>:
 80064e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	0716      	lsls	r6, r2, #28
 80064ea:	4605      	mov	r5, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	d454      	bmi.n	800659a <__sflush_r+0xba>
 80064f0:	684b      	ldr	r3, [r1, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dc02      	bgt.n	80064fc <__sflush_r+0x1c>
 80064f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd48      	ble.n	800658e <__sflush_r+0xae>
 80064fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d045      	beq.n	800658e <__sflush_r+0xae>
 8006502:	2300      	movs	r3, #0
 8006504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006508:	682f      	ldr	r7, [r5, #0]
 800650a:	6a21      	ldr	r1, [r4, #32]
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	d030      	beq.n	8006572 <__sflush_r+0x92>
 8006510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	0759      	lsls	r1, r3, #29
 8006516:	d505      	bpl.n	8006524 <__sflush_r+0x44>
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800651e:	b10b      	cbz	r3, 8006524 <__sflush_r+0x44>
 8006520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006528:	6a21      	ldr	r1, [r4, #32]
 800652a:	4628      	mov	r0, r5
 800652c:	47b0      	blx	r6
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	d106      	bne.n	8006542 <__sflush_r+0x62>
 8006534:	6829      	ldr	r1, [r5, #0]
 8006536:	291d      	cmp	r1, #29
 8006538:	d82b      	bhi.n	8006592 <__sflush_r+0xb2>
 800653a:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <__sflush_r+0x104>)
 800653c:	410a      	asrs	r2, r1
 800653e:	07d6      	lsls	r6, r2, #31
 8006540:	d427      	bmi.n	8006592 <__sflush_r+0xb2>
 8006542:	2200      	movs	r2, #0
 8006544:	6062      	str	r2, [r4, #4]
 8006546:	04d9      	lsls	r1, r3, #19
 8006548:	6922      	ldr	r2, [r4, #16]
 800654a:	6022      	str	r2, [r4, #0]
 800654c:	d504      	bpl.n	8006558 <__sflush_r+0x78>
 800654e:	1c42      	adds	r2, r0, #1
 8006550:	d101      	bne.n	8006556 <__sflush_r+0x76>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	b903      	cbnz	r3, 8006558 <__sflush_r+0x78>
 8006556:	6560      	str	r0, [r4, #84]	@ 0x54
 8006558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800655a:	602f      	str	r7, [r5, #0]
 800655c:	b1b9      	cbz	r1, 800658e <__sflush_r+0xae>
 800655e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006562:	4299      	cmp	r1, r3
 8006564:	d002      	beq.n	800656c <__sflush_r+0x8c>
 8006566:	4628      	mov	r0, r5
 8006568:	f7ff f8aa 	bl	80056c0 <_free_r>
 800656c:	2300      	movs	r3, #0
 800656e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006570:	e00d      	b.n	800658e <__sflush_r+0xae>
 8006572:	2301      	movs	r3, #1
 8006574:	4628      	mov	r0, r5
 8006576:	47b0      	blx	r6
 8006578:	4602      	mov	r2, r0
 800657a:	1c50      	adds	r0, r2, #1
 800657c:	d1c9      	bne.n	8006512 <__sflush_r+0x32>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0c6      	beq.n	8006512 <__sflush_r+0x32>
 8006584:	2b1d      	cmp	r3, #29
 8006586:	d001      	beq.n	800658c <__sflush_r+0xac>
 8006588:	2b16      	cmp	r3, #22
 800658a:	d11e      	bne.n	80065ca <__sflush_r+0xea>
 800658c:	602f      	str	r7, [r5, #0]
 800658e:	2000      	movs	r0, #0
 8006590:	e022      	b.n	80065d8 <__sflush_r+0xf8>
 8006592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006596:	b21b      	sxth	r3, r3
 8006598:	e01b      	b.n	80065d2 <__sflush_r+0xf2>
 800659a:	690f      	ldr	r7, [r1, #16]
 800659c:	2f00      	cmp	r7, #0
 800659e:	d0f6      	beq.n	800658e <__sflush_r+0xae>
 80065a0:	0793      	lsls	r3, r2, #30
 80065a2:	680e      	ldr	r6, [r1, #0]
 80065a4:	bf08      	it	eq
 80065a6:	694b      	ldreq	r3, [r1, #20]
 80065a8:	600f      	str	r7, [r1, #0]
 80065aa:	bf18      	it	ne
 80065ac:	2300      	movne	r3, #0
 80065ae:	eba6 0807 	sub.w	r8, r6, r7
 80065b2:	608b      	str	r3, [r1, #8]
 80065b4:	f1b8 0f00 	cmp.w	r8, #0
 80065b8:	dde9      	ble.n	800658e <__sflush_r+0xae>
 80065ba:	6a21      	ldr	r1, [r4, #32]
 80065bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065be:	4643      	mov	r3, r8
 80065c0:	463a      	mov	r2, r7
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b0      	blx	r6
 80065c6:	2800      	cmp	r0, #0
 80065c8:	dc08      	bgt.n	80065dc <__sflush_r+0xfc>
 80065ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	4407      	add	r7, r0
 80065de:	eba8 0800 	sub.w	r8, r8, r0
 80065e2:	e7e7      	b.n	80065b4 <__sflush_r+0xd4>
 80065e4:	dfbffffe 	.word	0xdfbffffe

080065e8 <_fflush_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b913      	cbnz	r3, 80065f8 <_fflush_r+0x10>
 80065f2:	2500      	movs	r5, #0
 80065f4:	4628      	mov	r0, r5
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	b118      	cbz	r0, 8006602 <_fflush_r+0x1a>
 80065fa:	6a03      	ldr	r3, [r0, #32]
 80065fc:	b90b      	cbnz	r3, 8006602 <_fflush_r+0x1a>
 80065fe:	f7fe ff9b 	bl	8005538 <__sinit>
 8006602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f3      	beq.n	80065f2 <_fflush_r+0xa>
 800660a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800660c:	07d0      	lsls	r0, r2, #31
 800660e:	d404      	bmi.n	800661a <_fflush_r+0x32>
 8006610:	0599      	lsls	r1, r3, #22
 8006612:	d402      	bmi.n	800661a <_fflush_r+0x32>
 8006614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006616:	f7ff f850 	bl	80056ba <__retarget_lock_acquire_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	4621      	mov	r1, r4
 800661e:	f7ff ff5f 	bl	80064e0 <__sflush_r>
 8006622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006624:	07da      	lsls	r2, r3, #31
 8006626:	4605      	mov	r5, r0
 8006628:	d4e4      	bmi.n	80065f4 <_fflush_r+0xc>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	059b      	lsls	r3, r3, #22
 800662e:	d4e1      	bmi.n	80065f4 <_fflush_r+0xc>
 8006630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006632:	f7ff f843 	bl	80056bc <__retarget_lock_release_recursive>
 8006636:	e7dd      	b.n	80065f4 <_fflush_r+0xc>

08006638 <__malloc_lock>:
 8006638:	4801      	ldr	r0, [pc, #4]	@ (8006640 <__malloc_lock+0x8>)
 800663a:	f7ff b83e 	b.w	80056ba <__retarget_lock_acquire_recursive>
 800663e:	bf00      	nop
 8006640:	20000610 	.word	0x20000610

08006644 <__malloc_unlock>:
 8006644:	4801      	ldr	r0, [pc, #4]	@ (800664c <__malloc_unlock+0x8>)
 8006646:	f7ff b839 	b.w	80056bc <__retarget_lock_release_recursive>
 800664a:	bf00      	nop
 800664c:	20000610 	.word	0x20000610

08006650 <__submore>:
 8006650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006654:	460c      	mov	r4, r1
 8006656:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800665c:	4299      	cmp	r1, r3
 800665e:	d11d      	bne.n	800669c <__submore+0x4c>
 8006660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006664:	f7ff fba6 	bl	8005db4 <_malloc_r>
 8006668:	b918      	cbnz	r0, 8006672 <__submore+0x22>
 800666a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006676:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006678:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800667c:	6360      	str	r0, [r4, #52]	@ 0x34
 800667e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006682:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006686:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800668a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800668e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006692:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006696:	6020      	str	r0, [r4, #0]
 8006698:	2000      	movs	r0, #0
 800669a:	e7e8      	b.n	800666e <__submore+0x1e>
 800669c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800669e:	0077      	lsls	r7, r6, #1
 80066a0:	463a      	mov	r2, r7
 80066a2:	f000 f80f 	bl	80066c4 <_realloc_r>
 80066a6:	4605      	mov	r5, r0
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d0de      	beq.n	800666a <__submore+0x1a>
 80066ac:	eb00 0806 	add.w	r8, r0, r6
 80066b0:	4601      	mov	r1, r0
 80066b2:	4632      	mov	r2, r6
 80066b4:	4640      	mov	r0, r8
 80066b6:	f000 fa47 	bl	8006b48 <memcpy>
 80066ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80066be:	f8c4 8000 	str.w	r8, [r4]
 80066c2:	e7e9      	b.n	8006698 <__submore+0x48>

080066c4 <_realloc_r>:
 80066c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c8:	4680      	mov	r8, r0
 80066ca:	4615      	mov	r5, r2
 80066cc:	460c      	mov	r4, r1
 80066ce:	b921      	cbnz	r1, 80066da <_realloc_r+0x16>
 80066d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d4:	4611      	mov	r1, r2
 80066d6:	f7ff bb6d 	b.w	8005db4 <_malloc_r>
 80066da:	b92a      	cbnz	r2, 80066e8 <_realloc_r+0x24>
 80066dc:	f7fe fff0 	bl	80056c0 <_free_r>
 80066e0:	2400      	movs	r4, #0
 80066e2:	4620      	mov	r0, r4
 80066e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e8:	f000 fa3c 	bl	8006b64 <_malloc_usable_size_r>
 80066ec:	4285      	cmp	r5, r0
 80066ee:	4606      	mov	r6, r0
 80066f0:	d802      	bhi.n	80066f8 <_realloc_r+0x34>
 80066f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066f6:	d8f4      	bhi.n	80066e2 <_realloc_r+0x1e>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4640      	mov	r0, r8
 80066fc:	f7ff fb5a 	bl	8005db4 <_malloc_r>
 8006700:	4607      	mov	r7, r0
 8006702:	2800      	cmp	r0, #0
 8006704:	d0ec      	beq.n	80066e0 <_realloc_r+0x1c>
 8006706:	42b5      	cmp	r5, r6
 8006708:	462a      	mov	r2, r5
 800670a:	4621      	mov	r1, r4
 800670c:	bf28      	it	cs
 800670e:	4632      	movcs	r2, r6
 8006710:	f000 fa1a 	bl	8006b48 <memcpy>
 8006714:	4621      	mov	r1, r4
 8006716:	4640      	mov	r0, r8
 8006718:	f7fe ffd2 	bl	80056c0 <_free_r>
 800671c:	463c      	mov	r4, r7
 800671e:	e7e0      	b.n	80066e2 <_realloc_r+0x1e>

08006720 <_strtol_l.constprop.0>:
 8006720:	2b24      	cmp	r3, #36	@ 0x24
 8006722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006726:	4686      	mov	lr, r0
 8006728:	4690      	mov	r8, r2
 800672a:	d801      	bhi.n	8006730 <_strtol_l.constprop.0+0x10>
 800672c:	2b01      	cmp	r3, #1
 800672e:	d106      	bne.n	800673e <_strtol_l.constprop.0+0x1e>
 8006730:	f7fe ff98 	bl	8005664 <__errno>
 8006734:	2316      	movs	r3, #22
 8006736:	6003      	str	r3, [r0, #0]
 8006738:	2000      	movs	r0, #0
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	4834      	ldr	r0, [pc, #208]	@ (8006810 <_strtol_l.constprop.0+0xf0>)
 8006740:	460d      	mov	r5, r1
 8006742:	462a      	mov	r2, r5
 8006744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006748:	5d06      	ldrb	r6, [r0, r4]
 800674a:	f016 0608 	ands.w	r6, r6, #8
 800674e:	d1f8      	bne.n	8006742 <_strtol_l.constprop.0+0x22>
 8006750:	2c2d      	cmp	r4, #45	@ 0x2d
 8006752:	d12d      	bne.n	80067b0 <_strtol_l.constprop.0+0x90>
 8006754:	782c      	ldrb	r4, [r5, #0]
 8006756:	2601      	movs	r6, #1
 8006758:	1c95      	adds	r5, r2, #2
 800675a:	f033 0210 	bics.w	r2, r3, #16
 800675e:	d109      	bne.n	8006774 <_strtol_l.constprop.0+0x54>
 8006760:	2c30      	cmp	r4, #48	@ 0x30
 8006762:	d12a      	bne.n	80067ba <_strtol_l.constprop.0+0x9a>
 8006764:	782a      	ldrb	r2, [r5, #0]
 8006766:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800676a:	2a58      	cmp	r2, #88	@ 0x58
 800676c:	d125      	bne.n	80067ba <_strtol_l.constprop.0+0x9a>
 800676e:	786c      	ldrb	r4, [r5, #1]
 8006770:	2310      	movs	r3, #16
 8006772:	3502      	adds	r5, #2
 8006774:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006778:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800677c:	2200      	movs	r2, #0
 800677e:	fbbc f9f3 	udiv	r9, ip, r3
 8006782:	4610      	mov	r0, r2
 8006784:	fb03 ca19 	mls	sl, r3, r9, ip
 8006788:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800678c:	2f09      	cmp	r7, #9
 800678e:	d81b      	bhi.n	80067c8 <_strtol_l.constprop.0+0xa8>
 8006790:	463c      	mov	r4, r7
 8006792:	42a3      	cmp	r3, r4
 8006794:	dd27      	ble.n	80067e6 <_strtol_l.constprop.0+0xc6>
 8006796:	1c57      	adds	r7, r2, #1
 8006798:	d007      	beq.n	80067aa <_strtol_l.constprop.0+0x8a>
 800679a:	4581      	cmp	r9, r0
 800679c:	d320      	bcc.n	80067e0 <_strtol_l.constprop.0+0xc0>
 800679e:	d101      	bne.n	80067a4 <_strtol_l.constprop.0+0x84>
 80067a0:	45a2      	cmp	sl, r4
 80067a2:	db1d      	blt.n	80067e0 <_strtol_l.constprop.0+0xc0>
 80067a4:	fb00 4003 	mla	r0, r0, r3, r4
 80067a8:	2201      	movs	r2, #1
 80067aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067ae:	e7eb      	b.n	8006788 <_strtol_l.constprop.0+0x68>
 80067b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80067b2:	bf04      	itt	eq
 80067b4:	782c      	ldrbeq	r4, [r5, #0]
 80067b6:	1c95      	addeq	r5, r2, #2
 80067b8:	e7cf      	b.n	800675a <_strtol_l.constprop.0+0x3a>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1da      	bne.n	8006774 <_strtol_l.constprop.0+0x54>
 80067be:	2c30      	cmp	r4, #48	@ 0x30
 80067c0:	bf0c      	ite	eq
 80067c2:	2308      	moveq	r3, #8
 80067c4:	230a      	movne	r3, #10
 80067c6:	e7d5      	b.n	8006774 <_strtol_l.constprop.0+0x54>
 80067c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80067cc:	2f19      	cmp	r7, #25
 80067ce:	d801      	bhi.n	80067d4 <_strtol_l.constprop.0+0xb4>
 80067d0:	3c37      	subs	r4, #55	@ 0x37
 80067d2:	e7de      	b.n	8006792 <_strtol_l.constprop.0+0x72>
 80067d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80067d8:	2f19      	cmp	r7, #25
 80067da:	d804      	bhi.n	80067e6 <_strtol_l.constprop.0+0xc6>
 80067dc:	3c57      	subs	r4, #87	@ 0x57
 80067de:	e7d8      	b.n	8006792 <_strtol_l.constprop.0+0x72>
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067e4:	e7e1      	b.n	80067aa <_strtol_l.constprop.0+0x8a>
 80067e6:	1c53      	adds	r3, r2, #1
 80067e8:	d108      	bne.n	80067fc <_strtol_l.constprop.0+0xdc>
 80067ea:	2322      	movs	r3, #34	@ 0x22
 80067ec:	f8ce 3000 	str.w	r3, [lr]
 80067f0:	4660      	mov	r0, ip
 80067f2:	f1b8 0f00 	cmp.w	r8, #0
 80067f6:	d0a0      	beq.n	800673a <_strtol_l.constprop.0+0x1a>
 80067f8:	1e69      	subs	r1, r5, #1
 80067fa:	e006      	b.n	800680a <_strtol_l.constprop.0+0xea>
 80067fc:	b106      	cbz	r6, 8006800 <_strtol_l.constprop.0+0xe0>
 80067fe:	4240      	negs	r0, r0
 8006800:	f1b8 0f00 	cmp.w	r8, #0
 8006804:	d099      	beq.n	800673a <_strtol_l.constprop.0+0x1a>
 8006806:	2a00      	cmp	r2, #0
 8006808:	d1f6      	bne.n	80067f8 <_strtol_l.constprop.0+0xd8>
 800680a:	f8c8 1000 	str.w	r1, [r8]
 800680e:	e794      	b.n	800673a <_strtol_l.constprop.0+0x1a>
 8006810:	08006cd3 	.word	0x08006cd3

08006814 <_strtol_r>:
 8006814:	f7ff bf84 	b.w	8006720 <_strtol_l.constprop.0>

08006818 <_strtoul_l.constprop.0>:
 8006818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800681c:	4e34      	ldr	r6, [pc, #208]	@ (80068f0 <_strtoul_l.constprop.0+0xd8>)
 800681e:	4686      	mov	lr, r0
 8006820:	460d      	mov	r5, r1
 8006822:	4628      	mov	r0, r5
 8006824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006828:	5d37      	ldrb	r7, [r6, r4]
 800682a:	f017 0708 	ands.w	r7, r7, #8
 800682e:	d1f8      	bne.n	8006822 <_strtoul_l.constprop.0+0xa>
 8006830:	2c2d      	cmp	r4, #45	@ 0x2d
 8006832:	d12f      	bne.n	8006894 <_strtoul_l.constprop.0+0x7c>
 8006834:	782c      	ldrb	r4, [r5, #0]
 8006836:	2701      	movs	r7, #1
 8006838:	1c85      	adds	r5, r0, #2
 800683a:	f033 0010 	bics.w	r0, r3, #16
 800683e:	d109      	bne.n	8006854 <_strtoul_l.constprop.0+0x3c>
 8006840:	2c30      	cmp	r4, #48	@ 0x30
 8006842:	d12c      	bne.n	800689e <_strtoul_l.constprop.0+0x86>
 8006844:	7828      	ldrb	r0, [r5, #0]
 8006846:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800684a:	2858      	cmp	r0, #88	@ 0x58
 800684c:	d127      	bne.n	800689e <_strtoul_l.constprop.0+0x86>
 800684e:	786c      	ldrb	r4, [r5, #1]
 8006850:	2310      	movs	r3, #16
 8006852:	3502      	adds	r5, #2
 8006854:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006858:	2600      	movs	r6, #0
 800685a:	fbb8 f8f3 	udiv	r8, r8, r3
 800685e:	fb03 f908 	mul.w	r9, r3, r8
 8006862:	ea6f 0909 	mvn.w	r9, r9
 8006866:	4630      	mov	r0, r6
 8006868:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800686c:	f1bc 0f09 	cmp.w	ip, #9
 8006870:	d81c      	bhi.n	80068ac <_strtoul_l.constprop.0+0x94>
 8006872:	4664      	mov	r4, ip
 8006874:	42a3      	cmp	r3, r4
 8006876:	dd2a      	ble.n	80068ce <_strtoul_l.constprop.0+0xb6>
 8006878:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800687c:	d007      	beq.n	800688e <_strtoul_l.constprop.0+0x76>
 800687e:	4580      	cmp	r8, r0
 8006880:	d322      	bcc.n	80068c8 <_strtoul_l.constprop.0+0xb0>
 8006882:	d101      	bne.n	8006888 <_strtoul_l.constprop.0+0x70>
 8006884:	45a1      	cmp	r9, r4
 8006886:	db1f      	blt.n	80068c8 <_strtoul_l.constprop.0+0xb0>
 8006888:	fb00 4003 	mla	r0, r0, r3, r4
 800688c:	2601      	movs	r6, #1
 800688e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006892:	e7e9      	b.n	8006868 <_strtoul_l.constprop.0+0x50>
 8006894:	2c2b      	cmp	r4, #43	@ 0x2b
 8006896:	bf04      	itt	eq
 8006898:	782c      	ldrbeq	r4, [r5, #0]
 800689a:	1c85      	addeq	r5, r0, #2
 800689c:	e7cd      	b.n	800683a <_strtoul_l.constprop.0+0x22>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1d8      	bne.n	8006854 <_strtoul_l.constprop.0+0x3c>
 80068a2:	2c30      	cmp	r4, #48	@ 0x30
 80068a4:	bf0c      	ite	eq
 80068a6:	2308      	moveq	r3, #8
 80068a8:	230a      	movne	r3, #10
 80068aa:	e7d3      	b.n	8006854 <_strtoul_l.constprop.0+0x3c>
 80068ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80068b0:	f1bc 0f19 	cmp.w	ip, #25
 80068b4:	d801      	bhi.n	80068ba <_strtoul_l.constprop.0+0xa2>
 80068b6:	3c37      	subs	r4, #55	@ 0x37
 80068b8:	e7dc      	b.n	8006874 <_strtoul_l.constprop.0+0x5c>
 80068ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80068be:	f1bc 0f19 	cmp.w	ip, #25
 80068c2:	d804      	bhi.n	80068ce <_strtoul_l.constprop.0+0xb6>
 80068c4:	3c57      	subs	r4, #87	@ 0x57
 80068c6:	e7d5      	b.n	8006874 <_strtoul_l.constprop.0+0x5c>
 80068c8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80068cc:	e7df      	b.n	800688e <_strtoul_l.constprop.0+0x76>
 80068ce:	1c73      	adds	r3, r6, #1
 80068d0:	d106      	bne.n	80068e0 <_strtoul_l.constprop.0+0xc8>
 80068d2:	2322      	movs	r3, #34	@ 0x22
 80068d4:	f8ce 3000 	str.w	r3, [lr]
 80068d8:	4630      	mov	r0, r6
 80068da:	b932      	cbnz	r2, 80068ea <_strtoul_l.constprop.0+0xd2>
 80068dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068e0:	b107      	cbz	r7, 80068e4 <_strtoul_l.constprop.0+0xcc>
 80068e2:	4240      	negs	r0, r0
 80068e4:	2a00      	cmp	r2, #0
 80068e6:	d0f9      	beq.n	80068dc <_strtoul_l.constprop.0+0xc4>
 80068e8:	b106      	cbz	r6, 80068ec <_strtoul_l.constprop.0+0xd4>
 80068ea:	1e69      	subs	r1, r5, #1
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	e7f5      	b.n	80068dc <_strtoul_l.constprop.0+0xc4>
 80068f0:	08006cd3 	.word	0x08006cd3

080068f4 <_strtoul_r>:
 80068f4:	f7ff bf90 	b.w	8006818 <_strtoul_l.constprop.0>

080068f8 <__swbuf_r>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	460e      	mov	r6, r1
 80068fc:	4614      	mov	r4, r2
 80068fe:	4605      	mov	r5, r0
 8006900:	b118      	cbz	r0, 800690a <__swbuf_r+0x12>
 8006902:	6a03      	ldr	r3, [r0, #32]
 8006904:	b90b      	cbnz	r3, 800690a <__swbuf_r+0x12>
 8006906:	f7fe fe17 	bl	8005538 <__sinit>
 800690a:	69a3      	ldr	r3, [r4, #24]
 800690c:	60a3      	str	r3, [r4, #8]
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	071a      	lsls	r2, r3, #28
 8006912:	d501      	bpl.n	8006918 <__swbuf_r+0x20>
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	b943      	cbnz	r3, 800692a <__swbuf_r+0x32>
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f82a 	bl	8006974 <__swsetup_r>
 8006920:	b118      	cbz	r0, 800692a <__swbuf_r+0x32>
 8006922:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006926:	4638      	mov	r0, r7
 8006928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	1a98      	subs	r0, r3, r2
 8006930:	6963      	ldr	r3, [r4, #20]
 8006932:	b2f6      	uxtb	r6, r6
 8006934:	4283      	cmp	r3, r0
 8006936:	4637      	mov	r7, r6
 8006938:	dc05      	bgt.n	8006946 <__swbuf_r+0x4e>
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f7ff fe53 	bl	80065e8 <_fflush_r>
 8006942:	2800      	cmp	r0, #0
 8006944:	d1ed      	bne.n	8006922 <__swbuf_r+0x2a>
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	3b01      	subs	r3, #1
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	6022      	str	r2, [r4, #0]
 8006952:	701e      	strb	r6, [r3, #0]
 8006954:	6962      	ldr	r2, [r4, #20]
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	429a      	cmp	r2, r3
 800695a:	d004      	beq.n	8006966 <__swbuf_r+0x6e>
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	07db      	lsls	r3, r3, #31
 8006960:	d5e1      	bpl.n	8006926 <__swbuf_r+0x2e>
 8006962:	2e0a      	cmp	r6, #10
 8006964:	d1df      	bne.n	8006926 <__swbuf_r+0x2e>
 8006966:	4621      	mov	r1, r4
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff fe3d 	bl	80065e8 <_fflush_r>
 800696e:	2800      	cmp	r0, #0
 8006970:	d0d9      	beq.n	8006926 <__swbuf_r+0x2e>
 8006972:	e7d6      	b.n	8006922 <__swbuf_r+0x2a>

08006974 <__swsetup_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4b29      	ldr	r3, [pc, #164]	@ (8006a1c <__swsetup_r+0xa8>)
 8006978:	4605      	mov	r5, r0
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	460c      	mov	r4, r1
 800697e:	b118      	cbz	r0, 8006988 <__swsetup_r+0x14>
 8006980:	6a03      	ldr	r3, [r0, #32]
 8006982:	b90b      	cbnz	r3, 8006988 <__swsetup_r+0x14>
 8006984:	f7fe fdd8 	bl	8005538 <__sinit>
 8006988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698c:	0719      	lsls	r1, r3, #28
 800698e:	d422      	bmi.n	80069d6 <__swsetup_r+0x62>
 8006990:	06da      	lsls	r2, r3, #27
 8006992:	d407      	bmi.n	80069a4 <__swsetup_r+0x30>
 8006994:	2209      	movs	r2, #9
 8006996:	602a      	str	r2, [r5, #0]
 8006998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a2:	e033      	b.n	8006a0c <__swsetup_r+0x98>
 80069a4:	0758      	lsls	r0, r3, #29
 80069a6:	d512      	bpl.n	80069ce <__swsetup_r+0x5a>
 80069a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069aa:	b141      	cbz	r1, 80069be <__swsetup_r+0x4a>
 80069ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d002      	beq.n	80069ba <__swsetup_r+0x46>
 80069b4:	4628      	mov	r0, r5
 80069b6:	f7fe fe83 	bl	80056c0 <_free_r>
 80069ba:	2300      	movs	r3, #0
 80069bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	2300      	movs	r3, #0
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f043 0308 	orr.w	r3, r3, #8
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	b94b      	cbnz	r3, 80069ee <__swsetup_r+0x7a>
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e4:	d003      	beq.n	80069ee <__swsetup_r+0x7a>
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 f83f 	bl	8006a6c <__smakebuf_r>
 80069ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f2:	f013 0201 	ands.w	r2, r3, #1
 80069f6:	d00a      	beq.n	8006a0e <__swsetup_r+0x9a>
 80069f8:	2200      	movs	r2, #0
 80069fa:	60a2      	str	r2, [r4, #8]
 80069fc:	6962      	ldr	r2, [r4, #20]
 80069fe:	4252      	negs	r2, r2
 8006a00:	61a2      	str	r2, [r4, #24]
 8006a02:	6922      	ldr	r2, [r4, #16]
 8006a04:	b942      	cbnz	r2, 8006a18 <__swsetup_r+0xa4>
 8006a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a0a:	d1c5      	bne.n	8006998 <__swsetup_r+0x24>
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
 8006a0e:	0799      	lsls	r1, r3, #30
 8006a10:	bf58      	it	pl
 8006a12:	6962      	ldrpl	r2, [r4, #20]
 8006a14:	60a2      	str	r2, [r4, #8]
 8006a16:	e7f4      	b.n	8006a02 <__swsetup_r+0x8e>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	e7f7      	b.n	8006a0c <__swsetup_r+0x98>
 8006a1c:	20000030 	.word	0x20000030

08006a20 <__swhatbuf_r>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	460c      	mov	r4, r1
 8006a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	b096      	sub	sp, #88	@ 0x58
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	461e      	mov	r6, r3
 8006a30:	da0d      	bge.n	8006a4e <__swhatbuf_r+0x2e>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a38:	f04f 0100 	mov.w	r1, #0
 8006a3c:	bf14      	ite	ne
 8006a3e:	2340      	movne	r3, #64	@ 0x40
 8006a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a44:	2000      	movs	r0, #0
 8006a46:	6031      	str	r1, [r6, #0]
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	b016      	add	sp, #88	@ 0x58
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
 8006a4e:	466a      	mov	r2, sp
 8006a50:	f000 f848 	bl	8006ae4 <_fstat_r>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dbec      	blt.n	8006a32 <__swhatbuf_r+0x12>
 8006a58:	9901      	ldr	r1, [sp, #4]
 8006a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a62:	4259      	negs	r1, r3
 8006a64:	4159      	adcs	r1, r3
 8006a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a6a:	e7eb      	b.n	8006a44 <__swhatbuf_r+0x24>

08006a6c <__smakebuf_r>:
 8006a6c:	898b      	ldrh	r3, [r1, #12]
 8006a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a70:	079d      	lsls	r5, r3, #30
 8006a72:	4606      	mov	r6, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	d507      	bpl.n	8006a88 <__smakebuf_r+0x1c>
 8006a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	6123      	str	r3, [r4, #16]
 8006a80:	2301      	movs	r3, #1
 8006a82:	6163      	str	r3, [r4, #20]
 8006a84:	b003      	add	sp, #12
 8006a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a88:	ab01      	add	r3, sp, #4
 8006a8a:	466a      	mov	r2, sp
 8006a8c:	f7ff ffc8 	bl	8006a20 <__swhatbuf_r>
 8006a90:	9f00      	ldr	r7, [sp, #0]
 8006a92:	4605      	mov	r5, r0
 8006a94:	4639      	mov	r1, r7
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff f98c 	bl	8005db4 <_malloc_r>
 8006a9c:	b948      	cbnz	r0, 8006ab2 <__smakebuf_r+0x46>
 8006a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa2:	059a      	lsls	r2, r3, #22
 8006aa4:	d4ee      	bmi.n	8006a84 <__smakebuf_r+0x18>
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	f043 0302 	orr.w	r3, r3, #2
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	e7e2      	b.n	8006a78 <__smakebuf_r+0xc>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	6020      	str	r0, [r4, #0]
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	9b01      	ldr	r3, [sp, #4]
 8006abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ac2:	b15b      	cbz	r3, 8006adc <__smakebuf_r+0x70>
 8006ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f81d 	bl	8006b08 <_isatty_r>
 8006ace:	b128      	cbz	r0, 8006adc <__smakebuf_r+0x70>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	81a3      	strh	r3, [r4, #12]
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	431d      	orrs	r5, r3
 8006ae0:	81a5      	strh	r5, [r4, #12]
 8006ae2:	e7cf      	b.n	8006a84 <__smakebuf_r+0x18>

08006ae4 <_fstat_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d07      	ldr	r5, [pc, #28]	@ (8006b04 <_fstat_r+0x20>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	602b      	str	r3, [r5, #0]
 8006af2:	f7fa fd00 	bl	80014f6 <_fstat>
 8006af6:	1c43      	adds	r3, r0, #1
 8006af8:	d102      	bne.n	8006b00 <_fstat_r+0x1c>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	b103      	cbz	r3, 8006b00 <_fstat_r+0x1c>
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
 8006b02:	bf00      	nop
 8006b04:	2000060c 	.word	0x2000060c

08006b08 <_isatty_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d06      	ldr	r5, [pc, #24]	@ (8006b24 <_isatty_r+0x1c>)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	4608      	mov	r0, r1
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	f7fa fcff 	bl	8001516 <_isatty>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_isatty_r+0x1a>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_isatty_r+0x1a>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	2000060c 	.word	0x2000060c

08006b28 <_sbrk_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d06      	ldr	r5, [pc, #24]	@ (8006b44 <_sbrk_r+0x1c>)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fa fd08 	bl	8001548 <_sbrk>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_sbrk_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_sbrk_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	2000060c 	.word	0x2000060c

08006b48 <memcpy>:
 8006b48:	440a      	add	r2, r1
 8006b4a:	4291      	cmp	r1, r2
 8006b4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b50:	d100      	bne.n	8006b54 <memcpy+0xc>
 8006b52:	4770      	bx	lr
 8006b54:	b510      	push	{r4, lr}
 8006b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5e:	4291      	cmp	r1, r2
 8006b60:	d1f9      	bne.n	8006b56 <memcpy+0xe>
 8006b62:	bd10      	pop	{r4, pc}

08006b64 <_malloc_usable_size_r>:
 8006b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b68:	1f18      	subs	r0, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bfbc      	itt	lt
 8006b6e:	580b      	ldrlt	r3, [r1, r0]
 8006b70:	18c0      	addlt	r0, r0, r3
 8006b72:	4770      	bx	lr

08006b74 <_init>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	bf00      	nop
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr

08006b80 <_fini>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	bf00      	nop
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr
