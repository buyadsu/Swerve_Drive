
Swerve_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800ccf0  0800ccf0  0000dcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2f4  0800d2f4  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2f4  0800d2f4  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2fc  0800d2fc  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2fc  0800d2fc  0000e2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d300  0800d300  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d304  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  200001ec  0800d4f0  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  0800d4f0  0000f890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e94  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da5  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00027e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8d  00000000  00000000  00029110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028217  00000000  00000000  00029f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016218  00000000  00000000  000521b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff6c0  00000000  00000000  000683cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  00167ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0016e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ccd4 	.word	0x0800ccd4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800ccd4 	.word	0x0800ccd4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <JOYSTICK_Init>:
static char _data_buffer[256];
static uint16_t _buf_index = 0;
static JoystickData _current_data = {0};
static bool _new_data_available = false;

void JOYSTICK_Init(UART_HandleTypeDef *huart) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    _huart = huart;
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <JOYSTICK_Init+0x28>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
    memset(_data_buffer, 0, sizeof(_data_buffer));
 8001042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001046:	2100      	movs	r1, #0
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <JOYSTICK_Init+0x2c>)
 800104a:	f008 fa6b 	bl	8009524 <memset>
    _buf_index = 0;
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <JOYSTICK_Init+0x30>)
 8001050:	2200      	movs	r2, #0
 8001052:	801a      	strh	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000208 	.word	0x20000208
 8001060:	2000020c 	.word	0x2000020c
 8001064:	2000030c 	.word	0x2000030c

08001068 <JOYSTICK_SetTimeout>:

void JOYSTICK_SetTimeout(uint32_t timeout) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    _timeout = timeout;
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <JOYSTICK_SetTimeout+0x1c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000

08001088 <JOYSTICK_Process>:

void JOYSTICK_Process(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b090      	sub	sp, #64	@ 0x40
 800108c:	af08      	add	r7, sp, #32
    char c;

    // Read until buffer full or newline received
    while (_buf_index < sizeof(_data_buffer) - 1) {
 800108e:	e053      	b.n	8001138 <JOYSTICK_Process+0xb0>
        if (HAL_UART_Receive(_huart, (uint8_t *)&c, 1, _timeout) == HAL_OK) {
 8001090:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <JOYSTICK_Process+0xc4>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	4b2e      	ldr	r3, [pc, #184]	@ (8001150 <JOYSTICK_Process+0xc8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f107 011f 	add.w	r1, r7, #31
 800109c:	2201      	movs	r2, #1
 800109e:	f005 fc95 	bl	80069cc <HAL_UART_Receive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d14c      	bne.n	8001142 <JOYSTICK_Process+0xba>
            if (c == '\n') {
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d13a      	bne.n	8001124 <JOYSTICK_Process+0x9c>
                // Process complete message
                _data_buffer[_buf_index] = '\0';
 80010ae:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <JOYSTICK_Process+0xcc>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <JOYSTICK_Process+0xd0>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	5499      	strb	r1, [r3, r2]

                // Temporary variables for parsing
                uint16_t dpad, buttons, misc;
                int32_t ax, ay, rax, ray, brake, throttle;

                sscanf(_data_buffer,
 80010ba:	f107 011a 	add.w	r1, r7, #26
 80010be:	f107 021c 	add.w	r2, r7, #28
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	9306      	str	r3, [sp, #24]
 80010c8:	463b      	mov	r3, r7
 80010ca:	9305      	str	r3, [sp, #20]
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	9304      	str	r3, [sp, #16]
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	9303      	str	r3, [sp, #12]
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	460b      	mov	r3, r1
 80010ea:	491c      	ldr	r1, [pc, #112]	@ (800115c <JOYSTICK_Process+0xd4>)
 80010ec:	481a      	ldr	r0, [pc, #104]	@ (8001158 <JOYSTICK_Process+0xd0>)
 80010ee:	f007 f9df 	bl	80084b0 <siscanf>
                       "dpad: 0x%04hx, buttons: 0x%04hx, axis L: %ld, %ld, axis R: %ld, %ld, brake: %ld, throttle: %ld, misc: 0x%04hx",
                       &dpad, &buttons, &ax, &ay, &rax, &ray, &brake, &throttle, &misc);

                // Update data structure
                _current_data.axisX = ax;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001160 <JOYSTICK_Process+0xd8>)
 80010f6:	6013      	str	r3, [r2, #0]
                _current_data.axisY = ay;
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <JOYSTICK_Process+0xd8>)
 80010fc:	6053      	str	r3, [r2, #4]
                _current_data.axisRX = rax;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <JOYSTICK_Process+0xd8>)
 8001102:	6093      	str	r3, [r2, #8]
                _current_data.buttons = buttons;
 8001104:	8b7a      	ldrh	r2, [r7, #26]
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <JOYSTICK_Process+0xd8>)
 8001108:	819a      	strh	r2, [r3, #12]
                _new_data_available = true;
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <JOYSTICK_Process+0xdc>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]

                // Reset buffer
                memset(_data_buffer, 0, sizeof(_data_buffer));
 8001110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001114:	2100      	movs	r1, #0
 8001116:	4810      	ldr	r0, [pc, #64]	@ (8001158 <JOYSTICK_Process+0xd0>)
 8001118:	f008 fa04 	bl	8009524 <memset>
                _buf_index = 0;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <JOYSTICK_Process+0xcc>)
 800111e:	2200      	movs	r2, #0
 8001120:	801a      	strh	r2, [r3, #0]
                break;
 8001122:	e00f      	b.n	8001144 <JOYSTICK_Process+0xbc>
            }
            _data_buffer[_buf_index++] = c;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <JOYSTICK_Process+0xcc>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	b291      	uxth	r1, r2
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <JOYSTICK_Process+0xcc>)
 800112e:	8011      	strh	r1, [r2, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	7ff9      	ldrb	r1, [r7, #31]
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <JOYSTICK_Process+0xd0>)
 8001136:	5499      	strb	r1, [r3, r2]
    while (_buf_index < sizeof(_data_buffer) - 1) {
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <JOYSTICK_Process+0xcc>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	d9a7      	bls.n	8001090 <JOYSTICK_Process+0x8>
        } else {
            // Timeout occurred
            break;
        }
    }
}
 8001140:	e000      	b.n	8001144 <JOYSTICK_Process+0xbc>
            break;
 8001142:	bf00      	nop
}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000208 	.word	0x20000208
 8001150:	20000000 	.word	0x20000000
 8001154:	2000030c 	.word	0x2000030c
 8001158:	2000020c 	.word	0x2000020c
 800115c:	0800ccf0 	.word	0x0800ccf0
 8001160:	20000310 	.word	0x20000310
 8001164:	20000320 	.word	0x20000320

08001168 <JOYSTICK_NewDataAvailable>:

bool JOYSTICK_NewDataAvailable(void) {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    return _new_data_available;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <JOYSTICK_NewDataAvailable+0x14>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000320 	.word	0x20000320

08001180 <JOYSTICK_GetData>:

JoystickData JOYSTICK_GetData(void) {
 8001180:	b490      	push	{r4, r7}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    _new_data_available = false;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <JOYSTICK_GetData+0x28>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    return _current_data;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <JOYSTICK_GetData+0x2c>)
 8001192:	461c      	mov	r4, r3
 8001194:	4613      	mov	r3, r2
 8001196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc90      	pop	{r4, r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000320 	.word	0x20000320
 80011ac:	20000310 	.word	0x20000310

080011b0 <optimize_angle>:
//        prev_angles[module_idx] = 0.0f;
//    }
//}

// Optimized angle calculation with direction preservation
static void optimize_angle(float* angle, float* speed, int module_idx) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    // Preserve original vector direction
    float original_angle = *angle;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	617b      	str	r3, [r7, #20]
    *speed = fabsf(*speed);
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eef0 7ae7 	vabs.f32	s15, s15
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	edc3 7a00 	vstr	s15, [r3]

    // Normalize to 0-360
    *angle = fmodf(*angle + 360.0f, 360.0f);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80012cc <optimize_angle+0x11c>
 80011dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e0:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80012cc <optimize_angle+0x11c>
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	f00b fade 	bl	800c7a8 <fmodf>
 80011ec:	eef0 7a40 	vmov.f32	s15, s0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	edc3 7a00 	vstr	s15, [r3]

    // Calculate shortest path from previous angle
    float angle_diff = *angle - prev_angles[module_idx];
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	ed93 7a00 	vldr	s14, [r3]
 80011fc:	4a34      	ldr	r2, [pc, #208]	@ (80012d0 <optimize_angle+0x120>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	edc7 7a04 	vstr	s15, [r7, #16]
    if (angle_diff > 180.0f) {
 8001210:	edd7 7a04 	vldr	s15, [r7, #16]
 8001214:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80012d4 <optimize_angle+0x124>
 8001218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	dd0a      	ble.n	8001238 <optimize_angle+0x88>
        *angle -= 360.0f;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80012cc <optimize_angle+0x11c>
 800122c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	edc3 7a00 	vstr	s15, [r3]
 8001236:	e012      	b.n	800125e <optimize_angle+0xae>
    } else if (angle_diff < -180.0f) {
 8001238:	edd7 7a04 	vldr	s15, [r7, #16]
 800123c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80012d8 <optimize_angle+0x128>
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d509      	bpl.n	800125e <optimize_angle+0xae>
        *angle += 360.0f;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80012cc <optimize_angle+0x11c>
 8001254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	edc3 7a00 	vstr	s15, [r3]
    }

    // For pure backward motion (ySpeed = -1), maintain 180° orientation
    if (fabsf(original_angle - 180.0f) < STEERING_DEADZONE) {
 800125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001262:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80012d4 <optimize_angle+0x124>
 8001266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800126a:	eef0 7ae7 	vabs.f32	s15, s15
 800126e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d502      	bpl.n	8001282 <optimize_angle+0xd2>
        *angle = 180.0f;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <optimize_angle+0x12c>)
 8001280:	601a      	str	r2, [r3, #0]
//    if (fabsf(original_angle - 135.0f) < STEERING_DEADZONE) {
//        *angle = 135.0f;
//    }

    // Update previous angle
    prev_angles[module_idx] = *angle;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4912      	ldr	r1, [pc, #72]	@ (80012d0 <optimize_angle+0x120>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	601a      	str	r2, [r3, #0]

    // Apply steering deadzone
    if (*speed < SPEED_DEADZONE) {
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80012e0 <optimize_angle+0x130>
 800129a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d400      	bmi.n	80012a6 <optimize_angle+0xf6>
        *angle = 0.0f;  // Return to neutral when stopped
        *speed = 0.0f;
        prev_angles[module_idx] = 0.0f;
    }
}
 80012a4:	e00e      	b.n	80012c4 <optimize_angle+0x114>
        *angle = 0.0f;  // Return to neutral when stopped
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
        *speed = 0.0f;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
        prev_angles[module_idx] = 0.0f;
 80012b6:	4a06      	ldr	r2, [pc, #24]	@ (80012d0 <optimize_angle+0x120>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	43b40000 	.word	0x43b40000
 80012d0:	2000068c 	.word	0x2000068c
 80012d4:	43340000 	.word	0x43340000
 80012d8:	c3340000 	.word	0xc3340000
 80012dc:	43340000 	.word	0x43340000
 80012e0:	3d4ccccd 	.word	0x3d4ccccd

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e8:	ed2d 8b02 	vpush	{d8}
 80012ec:	b0e2      	sub	sp, #392	@ 0x188
 80012ee:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  SwerveModule moduleRF = {	// Configuration moduleRF
 80012f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80012f4:	2248      	movs	r2, #72	@ 0x48
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 f913 	bl	8009524 <memset>
 80012fe:	4bd5      	ldr	r3, [pc, #852]	@ (8001654 <main+0x370>)
 8001300:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
 800130c:	4bd2      	ldr	r3, [pc, #840]	@ (8001658 <main+0x374>)
 800130e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001312:	2304      	movs	r3, #4
 8001314:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001318:	4bd0      	ldr	r3, [pc, #832]	@ (800165c <main+0x378>)
 800131a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800131e:	4bd0      	ldr	r3, [pc, #832]	@ (8001660 <main+0x37c>)
 8001320:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001324:	4bcf      	ldr	r3, [pc, #828]	@ (8001664 <main+0x380>)
 8001326:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800132a:	4bcf      	ldr	r3, [pc, #828]	@ (8001668 <main+0x384>)
 800132c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001330:	4bce      	ldr	r3, [pc, #824]	@ (800166c <main+0x388>)
 8001332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001336:	4bcb      	ldr	r3, [pc, #812]	@ (8001664 <main+0x380>)
 8001338:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800133c:	23c7      	movs	r3, #199	@ 0xc7
 800133e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001342:	4bcb      	ldr	r3, [pc, #812]	@ (8001670 <main+0x38c>)
 8001344:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001348:	f240 4355 	movw	r3, #1109	@ 0x455
 800134c:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
 8001350:	f240 5377 	movw	r3, #1399	@ 0x577
 8001354:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
 8001358:	f240 434b 	movw	r3, #1099	@ 0x44b
 800135c:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
 8001360:	4bc4      	ldr	r3, [pc, #784]	@ (8001674 <main+0x390>)
 8001362:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	      .arming_pulse = 1100-1
	  },
	  .counts_per_degree = ROBOT_STEERING_GEAR_RATIO / (float)(STEERING_ENCODER_RESOLUTION * 8) // Adjust based on encoder
  };

  SwerveModule moduleLF = {	// Configuration moduleRF
 8001366:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800136a:	2248      	movs	r2, #72	@ 0x48
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f008 f8d8 	bl	8009524 <memset>
 8001374:	4bb7      	ldr	r3, [pc, #732]	@ (8001654 <main+0x370>)
 8001376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800137a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800137e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
 8001382:	4bb5      	ldr	r3, [pc, #724]	@ (8001658 <main+0x374>)
 8001384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001388:	230c      	movs	r3, #12
 800138a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800138e:	4bba      	ldr	r3, [pc, #744]	@ (8001678 <main+0x394>)
 8001390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001394:	4bb9      	ldr	r3, [pc, #740]	@ (800167c <main+0x398>)
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800139a:	4bb2      	ldr	r3, [pc, #712]	@ (8001664 <main+0x380>)
 800139c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80013a0:	4bb1      	ldr	r3, [pc, #708]	@ (8001668 <main+0x384>)
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80013a6:	4bb1      	ldr	r3, [pc, #708]	@ (800166c <main+0x388>)
 80013a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80013ac:	4bad      	ldr	r3, [pc, #692]	@ (8001664 <main+0x380>)
 80013ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80013b2:	23c7      	movs	r3, #199	@ 0xc7
 80013b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80013b8:	4bad      	ldr	r3, [pc, #692]	@ (8001670 <main+0x38c>)
 80013ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013be:	2304      	movs	r3, #4
 80013c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013c4:	f240 4355 	movw	r3, #1109	@ 0x455
 80013c8:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
 80013cc:	f240 5377 	movw	r3, #1399	@ 0x577
 80013d0:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 80013d4:	f240 434b 	movw	r3, #1099	@ 0x44b
 80013d8:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
 80013dc:	4ba5      	ldr	r3, [pc, #660]	@ (8001674 <main+0x390>)
 80013de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	      .arming_pulse = 1100-1
	  },
	  .counts_per_degree = ROBOT_STEERING_GEAR_RATIO / (float)(STEERING_ENCODER_RESOLUTION * 8) // Adjust based on encoder
  };

  SwerveModule moduleRB = {	// Configuration moduleRF
 80013e2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013ea:	4618      	mov	r0, r3
 80013ec:	2348      	movs	r3, #72	@ 0x48
 80013ee:	461a      	mov	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f008 f897 	bl	8009524 <memset>
 80013f6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80013fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013fe:	4a95      	ldr	r2, [pc, #596]	@ (8001654 <main+0x370>)
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001406:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800140a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800140e:	809a      	strh	r2, [r3, #4]
 8001410:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001414:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001418:	4a8f      	ldr	r2, [pc, #572]	@ (8001658 <main+0x374>)
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001420:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001424:	4a96      	ldr	r2, [pc, #600]	@ (8001680 <main+0x39c>)
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800142c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001430:	4a92      	ldr	r2, [pc, #584]	@ (800167c <main+0x398>)
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001438:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800143c:	4a89      	ldr	r2, [pc, #548]	@ (8001664 <main+0x380>)
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001444:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001448:	4a87      	ldr	r2, [pc, #540]	@ (8001668 <main+0x384>)
 800144a:	61da      	str	r2, [r3, #28]
 800144c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001450:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001454:	4a85      	ldr	r2, [pc, #532]	@ (800166c <main+0x388>)
 8001456:	621a      	str	r2, [r3, #32]
 8001458:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800145c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001460:	4a80      	ldr	r2, [pc, #512]	@ (8001664 <main+0x380>)
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
 8001464:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001468:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800146c:	22c7      	movs	r2, #199	@ 0xc7
 800146e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001470:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001474:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001478:	4a7d      	ldr	r2, [pc, #500]	@ (8001670 <main+0x38c>)
 800147a:	635a      	str	r2, [r3, #52]	@ 0x34
 800147c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001480:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001484:	2208      	movs	r2, #8
 8001486:	639a      	str	r2, [r3, #56]	@ 0x38
 8001488:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800148c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001490:	f240 4255 	movw	r2, #1109	@ 0x455
 8001494:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8001496:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800149a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800149e:	f240 5277 	movw	r2, #1399	@ 0x577
 80014a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80014a4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014ac:	f240 424b 	movw	r2, #1099	@ 0x44b
 80014b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80014b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014bc:	4a6d      	ldr	r2, [pc, #436]	@ (8001674 <main+0x390>)
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44
	      .arming_pulse = 1100-1
	  },
	  .counts_per_degree = ROBOT_STEERING_GEAR_RATIO / (float)(STEERING_ENCODER_RESOLUTION * 8) // Adjust based on encoder
  };

  SwerveModule moduleLB = {	// Configuration moduleRF
 80014c0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014c8:	4618      	mov	r0, r3
 80014ca:	2348      	movs	r3, #72	@ 0x48
 80014cc:	461a      	mov	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	f008 f828 	bl	8009524 <memset>
 80014d4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001654 <main+0x370>)
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ec:	809a      	strh	r2, [r3, #4]
 80014ee:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014f6:	4a58      	ldr	r2, [pc, #352]	@ (8001658 <main+0x374>)
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80014fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001502:	2208      	movs	r2, #8
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800150a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800150e:	4a5d      	ldr	r2, [pc, #372]	@ (8001684 <main+0x3a0>)
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001516:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800151a:	4a58      	ldr	r2, [pc, #352]	@ (800167c <main+0x398>)
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001522:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001526:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <main+0x380>)
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800152e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001532:	4a4d      	ldr	r2, [pc, #308]	@ (8001668 <main+0x384>)
 8001534:	61da      	str	r2, [r3, #28]
 8001536:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800153a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800153e:	4a4b      	ldr	r2, [pc, #300]	@ (800166c <main+0x388>)
 8001540:	621a      	str	r2, [r3, #32]
 8001542:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001546:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800154a:	4a46      	ldr	r2, [pc, #280]	@ (8001664 <main+0x380>)
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
 800154e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001552:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001556:	22c7      	movs	r2, #199	@ 0xc7
 8001558:	631a      	str	r2, [r3, #48]	@ 0x30
 800155a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800155e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001562:	4a43      	ldr	r2, [pc, #268]	@ (8001670 <main+0x38c>)
 8001564:	635a      	str	r2, [r3, #52]	@ 0x34
 8001566:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800156a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800156e:	220c      	movs	r2, #12
 8001570:	639a      	str	r2, [r3, #56]	@ 0x38
 8001572:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001576:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800157a:	f240 4255 	movw	r2, #1109	@ 0x455
 800157e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8001580:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001584:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001588:	f240 5277 	movw	r2, #1399	@ 0x577
 800158c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800158e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001592:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001596:	f240 424b 	movw	r2, #1099	@ 0x44b
 800159a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800159e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80015a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015a6:	4a33      	ldr	r2, [pc, #204]	@ (8001674 <main+0x390>)
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015aa:	f002 fa63 	bl	8003a74 <HAL_Init>

  /* USER CODE BEGIN Init */
  JOYSTICK_Init(&huart4);  // Pass your UART handle
 80015ae:	4836      	ldr	r0, [pc, #216]	@ (8001688 <main+0x3a4>)
 80015b0:	f7ff fd40 	bl	8001034 <JOYSTICK_Init>
  JOYSTICK_SetTimeout(100); // Optional: Set custom timeout
 80015b4:	2064      	movs	r0, #100	@ 0x64
 80015b6:	f7ff fd57 	bl	8001068 <JOYSTICK_SetTimeout>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ba:	f000 fd09 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015be:	f001 f97d 	bl	80028bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80015c2:	f000 fd51 	bl	8002068 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015c6:	f000 fda9 	bl	800211c <MX_TIM2_Init>
  MX_TIM4_Init();
 80015ca:	f000 fed7 	bl	800237c <MX_TIM4_Init>
  MX_TIM3_Init();
 80015ce:	f000 fe3d 	bl	800224c <MX_TIM3_Init>
  MX_TIM8_Init();
 80015d2:	f000 ff83 	bl	80024dc <MX_TIM8_Init>
  MX_TIM20_Init();
 80015d6:	f001 f8c9 	bl	800276c <MX_TIM20_Init>
  MX_UART4_Init();
 80015da:	f001 f921 	bl	8002820 <MX_UART4_Init>
  MX_TIM16_Init();
 80015de:	f000 ffd7 	bl	8002590 <MX_TIM16_Init>
  MX_TIM17_Init();
 80015e2:	f001 f84b 	bl	800267c <MX_TIM17_Init>
  MX_TIM5_Init();
 80015e6:	f000 ff1f 	bl	8002428 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  // Initialization
  SM_Init(&moduleRF);
 80015ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fd32 	bl	8003058 <SM_Init>
  SM_Init(&moduleLF);
 80015f4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fd2d 	bl	8003058 <SM_Init>
  SM_Init(&moduleRB);
 80015fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fd28 	bl	8003058 <SM_Init>
  SM_Init(&moduleLB);
 8001608:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fd23 	bl	8003058 <SM_Init>

  // Start PWM timers
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001612:	2104      	movs	r1, #4
 8001614:	481d      	ldr	r0, [pc, #116]	@ (800168c <main+0x3a8>)
 8001616:	f003 fec1 	bl	800539c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800161a:	2100      	movs	r1, #0
 800161c:	481c      	ldr	r0, [pc, #112]	@ (8001690 <main+0x3ac>)
 800161e:	f003 febd 	bl	800539c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001622:	2100      	movs	r1, #0
 8001624:	481b      	ldr	r0, [pc, #108]	@ (8001694 <main+0x3b0>)
 8001626:	f003 feb9 	bl	800539c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800162a:	2000      	movs	r0, #0
 800162c:	f002 f86e 	bl	800370c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001630:	2101      	movs	r1, #1
 8001632:	2000      	movs	r0, #0
 8001634:	f002 f8cc 	bl	80037d0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <main+0x3b4>)
 800163a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <main+0x3b4>)
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <main+0x3b4>)
 8001648:	2200      	movs	r2, #0
 800164a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <main+0x3b4>)
 800164e:	2200      	movs	r2, #0
 8001650:	e024      	b.n	800169c <main+0x3b8>
 8001652:	bf00      	nop
 8001654:	48000400 	.word	0x48000400
 8001658:	200003d0 	.word	0x200003d0
 800165c:	20000338 	.word	0x20000338
 8001660:	40a00000 	.word	0x40a00000
 8001664:	3dcccccd 	.word	0x3dcccccd
 8001668:	3c23d70a 	.word	0x3c23d70a
 800166c:	43fa0000 	.word	0x43fa0000
 8001670:	20000384 	.word	0x20000384
 8001674:	3983126f 	.word	0x3983126f
 8001678:	2000041c 	.word	0x2000041c
 800167c:	40200000 	.word	0x40200000
 8001680:	200004b4 	.word	0x200004b4
 8001684:	20000598 	.word	0x20000598
 8001688:	200005e4 	.word	0x200005e4
 800168c:	20000468 	.word	0x20000468
 8001690:	20000500 	.word	0x20000500
 8001694:	2000054c 	.word	0x2000054c
 8001698:	20000324 	.word	0x20000324
 800169c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800169e:	4ba2      	ldr	r3, [pc, #648]	@ (8001928 <main+0x644>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80016a4:	49a0      	ldr	r1, [pc, #640]	@ (8001928 <main+0x644>)
 80016a6:	2000      	movs	r0, #0
 80016a8:	f002 f912 	bl	80038d0 <BSP_COM_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <main+0x3d2>
  {
    Error_Handler();
 80016b2:	f001 f9af 	bl	8002a14 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Swerve Drive Robot Initialized\n");
 80016b6:	489d      	ldr	r0, [pc, #628]	@ (800192c <main+0x648>)
 80016b8:	f007 ff1a 	bl	80094f0 <puts>
  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 80016bc:	2000      	movs	r0, #0
 80016be:	f002 f85b 	bl	8003778 <BSP_LED_On>
  // Before setting PWM values:
  HAL_GPIO_WritePin(MOTOR1_GPIO_Port, MOTOR1_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2104      	movs	r1, #4
 80016c6:	489a      	ldr	r0, [pc, #616]	@ (8001930 <main+0x64c>)
 80016c8:	f002 fd58 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR2_GPIO_Port, MOTOR2_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d2:	4898      	ldr	r0, [pc, #608]	@ (8001934 <main+0x650>)
 80016d4:	f002 fd52 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR3_GPIO_Port, MOTOR3_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016de:	4895      	ldr	r0, [pc, #596]	@ (8001934 <main+0x650>)
 80016e0:	f002 fd4c 	bl	800417c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80016e4:	4b94      	ldr	r3, [pc, #592]	@ (8001938 <main+0x654>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <main+0x414>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80016ec:	4b92      	ldr	r3, [pc, #584]	@ (8001938 <main+0x654>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f002 f856 	bl	80037a4 <BSP_LED_Toggle>
      /* ..... Perform your action ..... */
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    JOYSTICK_Process();
 80016f8:	f7ff fcc6 	bl	8001088 <JOYSTICK_Process>

    if (JOYSTICK_NewDataAvailable()) {
 80016fc:	f7ff fd34 	bl	8001168 <JOYSTICK_NewDataAvailable>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 81a2 	beq.w	8001a4c <main+0x768>
    	JoystickData data = JOYSTICK_GetData();
 8001708:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800170c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fd35 	bl	8001180 <JOYSTICK_GetData>
    	lastJoystickUpdate = HAL_GetTick();  // Reset timeout timer
 8001716:	f002 fa11 	bl	8003b3c <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	4a87      	ldr	r2, [pc, #540]	@ (800193c <main+0x658>)
 800171e:	6013      	str	r3, [r2, #0]

        xSpeed = (float)data.axisX / 512.0f;
 8001720:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001724:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001732:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8001940 <main+0x65c>
 8001736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800173a:	4b82      	ldr	r3, [pc, #520]	@ (8001944 <main+0x660>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
        ySpeed = (float)data.axisY / -512.0f;
 8001740:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001744:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001752:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001948 <main+0x664>
 8001756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175a:	4b7c      	ldr	r3, [pc, #496]	@ (800194c <main+0x668>)
 800175c:	edc3 7a00 	vstr	s15, [r3]
        rot = (float)data.axisRX / -512.0f;
 8001760:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001764:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001948 <main+0x664>
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	4b75      	ldr	r3, [pc, #468]	@ (8001950 <main+0x66c>)
 800177c:	edc3 7a00 	vstr	s15, [r3]

		#ifdef DEBUG_PRINT
			printf("X: %ld, Y: %ld, RX: %ld\n", data.axisX, data.axisY, data.axisRX);
 8001780:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001784:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800178e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001798:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	486d      	ldr	r0, [pc, #436]	@ (8001954 <main+0x670>)
 80017a0:	f007 fe3e 	bl	8009420 <iprintf>
		#endif

        // Add data validation
        if(xSpeed < -512 || xSpeed > 511 ||
 80017a4:	4b67      	ldr	r3, [pc, #412]	@ (8001944 <main+0x660>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001948 <main+0x664>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d41d      	bmi.n	80017f4 <main+0x510>
 80017b8:	4b62      	ldr	r3, [pc, #392]	@ (8001944 <main+0x660>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001958 <main+0x674>
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	dc13      	bgt.n	80017f4 <main+0x510>
           ySpeed < -512 || ySpeed > 511) {
 80017cc:	4b5f      	ldr	r3, [pc, #380]	@ (800194c <main+0x668>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
        if(xSpeed < -512 || xSpeed > 511 ||
 80017d2:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001948 <main+0x664>
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	d409      	bmi.n	80017f4 <main+0x510>
           ySpeed < -512 || ySpeed > 511) {
 80017e0:	4b5a      	ldr	r3, [pc, #360]	@ (800194c <main+0x668>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001958 <main+0x674>
 80017ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	dd0e      	ble.n	8001812 <main+0x52e>

        	xSpeed = 0.0f;
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <main+0x660>)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
        	ySpeed = 0.0f;
 80017fc:	4b53      	ldr	r3, [pc, #332]	@ (800194c <main+0x668>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
        	rot = 0.0f;
 8001804:	4b52      	ldr	r3, [pc, #328]	@ (8001950 <main+0x66c>)
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
            printf("Invalid joystick data!\r\n");
 800180c:	4853      	ldr	r0, [pc, #332]	@ (800195c <main+0x678>)
 800180e:	f007 fe6f 	bl	80094f0 <puts>
        }

        printf("Buttons (Hex): 0x%04X\n", data.buttons);
 8001812:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001816:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800181a:	899b      	ldrh	r3, [r3, #12]
 800181c:	4619      	mov	r1, r3
 800181e:	4850      	ldr	r0, [pc, #320]	@ (8001960 <main+0x67c>)
 8001820:	f007 fdfe 	bl	8009420 <iprintf>

//        HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, (data.buttons & 0x0001) ? GPIO_PIN_SET : GPIO_PIN_RESET);
//        HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, (data.buttons & 0x0002) ? GPIO_PIN_SET : GPIO_PIN_RESET);

        // Control relays based on buttons
        if (data.buttons & 0x0001) { // sungah tsylinder
 8001824:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001828:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800182c:	899b      	ldrh	r3, [r3, #12]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <main+0x566>
            HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800183c:	4849      	ldr	r0, [pc, #292]	@ (8001964 <main+0x680>)
 800183e:	f002 fc9d 	bl	800417c <HAL_GPIO_WritePin>
            printf("relay1\n");
 8001842:	4849      	ldr	r0, [pc, #292]	@ (8001968 <main+0x684>)
 8001844:	f007 fe54 	bl	80094f0 <puts>
 8001848:	e005      	b.n	8001856 <main+0x572>
        } else {
            HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001850:	4844      	ldr	r0, [pc, #272]	@ (8001964 <main+0x680>)
 8001852:	f002 fc93 	bl	800417c <HAL_GPIO_WritePin>
//            PASS_State = false;
//        }


        // Assume we toggle using button bit 0.
        bool currentZalahState = (data.buttons & 0x0004) != 0;
 8001856:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800185a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800185e:	899b      	ldrh	r3, [r3, #12]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

        // Detect rising edge: current is pressed and last was not.
        if (currentZalahState && !lastZalahState) {
 8001870:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8085 	beq.w	8001984 <main+0x6a0>
 800187a:	4b3c      	ldr	r3, [pc, #240]	@ (800196c <main+0x688>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d07d      	beq.n	8001984 <main+0x6a0>
            zalahState = !zalahState;  // Toggle relay state
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <main+0x68c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <main+0x68c>)
 80018a4:	701a      	strb	r2, [r3, #0]

            if (zalahState) { // Zalah 		damjuulah tsylinder ajilaagu bh ystoi
 80018a6:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <main+0x68c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d066      	beq.n	800197c <main+0x698>
                printf("zalah\n");
 80018ae:	4831      	ldr	r0, [pc, #196]	@ (8001974 <main+0x690>)
 80018b0:	f007 fe1e 	bl	80094f0 <puts>
                HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ba:	482a      	ldr	r0, [pc, #168]	@ (8001964 <main+0x680>)
 80018bc:	f002 fc5e 	bl	800417c <HAL_GPIO_WritePin>
                HAL_Delay(3000);
 80018c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80018c4:	f002 f946 	bl	8003b54 <HAL_Delay>
                HAL_GPIO_WritePin(MOTOR1_GPIO_Port, MOTOR1_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2104      	movs	r1, #4
 80018cc:	4818      	ldr	r0, [pc, #96]	@ (8001930 <main+0x64c>)
 80018ce:	f002 fc55 	bl	800417c <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 140);
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <main+0x694>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	228c      	movs	r2, #140	@ 0x8c
 80018d8:	639a      	str	r2, [r3, #56]	@ 0x38
                HAL_Delay(600);
 80018da:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80018de:	f002 f939 	bl	8003b54 <HAL_Delay>

                HAL_GPIO_WritePin(MOTOR1_GPIO_Port, MOTOR1_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2104      	movs	r1, #4
 80018e6:	4812      	ldr	r0, [pc, #72]	@ (8001930 <main+0x64c>)
 80018e8:	f002 fc48 	bl	800417c <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 140);
 80018ec:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <main+0x694>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	228c      	movs	r2, #140	@ 0x8c
 80018f2:	639a      	str	r2, [r3, #56]	@ 0x38
                HAL_Delay(700);
 80018f4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80018f8:	f002 f92c 	bl	8003b54 <HAL_Delay>

                __HAL_TIM_SET_COMPARE(&MOTOR1_TIM, MOTOR1_CH, 0);
 80018fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <main+0x694>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	639a      	str	r2, [r3, #56]	@ 0x38
                HAL_Delay(1000);
 8001904:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001908:	f002 f924 	bl	8003b54 <HAL_Delay>

                HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001912:	4814      	ldr	r0, [pc, #80]	@ (8001964 <main+0x680>)
 8001914:	f002 fc32 	bl	800417c <HAL_GPIO_WritePin>
                HAL_Delay(4000);
 8001918:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800191c:	f002 f91a 	bl	8003b54 <HAL_Delay>
                zalahState = false;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <main+0x68c>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e02d      	b.n	8001984 <main+0x6a0>
 8001928:	20000324 	.word	0x20000324
 800192c:	0800cd60 	.word	0x0800cd60
 8001930:	48000c00 	.word	0x48000c00
 8001934:	48000400 	.word	0x48000400
 8001938:	20000334 	.word	0x20000334
 800193c:	20000684 	.word	0x20000684
 8001940:	44000000 	.word	0x44000000
 8001944:	20000678 	.word	0x20000678
 8001948:	c4000000 	.word	0xc4000000
 800194c:	2000067c 	.word	0x2000067c
 8001950:	20000680 	.word	0x20000680
 8001954:	0800cd80 	.word	0x0800cd80
 8001958:	43ff8000 	.word	0x43ff8000
 800195c:	0800cd9c 	.word	0x0800cd9c
 8001960:	0800cdb4 	.word	0x0800cdb4
 8001964:	48000800 	.word	0x48000800
 8001968:	0800cdcc 	.word	0x0800cdcc
 800196c:	2000068a 	.word	0x2000068a
 8001970:	2000068b 	.word	0x2000068b
 8001974:	0800cdd4 	.word	0x0800cdd4
 8001978:	20000468 	.word	0x20000468
            } else {
                __HAL_TIM_SET_COMPARE(&MOTOR1_TIM, MOTOR1_CH, 0);
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <main+0x72c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }

        // Update last button state for edge detection in the next loop iteration.
        lastZalahState = currentZalahState;
 8001984:	4a23      	ldr	r2, [pc, #140]	@ (8001a14 <main+0x730>)
 8001986:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800198a:	7013      	strb	r3, [r2, #0]
////            __HAL_TIM_SET_COMPARE(&MOTOR2_TIM, MOTOR2_CH, 0);
////            __HAL_TIM_SET_COMPARE(&MOTOR3_TIM, MOTOR3_CH, 0);
//        }

        // Assume we toggle using button bit 0.
        bool currentButtonState = (data.buttons & 0x0008) != 0;
 800198c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001990:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001994:	899b      	ldrh	r3, [r3, #12]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176

        // Detect rising edge: current is pressed and last was not.
        if (currentButtonState && !lastButtonState) {
 80019a6:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d04a      	beq.n	8001a44 <main+0x760>
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <main+0x734>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d043      	beq.n	8001a44 <main+0x760>
            throwState = !throwState;  // Toggle relay state
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <main+0x738>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f083 0301 	eor.w	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <main+0x738>)
 80019d8:	701a      	strb	r2, [r3, #0]

            if (throwState) {
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <main+0x738>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d028      	beq.n	8001a34 <main+0x750>
                printf("shideh\n");
 80019e2:	480f      	ldr	r0, [pc, #60]	@ (8001a20 <main+0x73c>)
 80019e4:	f007 fd84 	bl	80094f0 <puts>
                HAL_GPIO_WritePin(MOTOR1_GPIO_Port, MOTOR1_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2104      	movs	r1, #4
 80019ec:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <main+0x740>)
 80019ee:	f002 fbc5 	bl	800417c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(MOTOR2_GPIO_Port, MOTOR2_Pin, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f8:	480b      	ldr	r0, [pc, #44]	@ (8001a28 <main+0x744>)
 80019fa:	f002 fbbf 	bl	800417c <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 150);
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <main+0x748>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2296      	movs	r2, #150	@ 0x96
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
                __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 120);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <main+0x74c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2278      	movs	r2, #120	@ 0x78
 8001a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a0e:	e019      	b.n	8001a44 <main+0x760>
 8001a10:	20000468 	.word	0x20000468
 8001a14:	2000068a 	.word	0x2000068a
 8001a18:	20000688 	.word	0x20000688
 8001a1c:	20000689 	.word	0x20000689
 8001a20:	0800cddc 	.word	0x0800cddc
 8001a24:	48000c00 	.word	0x48000c00
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	20000500 	.word	0x20000500
 8001a30:	2000054c 	.word	0x2000054c
            } else {
                __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8001a34:	4bde      	ldr	r3, [pc, #888]	@ (8001db0 <main+0xacc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	635a      	str	r2, [r3, #52]	@ 0x34
                __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);
 8001a3c:	4bdd      	ldr	r3, [pc, #884]	@ (8001db4 <main+0xad0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2200      	movs	r2, #0
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
            }
        }

        // Update last button state for edge detection in the next loop iteration.
        lastButtonState = currentButtonState;
 8001a44:	4adc      	ldr	r2, [pc, #880]	@ (8001db8 <main+0xad4>)
 8001a46:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 8001a4a:	7013      	strb	r3, [r2, #0]
    }
    HAL_Delay(10);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f002 f881 	bl	8003b54 <HAL_Delay>

    // If no joystick data received for TIMEOUT_MS, stop the motors
    if (HAL_GetTick() - lastJoystickUpdate > TIMEOUT_MS) {
 8001a52:	f002 f873 	bl	8003b3c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4bd8      	ldr	r3, [pc, #864]	@ (8001dbc <main+0xad8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a62:	d913      	bls.n	8001a8c <main+0x7a8>
        xSpeed = 0.0f;
 8001a64:	4bd6      	ldr	r3, [pc, #856]	@ (8001dc0 <main+0xadc>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
        ySpeed = 0.0f;
 8001a6c:	4bd5      	ldr	r3, [pc, #852]	@ (8001dc4 <main+0xae0>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
        rot = 0.0f;
 8001a74:	4bd4      	ldr	r3, [pc, #848]	@ (8001dc8 <main+0xae4>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        printf("Joystick connection lost.\n");
 8001a7c:	48d3      	ldr	r0, [pc, #844]	@ (8001dcc <main+0xae8>)
 8001a7e:	f007 fd37 	bl	80094f0 <puts>
        lastJoystickUpdate = HAL_GetTick();
 8001a82:	f002 f85b 	bl	8003b3c <HAL_GetTick>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4acc      	ldr	r2, [pc, #816]	@ (8001dbc <main+0xad8>)
 8001a8a:	6013      	str	r3, [r2, #0]
    }

    printf("xSpeed: %f, ySpeed: %f, Rot: %f\n", xSpeed, ySpeed, rot);
 8001a8c:	4bcc      	ldr	r3, [pc, #816]	@ (8001dc0 <main+0xadc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd81 	bl	8000598 <__aeabi_f2d>
 8001a96:	4680      	mov	r8, r0
 8001a98:	4689      	mov	r9, r1
 8001a9a:	4bca      	ldr	r3, [pc, #808]	@ (8001dc4 <main+0xae0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd7a 	bl	8000598 <__aeabi_f2d>
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	460d      	mov	r5, r1
 8001aa8:	4bc7      	ldr	r3, [pc, #796]	@ (8001dc8 <main+0xae4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd73 	bl	8000598 <__aeabi_f2d>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001aba:	e9cd 4500 	strd	r4, r5, [sp]
 8001abe:	4642      	mov	r2, r8
 8001ac0:	464b      	mov	r3, r9
 8001ac2:	48c3      	ldr	r0, [pc, #780]	@ (8001dd0 <main+0xaec>)
 8001ac4:	f007 fcac 	bl	8009420 <iprintf>
		HAL_Delay(10);
#else

		// Kinematic calculations for each module
		// Front Right (RF)
		float rf_x = xSpeed - (rot * (ROBOT_LENGTH / 2.0f));
 8001ac8:	4bbd      	ldr	r3, [pc, #756]	@ (8001dc0 <main+0xadc>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	4bbe      	ldr	r3, [pc, #760]	@ (8001dc8 <main+0xae4>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001ad8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae0:	edc7 7a5c 	vstr	s15, [r7, #368]	@ 0x170
		float rf_y = ySpeed + (rot * (ROBOT_WIDTH / 2.0f));
 8001ae4:	4bb8      	ldr	r3, [pc, #736]	@ (8001dc8 <main+0xae4>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001aee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af2:	4bb4      	ldr	r3, [pc, #720]	@ (8001dc4 <main+0xae0>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afc:	edc7 7a5b 	vstr	s15, [r7, #364]	@ 0x16c
		float rf_angle = atan2f(rf_x, rf_y) * (180.0f / (float)M_PI);
 8001b00:	edd7 0a5b 	vldr	s1, [r7, #364]	@ 0x16c
 8001b04:	ed97 0a5c 	vldr	s0, [r7, #368]	@ 0x170
 8001b08:	f00a fe4c 	bl	800c7a4 <atan2f>
 8001b0c:	eef0 7a40 	vmov.f32	s15, s0
 8001b10:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001dd4 <main+0xaf0>
 8001b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b18:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b1c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		float rf_speed = sqrtf(rf_x * rf_x + rf_y * rf_y);
 8001b24:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8001b28:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b2c:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8001b30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	f00a fe54 	bl	800c7e8 <sqrtf>
 8001b40:	eef0 7a40 	vmov.f32	s15, s0
 8001b44:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b4c:	edc3 7a00 	vstr	s15, [r3]

		// Front Left (LF)
		float lf_x = xSpeed + (rot * (ROBOT_LENGTH / 2.0f));
 8001b50:	4b9d      	ldr	r3, [pc, #628]	@ (8001dc8 <main+0xae4>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001b5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b5e:	4b98      	ldr	r3, [pc, #608]	@ (8001dc0 <main+0xadc>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
		float lf_y = ySpeed + (rot * (ROBOT_WIDTH / 2.0f));
 8001b6c:	4b96      	ldr	r3, [pc, #600]	@ (8001dc8 <main+0xae4>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001b76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b7a:	4b92      	ldr	r3, [pc, #584]	@ (8001dc4 <main+0xae0>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
		float lf_angle = atan2f(lf_x, lf_y) * (180.0f / (float)M_PI);
 8001b88:	edd7 0a59 	vldr	s1, [r7, #356]	@ 0x164
 8001b8c:	ed97 0a5a 	vldr	s0, [r7, #360]	@ 0x168
 8001b90:	f00a fe08 	bl	800c7a4 <atan2f>
 8001b94:	eef0 7a40 	vmov.f32	s15, s0
 8001b98:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001dd4 <main+0xaf0>
 8001b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ba4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
		float lf_speed = sqrtf(lf_x * lf_x + lf_y * lf_y);
 8001bac:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 8001bb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bb4:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 8001bb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc4:	f00a fe10 	bl	800c7e8 <sqrtf>
 8001bc8:	eef0 7a40 	vmov.f32	s15, s0
 8001bcc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001bd0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bd4:	edc3 7a00 	vstr	s15, [r3]

		// Rear Right (RB)
		float rb_x = xSpeed - (rot * (ROBOT_LENGTH / 2.0f));
 8001bd8:	4b79      	ldr	r3, [pc, #484]	@ (8001dc0 <main+0xadc>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc8 <main+0xae4>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001be8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf0:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
		float rb_y = ySpeed - (rot * (ROBOT_WIDTH / 2.0f));
 8001bf4:	4b73      	ldr	r3, [pc, #460]	@ (8001dc4 <main+0xae0>)
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	@ (8001dc8 <main+0xae4>)
 8001bfc:	edd3 7a00 	vldr	s15, [r3]
 8001c00:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001c04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0c:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
		float rb_angle = atan2f(rb_x, rb_y) * (180.0f / (float)M_PI);
 8001c10:	edd7 0a57 	vldr	s1, [r7, #348]	@ 0x15c
 8001c14:	ed97 0a58 	vldr	s0, [r7, #352]	@ 0x160
 8001c18:	f00a fdc4 	bl	800c7a4 <atan2f>
 8001c1c:	eef0 7a40 	vmov.f32	s15, s0
 8001c20:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001dd4 <main+0xaf0>
 8001c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c28:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c2c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c30:	edc3 7a00 	vstr	s15, [r3]
		float rb_speed = sqrtf(rb_x * rb_x + rb_y * rb_y);
 8001c34:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8001c38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c3c:	edd7 7a57 	vldr	s15, [r7, #348]	@ 0x15c
 8001c40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	f00a fdcc 	bl	800c7e8 <sqrtf>
 8001c50:	eef0 7a40 	vmov.f32	s15, s0
 8001c54:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c58:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c5c:	edc3 7a00 	vstr	s15, [r3]

		// Rear Left (LB)
		float lb_x = xSpeed + (rot * (ROBOT_LENGTH / 2.0f));
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <main+0xae4>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001c6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6e:	4b54      	ldr	r3, [pc, #336]	@ (8001dc0 <main+0xadc>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	edc7 7a56 	vstr	s15, [r7, #344]	@ 0x158
		float lb_y = ySpeed - (rot * (ROBOT_WIDTH / 2.0f));
 8001c7c:	4b51      	ldr	r3, [pc, #324]	@ (8001dc4 <main+0xae0>)
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	4b51      	ldr	r3, [pc, #324]	@ (8001dc8 <main+0xae4>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c94:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
		float lb_angle = atan2f(lb_x, lb_y) * (180.0f / (float)M_PI);
 8001c98:	edd7 0a55 	vldr	s1, [r7, #340]	@ 0x154
 8001c9c:	ed97 0a56 	vldr	s0, [r7, #344]	@ 0x158
 8001ca0:	f00a fd80 	bl	800c7a4 <atan2f>
 8001ca4:	eef0 7a40 	vmov.f32	s15, s0
 8001ca8:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001dd4 <main+0xaf0>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cb4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cb8:	edc3 7a00 	vstr	s15, [r3]
		float lb_speed = sqrtf(lb_x * lb_x + lb_y * lb_y);
 8001cbc:	edd7 7a56 	vldr	s15, [r7, #344]	@ 0x158
 8001cc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cc4:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8001cc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	f00a fd88 	bl	800c7e8 <sqrtf>
 8001cd8:	eef0 7a40 	vmov.f32	s15, s0
 8001cdc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ce0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ce4:	edc3 7a00 	vstr	s15, [r3]

		// Apply optimization to all modules
	    optimize_angle(&rf_angle, &rf_speed, 0);
 8001ce8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa5c 	bl	80011b0 <optimize_angle>
	    optimize_angle(&lf_angle, &lf_speed, 1);
 8001cf8:	f107 0120 	add.w	r1, r7, #32
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	2201      	movs	r2, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa54 	bl	80011b0 <optimize_angle>
	    optimize_angle(&rb_angle, &rb_speed, 2);
 8001d08:	f107 0118 	add.w	r1, r7, #24
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2202      	movs	r2, #2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fa4c 	bl	80011b0 <optimize_angle>
	    optimize_angle(&lb_angle, &lb_speed, 3);
 8001d18:	f107 0110 	add.w	r1, r7, #16
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2203      	movs	r2, #3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa44 	bl	80011b0 <optimize_angle>

	    // 4. Add steering deadzone
	    if(fabsf(rf_speed) < 0.01f) rf_angle = 0.0f;
 8001d28:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eef0 7ae7 	vabs.f32	s15, s15
 8001d38:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001dd8 <main+0xaf4>
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d506      	bpl.n	8001d54 <main+0xa70>
 8001d46:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
	    if(fabsf(lf_speed) < 0.01f) lf_angle = 0.0f;
 8001d54:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d58:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eef0 7ae7 	vabs.f32	s15, s15
 8001d64:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001dd8 <main+0xaf4>
 8001d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	d506      	bpl.n	8001d80 <main+0xa9c>
 8001d72:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
	    if(fabsf(rb_speed) < 0.01f) rb_angle = 0.0f;
 8001d80:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d84:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d90:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001dd8 <main+0xaf4>
 8001d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d51e      	bpl.n	8001ddc <main+0xaf8>
 8001d9e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001da2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e016      	b.n	8001ddc <main+0xaf8>
 8001dae:	bf00      	nop
 8001db0:	20000500 	.word	0x20000500
 8001db4:	2000054c 	.word	0x2000054c
 8001db8:	20000688 	.word	0x20000688
 8001dbc:	20000684 	.word	0x20000684
 8001dc0:	20000678 	.word	0x20000678
 8001dc4:	2000067c 	.word	0x2000067c
 8001dc8:	20000680 	.word	0x20000680
 8001dcc:	0800cde4 	.word	0x0800cde4
 8001dd0:	0800ce00 	.word	0x0800ce00
 8001dd4:	42652ee0 	.word	0x42652ee0
 8001dd8:	3c23d70a 	.word	0x3c23d70a
	    if(fabsf(lb_speed) < 0.01f) lb_angle = 0.0f;
 8001ddc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001de0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	eef0 7ae7 	vabs.f32	s15, s15
 8001dec:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001dd8 <main+0xaf4>
 8001df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d506      	bpl.n	8001e08 <main+0xb24>
 8001dfa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dfe:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	//		lf_angle = fmodf(lf_angle + 360.0f, 360.0f);
	//		rb_angle = fmodf(rb_angle + 360.0f, 360.0f);
	//		lb_angle = fmodf(lb_angle + 360.0f, 360.0f);

		// Normalize speeds if any exceeds 1.0
		float max_speed = fmaxf(fmaxf(rf_speed, lf_speed), fmaxf(rb_speed, lb_speed));
 8001e08:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e18:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	eef0 0a47 	vmov.f32	s1, s14
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f00a fe22 	bl	800ca70 <fmaxf>
 8001e2c:	eeb0 8a40 	vmov.f32	s16, s0
 8001e30:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e34:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e40:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	eef0 0a47 	vmov.f32	s1, s14
 8001e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e50:	f00a fe0e 	bl	800ca70 <fmaxf>
 8001e54:	eef0 7a40 	vmov.f32	s15, s0
 8001e58:	eef0 0a67 	vmov.f32	s1, s15
 8001e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8001e60:	f00a fe06 	bl	800ca70 <fmaxf>
 8001e64:	ed87 0a54 	vstr	s0, [r7, #336]	@ 0x150
		if (max_speed > 1.0f) {
 8001e68:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 8001e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	dd3f      	ble.n	8001efa <main+0xc16>
		    rf_speed /= max_speed;
 8001e7a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e7e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e82:	edd3 6a00 	vldr	s13, [r3]
 8001e86:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8001e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e8e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e92:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e96:	edc3 7a00 	vstr	s15, [r3]
		    lf_speed /= max_speed;
 8001e9a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e9e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001ea2:	edd3 6a00 	vldr	s13, [r3]
 8001ea6:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8001eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eae:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001eb2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
		    rb_speed /= max_speed;
 8001eba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ebe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ec2:	edd3 6a00 	vldr	s13, [r3]
 8001ec6:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ed2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ed6:	edc3 7a00 	vstr	s15, [r3]
		    lb_speed /= max_speed;
 8001eda:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ede:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ee2:	edd3 6a00 	vldr	s13, [r3]
 8001ee6:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8001eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eee:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ef2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ef6:	edc3 7a00 	vstr	s15, [r3]
		}

		// Update modules
		SM_UpdateSteering(&moduleRF, rf_angle);
 8001efa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001efe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 f8ff 	bl	8003112 <SM_UpdateSteering>
		SM_UpdateDriving(&moduleRF, rf_speed);
 8001f14:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 f92d 	bl	8003188 <SM_UpdateDriving>

		SM_UpdateSteering(&moduleLF, lf_angle);
 8001f2e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f32:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 f8e5 	bl	8003112 <SM_UpdateSteering>
		SM_UpdateDriving(&moduleLF, lf_speed);
 8001f48:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f4c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001f58:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 f913 	bl	8003188 <SM_UpdateDriving>

		SM_UpdateSteering(&moduleRB, rb_angle);
 8001f62:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f66:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001f72:	eeb0 0a67 	vmov.f32	s0, s15
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 f8cb 	bl	8003112 <SM_UpdateSteering>
		SM_UpdateDriving(&moduleRB, rb_speed);
 8001f7c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f80:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 f8f9 	bl	8003188 <SM_UpdateDriving>

		SM_UpdateSteering(&moduleLB, lb_angle);
 8001f96:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f9a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f8b1 	bl	8003112 <SM_UpdateSteering>
		SM_UpdateDriving(&moduleLB, lb_speed);
 8001fb0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001fb4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f8df 	bl	8003188 <SM_UpdateDriving>
  {
 8001fca:	f7ff bb8b 	b.w	80016e4 <main+0x400>
 8001fce:	bf00      	nop

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b094      	sub	sp, #80	@ 0x50
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	2238      	movs	r2, #56	@ 0x38
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f007 faa0 	bl	8009524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f002 f8f4 	bl	80041e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002002:	2340      	movs	r3, #64	@ 0x40
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002006:	2302      	movs	r3, #2
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800200a:	2302      	movs	r3, #2
 800200c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800200e:	2304      	movs	r3, #4
 8002010:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002012:	2355      	movs	r3, #85	@ 0x55
 8002014:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002016:	2302      	movs	r3, #2
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800201a:	2302      	movs	r3, #2
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f002 f98e 	bl	8004348 <HAL_RCC_OscConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002032:	f000 fcef 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002036:	230f      	movs	r3, #15
 8002038:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203a:	2303      	movs	r3, #3
 800203c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2104      	movs	r1, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fc8c 	bl	800496c <HAL_RCC_ClockConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800205a:	f000 fcdb 	bl	8002a14 <Error_Handler>
  }
}
 800205e:	bf00      	nop
 8002060:	3750      	adds	r7, #80	@ 0x50
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	@ 0x30
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	2224      	movs	r2, #36	@ 0x24
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f007 fa54 	bl	8009524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	463b      	mov	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002086:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <MX_TIM1_Init+0xac>)
 8002088:	4a23      	ldr	r2, [pc, #140]	@ (8002118 <MX_TIM1_Init+0xb0>)
 800208a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800208c:	4b21      	ldr	r3, [pc, #132]	@ (8002114 <MX_TIM1_Init+0xac>)
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <MX_TIM1_Init+0xac>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002098:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <MX_TIM1_Init+0xac>)
 800209a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800209e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <MX_TIM1_Init+0xac>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_TIM1_Init+0xac>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <MX_TIM1_Init+0xac>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ba:	2301      	movs	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80020c2:	230a      	movs	r3, #10
 80020c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ca:	2301      	movs	r3, #1
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80020d2:	230a      	movs	r3, #10
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4619      	mov	r1, r3
 80020dc:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_TIM1_Init+0xac>)
 80020de:	f003 fa6f 	bl	80055c0 <HAL_TIM_Encoder_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80020e8:	f000 fc94 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_TIM1_Init+0xac>)
 80020fe:	f004 fa5d 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002108:	f000 fc84 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	3730      	adds	r7, #48	@ 0x30
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000338 	.word	0x20000338
 8002118:	40012c00 	.word	0x40012c00

0800211c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	615a      	str	r2, [r3, #20]
 800214c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214e:	4b3e      	ldr	r3, [pc, #248]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002150:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002154:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8002156:	4b3c      	ldr	r3, [pc, #240]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002158:	22a9      	movs	r2, #169	@ 0xa9
 800215a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b3a      	ldr	r3, [pc, #232]	@ (8002248 <MX_TIM2_Init+0x12c>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8002162:	4b39      	ldr	r3, [pc, #228]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002164:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002168:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <MX_TIM2_Init+0x12c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002176:	4834      	ldr	r0, [pc, #208]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002178:	f003 f862 	bl	8005240 <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002182:	f000 fc47 	bl	8002a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800218c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002190:	4619      	mov	r1, r3
 8002192:	482d      	ldr	r0, [pc, #180]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002194:	f003 fc5c 	bl	8005a50 <HAL_TIM_ConfigClockSource>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800219e:	f000 fc39 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021a2:	4829      	ldr	r0, [pc, #164]	@ (8002248 <MX_TIM2_Init+0x12c>)
 80021a4:	f003 f8a3 	bl	80052ee <HAL_TIM_PWM_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80021ae:	f000 fc31 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	4821      	ldr	r0, [pc, #132]	@ (8002248 <MX_TIM2_Init+0x12c>)
 80021c2:	f004 f9fb 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021cc:	f000 fc22 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d0:	2360      	movs	r3, #96	@ 0x60
 80021d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1099;
 80021d4:	f240 434b 	movw	r3, #1099	@ 0x44b
 80021d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4817      	ldr	r0, [pc, #92]	@ (8002248 <MX_TIM2_Init+0x12c>)
 80021ea:	f003 fb1d 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80021f4:	f000 fc0e 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	2204      	movs	r2, #4
 80021fc:	4619      	mov	r1, r3
 80021fe:	4812      	ldr	r0, [pc, #72]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002200:	f003 fb12 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800220a:	f000 fc03 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2208      	movs	r2, #8
 8002212:	4619      	mov	r1, r3
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_TIM2_Init+0x12c>)
 8002216:	f003 fb07 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002220:	f000 fbf8 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	220c      	movs	r2, #12
 8002228:	4619      	mov	r1, r3
 800222a:	4807      	ldr	r0, [pc, #28]	@ (8002248 <MX_TIM2_Init+0x12c>)
 800222c:	f003 fafc 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8002236:	f000 fbed 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800223a:	4803      	ldr	r0, [pc, #12]	@ (8002248 <MX_TIM2_Init+0x12c>)
 800223c:	f000 fd82 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 8002240:	bf00      	nop
 8002242:	3738      	adds	r7, #56	@ 0x38
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000384 	.word	0x20000384

0800224c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	@ 0x38
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226c:	463b      	mov	r3, r7
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	615a      	str	r2, [r3, #20]
 800227c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800227e:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002280:	4a3d      	ldr	r2, [pc, #244]	@ (8002378 <MX_TIM3_Init+0x12c>)
 8002282:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8002284:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002286:	22a9      	movs	r2, #169	@ 0xa9
 8002288:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <MX_TIM3_Init+0x128>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002290:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002292:	22c7      	movs	r2, #199	@ 0xc7
 8002294:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b35      	ldr	r3, [pc, #212]	@ (8002374 <MX_TIM3_Init+0x128>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022a2:	4834      	ldr	r0, [pc, #208]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022a4:	f002 ffcc 	bl	8005240 <HAL_TIM_Base_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022ae:	f000 fbb1 	bl	8002a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022bc:	4619      	mov	r1, r3
 80022be:	482d      	ldr	r0, [pc, #180]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022c0:	f003 fbc6 	bl	8005a50 <HAL_TIM_ConfigClockSource>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022ca:	f000 fba3 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022ce:	4829      	ldr	r0, [pc, #164]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022d0:	f003 f80d 	bl	80052ee <HAL_TIM_PWM_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022da:	f000 fb9b 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	4821      	ldr	r0, [pc, #132]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022ee:	f004 f965 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022f8:	f000 fb8c 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fc:	2360      	movs	r3, #96	@ 0x60
 80022fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	2200      	movs	r2, #0
 8002310:	4619      	mov	r1, r3
 8002312:	4818      	ldr	r0, [pc, #96]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002314:	f003 fa88 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800231e:	f000 fb79 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	2204      	movs	r2, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4812      	ldr	r0, [pc, #72]	@ (8002374 <MX_TIM3_Init+0x128>)
 800232a:	f003 fa7d 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002334:	f000 fb6e 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002340:	f003 fa72 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800234a:	f000 fb63 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234e:	463b      	mov	r3, r7
 8002350:	220c      	movs	r2, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002356:	f003 fa67 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002360:	f000 fb58 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002364:	4803      	ldr	r0, [pc, #12]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002366:	f000 fced 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	@ 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003d0 	.word	0x200003d0
 8002378:	40000400 	.word	0x40000400

0800237c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	@ 0x30
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	2224      	movs	r2, #36	@ 0x24
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f007 f8ca 	bl	8009524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	463b      	mov	r3, r7
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <MX_TIM4_Init+0xa4>)
 800239c:	4a21      	ldr	r2, [pc, #132]	@ (8002424 <MX_TIM4_Init+0xa8>)
 800239e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <MX_TIM4_Init+0xa4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <MX_TIM4_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <MX_TIM4_Init+0xa4>)
 80023ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <MX_TIM4_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <MX_TIM4_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c8:	2301      	movs	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80023d0:	230a      	movs	r3, #10
 80023d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d8:	2301      	movs	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80023e0:	230a      	movs	r3, #10
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	4619      	mov	r1, r3
 80023ea:	480d      	ldr	r0, [pc, #52]	@ (8002420 <MX_TIM4_Init+0xa4>)
 80023ec:	f003 f8e8 	bl	80055c0 <HAL_TIM_Encoder_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80023f6:	f000 fb0d 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002402:	463b      	mov	r3, r7
 8002404:	4619      	mov	r1, r3
 8002406:	4806      	ldr	r0, [pc, #24]	@ (8002420 <MX_TIM4_Init+0xa4>)
 8002408:	f004 f8d8 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002412:	f000 faff 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	3730      	adds	r7, #48	@ 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000041c 	.word	0x2000041c
 8002424:	40000800 	.word	0x40000800

08002428 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
 8002448:	615a      	str	r2, [r3, #20]
 800244a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <MX_TIM5_Init+0xac>)
 800244e:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <MX_TIM5_Init+0xb0>)
 8002450:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170-1;
 8002452:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <MX_TIM5_Init+0xac>)
 8002454:	22a9      	movs	r2, #169	@ 0xa9
 8002456:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <MX_TIM5_Init+0xac>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 199;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <MX_TIM5_Init+0xac>)
 8002460:	22c7      	movs	r2, #199	@ 0xc7
 8002462:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <MX_TIM5_Init+0xac>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <MX_TIM5_Init+0xac>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002470:	4818      	ldr	r0, [pc, #96]	@ (80024d4 <MX_TIM5_Init+0xac>)
 8002472:	f002 ff3c 	bl	80052ee <HAL_TIM_PWM_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800247c:	f000 faca 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	4811      	ldr	r0, [pc, #68]	@ (80024d4 <MX_TIM5_Init+0xac>)
 8002490:	f004 f894 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800249a:	f000 fabb 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249e:	2360      	movs	r3, #96	@ 0x60
 80024a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	2204      	movs	r2, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4807      	ldr	r0, [pc, #28]	@ (80024d4 <MX_TIM5_Init+0xac>)
 80024b6:	f003 f9b7 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80024c0:	f000 faa8 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024c4:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <MX_TIM5_Init+0xac>)
 80024c6:	f000 fc3d 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	@ 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000468 	.word	0x20000468
 80024d8:	40000c00 	.word	0x40000c00

080024dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	@ 0x30
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2224      	movs	r2, #36	@ 0x24
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 f81a 	bl	8009524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024fa:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <MX_TIM8_Init+0xac>)
 80024fc:	4a23      	ldr	r2, [pc, #140]	@ (800258c <MX_TIM8_Init+0xb0>)
 80024fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <MX_TIM8_Init+0xac>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <MX_TIM8_Init+0xac>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800250c:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <MX_TIM8_Init+0xac>)
 800250e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002512:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <MX_TIM8_Init+0xac>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <MX_TIM8_Init+0xac>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <MX_TIM8_Init+0xac>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002526:	2301      	movs	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800252e:	2301      	movs	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002536:	230a      	movs	r3, #10
 8002538:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800253e:	2301      	movs	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002546:	230a      	movs	r3, #10
 8002548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	4619      	mov	r1, r3
 8002550:	480d      	ldr	r0, [pc, #52]	@ (8002588 <MX_TIM8_Init+0xac>)
 8002552:	f003 f835 	bl	80055c0 <HAL_TIM_Encoder_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800255c:	f000 fa5a 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	@ (8002588 <MX_TIM8_Init+0xac>)
 8002572:	f004 f823 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800257c:	f000 fa4a 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3730      	adds	r7, #48	@ 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200004b4 	.word	0x200004b4
 800258c:	40013400 	.word	0x40013400

08002590 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b094      	sub	sp, #80	@ 0x50
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002596:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	615a      	str	r2, [r3, #20]
 80025a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025aa:	463b      	mov	r3, r7
 80025ac:	2234      	movs	r2, #52	@ 0x34
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f006 ffb7 	bl	8009524 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002678 <MX_TIM16_Init+0xe8>)
 80025ba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025be:	22a9      	movs	r2, #169	@ 0xa9
 80025c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 199;
 80025c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025ca:	22c7      	movs	r2, #199	@ 0xc7
 80025cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ce:	4b29      	ldr	r3, [pc, #164]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025e0:	4824      	ldr	r0, [pc, #144]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025e2:	f002 fe2d 	bl	8005240 <HAL_TIM_Base_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80025ec:	f000 fa12 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80025f0:	4820      	ldr	r0, [pc, #128]	@ (8002674 <MX_TIM16_Init+0xe4>)
 80025f2:	f002 fe7c 	bl	80052ee <HAL_TIM_PWM_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80025fc:	f000 fa0a 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002600:	2360      	movs	r3, #96	@ 0x60
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002608:	2300      	movs	r3, #0
 800260a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800260c:	2300      	movs	r3, #0
 800260e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET; // Changed from SET  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002618:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800261c:	2200      	movs	r2, #0
 800261e:	4619      	mov	r1, r3
 8002620:	4814      	ldr	r0, [pc, #80]	@ (8002674 <MX_TIM16_Init+0xe4>)
 8002622:	f003 f901 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM16_Init+0xa0>
  {
    Error_Handler();
 800262c:	f000 f9f2 	bl	8002a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002648:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002652:	463b      	mov	r3, r7
 8002654:	4619      	mov	r1, r3
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <MX_TIM16_Init+0xe4>)
 8002658:	f004 f846 	bl	80066e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8002662:	f000 f9d7 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002666:	4803      	ldr	r0, [pc, #12]	@ (8002674 <MX_TIM16_Init+0xe4>)
 8002668:	f000 fb6c 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 800266c:	bf00      	nop
 800266e:	3750      	adds	r7, #80	@ 0x50
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000500 	.word	0x20000500
 8002678:	40014400 	.word	0x40014400

0800267c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b094      	sub	sp, #80	@ 0x50
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002682:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002696:	463b      	mov	r3, r7
 8002698:	2234      	movs	r2, #52	@ 0x34
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f006 ff41 	bl	8009524 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80026a2:	4b30      	ldr	r3, [pc, #192]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026a4:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <MX_TIM17_Init+0xec>)
 80026a6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 80026a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026aa:	22a9      	movs	r2, #169	@ 0xa9
 80026ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 199;
 80026b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026b6:	22c7      	movs	r2, #199	@ 0xc7
 80026b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80026c0:	4b28      	ldr	r3, [pc, #160]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c6:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80026cc:	4825      	ldr	r0, [pc, #148]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026ce:	f002 fdb7 	bl	8005240 <HAL_TIM_Base_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80026d8:	f000 f99c 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80026dc:	4821      	ldr	r0, [pc, #132]	@ (8002764 <MX_TIM17_Init+0xe8>)
 80026de:	f002 fe06 	bl	80052ee <HAL_TIM_PWM_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80026e8:	f000 f994 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ec:	2360      	movs	r3, #96	@ 0x60
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026f8:	2300      	movs	r3, #0
 80026fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002708:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800270c:	2200      	movs	r2, #0
 800270e:	4619      	mov	r1, r3
 8002710:	4814      	ldr	r0, [pc, #80]	@ (8002764 <MX_TIM17_Init+0xe8>)
 8002712:	f003 f889 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800271c:	f000 f97a 	bl	8002a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002738:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002742:	463b      	mov	r3, r7
 8002744:	4619      	mov	r1, r3
 8002746:	4807      	ldr	r0, [pc, #28]	@ (8002764 <MX_TIM17_Init+0xe8>)
 8002748:	f003 ffce 	bl	80066e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8002752:	f000 f95f 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002756:	4803      	ldr	r0, [pc, #12]	@ (8002764 <MX_TIM17_Init+0xe8>)
 8002758:	f000 faf4 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 800275c:	bf00      	nop
 800275e:	3750      	adds	r7, #80	@ 0x50
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000054c 	.word	0x2000054c
 8002768:	40014800 	.word	0x40014800

0800276c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	@ 0x30
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	2224      	movs	r2, #36	@ 0x24
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f006 fed2 	bl	8009524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	463b      	mov	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800278a:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <MX_TIM20_Init+0xac>)
 800278c:	4a23      	ldr	r2, [pc, #140]	@ (800281c <MX_TIM20_Init+0xb0>)
 800278e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <MX_TIM20_Init+0xac>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <MX_TIM20_Init+0xac>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <MX_TIM20_Init+0xac>)
 800279e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027a2:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002818 <MX_TIM20_Init+0xac>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <MX_TIM20_Init+0xac>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <MX_TIM20_Init+0xac>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80027c6:	230a      	movs	r3, #10
 80027c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80027d6:	230a      	movs	r3, #10
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	480d      	ldr	r0, [pc, #52]	@ (8002818 <MX_TIM20_Init+0xac>)
 80027e2:	f002 feed 	bl	80055c0 <HAL_TIM_Encoder_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 80027ec:	f000 f912 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	@ (8002818 <MX_TIM20_Init+0xac>)
 8002802:	f003 fedb 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 800280c:	f000 f902 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	3730      	adds	r7, #48	@ 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000598 	.word	0x20000598
 800281c:	40015000 	.word	0x40015000

08002820 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002824:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002826:	4a23      	ldr	r2, [pc, #140]	@ (80028b4 <MX_UART4_Init+0x94>)
 8002828:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 800282a:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <MX_UART4_Init+0x90>)
 800282c:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <MX_UART4_Init+0x98>)
 800282e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002830:	4b1f      	ldr	r3, [pc, #124]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002836:	4b1e      	ldr	r3, [pc, #120]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800283c:	4b1c      	ldr	r3, [pc, #112]	@ (80028b0 <MX_UART4_Init+0x90>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002842:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002844:	220c      	movs	r2, #12
 8002846:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <MX_UART4_Init+0x90>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800284e:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <MX_UART4_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002866:	4812      	ldr	r0, [pc, #72]	@ (80028b0 <MX_UART4_Init+0x90>)
 8002868:	f003 ffd2 	bl	8006810 <HAL_UART_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8002872:	f000 f8cf 	bl	8002a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002876:	2100      	movs	r1, #0
 8002878:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <MX_UART4_Init+0x90>)
 800287a:	f004 fec3 	bl	8007604 <HAL_UARTEx_SetTxFifoThreshold>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8002884:	f000 f8c6 	bl	8002a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002888:	2100      	movs	r1, #0
 800288a:	4809      	ldr	r0, [pc, #36]	@ (80028b0 <MX_UART4_Init+0x90>)
 800288c:	f004 fef8 	bl	8007680 <HAL_UARTEx_SetRxFifoThreshold>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8002896:	f000 f8bd 	bl	8002a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <MX_UART4_Init+0x90>)
 800289c:	f004 fe79 	bl	8007592 <HAL_UARTEx_DisableFifoMode>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80028a6:	f000 f8b5 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200005e4 	.word	0x200005e4
 80028b4:	40004c00 	.word	0x40004c00
 80028b8:	0007a120 	.word	0x0007a120

080028bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d2:	4b42      	ldr	r3, [pc, #264]	@ (80029dc <MX_GPIO_Init+0x120>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	4a41      	ldr	r2, [pc, #260]	@ (80029dc <MX_GPIO_Init+0x120>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028de:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <MX_GPIO_Init+0x120>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ea:	4b3c      	ldr	r3, [pc, #240]	@ (80029dc <MX_GPIO_Init+0x120>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	4a3b      	ldr	r2, [pc, #236]	@ (80029dc <MX_GPIO_Init+0x120>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f6:	4b39      	ldr	r3, [pc, #228]	@ (80029dc <MX_GPIO_Init+0x120>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	4a35      	ldr	r2, [pc, #212]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290e:	4b33      	ldr	r3, [pc, #204]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b30      	ldr	r3, [pc, #192]	@ (80029dc <MX_GPIO_Init+0x120>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	4a2f      	ldr	r2, [pc, #188]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002926:	4b2d      	ldr	r3, [pc, #180]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002932:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800293e:	4b27      	ldr	r3, [pc, #156]	@ (80029dc <MX_GPIO_Init+0x120>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002954:	f001 fa90 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, (IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin | MOTOR3_Pin | MOTOR2_Pin), GPIO_PIN_RESET);
 8002958:	2200      	movs	r2, #0
 800295a:	f44f 4173 	mov.w	r1, #62208	@ 0xf300
 800295e:	4820      	ldr	r0, [pc, #128]	@ (80029e0 <MX_GPIO_Init+0x124>)
 8002960:	f001 fc0c 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, (RELAY2_Pin | RELAY1_Pin), GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800296a:	481e      	ldr	r0, [pc, #120]	@ (80029e4 <MX_GPIO_Init+0x128>)
 800296c:	f001 fc06 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR1_GPIO_Port, MOTOR1_Pin, GPIO_PIN_RESET);
 8002970:	2200      	movs	r2, #0
 8002972:	2104      	movs	r1, #4
 8002974:	481c      	ldr	r0, [pc, #112]	@ (80029e8 <MX_GPIO_Init+0x12c>)
 8002976:	f001 fc01 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           MOTOR3_Pin MOTOR2_Pin */
  GPIO_InitStruct.Pin = (IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin | MOTOR3_Pin | MOTOR2_Pin);
 800297a:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	2301      	movs	r3, #1
 8002982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002988:	2302      	movs	r3, #2
 800298a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4813      	ldr	r0, [pc, #76]	@ (80029e0 <MX_GPIO_Init+0x124>)
 8002994:	f001 fa70 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin RELAY1_Pin */
  GPIO_InitStruct.Pin = (RELAY2_Pin | RELAY1_Pin);
 8002998:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	480c      	ldr	r0, [pc, #48]	@ (80029e4 <MX_GPIO_Init+0x128>)
 80029b2:	f001 fa61 	bl	8003e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR1_Pin */
  GPIO_InitStruct.Pin = MOTOR1_Pin;
 80029b6:	2304      	movs	r3, #4
 80029b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR1_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	4806      	ldr	r0, [pc, #24]	@ (80029e8 <MX_GPIO_Init+0x12c>)
 80029ce:	f001 fa53 	bl	8003e78 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//  GPIO_InitStruct.Alternate = GPIO_AFx_TIMx; // Use correct AF for each timer
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
/* USER CODE END MX_GPIO_Init_2 */
}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	@ 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	48000400 	.word	0x48000400
 80029e4:	48000800 	.word	0x48000800
 80029e8:	48000c00 	.word	0x48000c00

080029ec <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <BSP_PB_Callback+0x24>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000334 	.word	0x20000334

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <Error_Handler+0x8>

08002a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <HAL_MspInit+0x44>)
 8002a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a64 <HAL_MspInit+0x44>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <HAL_MspInit+0x44>)
 8002a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_MspInit+0x44>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <HAL_MspInit+0x44>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <HAL_MspInit+0x44>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a56:	f001 fc67 	bl	8004328 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000

08002a68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b090      	sub	sp, #64	@ 0x40
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6b      	ldr	r2, [pc, #428]	@ (8002c34 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d128      	bne.n	8002adc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	4a6a      	ldr	r2, [pc, #424]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002a90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a96:	4b68      	ldr	r3, [pc, #416]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	4b65      	ldr	r3, [pc, #404]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa6:	4a64      	ldr	r2, [pc, #400]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aae:	4b62      	ldr	r3, [pc, #392]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aba:	2303      	movs	r3, #3
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002aca:	2302      	movs	r3, #2
 8002acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4859      	ldr	r0, [pc, #356]	@ (8002c3c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002ad6:	f001 f9cf 	bl	8003e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002ada:	e0a6      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM4)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a57      	ldr	r2, [pc, #348]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12a      	bne.n	8002b3c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ae6:	4b54      	ldr	r3, [pc, #336]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a53      	ldr	r2, [pc, #332]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af2:	4b51      	ldr	r3, [pc, #324]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	4b4e      	ldr	r3, [pc, #312]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	4a4d      	ldr	r2, [pc, #308]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002b28:	230a      	movs	r3, #10
 8002b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b30:	4619      	mov	r1, r3
 8002b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b36:	f001 f99f 	bl	8003e78 <HAL_GPIO_Init>
}
 8002b3a:	e076      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM8)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a40      	ldr	r2, [pc, #256]	@ (8002c44 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d128      	bne.n	8002b98 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b46:	4b3c      	ldr	r3, [pc, #240]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b50:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b52:	4b39      	ldr	r3, [pc, #228]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	4a35      	ldr	r2, [pc, #212]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6a:	4b33      	ldr	r3, [pc, #204]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002b86:	2304      	movs	r3, #4
 8002b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	482a      	ldr	r0, [pc, #168]	@ (8002c3c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002b92:	f001 f971 	bl	8003e78 <HAL_GPIO_Init>
}
 8002b96:	e048      	b.n	8002c2a <HAL_TIM_Encoder_MspInit+0x1c2>
  else if(htim_encoder->Instance==TIM20)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c48 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d143      	bne.n	8002c2a <HAL_TIM_Encoder_MspInit+0x1c2>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002ba2:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba6:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002ba8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bae:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	4b1f      	ldr	r3, [pc, #124]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bea:	2304      	movs	r3, #4
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c02:	4619      	mov	r1, r3
 8002c04:	480d      	ldr	r0, [pc, #52]	@ (8002c3c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002c06:	f001 f937 	bl	8003e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c22:	4619      	mov	r1, r3
 8002c24:	4809      	ldr	r0, [pc, #36]	@ (8002c4c <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002c26:	f001 f927 	bl	8003e78 <HAL_GPIO_Init>
}
 8002c2a:	bf00      	nop
 8002c2c:	3740      	adds	r7, #64	@ 0x40
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	48000800 	.word	0x48000800
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40013400 	.word	0x40013400
 8002c48:	40015000 	.word	0x40015000
 8002c4c:	48000400 	.word	0x48000400

08002c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c60:	d10c      	bne.n	8002c7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	4a23      	ldr	r2, [pc, #140]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002c7a:	e034      	b.n	8002ce6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10c      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]
}
 8002c9e:	e022      	b.n	8002ce6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a15      	ldr	r2, [pc, #84]	@ (8002cfc <HAL_TIM_Base_MspInit+0xac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	4a11      	ldr	r2, [pc, #68]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
}
 8002cc2:	e010      	b.n	8002ce6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM17)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <HAL_TIM_Base_MspInit+0xb0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa4>)
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40014400 	.word	0x40014400
 8002d00:	40014800 	.word	0x40014800

08002d04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <HAL_TIM_PWM_MspInit+0x38>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10b      	bne.n	8002d2e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d22:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08e      	sub	sp, #56	@ 0x38
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d64:	d12f      	bne.n	8002dc6 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	4b6d      	ldr	r3, [pc, #436]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA9     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Driving_PWM1_Pin|Driving_PWM2_Pin;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d9c:	f001 f86c 	bl	8003e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Driving_PWM3_Pin|Driving_PWM4_Pin;
 8002da0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002db2:	230a      	movs	r3, #10
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc0:	f001 f85a 	bl	8003e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002dc4:	e0a5      	b.n	8002f12 <HAL_TIM_MspPostInit+0x1ce>
  else if(htim->Instance==TIM3)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a55      	ldr	r2, [pc, #340]	@ (8002f20 <HAL_TIM_MspPostInit+0x1dc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d139      	bne.n	8002e44 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd0:	4b52      	ldr	r3, [pc, #328]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd4:	4a51      	ldr	r2, [pc, #324]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	4a4b      	ldr	r2, [pc, #300]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df4:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Steering_PWM2_Pin|Steering_PWM1_Pin;
 8002e00:	2350      	movs	r3, #80	@ 0x50
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e10:	2302      	movs	r3, #2
 8002e12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e1e:	f001 f82b 	bl	8003e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Steering_PWM3_Pin|Steering_PWM4_Pin;
 8002e22:	2303      	movs	r3, #3
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e32:	2302      	movs	r3, #2
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4839      	ldr	r0, [pc, #228]	@ (8002f24 <HAL_TIM_MspPostInit+0x1e0>)
 8002e3e:	f001 f81b 	bl	8003e78 <HAL_GPIO_Init>
}
 8002e42:	e066      	b.n	8002f12 <HAL_TIM_MspPostInit+0x1ce>
  else if(htim->Instance==TIM5)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a37      	ldr	r2, [pc, #220]	@ (8002f28 <HAL_TIM_MspPostInit+0x1e4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d11d      	bne.n	8002e8a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4e:	4b33      	ldr	r3, [pc, #204]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	4a32      	ldr	r2, [pc, #200]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e5a:	4b30      	ldr	r3, [pc, #192]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e80:	4619      	mov	r1, r3
 8002e82:	482a      	ldr	r0, [pc, #168]	@ (8002f2c <HAL_TIM_MspPostInit+0x1e8>)
 8002e84:	f000 fff8 	bl	8003e78 <HAL_GPIO_Init>
}
 8002e88:	e043      	b.n	8002f12 <HAL_TIM_MspPostInit+0x1ce>
  else if(htim->Instance==TIM16)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <HAL_TIM_MspPostInit+0x1ec>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d11c      	bne.n	8002ece <HAL_TIM_MspPostInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e94:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e98:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002e9a:	f043 0302 	orr.w	r3, r3, #2
 8002e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eac:	2310      	movs	r3, #16
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4817      	ldr	r0, [pc, #92]	@ (8002f24 <HAL_TIM_MspPostInit+0x1e0>)
 8002ec8:	f000 ffd6 	bl	8003e78 <HAL_GPIO_Init>
}
 8002ecc:	e021      	b.n	8002f12 <HAL_TIM_MspPostInit+0x1ce>
  else if(htim->Instance==TIM17)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <HAL_TIM_MspPostInit+0x1f0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d11c      	bne.n	8002f12 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002edc:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_TIM_MspPostInit+0x1d8>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002f00:	2301      	movs	r3, #1
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f0e:	f000 ffb3 	bl	8003e78 <HAL_GPIO_Init>
}
 8002f12:	bf00      	nop
 8002f14:	3738      	adds	r7, #56	@ 0x38
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40000400 	.word	0x40000400
 8002f24:	48000400 	.word	0x48000400
 8002f28:	40000c00 	.word	0x40000c00
 8002f2c:	48000800 	.word	0x48000800
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40014800 	.word	0x40014800

08002f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b09e      	sub	sp, #120	@ 0x78
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	2254      	movs	r2, #84	@ 0x54
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 fae3 	bl	8009524 <memset>
  if(huart->Instance==UART4)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_UART_MspInit+0xa8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d136      	bne.n	8002fd6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002f68:	2308      	movs	r3, #8
 8002f6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 ff15 	bl	8004da4 <HAL_RCCEx_PeriphCLKConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f80:	f7ff fd48 	bl	8002a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f84:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_UART_MspInit+0xac>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f88:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <HAL_UART_MspInit+0xac>)
 8002f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f90:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_UART_MspInit+0xac>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <HAL_UART_MspInit+0xac>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa0:	4a10      	ldr	r2, [pc, #64]	@ (8002fe4 <HAL_UART_MspInit+0xac>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <HAL_UART_MspInit+0xac>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fb4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4805      	ldr	r0, [pc, #20]	@ (8002fe8 <HAL_UART_MspInit+0xb0>)
 8002fd2:	f000 ff51 	bl	8003e78 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002fd6:	bf00      	nop
 8002fd8:	3778      	adds	r7, #120	@ 0x78
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40004c00 	.word	0x40004c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	48000800 	.word	0x48000800

08002fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <NMI_Handler+0x4>

08002ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <MemManage_Handler+0x4>

08003004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <BusFault_Handler+0x4>

0800300c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <UsageFault_Handler+0x4>

08003014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003042:	f000 fd69 	bl	8003b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}

0800304a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800304e:	2000      	movs	r0, #0
 8003050:	f000 fc2c 	bl	80038ac <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}

08003058 <SM_Init>:
static float steering_pid_update(SteeringMotor* motor, float target, float current);
static int16_t clamp_pid_output(float pid_output, int16_t min_pwm, int16_t max_pwm);
static void set_steering_pwm(SteeringMotor* motor, int16_t pwm);
static void constrain_pulse_width(uint16_t* pulse, uint16_t min, uint16_t max);

void SM_Init(SwerveModule* module) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
    // Initialize steering motor PWM
    HAL_TIM_PWM_Start(module->steering.pwm_tim, module->steering.pwm_channel);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f002 f996 	bl	800539c <HAL_TIM_PWM_Start>

    // Initialize encoder timer
    HAL_TIM_Encoder_Start(module->steering.encoder_tim, TIM_CHANNEL_ALL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	213c      	movs	r1, #60	@ 0x3c
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fb48 	bl	800570c <HAL_TIM_Encoder_Start>

    // Initialize driving motor PWM
    HAL_TIM_PWM_Start(module->driving.pwm_tim, module->driving.pwm_channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f002 f988 	bl	800539c <HAL_TIM_PWM_Start>
//    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, module->driving.arming_pulse);
    // Reset PID parameters
    module->steering.prev_error = 0.0f;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
    module->steering.integral = 0.0f;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <clamp_pid_output>:

static int16_t clamp_pid_output(float pid_output, int16_t min_pwm, int16_t max_pwm) {
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80030ae:	4603      	mov	r3, r0
 80030b0:	460a      	mov	r2, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	803b      	strh	r3, [r7, #0]
    if (pid_output < min_pwm) return min_pwm;
 80030b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	d502      	bpl.n	80030d8 <clamp_pid_output+0x34>
 80030d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030d6:	e016      	b.n	8003106 <clamp_pid_output+0x62>
    if (pid_output > max_pwm) return max_pwm;
 80030d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	dd02      	ble.n	80030f8 <clamp_pid_output+0x54>
 80030f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030f6:	e006      	b.n	8003106 <clamp_pid_output+0x62>
    return (int16_t)pid_output;
 80030f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003100:	ee17 3a90 	vmov	r3, s15
 8003104:	b21b      	sxth	r3, r3
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <SM_UpdateSteering>:

void SM_UpdateSteering(SwerveModule* module, float target_angle) {
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	ed87 0a00 	vstr	s0, [r7]
    float current = SM_GetCurrentAngle(module);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f89c 	bl	800325c <SM_GetCurrentAngle>
 8003124:	ed87 0a03 	vstr	s0, [r7, #12]
    float pid_output = steering_pid_update(&module->steering, target_angle, current);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edd7 0a03 	vldr	s1, [r7, #12]
 800312e:	ed97 0a00 	vldr	s0, [r7]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f8e6 	bl	8003304 <steering_pid_update>
 8003138:	ed87 0a02 	vstr	s0, [r7, #8]

    // Clamp the PID output if necessary (choose appropriate PWM limits)
    pid_output = clamp_pid_output(pid_output, -module->steering.max_pwm, module->steering.max_pwm);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	b29b      	uxth	r3, r3
 8003142:	425b      	negs	r3, r3
 8003144:	b29b      	uxth	r3, r3
 8003146:	b21a      	sxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	b21b      	sxth	r3, r3
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	ed97 0a02 	vldr	s0, [r7, #8]
 8003156:	f7ff ffa5 	bl	80030a4 <clamp_pid_output>
 800315a:	4603      	mov	r3, r0
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003164:	edc7 7a02 	vstr	s15, [r7, #8]

    set_steering_pwm(&module->steering, (int16_t)pid_output);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd7 7a02 	vldr	s15, [r7, #8]
 800316e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003172:	ee17 2a90 	vmov	r2, s15
 8003176:	b212      	sxth	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f933 	bl	80033e6 <set_steering_pwm>
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <SM_UpdateDriving>:

void SM_UpdateDriving(SwerveModule* module, float speed) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	ed87 0a00 	vstr	s0, [r7]
	uint16_t target_speed = module->driving.min_pulse + (uint16_t)((module->driving.max_pulse - module->driving.min_pulse) * fabsf(speed));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319c:	4619      	mov	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80031a2:	1acb      	subs	r3, r1, r3
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ac:	edd7 7a00 	vldr	s15, [r7]
 80031b0:	eef0 7ae7 	vabs.f32	s15, s15
 80031b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	81fb      	strh	r3, [r7, #14]
    constrain_pulse_width(&target_speed, module->driving.min_pulse, module->driving.max_pulse);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80031d0:	f107 030e 	add.w	r3, r7, #14
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f978 	bl	80034ca <constrain_pulse_width>
	#ifdef DEBUG_PRINT    // For debugging, you might print the pulse:
		 printf("Driving speed: %d\n", target_speed);
		 printf("Driving PSC: %lu, ARR: %lu\n", module->driving.pwm_tim->Instance->PSC, module->driving.pwm_tim->Instance->ARR);
	#endif

    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <SM_UpdateDriving+0x66>
 80031e2:	89fa      	ldrh	r2, [r7, #14]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80031ec:	e031      	b.n	8003252 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d106      	bne.n	8003204 <SM_UpdateDriving+0x7c>
 80031f6:	89f9      	ldrh	r1, [r7, #14]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	460b      	mov	r3, r1
 8003200:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003202:	e026      	b.n	8003252 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	2b08      	cmp	r3, #8
 800320a:	d106      	bne.n	800321a <SM_UpdateDriving+0x92>
 800320c:	89f9      	ldrh	r1, [r7, #14]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003218:	e01b      	b.n	8003252 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d106      	bne.n	8003230 <SM_UpdateDriving+0xa8>
 8003222:	89f9      	ldrh	r1, [r7, #14]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	460b      	mov	r3, r1
 800322c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800322e:	e010      	b.n	8003252 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	2b10      	cmp	r3, #16
 8003236:	d106      	bne.n	8003246 <SM_UpdateDriving+0xbe>
 8003238:	89f9      	ldrh	r1, [r7, #14]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	460b      	mov	r3, r1
 8003242:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003244:	e005      	b.n	8003252 <SM_UpdateDriving+0xca>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, target_speed);
 8003246:	89f9      	ldrh	r1, [r7, #14]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	460b      	mov	r3, r1
 8003250:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <SM_GetCurrentAngle>:

float SM_GetCurrentAngle(SwerveModule* module) {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    int32_t counts = (int16_t)(module->steering.encoder_tim->Instance->CNT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	b21b      	sxth	r3, r3
 800326e:	60fb      	str	r3, [r7, #12]
		printf("Encoder Counts: %ld\n", counts);
	#endif

    // Convert the encoder counts to an angle.
    // (Assumes module->counts_per_degree is set appropriately.)
    return counts * module->counts_per_degree * 360.0f;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003284:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800329c <SM_GetCurrentAngle+0x40>
 8003288:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	43b40000 	.word	0x43b40000

080032a0 <normalize_angle_error>:
    printf("Driving Calibrate PCC: %lu\n", motor->pwm_tim->Instance->CCR4);
	HAL_Delay(8000);
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
}

static float normalize_angle_error(float error) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Wrap error to [-180, 180)
    error = fmodf(error + 180.0f, 360.0f);
 80032aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ae:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80032fc <normalize_angle_error+0x5c>
 80032b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032b6:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8003300 <normalize_angle_error+0x60>
 80032ba:	eeb0 0a67 	vmov.f32	s0, s15
 80032be:	f009 fa73 	bl	800c7a8 <fmodf>
 80032c2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (error < 0)
 80032c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	d507      	bpl.n	80032e4 <normalize_angle_error+0x44>
        error += 360.0f;
 80032d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003300 <normalize_angle_error+0x60>
 80032dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032e0:	edc7 7a01 	vstr	s15, [r7, #4]
    return error - 180.0f;
 80032e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e8:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80032fc <normalize_angle_error+0x5c>
 80032ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80032f0:	eeb0 0a67 	vmov.f32	s0, s15
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	43340000 	.word	0x43340000
 8003300:	43b40000 	.word	0x43b40000

08003304 <steering_pid_update>:

// Private function implementations
static float steering_pid_update(SteeringMotor* motor, float target, float current) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003310:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = normalize_angle_error(target - current);
 8003314:	ed97 7a02 	vldr	s14, [r7, #8]
 8003318:	edd7 7a01 	vldr	s15, [r7, #4]
 800331c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	f7ff ffbc 	bl	80032a0 <normalize_angle_error>
 8003328:	ed87 0a05 	vstr	s0, [r7, #20]

    // Integral term with clamping
    motor->integral += error * motor->dt;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003338:	edd7 7a05 	vldr	s15, [r7, #20]
 800333c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    motor->integral = fmaxf(fminf(motor->integral, motor->integral_limit), -motor->integral_limit);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	ed93 7a08 	vldr	s14, [r3, #32]
 8003356:	eef0 0a47 	vmov.f32	s1, s14
 800335a:	eeb0 0a67 	vmov.f32	s0, s15
 800335e:	f009 fba4 	bl	800caaa <fminf>
 8003362:	eeb0 7a40 	vmov.f32	s14, s0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	edd3 7a08 	vldr	s15, [r3, #32]
 800336c:	eef1 7a67 	vneg.f32	s15, s15
 8003370:	eef0 0a67 	vmov.f32	s1, s15
 8003374:	eeb0 0a47 	vmov.f32	s0, s14
 8003378:	f009 fb7a 	bl	800ca70 <fmaxf>
 800337c:	eef0 7a40 	vmov.f32	s15, s0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Derivative term
    float derivative = (error - motor->prev_error) / motor->dt;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800338c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003390:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800339a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800339e:	edc7 7a04 	vstr	s15, [r7, #16]
    motor->prev_error = error;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28

    return (motor->Kp * error) + (motor->Ki * motor->integral) + (motor->Kd * derivative);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80033ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80033b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	edd3 6a06 	vldr	s13, [r3, #24]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80033c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	edd3 6a07 	vldr	s13, [r3, #28]
 80033d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80033d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <set_steering_pwm>:


static void set_steering_pwm(SteeringMotor* motor, int16_t pwm) {
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	807b      	strh	r3, [r7, #2]
    bool direction = (pwm <= 0);
 80033f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bfd4      	ite	le
 80033fa:	2301      	movle	r3, #1
 80033fc:	2300      	movgt	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
    pwm = (int16_t)fminf(fabsf(pwm), __HAL_TIM_GET_AUTORELOAD(motor->pwm_tim));
 8003400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340c:	eef0 7ae7 	vabs.f32	s15, s15
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	ee07 3a10 	vmov	s14, r3
 800341c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003420:	eef0 0a47 	vmov.f32	s1, s14
 8003424:	eeb0 0a67 	vmov.f32	s0, s15
 8003428:	f009 fb3f 	bl	800caaa <fminf>
 800342c:	eef0 7a40 	vmov.f32	s15, s0
 8003430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003434:	ee17 3a90 	vmov	r3, s15
 8003438:	807b      	strh	r3, [r7, #2]
	#ifdef DEBUG_PRINT
		printf("Steering PSC: %lu, ARR: %lu\n", motor->pwm_tim->Instance->PSC, motor->pwm_tim->Instance->ARR);
		printf("Direction: %d, pwm: %d\n", direction, pwm);
	#endif

    HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, direction);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	889b      	ldrh	r3, [r3, #4]
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	4619      	mov	r1, r3
 8003446:	f000 fe99 	bl	800417c <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <set_steering_pwm+0x78>
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800345c:	e031      	b.n	80034c2 <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d106      	bne.n	8003474 <set_steering_pwm+0x8e>
 8003466:	8879      	ldrh	r1, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	460b      	mov	r3, r1
 8003470:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003472:	e026      	b.n	80034c2 <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d106      	bne.n	800348a <set_steering_pwm+0xa4>
 800347c:	8879      	ldrh	r1, [r7, #2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003488:	e01b      	b.n	80034c2 <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d106      	bne.n	80034a0 <set_steering_pwm+0xba>
 8003492:	8879      	ldrh	r1, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	460b      	mov	r3, r1
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800349e:	e010      	b.n	80034c2 <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d106      	bne.n	80034b6 <set_steering_pwm+0xd0>
 80034a8:	8879      	ldrh	r1, [r7, #2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80034b4:	e005      	b.n	80034c2 <set_steering_pwm+0xdc>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, (uint16_t)pwm);
 80034b6:	8879      	ldrh	r1, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	460b      	mov	r3, r1
 80034c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <constrain_pulse_width>:

static void constrain_pulse_width(uint16_t* pulse, uint16_t min, uint16_t max) {
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
 80034d6:	4613      	mov	r3, r2
 80034d8:	803b      	strh	r3, [r7, #0]
    if(*pulse < min) *pulse = min;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d902      	bls.n	80034ea <constrain_pulse_width+0x20>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	801a      	strh	r2, [r3, #0]
    if(*pulse > max) *pulse = max;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	883a      	ldrh	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d202      	bcs.n	80034fa <constrain_pulse_width+0x30>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	883a      	ldrh	r2, [r7, #0]
 80034f8:	801a      	strh	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  return 1;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <_kill>:

int _kill(int pid, int sig)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003520:	f006 f852 	bl	80095c8 <__errno>
 8003524:	4603      	mov	r3, r0
 8003526:	2216      	movs	r2, #22
 8003528:	601a      	str	r2, [r3, #0]
  return -1;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_exit>:

void _exit (int status)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800353e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffe7 	bl	8003516 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <_exit+0x12>

0800354c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e00a      	b.n	8003574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800355e:	f3af 8000 	nop.w
 8003562:	4601      	mov	r1, r0
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	60ba      	str	r2, [r7, #8]
 800356a:	b2ca      	uxtb	r2, r1
 800356c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3301      	adds	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	dbf0      	blt.n	800355e <_read+0x12>
  }

  return len;
 800357c:	687b      	ldr	r3, [r7, #4]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e009      	b.n	80035ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	60ba      	str	r2, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f9f7 	bl	8003994 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	3301      	adds	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dbf1      	blt.n	8003598 <_write+0x12>
  }
  return len;
 80035b4:	687b      	ldr	r3, [r7, #4]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_close>:

int _close(int file)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035e6:	605a      	str	r2, [r3, #4]
  return 0;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_isatty>:

int _isatty(int file)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003630:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <_sbrk+0x5c>)
 8003632:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <_sbrk+0x60>)
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800363c:	4b13      	ldr	r3, [pc, #76]	@ (800368c <_sbrk+0x64>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <_sbrk+0x64>)
 8003646:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <_sbrk+0x68>)
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364a:	4b10      	ldr	r3, [pc, #64]	@ (800368c <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d207      	bcs.n	8003668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003658:	f005 ffb6 	bl	80095c8 <__errno>
 800365c:	4603      	mov	r3, r0
 800365e:	220c      	movs	r2, #12
 8003660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003666:	e009      	b.n	800367c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <_sbrk+0x64>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <_sbrk+0x64>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	4a05      	ldr	r2, [pc, #20]	@ (800368c <_sbrk+0x64>)
 8003678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20020000 	.word	0x20020000
 8003688:	00000400 	.word	0x00000400
 800368c:	2000069c 	.word	0x2000069c
 8003690:	20000890 	.word	0x20000890

08003694 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003698:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <SystemInit+0x20>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	4a05      	ldr	r2, [pc, #20]	@ (80036b4 <SystemInit+0x20>)
 80036a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036b8:	480d      	ldr	r0, [pc, #52]	@ (80036f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036bc:	f7ff ffea 	bl	8003694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80036c2:	490d      	ldr	r1, [pc, #52]	@ (80036f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <LoopForever+0xe>)
  movs r3, #0
 80036c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036c8:	e002      	b.n	80036d0 <LoopCopyDataInit>

080036ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ce:	3304      	adds	r3, #4

080036d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d4:	d3f9      	bcc.n	80036ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003704 <LoopForever+0x16>)
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036dc:	e001      	b.n	80036e2 <LoopFillZerobss>

080036de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e0:	3204      	adds	r2, #4

080036e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e4:	d3fb      	bcc.n	80036de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036e6:	f005 ff75 	bl	80095d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ea:	f7fd fdfb 	bl	80012e4 <main>

080036ee <LoopForever>:

LoopForever:
    b LoopForever
 80036ee:	e7fe      	b.n	80036ee <LoopForever>
  ldr   r0, =_estack
 80036f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80036fc:	0800d304 	.word	0x0800d304
  ldr r2, =_sbss
 8003700:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003704:	20000890 	.word	0x20000890

08003708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003708:	e7fe      	b.n	8003708 <ADC1_2_IRQHandler>
	...

0800370c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8003716:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <BSP_LED_Init+0x64>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	4a15      	ldr	r2, [pc, #84]	@ (8003770 <BSP_LED_Init+0x64>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <BSP_LED_Init+0x64>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800372e:	2320      	movs	r3, #32
 8003730:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003732:	2301      	movs	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	2303      	movs	r3, #3
 800373c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	4a0c      	ldr	r2, [pc, #48]	@ (8003774 <BSP_LED_Init+0x68>)
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	f107 020c 	add.w	r2, r7, #12
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fb93 	bl	8003e78 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	4a07      	ldr	r2, [pc, #28]	@ (8003774 <BSP_LED_Init+0x68>)
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	2120      	movs	r1, #32
 800375c:	2200      	movs	r2, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fd0c 	bl	800417c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	20000008 	.word	0x20000008

08003778 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	4a06      	ldr	r2, [pc, #24]	@ (80037a0 <BSP_LED_On+0x28>)
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	2120      	movs	r1, #32
 800378c:	2201      	movs	r2, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fcf4 	bl	800417c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000008 	.word	0x20000008

080037a4 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	4a06      	ldr	r2, [pc, #24]	@ (80037cc <BSP_LED_Toggle+0x28>)
 80037b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b6:	2220      	movs	r2, #32
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fcf6 	bl	80041ac <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000008 	.word	0x20000008

080037d0 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	460a      	mov	r2, r1
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	4613      	mov	r3, r2
 80037de:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80037e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003894 <BSP_PB_Init+0xc4>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003894 <BSP_PB_Init+0xc4>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ec:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <BSP_PB_Init+0xc4>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80037f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037fc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80037fe:	2302      	movs	r3, #2
 8003800:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003802:	2302      	movs	r3, #2
 8003804:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8003806:	79bb      	ldrb	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10c      	bne.n	8003826 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <BSP_PB_Init+0xc8>)
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	f107 020c 	add.w	r2, r7, #12
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fb2a 	bl	8003e78 <HAL_GPIO_Init>
 8003824:	e031      	b.n	800388a <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003826:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800382a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <BSP_PB_Init+0xc8>)
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	f107 020c 	add.w	r2, r7, #12
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fb1c 	bl	8003e78 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <BSP_PB_Init+0xcc>)
 8003846:	441a      	add	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	4915      	ldr	r1, [pc, #84]	@ (80038a0 <BSP_PB_Init+0xd0>)
 800384c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 facc 	bl	8003df0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <BSP_PB_Init+0xcc>)
 800385e:	1898      	adds	r0, r3, r2
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	4a10      	ldr	r2, [pc, #64]	@ (80038a4 <BSP_PB_Init+0xd4>)
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	461a      	mov	r2, r3
 800386a:	2100      	movs	r1, #0
 800386c:	f000 faa3 	bl	8003db6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003870:	2028      	movs	r0, #40	@ 0x28
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	4a0c      	ldr	r2, [pc, #48]	@ (80038a8 <BSP_PB_Init+0xd8>)
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	2200      	movs	r2, #0
 800387c:	4619      	mov	r1, r3
 800387e:	f000 fa66 	bl	8003d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003882:	2328      	movs	r3, #40	@ 0x28
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fa7c 	bl	8003d82 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	2000000c 	.word	0x2000000c
 800389c:	200006a0 	.word	0x200006a0
 80038a0:	0800ce48 	.word	0x0800ce48
 80038a4:	20000014 	.word	0x20000014
 80038a8:	20000018 	.word	0x20000018

080038ac <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <BSP_PB_IRQHandler+0x20>)
 80038bc:	4413      	add	r3, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 faaa 	bl	8003e18 <HAL_EXTI_IRQHandler>
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200006a0 	.word	0x200006a0

080038d0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d903      	bls.n	80038ee <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038e6:	f06f 0301 	mvn.w	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e018      	b.n	8003920 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	2294      	movs	r2, #148	@ 0x94
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <BSP_COM_Init+0x5c>)
 80038f8:	4413      	add	r3, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f86e 	bl	80039dc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2294      	movs	r2, #148	@ 0x94
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	4a08      	ldr	r2, [pc, #32]	@ (800392c <BSP_COM_Init+0x5c>)
 800390a:	4413      	add	r3, r2
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f80e 	bl	8003930 <MX_LPUART1_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800391a:	f06f 0303 	mvn.w	r3, #3
 800391e:	e000      	b.n	8003922 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8003920:	68fb      	ldr	r3, [r7, #12]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	200006a8 	.word	0x200006a8

08003930 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800393a:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <MX_LPUART1_Init+0x60>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	220c      	movs	r2, #12
 800394e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	895b      	ldrh	r3, [r3, #10]
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	891b      	ldrh	r3, [r3, #8]
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	899b      	ldrh	r3, [r3, #12]
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800397c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f002 ff46 	bl	8006810 <HAL_UART_Init>
 8003984:	4603      	mov	r3, r0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000010 	.word	0x20000010

08003994 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800399c:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <__io_putchar+0x30>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	2394      	movs	r3, #148	@ 0x94
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <__io_putchar+0x34>)
 80039aa:	1898      	adds	r0, r3, r2
 80039ac:	1d39      	adds	r1, r7, #4
 80039ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039b2:	2201      	movs	r2, #1
 80039b4:	f002 ff7c 	bl	80068b0 <HAL_UART_Transmit>
  return ch;
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000073c 	.word	0x2000073c
 80039c8:	200006a8 	.word	0x200006a8

080039cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7ff f80b 	bl	80029ec <BSP_PB_Callback>
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80039e4:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <COM1_MspInit+0x94>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e8:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <COM1_MspInit+0x94>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <COM1_MspInit+0x94>)
 80039f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80039fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <COM1_MspInit+0x94>)
 80039fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a00:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <COM1_MspInit+0x94>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <COM1_MspInit+0x94>)
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003a14:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <COM1_MspInit+0x94>)
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <COM1_MspInit+0x94>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a20:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <COM1_MspInit+0x94>)
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003a34:	2302      	movs	r3, #2
 8003a36:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4619      	mov	r1, r3
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4a:	f000 fa15 	bl	8003e78 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003a4e:	2308      	movs	r3, #8
 8003a50:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8003a56:	230c      	movs	r3, #12
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a64:	f000 fa08 	bl	8003e78 <HAL_GPIO_Init>
}
 8003a68:	bf00      	nop
 8003a6a:	3728      	adds	r7, #40	@ 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a7e:	2003      	movs	r0, #3
 8003a80:	f000 f95a 	bl	8003d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a84:	2000      	movs	r0, #0
 8003a86:	f000 f80d 	bl	8003aa4 <HAL_InitTick>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	e001      	b.n	8003a9a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a96:	f7fe ffc3 	bl	8002a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a9a:	79fb      	ldrb	r3, [r7, #7]

}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003ab0:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <HAL_InitTick+0x68>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d022      	beq.n	8003afe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ab8:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_InitTick+0x6c>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b13      	ldr	r3, [pc, #76]	@ (8003b0c <HAL_InitTick+0x68>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f966 	bl	8003d9e <HAL_SYSTICK_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d809      	bhi.n	8003af2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ae6:	f000 f932 	bl	8003d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aea:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <HAL_InitTick+0x70>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e007      	b.n	8003b02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	e004      	b.n	8003b02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e001      	b.n	8003b02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000020 	.word	0x20000020
 8003b10:	20000004 	.word	0x20000004
 8003b14:	2000001c 	.word	0x2000001c

08003b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b1c:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <HAL_IncTick+0x1c>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_IncTick+0x20>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	4a03      	ldr	r2, [pc, #12]	@ (8003b34 <HAL_IncTick+0x1c>)
 8003b28:	6013      	str	r3, [r2, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000740 	.word	0x20000740
 8003b38:	20000020 	.word	0x20000020

08003b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <HAL_GetTick+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000740 	.word	0x20000740

08003b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff ffee 	bl	8003b3c <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b6c:	d004      	beq.n	8003b78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_Delay+0x40>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b78:	bf00      	nop
 8003b7a:	f7ff ffdf 	bl	8003b3c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d8f7      	bhi.n	8003b7a <HAL_Delay+0x26>
  {
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000020 	.word	0x20000020

08003b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be4:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	@ (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	@ (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	@ (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	@ 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	bf28      	it	cs
 8003caa:	2304      	movcs	r3, #4
 8003cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d902      	bls.n	8003cbc <NVIC_EncodePriority+0x30>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3b03      	subs	r3, #3
 8003cba:	e000      	b.n	8003cbe <NVIC_EncodePriority+0x32>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	401a      	ands	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	43d9      	mvns	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	4313      	orrs	r3, r2
         );
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d04:	d301      	bcc.n	8003d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00f      	b.n	8003d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d34 <SysTick_Config+0x40>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d12:	210f      	movs	r1, #15
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d18:	f7ff ff8e 	bl	8003c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <SysTick_Config+0x40>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d22:	4b04      	ldr	r3, [pc, #16]	@ (8003d34 <SysTick_Config+0x40>)
 8003d24:	2207      	movs	r2, #7
 8003d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	e000e010 	.word	0xe000e010

08003d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff29 	bl	8003b98 <__NVIC_SetPriorityGrouping>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d5c:	f7ff ff40 	bl	8003be0 <__NVIC_GetPriorityGrouping>
 8003d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	6978      	ldr	r0, [r7, #20]
 8003d68:	f7ff ff90 	bl	8003c8c <NVIC_EncodePriority>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff5f 	bl	8003c38 <__NVIC_SetPriority>
}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	4603      	mov	r3, r0
 8003d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff33 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffa4 	bl	8003cf4 <SysTick_Config>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003db6:	b480      	push	{r7}
 8003db8:	b087      	sub	sp, #28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]
      break;
 8003dd4:	e005      	b.n	8003de2 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75fb      	strb	r3, [r7, #23]
      break;
 8003de0:	bf00      	nop
  }

  return status;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e003      	b.n	8003e0c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2201      	movs	r2, #1
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <HAL_EXTI_IRQHandler+0x5c>)
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4798      	blx	r3
    }
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40010414 	.word	0x40010414

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e86:	e15a      	b.n	800413e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 814c 	beq.w	8004138 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d005      	beq.n	8003eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d130      	bne.n	8003f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eee:	2201      	movs	r2, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 0201 	and.w	r2, r3, #1
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d017      	beq.n	8003f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d123      	bne.n	8003faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	08da      	lsrs	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3208      	adds	r2, #8
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	220f      	movs	r2, #15
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	6939      	ldr	r1, [r7, #16]
 8003fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0203 	and.w	r2, r3, #3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a6 	beq.w	8004138 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fec:	4b5b      	ldr	r3, [pc, #364]	@ (800415c <HAL_GPIO_Init+0x2e4>)
 8003fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800415c <HAL_GPIO_Init+0x2e4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff8:	4b58      	ldr	r3, [pc, #352]	@ (800415c <HAL_GPIO_Init+0x2e4>)
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004004:	4a56      	ldr	r2, [pc, #344]	@ (8004160 <HAL_GPIO_Init+0x2e8>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	220f      	movs	r2, #15
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800402e:	d01f      	beq.n	8004070 <HAL_GPIO_Init+0x1f8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a4c      	ldr	r2, [pc, #304]	@ (8004164 <HAL_GPIO_Init+0x2ec>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d019      	beq.n	800406c <HAL_GPIO_Init+0x1f4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a4b      	ldr	r2, [pc, #300]	@ (8004168 <HAL_GPIO_Init+0x2f0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <HAL_GPIO_Init+0x1f0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a4a      	ldr	r2, [pc, #296]	@ (800416c <HAL_GPIO_Init+0x2f4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00d      	beq.n	8004064 <HAL_GPIO_Init+0x1ec>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a49      	ldr	r2, [pc, #292]	@ (8004170 <HAL_GPIO_Init+0x2f8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <HAL_GPIO_Init+0x1e8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a48      	ldr	r2, [pc, #288]	@ (8004174 <HAL_GPIO_Init+0x2fc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_GPIO_Init+0x1e4>
 8004058:	2305      	movs	r3, #5
 800405a:	e00a      	b.n	8004072 <HAL_GPIO_Init+0x1fa>
 800405c:	2306      	movs	r3, #6
 800405e:	e008      	b.n	8004072 <HAL_GPIO_Init+0x1fa>
 8004060:	2304      	movs	r3, #4
 8004062:	e006      	b.n	8004072 <HAL_GPIO_Init+0x1fa>
 8004064:	2303      	movs	r3, #3
 8004066:	e004      	b.n	8004072 <HAL_GPIO_Init+0x1fa>
 8004068:	2302      	movs	r3, #2
 800406a:	e002      	b.n	8004072 <HAL_GPIO_Init+0x1fa>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_GPIO_Init+0x1fa>
 8004070:	2300      	movs	r3, #0
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	f002 0203 	and.w	r2, r2, #3
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	4093      	lsls	r3, r2
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004082:	4937      	ldr	r1, [pc, #220]	@ (8004160 <HAL_GPIO_Init+0x2e8>)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3302      	adds	r3, #2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004090:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <HAL_GPIO_Init+0x300>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43db      	mvns	r3, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040b4:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <HAL_GPIO_Init+0x300>)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004178 <HAL_GPIO_Init+0x300>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040de:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <HAL_GPIO_Init+0x300>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040e4:	4b24      	ldr	r3, [pc, #144]	@ (8004178 <HAL_GPIO_Init+0x300>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004108:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_GPIO_Init+0x300>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800410e:	4b1a      	ldr	r3, [pc, #104]	@ (8004178 <HAL_GPIO_Init+0x300>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004132:	4a11      	ldr	r2, [pc, #68]	@ (8004178 <HAL_GPIO_Init+0x300>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f ae9d 	bne.w	8003e88 <HAL_GPIO_Init+0x10>
  }
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40021000 	.word	0x40021000
 8004160:	40010000 	.word	0x40010000
 8004164:	48000400 	.word	0x48000400
 8004168:	48000800 	.word	0x48000800
 800416c:	48000c00 	.word	0x48000c00
 8004170:	48001000 	.word	0x48001000
 8004174:	48001400 	.word	0x48001400
 8004178:	40010400 	.word	0x40010400

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004198:	e002      	b.n	80041a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041be:	887a      	ldrh	r2, [r7, #2]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	43d9      	mvns	r1, r3
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	400b      	ands	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d141      	bne.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ee:	4b4b      	ldr	r3, [pc, #300]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fa:	d131      	bne.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041fc:	4b47      	ldr	r3, [pc, #284]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004202:	4a46      	ldr	r2, [pc, #280]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800420c:	4b43      	ldr	r3, [pc, #268]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004214:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800421a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800421c:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2232      	movs	r2, #50	@ 0x32
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	4a3f      	ldr	r2, [pc, #252]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	0c9b      	lsrs	r3, r3, #18
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004232:	e002      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3b01      	subs	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800423a:	4b38      	ldr	r3, [pc, #224]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d102      	bne.n	800424e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f2      	bne.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800424e:	4b33      	ldr	r3, [pc, #204]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425a:	d158      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e057      	b.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004260:	4b2e      	ldr	r3, [pc, #184]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004266:	4a2d      	ldr	r2, [pc, #180]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800426c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004270:	e04d      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004278:	d141      	bne.n	80042fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800427a:	4b28      	ldr	r3, [pc, #160]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004286:	d131      	bne.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004288:	4b24      	ldr	r3, [pc, #144]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800428e:	4a23      	ldr	r2, [pc, #140]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004298:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042a0:	4a1e      	ldr	r2, [pc, #120]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2232      	movs	r2, #50	@ 0x32
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	0c9b      	lsrs	r3, r3, #18
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042be:	e002      	b.n	80042c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d2:	d102      	bne.n	80042da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f2      	bne.n	80042c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e6:	d112      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e011      	b.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042fc:	e007      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042fe:	4b07      	ldr	r3, [pc, #28]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004306:	4a05      	ldr	r2, [pc, #20]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800430c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40007000 	.word	0x40007000
 8004320:	20000004 	.word	0x20000004
 8004324:	431bde83 	.word	0x431bde83

08004328 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004336:	6093      	str	r3, [r2, #8]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40007000 	.word	0x40007000

08004348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e2fe      	b.n	8004958 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d075      	beq.n	8004452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b97      	ldr	r3, [pc, #604]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b94      	ldr	r3, [pc, #592]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d102      	bne.n	8004386 <HAL_RCC_OscConfig+0x3e>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d002      	beq.n	800438c <HAL_RCC_OscConfig+0x44>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b8d      	ldr	r3, [pc, #564]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05b      	beq.n	8004450 <HAL_RCC_OscConfig+0x108>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d157      	bne.n	8004450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e2d9      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x74>
 80043ae:	4b85      	ldr	r3, [pc, #532]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a84      	ldr	r2, [pc, #528]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01d      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x98>
 80043c6:	4b7f      	ldr	r3, [pc, #508]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a7e      	ldr	r2, [pc, #504]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b7c      	ldr	r3, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a7b      	ldr	r2, [pc, #492]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043e0:	4b78      	ldr	r3, [pc, #480]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a77      	ldr	r2, [pc, #476]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b75      	ldr	r3, [pc, #468]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a74      	ldr	r2, [pc, #464]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7ff fb9c 	bl	8003b3c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7ff fb98 	bl	8003b3c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e29e      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441a:	4b6a      	ldr	r3, [pc, #424]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0xc0>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7ff fb88 	bl	8003b3c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7ff fb84 	bl	8003b3c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	@ 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e28a      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004442:	4b60      	ldr	r3, [pc, #384]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0xe8>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d075      	beq.n	800454a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	4b56      	ldr	r3, [pc, #344]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d102      	bne.n	800447e <HAL_RCC_OscConfig+0x136>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d002      	beq.n	8004484 <HAL_RCC_OscConfig+0x13c>
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d11f      	bne.n	80044c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004484:	4b4f      	ldr	r3, [pc, #316]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_OscConfig+0x154>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e25d      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b49      	ldr	r3, [pc, #292]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	4946      	ldr	r1, [pc, #280]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044b0:	4b45      	ldr	r3, [pc, #276]	@ (80045c8 <HAL_RCC_OscConfig+0x280>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff faf5 	bl	8003aa4 <HAL_InitTick>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d043      	beq.n	8004548 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e249      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d023      	beq.n	8004514 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044cc:	4b3d      	ldr	r3, [pc, #244]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3c      	ldr	r2, [pc, #240]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7ff fb30 	bl	8003b3c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7ff fb2c 	bl	8003b3c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e232      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f2:	4b34      	ldr	r3, [pc, #208]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b31      	ldr	r3, [pc, #196]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	061b      	lsls	r3, r3, #24
 800450c:	492d      	ldr	r1, [pc, #180]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
 8004512:	e01a      	b.n	800454a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004514:	4b2b      	ldr	r3, [pc, #172]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800451a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7ff fb0c 	bl	8003b3c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004528:	f7ff fb08 	bl	8003b3c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e20e      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800453a:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1e0>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d041      	beq.n	80045da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01c      	beq.n	8004598 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7ff fae5 	bl	8003b3c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004576:	f7ff fae1 	bl	8003b3c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e1e7      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004588:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ef      	beq.n	8004576 <HAL_RCC_OscConfig+0x22e>
 8004596:	e020      	b.n	80045da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459e:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7ff fac8 	bl	8003b3c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ae:	e00d      	b.n	80045cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7ff fac4 	bl	8003b3c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d906      	bls.n	80045cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1ca      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1ea      	bne.n	80045b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80a6 	beq.w	8004734 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e8:	2300      	movs	r3, #0
 80045ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ec:	4b84      	ldr	r3, [pc, #528]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_OscConfig+0x2b4>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x2b6>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b7f      	ldr	r3, [pc, #508]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	4a7e      	ldr	r2, [pc, #504]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
 800460e:	4b7c      	ldr	r3, [pc, #496]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461e:	4b79      	ldr	r3, [pc, #484]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462a:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a75      	ldr	r2, [pc, #468]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7ff fa81 	bl	8003b3c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7ff fa7d 	bl	8003b3c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e183      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004650:	4b6c      	ldr	r3, [pc, #432]	@ (8004804 <HAL_RCC_OscConfig+0x4bc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d108      	bne.n	8004676 <HAL_RCC_OscConfig+0x32e>
 8004664:	4b66      	ldr	r3, [pc, #408]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466a:	4a65      	ldr	r2, [pc, #404]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004674:	e024      	b.n	80046c0 <HAL_RCC_OscConfig+0x378>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b05      	cmp	r3, #5
 800467c:	d110      	bne.n	80046a0 <HAL_RCC_OscConfig+0x358>
 800467e:	4b60      	ldr	r3, [pc, #384]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	4a5e      	ldr	r2, [pc, #376]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800468e:	4b5c      	ldr	r3, [pc, #368]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004694:	4a5a      	ldr	r2, [pc, #360]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800469e:	e00f      	b.n	80046c0 <HAL_RCC_OscConfig+0x378>
 80046a0:	4b57      	ldr	r3, [pc, #348]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	4a56      	ldr	r2, [pc, #344]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	4a52      	ldr	r2, [pc, #328]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d016      	beq.n	80046f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7ff fa38 	bl	8003b3c <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7ff fa34 	bl	8003b3c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e138      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e6:	4b46      	ldr	r3, [pc, #280]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ed      	beq.n	80046d0 <HAL_RCC_OscConfig+0x388>
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7ff fa21 	bl	8003b3c <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7ff fa1d 	bl	8003b3c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e121      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004714:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ed      	bne.n	80046fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004728:	4b35      	ldr	r3, [pc, #212]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	4a34      	ldr	r2, [pc, #208]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800472e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004732:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03c      	beq.n	80047ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800474e:	4a2c      	ldr	r2, [pc, #176]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7ff f9f0 	bl	8003b3c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004760:	f7ff f9ec 	bl	8003b3c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0f2      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004772:	4b23      	ldr	r3, [pc, #140]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004774:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ef      	beq.n	8004760 <HAL_RCC_OscConfig+0x418>
 8004780:	e01b      	b.n	80047ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004782:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 8004784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004788:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 800478a:	f023 0301 	bic.w	r3, r3, #1
 800478e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7ff f9d3 	bl	8003b3c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800479a:	f7ff f9cf 	bl	8003b3c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0d5      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047ac:	4b14      	ldr	r3, [pc, #80]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ef      	bne.n	800479a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80c9 	beq.w	8004956 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	f000 8083 	beq.w	80048d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d15e      	bne.n	8004898 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x4b8>)
 80047e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7ff f9a9 	bl	8003b3c <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ec:	e00c      	b.n	8004808 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7ff f9a5 	bl	8003b3c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d905      	bls.n	8004808 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0ab      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	4b55      	ldr	r3, [pc, #340]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ec      	bne.n	80047ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004814:	4b52      	ldr	r3, [pc, #328]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b52      	ldr	r3, [pc, #328]	@ (8004964 <HAL_RCC_OscConfig+0x61c>)
 800481a:	4013      	ands	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6a11      	ldr	r1, [r2, #32]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004824:	3a01      	subs	r2, #1
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800482e:	0212      	lsls	r2, r2, #8
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004836:	0852      	lsrs	r2, r2, #1
 8004838:	3a01      	subs	r2, #1
 800483a:	0552      	lsls	r2, r2, #21
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800484e:	06d2      	lsls	r2, r2, #27
 8004850:	430a      	orrs	r2, r1
 8004852:	4943      	ldr	r1, [pc, #268]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 8004854:	4313      	orrs	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a40      	ldr	r2, [pc, #256]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004864:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a3d      	ldr	r2, [pc, #244]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800486a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800486e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7ff f964 	bl	8003b3c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7ff f960 	bl	8003b3c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e066      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488a:	4b35      	ldr	r3, [pc, #212]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x530>
 8004896:	e05e      	b.n	8004956 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004898:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a30      	ldr	r2, [pc, #192]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7ff f94a 	bl	8003b3c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7ff f946 	bl	8003b3c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04c      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048be:	4b28      	ldr	r3, [pc, #160]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048ca:	4b25      	ldr	r3, [pc, #148]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	4924      	ldr	r1, [pc, #144]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <HAL_RCC_OscConfig+0x620>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]
 80048d6:	e03e      	b.n	8004956 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e039      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <HAL_RCC_OscConfig+0x618>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0203 	and.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d12c      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	3b01      	subs	r3, #1
 8004904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d123      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d11b      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d113      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	3b01      	subs	r3, #1
 8004938:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d109      	bne.n	8004952 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	019f800c 	.word	0x019f800c
 8004968:	feeefffc 	.word	0xfeeefffc

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e11e      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b91      	ldr	r3, [pc, #580]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b8e      	ldr	r3, [pc, #568]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 020f 	bic.w	r2, r3, #15
 800499a:	498c      	ldr	r1, [pc, #560]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b8a      	ldr	r3, [pc, #552]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e106      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d073      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d129      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c8:	4b81      	ldr	r3, [pc, #516]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0f4      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049d8:	f000 f99e 	bl	8004d18 <RCC_GetSysClockFreqFromPLLSource>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd4 <HAL_RCC_ClockConfig+0x268>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d93f      	bls.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049e6:	4b7a      	ldr	r3, [pc, #488]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d033      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d12f      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a06:	4b72      	ldr	r3, [pc, #456]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0e:	4a70      	ldr	r2, [pc, #448]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e024      	b.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a24:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0c6      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a34:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0be      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a44:	f000 f8ce 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4a61      	ldr	r2, [pc, #388]	@ (8004bd4 <HAL_RCC_ClockConfig+0x268>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d909      	bls.n	8004a66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a52:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a5a:	4a5d      	ldr	r2, [pc, #372]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a62:	2380      	movs	r3, #128	@ 0x80
 8004a64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4957      	ldr	r1, [pc, #348]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a78:	f7ff f860 	bl	8003b3c <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7ff f85c 	bl	8003b3c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e095      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b4e      	ldr	r3, [pc, #312]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac0:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a42      	ldr	r2, [pc, #264]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004aca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4b39      	ldr	r3, [pc, #228]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4936      	ldr	r1, [pc, #216]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b02:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4a32      	ldr	r2, [pc, #200]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d21d      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 020f 	bic.w	r2, r3, #15
 8004b24:	4929      	ldr	r1, [pc, #164]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b2c:	f7ff f806 	bl	8003b3c <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7ff f802 	bl	8003b3c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e03b      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <HAL_RCC_ClockConfig+0x260>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1ed      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4917      	ldr	r1, [pc, #92]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	490f      	ldr	r1, [pc, #60]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b96:	f000 f825 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <HAL_RCC_ClockConfig+0x264>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <HAL_RCC_ClockConfig+0x26c>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <HAL_RCC_ClockConfig+0x270>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <HAL_RCC_ClockConfig+0x274>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe ff72 	bl	8003aa4 <HAL_InitTick>
 8004bc0:	4603      	mov	r3, r0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40022000 	.word	0x40022000
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	04c4b400 	.word	0x04c4b400
 8004bd8:	0800ce30 	.word	0x0800ce30
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	2000001c 	.word	0x2000001c

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bea:	4b2c      	ldr	r3, [pc, #176]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d102      	bne.n	8004bfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e047      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004bfc:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d102      	bne.n	8004c0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c08:	4b26      	ldr	r3, [pc, #152]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	e03e      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c0e:	4b23      	ldr	r3, [pc, #140]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d136      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c1a:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c38:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c42:	68d2      	ldr	r2, [r2, #12]
 8004c44:	0a12      	lsrs	r2, r2, #8
 8004c46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	617b      	str	r3, [r7, #20]
      break;
 8004c50:	e00c      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c52:	4a13      	ldr	r2, [pc, #76]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	0a12      	lsrs	r2, r2, #8
 8004c60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
      break;
 8004c6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0e5b      	lsrs	r3, r3, #25
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	3301      	adds	r3, #1
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e001      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c8c:	693b      	ldr	r3, [r7, #16]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	016e3600 	.word	0x016e3600

08004ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cae:	681b      	ldr	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000004 	.word	0x20000004

08004cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cc4:	f7ff fff0 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4904      	ldr	r1, [pc, #16]	@ (8004ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	0800ce40 	.word	0x0800ce40

08004cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cf0:	f7ff ffda 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0adb      	lsrs	r3, r3, #11
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4904      	ldr	r1, [pc, #16]	@ (8004d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40021000 	.word	0x40021000
 8004d14:	0800ce40 	.word	0x0800ce40

08004d18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d10c      	bne.n	8004d56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d3c:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	4a14      	ldr	r2, [pc, #80]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d46:	68d2      	ldr	r2, [r2, #12]
 8004d48:	0a12      	lsrs	r2, r2, #8
 8004d4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	617b      	str	r3, [r7, #20]
    break;
 8004d54:	e00c      	b.n	8004d70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d56:	4a12      	ldr	r2, [pc, #72]	@ (8004da0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0a12      	lsrs	r2, r2, #8
 8004d64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    break;
 8004d6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0e5b      	lsrs	r3, r3, #25
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004d8a:	687b      	ldr	r3, [r7, #4]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	016e3600 	.word	0x016e3600
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dac:	2300      	movs	r3, #0
 8004dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004db0:	2300      	movs	r3, #0
 8004db2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8098 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc6:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10d      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	4b40      	ldr	r3, [pc, #256]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dde:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dea:	2301      	movs	r3, #1
 8004dec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dee:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a39      	ldr	r2, [pc, #228]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dfa:	f7fe fe9f 	bl	8003b3c <HAL_GetTick>
 8004dfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e00:	e009      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e02:	f7fe fe9b 	bl	8003b3c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d902      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	74fb      	strb	r3, [r7, #19]
        break;
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e16:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ef      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d159      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e28:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01e      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d019      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e44:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e50:	4b20      	ldr	r3, [pc, #128]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e56:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e70:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7fe fe5b 	bl	8003b3c <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fe fe57 	bl	8003b3c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d902      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ec      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb6:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec4:	4903      	ldr	r1, [pc, #12]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	74bb      	strb	r3, [r7, #18]
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4ba7      	ldr	r3, [pc, #668]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	4aa6      	ldr	r2, [pc, #664]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efe:	4ba1      	ldr	r3, [pc, #644]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f023 0203 	bic.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	499d      	ldr	r1, [pc, #628]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f20:	4b98      	ldr	r3, [pc, #608]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f023 020c 	bic.w	r2, r3, #12
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4995      	ldr	r1, [pc, #596]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f42:	4b90      	ldr	r3, [pc, #576]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	498c      	ldr	r1, [pc, #560]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f64:	4b87      	ldr	r3, [pc, #540]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	4984      	ldr	r1, [pc, #528]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	497b      	ldr	r1, [pc, #492]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa8:	4b76      	ldr	r3, [pc, #472]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	4973      	ldr	r1, [pc, #460]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fca:	4b6e      	ldr	r3, [pc, #440]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	496a      	ldr	r1, [pc, #424]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fec:	4b65      	ldr	r3, [pc, #404]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	4962      	ldr	r1, [pc, #392]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800500e:	4b5d      	ldr	r3, [pc, #372]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	4959      	ldr	r1, [pc, #356]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005030:	4b54      	ldr	r3, [pc, #336]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	4951      	ldr	r1, [pc, #324]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005052:	4b4c      	ldr	r3, [pc, #304]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	4948      	ldr	r1, [pc, #288]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005074:	4b43      	ldr	r3, [pc, #268]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	4940      	ldr	r1, [pc, #256]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005092:	d105      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005094:	4b3b      	ldr	r3, [pc, #236]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a3a      	ldr	r2, [pc, #232]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800509e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050ac:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ba:	4932      	ldr	r1, [pc, #200]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ca:	d105      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d015      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050e4:	4b27      	ldr	r3, [pc, #156]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	4924      	ldr	r1, [pc, #144]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005102:	d105      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005104:	4b1f      	ldr	r3, [pc, #124]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800511c:	4b19      	ldr	r3, [pc, #100]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005122:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	4916      	ldr	r1, [pc, #88]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513a:	d105      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513c:	4b11      	ldr	r3, [pc, #68]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a10      	ldr	r2, [pc, #64]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005146:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d019      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	4908      	ldr	r1, [pc, #32]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005172:	d109      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005174:	4b03      	ldr	r3, [pc, #12]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a02      	ldr	r2, [pc, #8]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517e:	60d3      	str	r3, [r2, #12]
 8005180:	e002      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d015      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005194:	4b29      	ldr	r3, [pc, #164]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	4926      	ldr	r1, [pc, #152]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051b2:	d105      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051b4:	4b21      	ldr	r3, [pc, #132]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a20      	ldr	r2, [pc, #128]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80051cc:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051da:	4918      	ldr	r1, [pc, #96]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ea:	d105      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051ec:	4b13      	ldr	r3, [pc, #76]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a12      	ldr	r2, [pc, #72]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d015      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005204:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800520a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005212:	490a      	ldr	r1, [pc, #40]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a04      	ldr	r2, [pc, #16]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800522e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005230:	7cbb      	ldrb	r3, [r7, #18]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e049      	b.n	80052e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd fcf2 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 fcfc 	bl	8005c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e049      	b.n	8005394 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fd fcf5 	bl	8002d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3304      	adds	r3, #4
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f000 fca5 	bl	8005c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_TIM_PWM_Start+0x24>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e03c      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d109      	bne.n	80053da <HAL_TIM_PWM_Start+0x3e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e02f      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d109      	bne.n	80053f4 <HAL_TIM_PWM_Start+0x58>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e022      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b0c      	cmp	r3, #12
 80053f8:	d109      	bne.n	800540e <HAL_TIM_PWM_Start+0x72>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	bf14      	ite	ne
 8005406:	2301      	movne	r3, #1
 8005408:	2300      	moveq	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e015      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b10      	cmp	r3, #16
 8005412:	d109      	bne.n	8005428 <HAL_TIM_PWM_Start+0x8c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e008      	b.n	800543a <HAL_TIM_PWM_Start+0x9e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0a6      	b.n	8005590 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_TIM_PWM_Start+0xb6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005450:	e023      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b04      	cmp	r3, #4
 8005456:	d104      	bne.n	8005462 <HAL_TIM_PWM_Start+0xc6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005460:	e01b      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d104      	bne.n	8005472 <HAL_TIM_PWM_Start+0xd6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005470:	e013      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Start+0xe6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005480:	e00b      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b10      	cmp	r3, #16
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Start+0xf6>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005490:	e003      	b.n	800549a <HAL_TIM_PWM_Start+0xfe>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f864 	bl	8006570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005598 <HAL_TIM_PWM_Start+0x1fc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x148>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a39      	ldr	r2, [pc, #228]	@ (800559c <HAL_TIM_PWM_Start+0x200>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x148>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a37      	ldr	r2, [pc, #220]	@ (80055a0 <HAL_TIM_PWM_Start+0x204>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x148>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a36      	ldr	r2, [pc, #216]	@ (80055a4 <HAL_TIM_PWM_Start+0x208>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x148>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a34      	ldr	r2, [pc, #208]	@ (80055a8 <HAL_TIM_PWM_Start+0x20c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x148>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a33      	ldr	r2, [pc, #204]	@ (80055ac <HAL_TIM_PWM_Start+0x210>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d101      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x14c>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <HAL_TIM_PWM_Start+0x14e>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a25      	ldr	r2, [pc, #148]	@ (8005598 <HAL_TIM_PWM_Start+0x1fc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d022      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d01d      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a26      	ldr	r2, [pc, #152]	@ (80055b0 <HAL_TIM_PWM_Start+0x214>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d018      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <HAL_TIM_PWM_Start+0x218>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a23      	ldr	r2, [pc, #140]	@ (80055b8 <HAL_TIM_PWM_Start+0x21c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a19      	ldr	r2, [pc, #100]	@ (800559c <HAL_TIM_PWM_Start+0x200>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d009      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	@ (80055a0 <HAL_TIM_PWM_Start+0x204>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <HAL_TIM_PWM_Start+0x1b2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <HAL_TIM_PWM_Start+0x210>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d115      	bne.n	800557a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <HAL_TIM_PWM_Start+0x220>)
 8005556:	4013      	ands	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b06      	cmp	r3, #6
 800555e:	d015      	beq.n	800558c <HAL_TIM_PWM_Start+0x1f0>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005566:	d011      	beq.n	800558c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	e008      	b.n	800558c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e000      	b.n	800558e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40013400 	.word	0x40013400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800
 80055ac:	40015000 	.word	0x40015000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	00010007 	.word	0x00010007

080055c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e097      	b.n	8005704 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fd fa3d 	bl	8002a68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f000 fb31 	bl	8005c7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005642:	f023 0303 	bic.w	r3, r3, #3
 8005646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	4313      	orrs	r3, r2
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005660:	f023 030c 	bic.w	r3, r3, #12
 8005664:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800566c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	4313      	orrs	r3, r2
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	011a      	lsls	r2, r3, #4
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	031b      	lsls	r3, r3, #12
 8005690:	4313      	orrs	r3, r2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	4313      	orrs	r3, r2
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800571c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005724:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800572c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005734:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d110      	bne.n	800575e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d102      	bne.n	8005748 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005742:	7b7b      	ldrb	r3, [r7, #13]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e069      	b.n	8005820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800575c:	e031      	b.n	80057c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d110      	bne.n	8005786 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005764:	7bbb      	ldrb	r3, [r7, #14]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800576a:	7b3b      	ldrb	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e055      	b.n	8005820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005784:	e01d      	b.n	80057c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d108      	bne.n	800579e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	7b7b      	ldrb	r3, [r7, #13]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d102      	bne.n	800579e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005798:	7b3b      	ldrb	r3, [r7, #12]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e03e      	b.n	8005820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_TIM_Encoder_Start+0xc4>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d008      	beq.n	80057e0 <HAL_TIM_Encoder_Start+0xd4>
 80057ce:	e00f      	b.n	80057f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fec9 	bl	8006570 <TIM_CCxChannelCmd>
      break;
 80057de:	e016      	b.n	800580e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2201      	movs	r2, #1
 80057e6:	2104      	movs	r1, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fec1 	bl	8006570 <TIM_CCxChannelCmd>
      break;
 80057ee:	e00e      	b.n	800580e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 feb9 	bl	8006570 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	2104      	movs	r1, #4
 8005806:	4618      	mov	r0, r3
 8005808:	f000 feb2 	bl	8006570 <TIM_CCxChannelCmd>
      break;
 800580c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005842:	2302      	movs	r3, #2
 8005844:	e0ff      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b14      	cmp	r3, #20
 8005852:	f200 80f0 	bhi.w	8005a36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005856:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	080058b1 	.word	0x080058b1
 8005860:	08005a37 	.word	0x08005a37
 8005864:	08005a37 	.word	0x08005a37
 8005868:	08005a37 	.word	0x08005a37
 800586c:	080058f1 	.word	0x080058f1
 8005870:	08005a37 	.word	0x08005a37
 8005874:	08005a37 	.word	0x08005a37
 8005878:	08005a37 	.word	0x08005a37
 800587c:	08005933 	.word	0x08005933
 8005880:	08005a37 	.word	0x08005a37
 8005884:	08005a37 	.word	0x08005a37
 8005888:	08005a37 	.word	0x08005a37
 800588c:	08005973 	.word	0x08005973
 8005890:	08005a37 	.word	0x08005a37
 8005894:	08005a37 	.word	0x08005a37
 8005898:	08005a37 	.word	0x08005a37
 800589c:	080059b5 	.word	0x080059b5
 80058a0:	08005a37 	.word	0x08005a37
 80058a4:	08005a37 	.word	0x08005a37
 80058a8:	08005a37 	.word	0x08005a37
 80058ac:	080059f5 	.word	0x080059f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fa94 	bl	8005de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0208 	orr.w	r2, r2, #8
 80058ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	619a      	str	r2, [r3, #24]
      break;
 80058ee:	e0a5      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb0e 	bl	8005f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800590a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6999      	ldr	r1, [r3, #24]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	619a      	str	r2, [r3, #24]
      break;
 8005930:	e084      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fb81 	bl	8006040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0208 	orr.w	r2, r2, #8
 800594c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0204 	bic.w	r2, r2, #4
 800595c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
      break;
 8005970:	e064      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 fbf3 	bl	8006164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800598c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800599c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	021a      	lsls	r2, r3, #8
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	61da      	str	r2, [r3, #28]
      break;
 80059b2:	e043      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc66 	bl	800628c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0208 	orr.w	r2, r2, #8
 80059ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0204 	bic.w	r2, r2, #4
 80059de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059f2:	e023      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fcb0 	bl	8006360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	021a      	lsls	r2, r3, #8
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a34:	e002      	b.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop

08005a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_ConfigClockSource+0x1c>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e0f6      	b.n	8005c5a <HAL_TIM_ConfigClockSource+0x20a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6f      	ldr	r2, [pc, #444]	@ (8005c64 <HAL_TIM_ConfigClockSource+0x214>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	f000 80c1 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005aac:	4a6d      	ldr	r2, [pc, #436]	@ (8005c64 <HAL_TIM_ConfigClockSource+0x214>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	f200 80c6 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ab4:	4a6c      	ldr	r2, [pc, #432]	@ (8005c68 <HAL_TIM_ConfigClockSource+0x218>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	f000 80b9 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005abc:	4a6a      	ldr	r2, [pc, #424]	@ (8005c68 <HAL_TIM_ConfigClockSource+0x218>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	f200 80be 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ac4:	4a69      	ldr	r2, [pc, #420]	@ (8005c6c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f000 80b1 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005acc:	4a67      	ldr	r2, [pc, #412]	@ (8005c6c <HAL_TIM_ConfigClockSource+0x21c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	f200 80b6 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ad4:	4a66      	ldr	r2, [pc, #408]	@ (8005c70 <HAL_TIM_ConfigClockSource+0x220>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	f000 80a9 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005adc:	4a64      	ldr	r2, [pc, #400]	@ (8005c70 <HAL_TIM_ConfigClockSource+0x220>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	f200 80ae 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ae4:	4a63      	ldr	r2, [pc, #396]	@ (8005c74 <HAL_TIM_ConfigClockSource+0x224>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	f000 80a1 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005aec:	4a61      	ldr	r2, [pc, #388]	@ (8005c74 <HAL_TIM_ConfigClockSource+0x224>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	f200 80a6 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005af4:	4a60      	ldr	r2, [pc, #384]	@ (8005c78 <HAL_TIM_ConfigClockSource+0x228>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f000 8099 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005afc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c78 <HAL_TIM_ConfigClockSource+0x228>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	f200 809e 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b08:	f000 8091 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005b0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b10:	f200 8096 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b18:	f000 8089 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b20:	f200 808e 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b28:	d03e      	beq.n	8005ba8 <HAL_TIM_ConfigClockSource+0x158>
 8005b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b2e:	f200 8087 	bhi.w	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b36:	f000 8086 	beq.w	8005c46 <HAL_TIM_ConfigClockSource+0x1f6>
 8005b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3e:	d87f      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b40:	2b70      	cmp	r3, #112	@ 0x70
 8005b42:	d01a      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x12a>
 8005b44:	2b70      	cmp	r3, #112	@ 0x70
 8005b46:	d87b      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b48:	2b60      	cmp	r3, #96	@ 0x60
 8005b4a:	d050      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x19e>
 8005b4c:	2b60      	cmp	r3, #96	@ 0x60
 8005b4e:	d877      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b50:	2b50      	cmp	r3, #80	@ 0x50
 8005b52:	d03c      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x17e>
 8005b54:	2b50      	cmp	r3, #80	@ 0x50
 8005b56:	d873      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d058      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x1be>
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d86f      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b60:	2b30      	cmp	r3, #48	@ 0x30
 8005b62:	d064      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005b64:	2b30      	cmp	r3, #48	@ 0x30
 8005b66:	d86b      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	d060      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d867      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d05c      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d05a      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0x1de>
 8005b78:	e062      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b8a:	f000 fcd1 	bl	8006530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	609a      	str	r2, [r3, #8]
      break;
 8005ba6:	e04f      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bb8:	f000 fcba 	bl	8006530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bca:	609a      	str	r2, [r3, #8]
      break;
 8005bcc:	e03c      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 fc2c 	bl	8006438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2150      	movs	r1, #80	@ 0x50
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fc85 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005bec:	e02c      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 fc4b 	bl	8006496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2160      	movs	r1, #96	@ 0x60
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fc75 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e01c      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f000 fc0c 	bl	8006438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2140      	movs	r1, #64	@ 0x40
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fc65 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005c2c:	e00c      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f000 fc5c 	bl	80064f6 <TIM_ITRx_SetConfig>
      break;
 8005c3e:	e003      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	e000      	b.n	8005c48 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	00100070 	.word	0x00100070
 8005c68:	00100060 	.word	0x00100060
 8005c6c:	00100050 	.word	0x00100050
 8005c70:	00100040 	.word	0x00100040
 8005c74:	00100030 	.word	0x00100030
 8005c78:	00100020 	.word	0x00100020

08005c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a4c      	ldr	r2, [pc, #304]	@ (8005dc0 <TIM_Base_SetConfig+0x144>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d017      	beq.n	8005cc4 <TIM_Base_SetConfig+0x48>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9a:	d013      	beq.n	8005cc4 <TIM_Base_SetConfig+0x48>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a49      	ldr	r2, [pc, #292]	@ (8005dc4 <TIM_Base_SetConfig+0x148>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_Base_SetConfig+0x48>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a48      	ldr	r2, [pc, #288]	@ (8005dc8 <TIM_Base_SetConfig+0x14c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_Base_SetConfig+0x48>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a47      	ldr	r2, [pc, #284]	@ (8005dcc <TIM_Base_SetConfig+0x150>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_Base_SetConfig+0x48>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a46      	ldr	r2, [pc, #280]	@ (8005dd0 <TIM_Base_SetConfig+0x154>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_Base_SetConfig+0x48>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a45      	ldr	r2, [pc, #276]	@ (8005dd4 <TIM_Base_SetConfig+0x158>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a39      	ldr	r2, [pc, #228]	@ (8005dc0 <TIM_Base_SetConfig+0x144>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d023      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce4:	d01f      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a36      	ldr	r2, [pc, #216]	@ (8005dc4 <TIM_Base_SetConfig+0x148>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01b      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a35      	ldr	r2, [pc, #212]	@ (8005dc8 <TIM_Base_SetConfig+0x14c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d017      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a34      	ldr	r2, [pc, #208]	@ (8005dcc <TIM_Base_SetConfig+0x150>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a33      	ldr	r2, [pc, #204]	@ (8005dd0 <TIM_Base_SetConfig+0x154>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00f      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a33      	ldr	r2, [pc, #204]	@ (8005dd8 <TIM_Base_SetConfig+0x15c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a32      	ldr	r2, [pc, #200]	@ (8005ddc <TIM_Base_SetConfig+0x160>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a31      	ldr	r2, [pc, #196]	@ (8005de0 <TIM_Base_SetConfig+0x164>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d003      	beq.n	8005d26 <TIM_Base_SetConfig+0xaa>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd4 <TIM_Base_SetConfig+0x158>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d108      	bne.n	8005d38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <TIM_Base_SetConfig+0x144>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <TIM_Base_SetConfig+0x110>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd0 <TIM_Base_SetConfig+0x154>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0x110>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd8 <TIM_Base_SetConfig+0x15c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0x110>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a19      	ldr	r2, [pc, #100]	@ (8005ddc <TIM_Base_SetConfig+0x160>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0x110>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <TIM_Base_SetConfig+0x164>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0x110>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a13      	ldr	r2, [pc, #76]	@ (8005dd4 <TIM_Base_SetConfig+0x158>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	611a      	str	r2, [r3, #16]
  }
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40015000 	.word	0x40015000
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800

08005de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f023 0201 	bic.w	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0302 	bic.w	r3, r3, #2
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a30      	ldr	r2, [pc, #192]	@ (8005f00 <TIM_OC1_SetConfig+0x11c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <TIM_OC1_SetConfig+0x88>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a2f      	ldr	r2, [pc, #188]	@ (8005f04 <TIM_OC1_SetConfig+0x120>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00f      	beq.n	8005e6c <TIM_OC1_SetConfig+0x88>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005f08 <TIM_OC1_SetConfig+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00b      	beq.n	8005e6c <TIM_OC1_SetConfig+0x88>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a2d      	ldr	r2, [pc, #180]	@ (8005f0c <TIM_OC1_SetConfig+0x128>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d007      	beq.n	8005e6c <TIM_OC1_SetConfig+0x88>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005f10 <TIM_OC1_SetConfig+0x12c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_OC1_SetConfig+0x88>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a2b      	ldr	r2, [pc, #172]	@ (8005f14 <TIM_OC1_SetConfig+0x130>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d10c      	bne.n	8005e86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0308 	bic.w	r3, r3, #8
 8005e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 0304 	bic.w	r3, r3, #4
 8005e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	@ (8005f00 <TIM_OC1_SetConfig+0x11c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <TIM_OC1_SetConfig+0xd2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <TIM_OC1_SetConfig+0x120>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_OC1_SetConfig+0xd2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	@ (8005f08 <TIM_OC1_SetConfig+0x124>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_OC1_SetConfig+0xd2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f0c <TIM_OC1_SetConfig+0x128>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_OC1_SetConfig+0xd2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <TIM_OC1_SetConfig+0x12c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC1_SetConfig+0xd2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a18      	ldr	r2, [pc, #96]	@ (8005f14 <TIM_OC1_SetConfig+0x130>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d111      	bne.n	8005eda <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800
 8005f14:	40015000 	.word	0x40015000

08005f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f023 0210 	bic.w	r2, r3, #16
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0320 	bic.w	r3, r3, #32
 8005f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a2c      	ldr	r2, [pc, #176]	@ (8006028 <TIM_OC2_SetConfig+0x110>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d007      	beq.n	8005f8c <TIM_OC2_SetConfig+0x74>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800602c <TIM_OC2_SetConfig+0x114>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d003      	beq.n	8005f8c <TIM_OC2_SetConfig+0x74>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a2a      	ldr	r2, [pc, #168]	@ (8006030 <TIM_OC2_SetConfig+0x118>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d10d      	bne.n	8005fa8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1f      	ldr	r2, [pc, #124]	@ (8006028 <TIM_OC2_SetConfig+0x110>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <TIM_OC2_SetConfig+0xc0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800602c <TIM_OC2_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00f      	beq.n	8005fd8 <TIM_OC2_SetConfig+0xc0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	@ (8006034 <TIM_OC2_SetConfig+0x11c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00b      	beq.n	8005fd8 <TIM_OC2_SetConfig+0xc0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006038 <TIM_OC2_SetConfig+0x120>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d007      	beq.n	8005fd8 <TIM_OC2_SetConfig+0xc0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <TIM_OC2_SetConfig+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC2_SetConfig+0xc0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a17      	ldr	r2, [pc, #92]	@ (8006030 <TIM_OC2_SetConfig+0x118>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d113      	bne.n	8006000 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40015000 	.word	0x40015000
 8006034:	40014000 	.word	0x40014000
 8006038:	40014400 	.word	0x40014400
 800603c:	40014800 	.word	0x40014800

08006040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800608c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a2b      	ldr	r2, [pc, #172]	@ (800614c <TIM_OC3_SetConfig+0x10c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_OC3_SetConfig+0x72>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006150 <TIM_OC3_SetConfig+0x110>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_OC3_SetConfig+0x72>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a29      	ldr	r2, [pc, #164]	@ (8006154 <TIM_OC3_SetConfig+0x114>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10d      	bne.n	80060ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1e      	ldr	r2, [pc, #120]	@ (800614c <TIM_OC3_SetConfig+0x10c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <TIM_OC3_SetConfig+0xbe>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006150 <TIM_OC3_SetConfig+0x110>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00f      	beq.n	80060fe <TIM_OC3_SetConfig+0xbe>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006158 <TIM_OC3_SetConfig+0x118>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00b      	beq.n	80060fe <TIM_OC3_SetConfig+0xbe>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a1c      	ldr	r2, [pc, #112]	@ (800615c <TIM_OC3_SetConfig+0x11c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <TIM_OC3_SetConfig+0xbe>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <TIM_OC3_SetConfig+0x120>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_OC3_SetConfig+0xbe>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a16      	ldr	r2, [pc, #88]	@ (8006154 <TIM_OC3_SetConfig+0x114>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d113      	bne.n	8006126 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	621a      	str	r2, [r3, #32]
}
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40015000 	.word	0x40015000
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800

08006164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006274 <TIM_OC4_SetConfig+0x110>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0x74>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006278 <TIM_OC4_SetConfig+0x114>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0x74>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a2a      	ldr	r2, [pc, #168]	@ (800627c <TIM_OC4_SetConfig+0x118>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10d      	bne.n	80061f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006274 <TIM_OC4_SetConfig+0x110>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <TIM_OC4_SetConfig+0xc0>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006278 <TIM_OC4_SetConfig+0x114>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00f      	beq.n	8006224 <TIM_OC4_SetConfig+0xc0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <TIM_OC4_SetConfig+0x11c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00b      	beq.n	8006224 <TIM_OC4_SetConfig+0xc0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a1d      	ldr	r2, [pc, #116]	@ (8006284 <TIM_OC4_SetConfig+0x120>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_OC4_SetConfig+0xc0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <TIM_OC4_SetConfig+0x124>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC4_SetConfig+0xc0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a17      	ldr	r2, [pc, #92]	@ (800627c <TIM_OC4_SetConfig+0x118>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d113      	bne.n	800624c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800622a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006232:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	019b      	lsls	r3, r3, #6
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40013400 	.word	0x40013400
 800627c:	40015000 	.word	0x40015000
 8006280:	40014000 	.word	0x40014000
 8006284:	40014400 	.word	0x40014400
 8006288:	40014800 	.word	0x40014800

0800628c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80062d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	041b      	lsls	r3, r3, #16
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <TIM_OC5_SetConfig+0xbc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <TIM_OC5_SetConfig+0x82>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a18      	ldr	r2, [pc, #96]	@ (800634c <TIM_OC5_SetConfig+0xc0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00f      	beq.n	800630e <TIM_OC5_SetConfig+0x82>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a17      	ldr	r2, [pc, #92]	@ (8006350 <TIM_OC5_SetConfig+0xc4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_OC5_SetConfig+0x82>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <TIM_OC5_SetConfig+0xc8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_OC5_SetConfig+0x82>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <TIM_OC5_SetConfig+0xcc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC5_SetConfig+0x82>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a14      	ldr	r2, [pc, #80]	@ (800635c <TIM_OC5_SetConfig+0xd0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d109      	bne.n	8006322 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800
 800635c:	40015000 	.word	0x40015000

08006360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	051b      	lsls	r3, r3, #20
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006420 <TIM_OC6_SetConfig+0xc0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <TIM_OC6_SetConfig+0x84>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a19      	ldr	r2, [pc, #100]	@ (8006424 <TIM_OC6_SetConfig+0xc4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00f      	beq.n	80063e4 <TIM_OC6_SetConfig+0x84>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <TIM_OC6_SetConfig+0xc8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_OC6_SetConfig+0x84>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <TIM_OC6_SetConfig+0xcc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_OC6_SetConfig+0x84>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <TIM_OC6_SetConfig+0xd0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC6_SetConfig+0x84>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <TIM_OC6_SetConfig+0xd4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d109      	bne.n	80063f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40013400 	.word	0x40013400
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	40015000 	.word	0x40015000

08006438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f023 030a 	bic.w	r3, r3, #10
 8006474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006496:	b480      	push	{r7}
 8006498:	b087      	sub	sp, #28
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f023 0210 	bic.w	r2, r3, #16
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	031b      	lsls	r3, r3, #12
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	f043 0307 	orr.w	r3, r3, #7
 800651c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4313      	orrs	r3, r2
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2201      	movs	r2, #1
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	43db      	mvns	r3, r3
 8006592:	401a      	ands	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e074      	b.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a34      	ldr	r2, [pc, #208]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a33      	ldr	r2, [pc, #204]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a31      	ldr	r2, [pc, #196]	@ (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006618:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800662a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a21      	ldr	r2, [pc, #132]	@ (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006654:	d01d      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1f      	ldr	r2, [pc, #124]	@ (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1d      	ldr	r2, [pc, #116]	@ (80066dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1c      	ldr	r2, [pc, #112]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a18      	ldr	r2, [pc, #96]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a11      	ldr	r2, [pc, #68]	@ (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10c      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40012c00 	.word	0x40012c00
 80066d0:	40013400 	.word	0x40013400
 80066d4:	40015000 	.word	0x40015000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40014000 	.word	0x40014000

080066e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006700:	2302      	movs	r3, #2
 8006702:	e078      	b.n	80067f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1c      	ldr	r2, [pc, #112]	@ (8006804 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a19      	ldr	r2, [pc, #100]	@ (800680c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d11c      	bne.n	80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	051b      	lsls	r3, r3, #20
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40013400 	.word	0x40013400
 800680c:	40015000 	.word	0x40015000

08006810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e042      	b.n	80068a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7fc fb7f 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2224      	movs	r2, #36	@ 0x24
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fc7a 	bl	8007154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f97b 	bl	8006b5c <UART_SetConfig>
 8006866:	4603      	mov	r3, r0
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e01b      	b.n	80068a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800687e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800688e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fcf9 	bl	8007298 <UART_CheckIdleState>
 80068a6:	4603      	mov	r3, r0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d17b      	bne.n	80069c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_UART_Transmit+0x26>
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e074      	b.n	80069c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2221      	movs	r2, #33	@ 0x21
 80068e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ea:	f7fd f927 	bl	8003b3c <HAL_GetTick>
 80068ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006908:	d108      	bne.n	800691c <HAL_UART_Transmit+0x6c>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	e003      	b.n	8006924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006924:	e030      	b.n	8006988 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2200      	movs	r2, #0
 800692e:	2180      	movs	r1, #128	@ 0x80
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fd5b 	bl	80073ec <UART_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e03d      	b.n	80069c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	3302      	adds	r3, #2
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e007      	b.n	8006976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	3301      	adds	r3, #1
 8006974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1c8      	bne.n	8006926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	2140      	movs	r1, #64	@ 0x40
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fd24 	bl	80073ec <UART_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e006      	b.n	80069c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80069c2:	2302      	movs	r3, #2
  }
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	@ 0x28
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f040 80b5 	bne.w	8006b52 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Receive+0x28>
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0ad      	b.n	8006b54 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2222      	movs	r2, #34	@ 0x22
 8006a04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a0e:	f7fd f895 	bl	8003b3c <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	88fa      	ldrh	r2, [r7, #6]
 8006a20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a2c:	d10e      	bne.n	8006a4c <HAL_UART_Receive+0x80>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <HAL_UART_Receive+0x76>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a40:	e02d      	b.n	8006a9e <HAL_UART_Receive+0xd2>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	22ff      	movs	r2, #255	@ 0xff
 8006a46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a4a:	e028      	b.n	8006a9e <HAL_UART_Receive+0xd2>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <HAL_UART_Receive+0xa4>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_UART_Receive+0x9a>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	22ff      	movs	r2, #255	@ 0xff
 8006a60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a64:	e01b      	b.n	8006a9e <HAL_UART_Receive+0xd2>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	227f      	movs	r2, #127	@ 0x7f
 8006a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a6e:	e016      	b.n	8006a9e <HAL_UART_Receive+0xd2>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a78:	d10d      	bne.n	8006a96 <HAL_UART_Receive+0xca>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <HAL_UART_Receive+0xc0>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	227f      	movs	r2, #127	@ 0x7f
 8006a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a8a:	e008      	b.n	8006a9e <HAL_UART_Receive+0xd2>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	223f      	movs	r2, #63	@ 0x3f
 8006a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a94:	e003      	b.n	8006a9e <HAL_UART_Receive+0xd2>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006aa4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aae:	d108      	bne.n	8006ac2 <HAL_UART_Receive+0xf6>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e003      	b.n	8006aca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006aca:	e036      	b.n	8006b3a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2120      	movs	r1, #32
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fc88 	bl	80073ec <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e032      	b.n	8006b54 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10c      	bne.n	8006b0e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	8a7b      	ldrh	r3, [r7, #18]
 8006afe:	4013      	ands	r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	e00c      	b.n	8006b28 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	8a7b      	ldrh	r3, [r7, #18]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1c2      	bne.n	8006acc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e000      	b.n	8006b54 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006b52:	2302      	movs	r3, #2
  }
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b60:	b08c      	sub	sp, #48	@ 0x30
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4baa      	ldr	r3, [pc, #680]	@ (8006e34 <UART_SetConfig+0x2d8>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a9f      	ldr	r2, [pc, #636]	@ (8006e38 <UART_SetConfig+0x2dc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006bd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	f023 010f 	bic.w	r1, r3, #15
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a90      	ldr	r2, [pc, #576]	@ (8006e3c <UART_SetConfig+0x2e0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d125      	bne.n	8006c4c <UART_SetConfig+0xf0>
 8006c00:	4b8f      	ldr	r3, [pc, #572]	@ (8006e40 <UART_SetConfig+0x2e4>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d81a      	bhi.n	8006c44 <UART_SetConfig+0xe8>
 8006c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <UART_SetConfig+0xb8>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c35 	.word	0x08006c35
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c3d 	.word	0x08006c3d
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2a:	e116      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c32:	e112      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c3a:	e10e      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c42:	e10a      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e106      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a7c      	ldr	r2, [pc, #496]	@ (8006e44 <UART_SetConfig+0x2e8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d138      	bne.n	8006cc8 <UART_SetConfig+0x16c>
 8006c56:	4b7a      	ldr	r3, [pc, #488]	@ (8006e40 <UART_SetConfig+0x2e4>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5c:	f003 030c 	and.w	r3, r3, #12
 8006c60:	2b0c      	cmp	r3, #12
 8006c62:	d82d      	bhi.n	8006cc0 <UART_SetConfig+0x164>
 8006c64:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0x110>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006cc1 	.word	0x08006cc1
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc1 	.word	0x08006cc1
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006ca9 	.word	0x08006ca9
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca6:	e0d8      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cae:	e0d4      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	e0d0      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e0cc      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e0c8      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8006e48 <UART_SetConfig+0x2ec>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d125      	bne.n	8006d1e <UART_SetConfig+0x1c2>
 8006cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e40 <UART_SetConfig+0x2e4>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cdc:	2b30      	cmp	r3, #48	@ 0x30
 8006cde:	d016      	beq.n	8006d0e <UART_SetConfig+0x1b2>
 8006ce0:	2b30      	cmp	r3, #48	@ 0x30
 8006ce2:	d818      	bhi.n	8006d16 <UART_SetConfig+0x1ba>
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d00a      	beq.n	8006cfe <UART_SetConfig+0x1a2>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d814      	bhi.n	8006d16 <UART_SetConfig+0x1ba>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <UART_SetConfig+0x19a>
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d008      	beq.n	8006d06 <UART_SetConfig+0x1aa>
 8006cf4:	e00f      	b.n	8006d16 <UART_SetConfig+0x1ba>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfc:	e0ad      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d04:	e0a9      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d06:	2304      	movs	r3, #4
 8006d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0c:	e0a5      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d14:	e0a1      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d16:	2310      	movs	r3, #16
 8006d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1c:	e09d      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a4a      	ldr	r2, [pc, #296]	@ (8006e4c <UART_SetConfig+0x2f0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d125      	bne.n	8006d74 <UART_SetConfig+0x218>
 8006d28:	4b45      	ldr	r3, [pc, #276]	@ (8006e40 <UART_SetConfig+0x2e4>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d34:	d016      	beq.n	8006d64 <UART_SetConfig+0x208>
 8006d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d38:	d818      	bhi.n	8006d6c <UART_SetConfig+0x210>
 8006d3a:	2b80      	cmp	r3, #128	@ 0x80
 8006d3c:	d00a      	beq.n	8006d54 <UART_SetConfig+0x1f8>
 8006d3e:	2b80      	cmp	r3, #128	@ 0x80
 8006d40:	d814      	bhi.n	8006d6c <UART_SetConfig+0x210>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <UART_SetConfig+0x1f0>
 8006d46:	2b40      	cmp	r3, #64	@ 0x40
 8006d48:	d008      	beq.n	8006d5c <UART_SetConfig+0x200>
 8006d4a:	e00f      	b.n	8006d6c <UART_SetConfig+0x210>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d52:	e082      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d54:	2302      	movs	r3, #2
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d5a:	e07e      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d62:	e07a      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d6a:	e076      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d72:	e072      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a35      	ldr	r2, [pc, #212]	@ (8006e50 <UART_SetConfig+0x2f4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d12a      	bne.n	8006dd4 <UART_SetConfig+0x278>
 8006d7e:	4b30      	ldr	r3, [pc, #192]	@ (8006e40 <UART_SetConfig+0x2e4>)
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d8c:	d01a      	beq.n	8006dc4 <UART_SetConfig+0x268>
 8006d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d92:	d81b      	bhi.n	8006dcc <UART_SetConfig+0x270>
 8006d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d98:	d00c      	beq.n	8006db4 <UART_SetConfig+0x258>
 8006d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d9e:	d815      	bhi.n	8006dcc <UART_SetConfig+0x270>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <UART_SetConfig+0x250>
 8006da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da8:	d008      	beq.n	8006dbc <UART_SetConfig+0x260>
 8006daa:	e00f      	b.n	8006dcc <UART_SetConfig+0x270>
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db2:	e052      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006db4:	2302      	movs	r3, #2
 8006db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dba:	e04e      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc2:	e04a      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dca:	e046      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd2:	e042      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <UART_SetConfig+0x2dc>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d13a      	bne.n	8006e54 <UART_SetConfig+0x2f8>
 8006dde:	4b18      	ldr	r3, [pc, #96]	@ (8006e40 <UART_SetConfig+0x2e4>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006de8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dec:	d01a      	beq.n	8006e24 <UART_SetConfig+0x2c8>
 8006dee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006df2:	d81b      	bhi.n	8006e2c <UART_SetConfig+0x2d0>
 8006df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df8:	d00c      	beq.n	8006e14 <UART_SetConfig+0x2b8>
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dfe:	d815      	bhi.n	8006e2c <UART_SetConfig+0x2d0>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <UART_SetConfig+0x2b0>
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e08:	d008      	beq.n	8006e1c <UART_SetConfig+0x2c0>
 8006e0a:	e00f      	b.n	8006e2c <UART_SetConfig+0x2d0>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e12:	e022      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006e14:	2302      	movs	r3, #2
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1a:	e01e      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e22:	e01a      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006e24:	2308      	movs	r3, #8
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2a:	e016      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e32:	e012      	b.n	8006e5a <UART_SetConfig+0x2fe>
 8006e34:	cfff69f3 	.word	0xcfff69f3
 8006e38:	40008000 	.word	0x40008000
 8006e3c:	40013800 	.word	0x40013800
 8006e40:	40021000 	.word	0x40021000
 8006e44:	40004400 	.word	0x40004400
 8006e48:	40004800 	.word	0x40004800
 8006e4c:	40004c00 	.word	0x40004c00
 8006e50:	40005000 	.word	0x40005000
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4aae      	ldr	r2, [pc, #696]	@ (8007118 <UART_SetConfig+0x5bc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	f040 8097 	bne.w	8006f94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d823      	bhi.n	8006eb6 <UART_SetConfig+0x35a>
 8006e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <UART_SetConfig+0x318>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006eb7 	.word	0x08006eb7
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006eb7 	.word	0x08006eb7
 8006e84:	08006ea7 	.word	0x08006ea7
 8006e88:	08006eb7 	.word	0x08006eb7
 8006e8c:	08006eb7 	.word	0x08006eb7
 8006e90:	08006eb7 	.word	0x08006eb7
 8006e94:	08006eaf 	.word	0x08006eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7fd ff12 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e9e:	e010      	b.n	8006ec2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea0:	4b9e      	ldr	r3, [pc, #632]	@ (800711c <UART_SetConfig+0x5c0>)
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ea4:	e00d      	b.n	8006ec2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ea6:	f7fd fe9d 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8006eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eac:	e009      	b.n	8006ec2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eb4:	e005      	b.n	8006ec2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8130 	beq.w	800712a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ece:	4a94      	ldr	r2, [pc, #592]	@ (8007120 <UART_SetConfig+0x5c4>)
 8006ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d305      	bcc.n	8006efa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d903      	bls.n	8006f02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f00:	e113      	b.n	800712a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	2200      	movs	r2, #0
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	60fa      	str	r2, [r7, #12]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	4a84      	ldr	r2, [pc, #528]	@ (8007120 <UART_SetConfig+0x5c4>)
 8006f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2200      	movs	r2, #0
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f24:	f7f9 fed8 	bl	8000cd8 <__aeabi_uldivmod>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4619      	mov	r1, r3
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	f04f 0300 	mov.w	r3, #0
 8006f38:	020b      	lsls	r3, r1, #8
 8006f3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f3e:	0202      	lsls	r2, r0, #8
 8006f40:	6979      	ldr	r1, [r7, #20]
 8006f42:	6849      	ldr	r1, [r1, #4]
 8006f44:	0849      	lsrs	r1, r1, #1
 8006f46:	2000      	movs	r0, #0
 8006f48:	460c      	mov	r4, r1
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	eb12 0804 	adds.w	r8, r2, r4
 8006f50:	eb43 0905 	adc.w	r9, r3, r5
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	469a      	mov	sl, r3
 8006f5c:	4693      	mov	fp, r2
 8006f5e:	4652      	mov	r2, sl
 8006f60:	465b      	mov	r3, fp
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 feb7 	bl	8000cd8 <__aeabi_uldivmod>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4613      	mov	r3, r2
 8006f70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f78:	d308      	bcc.n	8006f8c <UART_SetConfig+0x430>
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f80:	d204      	bcs.n	8006f8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e0ce      	b.n	800712a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f92:	e0ca      	b.n	800712a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9c:	d166      	bne.n	800706c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d827      	bhi.n	8006ff6 <UART_SetConfig+0x49a>
 8006fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <UART_SetConfig+0x450>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	08006ff7 	.word	0x08006ff7
 8006fbc:	08006fe7 	.word	0x08006fe7
 8006fc0:	08006ff7 	.word	0x08006ff7
 8006fc4:	08006ff7 	.word	0x08006ff7
 8006fc8:	08006ff7 	.word	0x08006ff7
 8006fcc:	08006fef 	.word	0x08006fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd fe76 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fd6:	e014      	b.n	8007002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd8:	f7fd fe88 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 8006fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fde:	e010      	b.n	8007002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800711c <UART_SetConfig+0x5c0>)
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fe4:	e00d      	b.n	8007002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe6:	f7fd fdfd 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8006fea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fec:	e009      	b.n	8007002 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ff4:	e005      	b.n	8007002 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8090 	beq.w	800712a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	4a44      	ldr	r2, [pc, #272]	@ (8007120 <UART_SetConfig+0x5c4>)
 8007010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007014:	461a      	mov	r2, r3
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	fbb3 f3f2 	udiv	r3, r3, r2
 800701c:	005a      	lsls	r2, r3, #1
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	441a      	add	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	2b0f      	cmp	r3, #15
 8007034:	d916      	bls.n	8007064 <UART_SetConfig+0x508>
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703c:	d212      	bcs.n	8007064 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f023 030f 	bic.w	r3, r3, #15
 8007046:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	b29b      	uxth	r3, r3
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	b29a      	uxth	r2, r3
 8007054:	8bfb      	ldrh	r3, [r7, #30]
 8007056:	4313      	orrs	r3, r2
 8007058:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	8bfa      	ldrh	r2, [r7, #30]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	e062      	b.n	800712a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800706a:	e05e      	b.n	800712a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800706c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007070:	2b08      	cmp	r3, #8
 8007072:	d828      	bhi.n	80070c6 <UART_SetConfig+0x56a>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <UART_SetConfig+0x520>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	080070c7 	.word	0x080070c7
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070c7 	.word	0x080070c7
 8007098:	080070c7 	.word	0x080070c7
 800709c:	080070bf 	.word	0x080070bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fd fe0e 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070a6:	e014      	b.n	80070d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a8:	f7fd fe20 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070ae:	e010      	b.n	80070d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b1a      	ldr	r3, [pc, #104]	@ (800711c <UART_SetConfig+0x5c0>)
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070b4:	e00d      	b.n	80070d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fd fd95 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 80070ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070bc:	e009      	b.n	80070d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070c4:	e005      	b.n	80070d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070d0:	bf00      	nop
    }

    if (pclk != 0U)
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d028      	beq.n	800712a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	4a10      	ldr	r2, [pc, #64]	@ (8007120 <UART_SetConfig+0x5c4>)
 80070de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	441a      	add	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b0f      	cmp	r3, #15
 8007100:	d910      	bls.n	8007124 <UART_SetConfig+0x5c8>
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d20c      	bcs.n	8007124 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	b29a      	uxth	r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
 8007114:	e009      	b.n	800712a <UART_SetConfig+0x5ce>
 8007116:	bf00      	nop
 8007118:	40008000 	.word	0x40008000
 800711c:	00f42400 	.word	0x00f42400
 8007120:	0800ce4c 	.word	0x0800ce4c
      }
      else
      {
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2201      	movs	r2, #1
 800712e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2201      	movs	r2, #1
 8007136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2200      	movs	r2, #0
 800713e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007146:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800714a:	4618      	mov	r0, r3
 800714c:	3730      	adds	r7, #48	@ 0x30
 800714e:	46bd      	mov	sp, r7
 8007150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01a      	beq.n	800726a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007252:	d10a      	bne.n	800726a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b098      	sub	sp, #96	@ 0x60
 800729c:	af02      	add	r7, sp, #8
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072a8:	f7fc fc48 	bl	8003b3c <HAL_GetTick>
 80072ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d12f      	bne.n	800731c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c4:	2200      	movs	r2, #0
 80072c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f88e 	bl	80073ec <UART_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d022      	beq.n	800731c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e6      	bne.n	80072d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e063      	b.n	80073e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b04      	cmp	r3, #4
 8007328:	d149      	bne.n	80073be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007332:	2200      	movs	r2, #0
 8007334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f857 	bl	80073ec <UART_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d03c      	beq.n	80073be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	623b      	str	r3, [r7, #32]
   return(result);
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007362:	633b      	str	r3, [r7, #48]	@ 0x30
 8007364:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e6      	bne.n	8007344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	60fb      	str	r3, [r7, #12]
   return(result);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007396:	61fa      	str	r2, [r7, #28]
 8007398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	69b9      	ldr	r1, [r7, #24]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	617b      	str	r3, [r7, #20]
   return(result);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e5      	bne.n	8007376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e012      	b.n	80073e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3758      	adds	r7, #88	@ 0x58
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fc:	e04f      	b.n	800749e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007404:	d04b      	beq.n	800749e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007406:	f7fc fb99 	bl	8003b3c <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	429a      	cmp	r2, r3
 8007414:	d302      	bcc.n	800741c <UART_WaitOnFlagUntilTimeout+0x30>
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e04e      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d037      	beq.n	800749e <UART_WaitOnFlagUntilTimeout+0xb2>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b80      	cmp	r3, #128	@ 0x80
 8007432:	d034      	beq.n	800749e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b40      	cmp	r3, #64	@ 0x40
 8007438:	d031      	beq.n	800749e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f003 0308 	and.w	r3, r3, #8
 8007444:	2b08      	cmp	r3, #8
 8007446:	d110      	bne.n	800746a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2208      	movs	r2, #8
 800744e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f838 	bl	80074c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2208      	movs	r2, #8
 800745a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e029      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007478:	d111      	bne.n	800749e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f81e 	bl	80074c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e00f      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4013      	ands	r3, r2
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d0a0      	beq.n	80073fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b095      	sub	sp, #84	@ 0x54
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007524:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007526:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800752a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e3      	bne.n	8007500 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d118      	bne.n	8007572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	60bb      	str	r3, [r7, #8]
   return(result);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f023 0310 	bic.w	r3, r3, #16
 8007554:	647b      	str	r3, [r7, #68]	@ 0x44
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6979      	ldr	r1, [r7, #20]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	613b      	str	r3, [r7, #16]
   return(result);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e6      	bne.n	8007540 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007586:	bf00      	nop
 8007588:	3754      	adds	r7, #84	@ 0x54
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007592:	b480      	push	{r7}
 8007594:	b085      	sub	sp, #20
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e027      	b.n	80075f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2224      	movs	r2, #36	@ 0x24
 80075b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007618:	2302      	movs	r3, #2
 800761a:	e02d      	b.n	8007678 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	@ 0x24
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f84f 	bl	80076fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007694:	2302      	movs	r3, #2
 8007696:	e02d      	b.n	80076f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2224      	movs	r2, #36	@ 0x24
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f811 	bl	80076fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007708:	2b00      	cmp	r3, #0
 800770a:	d108      	bne.n	800771e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800771c:	e031      	b.n	8007782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800771e:	2308      	movs	r3, #8
 8007720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007722:	2308      	movs	r3, #8
 8007724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	0e5b      	lsrs	r3, r3, #25
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	0f5b      	lsrs	r3, r3, #29
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	7b3a      	ldrb	r2, [r7, #12]
 800774a:	4911      	ldr	r1, [pc, #68]	@ (8007790 <UARTEx_SetNbDataToProcess+0x94>)
 800774c:	5c8a      	ldrb	r2, [r1, r2]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007752:	7b3a      	ldrb	r2, [r7, #12]
 8007754:	490f      	ldr	r1, [pc, #60]	@ (8007794 <UARTEx_SetNbDataToProcess+0x98>)
 8007756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007758:	fb93 f3f2 	sdiv	r3, r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	7b7a      	ldrb	r2, [r7, #13]
 8007768:	4909      	ldr	r1, [pc, #36]	@ (8007790 <UARTEx_SetNbDataToProcess+0x94>)
 800776a:	5c8a      	ldrb	r2, [r1, r2]
 800776c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007770:	7b7a      	ldrb	r2, [r7, #13]
 8007772:	4908      	ldr	r1, [pc, #32]	@ (8007794 <UARTEx_SetNbDataToProcess+0x98>)
 8007774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007776:	fb93 f3f2 	sdiv	r3, r3, r2
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	0800ce64 	.word	0x0800ce64
 8007794:	0800ce6c 	.word	0x0800ce6c

08007798 <__cvt>:
 8007798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	ec57 6b10 	vmov	r6, r7, d0
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	460c      	mov	r4, r1
 80077a4:	4619      	mov	r1, r3
 80077a6:	463b      	mov	r3, r7
 80077a8:	bfbb      	ittet	lt
 80077aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077ae:	461f      	movlt	r7, r3
 80077b0:	2300      	movge	r3, #0
 80077b2:	232d      	movlt	r3, #45	@ 0x2d
 80077b4:	700b      	strb	r3, [r1, #0]
 80077b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077bc:	4691      	mov	r9, r2
 80077be:	f023 0820 	bic.w	r8, r3, #32
 80077c2:	bfbc      	itt	lt
 80077c4:	4632      	movlt	r2, r6
 80077c6:	4616      	movlt	r6, r2
 80077c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077cc:	d005      	beq.n	80077da <__cvt+0x42>
 80077ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077d2:	d100      	bne.n	80077d6 <__cvt+0x3e>
 80077d4:	3401      	adds	r4, #1
 80077d6:	2102      	movs	r1, #2
 80077d8:	e000      	b.n	80077dc <__cvt+0x44>
 80077da:	2103      	movs	r1, #3
 80077dc:	ab03      	add	r3, sp, #12
 80077de:	9301      	str	r3, [sp, #4]
 80077e0:	ab02      	add	r3, sp, #8
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	ec47 6b10 	vmov	d0, r6, r7
 80077e8:	4653      	mov	r3, sl
 80077ea:	4622      	mov	r2, r4
 80077ec:	f001 ffc0 	bl	8009770 <_dtoa_r>
 80077f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80077f4:	4605      	mov	r5, r0
 80077f6:	d119      	bne.n	800782c <__cvt+0x94>
 80077f8:	f019 0f01 	tst.w	r9, #1
 80077fc:	d00e      	beq.n	800781c <__cvt+0x84>
 80077fe:	eb00 0904 	add.w	r9, r0, r4
 8007802:	2200      	movs	r2, #0
 8007804:	2300      	movs	r3, #0
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f9 f985 	bl	8000b18 <__aeabi_dcmpeq>
 800780e:	b108      	cbz	r0, 8007814 <__cvt+0x7c>
 8007810:	f8cd 900c 	str.w	r9, [sp, #12]
 8007814:	2230      	movs	r2, #48	@ 0x30
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	454b      	cmp	r3, r9
 800781a:	d31e      	bcc.n	800785a <__cvt+0xc2>
 800781c:	9b03      	ldr	r3, [sp, #12]
 800781e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007820:	1b5b      	subs	r3, r3, r5
 8007822:	4628      	mov	r0, r5
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	b004      	add	sp, #16
 8007828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007830:	eb00 0904 	add.w	r9, r0, r4
 8007834:	d1e5      	bne.n	8007802 <__cvt+0x6a>
 8007836:	7803      	ldrb	r3, [r0, #0]
 8007838:	2b30      	cmp	r3, #48	@ 0x30
 800783a:	d10a      	bne.n	8007852 <__cvt+0xba>
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f968 	bl	8000b18 <__aeabi_dcmpeq>
 8007848:	b918      	cbnz	r0, 8007852 <__cvt+0xba>
 800784a:	f1c4 0401 	rsb	r4, r4, #1
 800784e:	f8ca 4000 	str.w	r4, [sl]
 8007852:	f8da 3000 	ldr.w	r3, [sl]
 8007856:	4499      	add	r9, r3
 8007858:	e7d3      	b.n	8007802 <__cvt+0x6a>
 800785a:	1c59      	adds	r1, r3, #1
 800785c:	9103      	str	r1, [sp, #12]
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e7d9      	b.n	8007816 <__cvt+0x7e>

08007862 <__exponent>:
 8007862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007864:	2900      	cmp	r1, #0
 8007866:	bfba      	itte	lt
 8007868:	4249      	neglt	r1, r1
 800786a:	232d      	movlt	r3, #45	@ 0x2d
 800786c:	232b      	movge	r3, #43	@ 0x2b
 800786e:	2909      	cmp	r1, #9
 8007870:	7002      	strb	r2, [r0, #0]
 8007872:	7043      	strb	r3, [r0, #1]
 8007874:	dd29      	ble.n	80078ca <__exponent+0x68>
 8007876:	f10d 0307 	add.w	r3, sp, #7
 800787a:	461d      	mov	r5, r3
 800787c:	270a      	movs	r7, #10
 800787e:	461a      	mov	r2, r3
 8007880:	fbb1 f6f7 	udiv	r6, r1, r7
 8007884:	fb07 1416 	mls	r4, r7, r6, r1
 8007888:	3430      	adds	r4, #48	@ 0x30
 800788a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800788e:	460c      	mov	r4, r1
 8007890:	2c63      	cmp	r4, #99	@ 0x63
 8007892:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007896:	4631      	mov	r1, r6
 8007898:	dcf1      	bgt.n	800787e <__exponent+0x1c>
 800789a:	3130      	adds	r1, #48	@ 0x30
 800789c:	1e94      	subs	r4, r2, #2
 800789e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078a2:	1c41      	adds	r1, r0, #1
 80078a4:	4623      	mov	r3, r4
 80078a6:	42ab      	cmp	r3, r5
 80078a8:	d30a      	bcc.n	80078c0 <__exponent+0x5e>
 80078aa:	f10d 0309 	add.w	r3, sp, #9
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	42ac      	cmp	r4, r5
 80078b2:	bf88      	it	hi
 80078b4:	2300      	movhi	r3, #0
 80078b6:	3302      	adds	r3, #2
 80078b8:	4403      	add	r3, r0
 80078ba:	1a18      	subs	r0, r3, r0
 80078bc:	b003      	add	sp, #12
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078c8:	e7ed      	b.n	80078a6 <__exponent+0x44>
 80078ca:	2330      	movs	r3, #48	@ 0x30
 80078cc:	3130      	adds	r1, #48	@ 0x30
 80078ce:	7083      	strb	r3, [r0, #2]
 80078d0:	70c1      	strb	r1, [r0, #3]
 80078d2:	1d03      	adds	r3, r0, #4
 80078d4:	e7f1      	b.n	80078ba <__exponent+0x58>
	...

080078d8 <_printf_float>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b08d      	sub	sp, #52	@ 0x34
 80078de:	460c      	mov	r4, r1
 80078e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80078e4:	4616      	mov	r6, r2
 80078e6:	461f      	mov	r7, r3
 80078e8:	4605      	mov	r5, r0
 80078ea:	f001 fe23 	bl	8009534 <_localeconv_r>
 80078ee:	6803      	ldr	r3, [r0, #0]
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7f8 fce4 	bl	80002c0 <strlen>
 80078f8:	2300      	movs	r3, #0
 80078fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80078fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007900:	9005      	str	r0, [sp, #20]
 8007902:	3307      	adds	r3, #7
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	f103 0208 	add.w	r2, r3, #8
 800790c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007910:	f8d4 b000 	ldr.w	fp, [r4]
 8007914:	f8c8 2000 	str.w	r2, [r8]
 8007918:	e9d3 8900 	ldrd	r8, r9, [r3]
 800791c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	f8cd 8018 	str.w	r8, [sp, #24]
 8007926:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800792a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800792e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ba0 <_printf_float+0x2c8>)
 8007930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007934:	f7f9 f922 	bl	8000b7c <__aeabi_dcmpun>
 8007938:	bb70      	cbnz	r0, 8007998 <_printf_float+0xc0>
 800793a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800793e:	4b98      	ldr	r3, [pc, #608]	@ (8007ba0 <_printf_float+0x2c8>)
 8007940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007944:	f7f9 f8fc 	bl	8000b40 <__aeabi_dcmple>
 8007948:	bb30      	cbnz	r0, 8007998 <_printf_float+0xc0>
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	4640      	mov	r0, r8
 8007950:	4649      	mov	r1, r9
 8007952:	f7f9 f8eb 	bl	8000b2c <__aeabi_dcmplt>
 8007956:	b110      	cbz	r0, 800795e <_printf_float+0x86>
 8007958:	232d      	movs	r3, #45	@ 0x2d
 800795a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800795e:	4a91      	ldr	r2, [pc, #580]	@ (8007ba4 <_printf_float+0x2cc>)
 8007960:	4b91      	ldr	r3, [pc, #580]	@ (8007ba8 <_printf_float+0x2d0>)
 8007962:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007966:	bf94      	ite	ls
 8007968:	4690      	movls	r8, r2
 800796a:	4698      	movhi	r8, r3
 800796c:	2303      	movs	r3, #3
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	f02b 0304 	bic.w	r3, fp, #4
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	4633      	mov	r3, r6
 800797e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007980:	4621      	mov	r1, r4
 8007982:	4628      	mov	r0, r5
 8007984:	f000 f9d2 	bl	8007d2c <_printf_common>
 8007988:	3001      	adds	r0, #1
 800798a:	f040 808d 	bne.w	8007aa8 <_printf_float+0x1d0>
 800798e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007992:	b00d      	add	sp, #52	@ 0x34
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	4642      	mov	r2, r8
 800799a:	464b      	mov	r3, r9
 800799c:	4640      	mov	r0, r8
 800799e:	4649      	mov	r1, r9
 80079a0:	f7f9 f8ec 	bl	8000b7c <__aeabi_dcmpun>
 80079a4:	b140      	cbz	r0, 80079b8 <_printf_float+0xe0>
 80079a6:	464b      	mov	r3, r9
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bfbc      	itt	lt
 80079ac:	232d      	movlt	r3, #45	@ 0x2d
 80079ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079b2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bac <_printf_float+0x2d4>)
 80079b4:	4b7e      	ldr	r3, [pc, #504]	@ (8007bb0 <_printf_float+0x2d8>)
 80079b6:	e7d4      	b.n	8007962 <_printf_float+0x8a>
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079be:	9206      	str	r2, [sp, #24]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	d13b      	bne.n	8007a3c <_printf_float+0x164>
 80079c4:	2306      	movs	r3, #6
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80079cc:	2300      	movs	r3, #0
 80079ce:	6022      	str	r2, [r4, #0]
 80079d0:	9303      	str	r3, [sp, #12]
 80079d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80079d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079d8:	ab09      	add	r3, sp, #36	@ 0x24
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	6861      	ldr	r1, [r4, #4]
 80079de:	ec49 8b10 	vmov	d0, r8, r9
 80079e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80079e6:	4628      	mov	r0, r5
 80079e8:	f7ff fed6 	bl	8007798 <__cvt>
 80079ec:	9b06      	ldr	r3, [sp, #24]
 80079ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079f0:	2b47      	cmp	r3, #71	@ 0x47
 80079f2:	4680      	mov	r8, r0
 80079f4:	d129      	bne.n	8007a4a <_printf_float+0x172>
 80079f6:	1cc8      	adds	r0, r1, #3
 80079f8:	db02      	blt.n	8007a00 <_printf_float+0x128>
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	4299      	cmp	r1, r3
 80079fe:	dd41      	ble.n	8007a84 <_printf_float+0x1ac>
 8007a00:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a04:	fa5f fa8a 	uxtb.w	sl, sl
 8007a08:	3901      	subs	r1, #1
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a10:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a12:	f7ff ff26 	bl	8007862 <__exponent>
 8007a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a18:	1813      	adds	r3, r2, r0
 8007a1a:	2a01      	cmp	r2, #1
 8007a1c:	4681      	mov	r9, r0
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	dc02      	bgt.n	8007a28 <_printf_float+0x150>
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	07d2      	lsls	r2, r2, #31
 8007a26:	d501      	bpl.n	8007a2c <_printf_float+0x154>
 8007a28:	3301      	adds	r3, #1
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0a2      	beq.n	800797a <_printf_float+0xa2>
 8007a34:	232d      	movs	r3, #45	@ 0x2d
 8007a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3a:	e79e      	b.n	800797a <_printf_float+0xa2>
 8007a3c:	9a06      	ldr	r2, [sp, #24]
 8007a3e:	2a47      	cmp	r2, #71	@ 0x47
 8007a40:	d1c2      	bne.n	80079c8 <_printf_float+0xf0>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1c0      	bne.n	80079c8 <_printf_float+0xf0>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e7bd      	b.n	80079c6 <_printf_float+0xee>
 8007a4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a4e:	d9db      	bls.n	8007a08 <_printf_float+0x130>
 8007a50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a54:	d118      	bne.n	8007a88 <_printf_float+0x1b0>
 8007a56:	2900      	cmp	r1, #0
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	dd0b      	ble.n	8007a74 <_printf_float+0x19c>
 8007a5c:	6121      	str	r1, [r4, #16]
 8007a5e:	b913      	cbnz	r3, 8007a66 <_printf_float+0x18e>
 8007a60:	6822      	ldr	r2, [r4, #0]
 8007a62:	07d0      	lsls	r0, r2, #31
 8007a64:	d502      	bpl.n	8007a6c <_printf_float+0x194>
 8007a66:	3301      	adds	r3, #1
 8007a68:	440b      	add	r3, r1
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a6e:	f04f 0900 	mov.w	r9, #0
 8007a72:	e7db      	b.n	8007a2c <_printf_float+0x154>
 8007a74:	b913      	cbnz	r3, 8007a7c <_printf_float+0x1a4>
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	07d2      	lsls	r2, r2, #31
 8007a7a:	d501      	bpl.n	8007a80 <_printf_float+0x1a8>
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	e7f4      	b.n	8007a6a <_printf_float+0x192>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e7f2      	b.n	8007a6a <_printf_float+0x192>
 8007a84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	db05      	blt.n	8007a9a <_printf_float+0x1c2>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	6121      	str	r1, [r4, #16]
 8007a92:	07d8      	lsls	r0, r3, #31
 8007a94:	d5ea      	bpl.n	8007a6c <_printf_float+0x194>
 8007a96:	1c4b      	adds	r3, r1, #1
 8007a98:	e7e7      	b.n	8007a6a <_printf_float+0x192>
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	bfd4      	ite	le
 8007a9e:	f1c1 0202 	rsble	r2, r1, #2
 8007aa2:	2201      	movgt	r2, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	e7e0      	b.n	8007a6a <_printf_float+0x192>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	055a      	lsls	r2, r3, #21
 8007aac:	d407      	bmi.n	8007abe <_printf_float+0x1e6>
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	47b8      	blx	r7
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d12b      	bne.n	8007b14 <_printf_float+0x23c>
 8007abc:	e767      	b.n	800798e <_printf_float+0xb6>
 8007abe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ac2:	f240 80dd 	bls.w	8007c80 <_printf_float+0x3a8>
 8007ac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	f7f9 f823 	bl	8000b18 <__aeabi_dcmpeq>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d033      	beq.n	8007b3e <_printf_float+0x266>
 8007ad6:	4a37      	ldr	r2, [pc, #220]	@ (8007bb4 <_printf_float+0x2dc>)
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f43f af54 	beq.w	800798e <_printf_float+0xb6>
 8007ae6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007aea:	4543      	cmp	r3, r8
 8007aec:	db02      	blt.n	8007af4 <_printf_float+0x21c>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	07d8      	lsls	r0, r3, #31
 8007af2:	d50f      	bpl.n	8007b14 <_printf_float+0x23c>
 8007af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f af45 	beq.w	800798e <_printf_float+0xb6>
 8007b04:	f04f 0900 	mov.w	r9, #0
 8007b08:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007b0c:	f104 0a1a 	add.w	sl, r4, #26
 8007b10:	45c8      	cmp	r8, r9
 8007b12:	dc09      	bgt.n	8007b28 <_printf_float+0x250>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	079b      	lsls	r3, r3, #30
 8007b18:	f100 8103 	bmi.w	8007d22 <_printf_float+0x44a>
 8007b1c:	68e0      	ldr	r0, [r4, #12]
 8007b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b20:	4298      	cmp	r0, r3
 8007b22:	bfb8      	it	lt
 8007b24:	4618      	movlt	r0, r3
 8007b26:	e734      	b.n	8007992 <_printf_float+0xba>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f af2b 	beq.w	800798e <_printf_float+0xb6>
 8007b38:	f109 0901 	add.w	r9, r9, #1
 8007b3c:	e7e8      	b.n	8007b10 <_printf_float+0x238>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dc39      	bgt.n	8007bb8 <_printf_float+0x2e0>
 8007b44:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb4 <_printf_float+0x2dc>)
 8007b46:	2301      	movs	r3, #1
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f af1d 	beq.w	800798e <_printf_float+0xb6>
 8007b54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b58:	ea59 0303 	orrs.w	r3, r9, r3
 8007b5c:	d102      	bne.n	8007b64 <_printf_float+0x28c>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	07d9      	lsls	r1, r3, #31
 8007b62:	d5d7      	bpl.n	8007b14 <_printf_float+0x23c>
 8007b64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f43f af0d 	beq.w	800798e <_printf_float+0xb6>
 8007b74:	f04f 0a00 	mov.w	sl, #0
 8007b78:	f104 0b1a 	add.w	fp, r4, #26
 8007b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7e:	425b      	negs	r3, r3
 8007b80:	4553      	cmp	r3, sl
 8007b82:	dc01      	bgt.n	8007b88 <_printf_float+0x2b0>
 8007b84:	464b      	mov	r3, r9
 8007b86:	e793      	b.n	8007ab0 <_printf_float+0x1d8>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	465a      	mov	r2, fp
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f aefb 	beq.w	800798e <_printf_float+0xb6>
 8007b98:	f10a 0a01 	add.w	sl, sl, #1
 8007b9c:	e7ee      	b.n	8007b7c <_printf_float+0x2a4>
 8007b9e:	bf00      	nop
 8007ba0:	7fefffff 	.word	0x7fefffff
 8007ba4:	0800ce74 	.word	0x0800ce74
 8007ba8:	0800ce78 	.word	0x0800ce78
 8007bac:	0800ce7c 	.word	0x0800ce7c
 8007bb0:	0800ce80 	.word	0x0800ce80
 8007bb4:	0800d11d 	.word	0x0800d11d
 8007bb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bbe:	4553      	cmp	r3, sl
 8007bc0:	bfa8      	it	ge
 8007bc2:	4653      	movge	r3, sl
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	4699      	mov	r9, r3
 8007bc8:	dc36      	bgt.n	8007c38 <_printf_float+0x360>
 8007bca:	f04f 0b00 	mov.w	fp, #0
 8007bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bd2:	f104 021a 	add.w	r2, r4, #26
 8007bd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bd8:	9306      	str	r3, [sp, #24]
 8007bda:	eba3 0309 	sub.w	r3, r3, r9
 8007bde:	455b      	cmp	r3, fp
 8007be0:	dc31      	bgt.n	8007c46 <_printf_float+0x36e>
 8007be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be4:	459a      	cmp	sl, r3
 8007be6:	dc3a      	bgt.n	8007c5e <_printf_float+0x386>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	07da      	lsls	r2, r3, #31
 8007bec:	d437      	bmi.n	8007c5e <_printf_float+0x386>
 8007bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf0:	ebaa 0903 	sub.w	r9, sl, r3
 8007bf4:	9b06      	ldr	r3, [sp, #24]
 8007bf6:	ebaa 0303 	sub.w	r3, sl, r3
 8007bfa:	4599      	cmp	r9, r3
 8007bfc:	bfa8      	it	ge
 8007bfe:	4699      	movge	r9, r3
 8007c00:	f1b9 0f00 	cmp.w	r9, #0
 8007c04:	dc33      	bgt.n	8007c6e <_printf_float+0x396>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c0e:	f104 0b1a 	add.w	fp, r4, #26
 8007c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c14:	ebaa 0303 	sub.w	r3, sl, r3
 8007c18:	eba3 0309 	sub.w	r3, r3, r9
 8007c1c:	4543      	cmp	r3, r8
 8007c1e:	f77f af79 	ble.w	8007b14 <_printf_float+0x23c>
 8007c22:	2301      	movs	r3, #1
 8007c24:	465a      	mov	r2, fp
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f aeae 	beq.w	800798e <_printf_float+0xb6>
 8007c32:	f108 0801 	add.w	r8, r8, #1
 8007c36:	e7ec      	b.n	8007c12 <_printf_float+0x33a>
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	d1c2      	bne.n	8007bca <_printf_float+0x2f2>
 8007c44:	e6a3      	b.n	800798e <_printf_float+0xb6>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	9206      	str	r2, [sp, #24]
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae9c 	beq.w	800798e <_printf_float+0xb6>
 8007c56:	9a06      	ldr	r2, [sp, #24]
 8007c58:	f10b 0b01 	add.w	fp, fp, #1
 8007c5c:	e7bb      	b.n	8007bd6 <_printf_float+0x2fe>
 8007c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d1c0      	bne.n	8007bee <_printf_float+0x316>
 8007c6c:	e68f      	b.n	800798e <_printf_float+0xb6>
 8007c6e:	9a06      	ldr	r2, [sp, #24]
 8007c70:	464b      	mov	r3, r9
 8007c72:	4442      	add	r2, r8
 8007c74:	4631      	mov	r1, r6
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d1c3      	bne.n	8007c06 <_printf_float+0x32e>
 8007c7e:	e686      	b.n	800798e <_printf_float+0xb6>
 8007c80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c84:	f1ba 0f01 	cmp.w	sl, #1
 8007c88:	dc01      	bgt.n	8007c8e <_printf_float+0x3b6>
 8007c8a:	07db      	lsls	r3, r3, #31
 8007c8c:	d536      	bpl.n	8007cfc <_printf_float+0x424>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4642      	mov	r2, r8
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f43f ae78 	beq.w	800798e <_printf_float+0xb6>
 8007c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f43f ae70 	beq.w	800798e <_printf_float+0xb6>
 8007cae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007cba:	f7f8 ff2d 	bl	8000b18 <__aeabi_dcmpeq>
 8007cbe:	b9c0      	cbnz	r0, 8007cf2 <_printf_float+0x41a>
 8007cc0:	4653      	mov	r3, sl
 8007cc2:	f108 0201 	add.w	r2, r8, #1
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d10c      	bne.n	8007cea <_printf_float+0x412>
 8007cd0:	e65d      	b.n	800798e <_printf_float+0xb6>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	465a      	mov	r2, fp
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae56 	beq.w	800798e <_printf_float+0xb6>
 8007ce2:	f108 0801 	add.w	r8, r8, #1
 8007ce6:	45d0      	cmp	r8, sl
 8007ce8:	dbf3      	blt.n	8007cd2 <_printf_float+0x3fa>
 8007cea:	464b      	mov	r3, r9
 8007cec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007cf0:	e6df      	b.n	8007ab2 <_printf_float+0x1da>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	f104 0b1a 	add.w	fp, r4, #26
 8007cfa:	e7f4      	b.n	8007ce6 <_printf_float+0x40e>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4642      	mov	r2, r8
 8007d00:	e7e1      	b.n	8007cc6 <_printf_float+0x3ee>
 8007d02:	2301      	movs	r3, #1
 8007d04:	464a      	mov	r2, r9
 8007d06:	4631      	mov	r1, r6
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b8      	blx	r7
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	f43f ae3e 	beq.w	800798e <_printf_float+0xb6>
 8007d12:	f108 0801 	add.w	r8, r8, #1
 8007d16:	68e3      	ldr	r3, [r4, #12]
 8007d18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d1a:	1a5b      	subs	r3, r3, r1
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	dcf0      	bgt.n	8007d02 <_printf_float+0x42a>
 8007d20:	e6fc      	b.n	8007b1c <_printf_float+0x244>
 8007d22:	f04f 0800 	mov.w	r8, #0
 8007d26:	f104 0919 	add.w	r9, r4, #25
 8007d2a:	e7f4      	b.n	8007d16 <_printf_float+0x43e>

08007d2c <_printf_common>:
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	4616      	mov	r6, r2
 8007d32:	4698      	mov	r8, r3
 8007d34:	688a      	ldr	r2, [r1, #8]
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bfb8      	it	lt
 8007d40:	4613      	movlt	r3, r2
 8007d42:	6033      	str	r3, [r6, #0]
 8007d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d48:	4607      	mov	r7, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b10a      	cbz	r2, 8007d52 <_printf_common+0x26>
 8007d4e:	3301      	adds	r3, #1
 8007d50:	6033      	str	r3, [r6, #0]
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	0699      	lsls	r1, r3, #26
 8007d56:	bf42      	ittt	mi
 8007d58:	6833      	ldrmi	r3, [r6, #0]
 8007d5a:	3302      	addmi	r3, #2
 8007d5c:	6033      	strmi	r3, [r6, #0]
 8007d5e:	6825      	ldr	r5, [r4, #0]
 8007d60:	f015 0506 	ands.w	r5, r5, #6
 8007d64:	d106      	bne.n	8007d74 <_printf_common+0x48>
 8007d66:	f104 0a19 	add.w	sl, r4, #25
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	6832      	ldr	r2, [r6, #0]
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	dc26      	bgt.n	8007dc2 <_printf_common+0x96>
 8007d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	3b00      	subs	r3, #0
 8007d7c:	bf18      	it	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	0692      	lsls	r2, r2, #26
 8007d82:	d42b      	bmi.n	8007ddc <_printf_common+0xb0>
 8007d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d88:	4641      	mov	r1, r8
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c8      	blx	r9
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d01e      	beq.n	8007dd0 <_printf_common+0xa4>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	6922      	ldr	r2, [r4, #16]
 8007d96:	f003 0306 	and.w	r3, r3, #6
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	bf02      	ittt	eq
 8007d9e:	68e5      	ldreq	r5, [r4, #12]
 8007da0:	6833      	ldreq	r3, [r6, #0]
 8007da2:	1aed      	subeq	r5, r5, r3
 8007da4:	68a3      	ldr	r3, [r4, #8]
 8007da6:	bf0c      	ite	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	2500      	movne	r5, #0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bfc4      	itt	gt
 8007db2:	1a9b      	subgt	r3, r3, r2
 8007db4:	18ed      	addgt	r5, r5, r3
 8007db6:	2600      	movs	r6, #0
 8007db8:	341a      	adds	r4, #26
 8007dba:	42b5      	cmp	r5, r6
 8007dbc:	d11a      	bne.n	8007df4 <_printf_common+0xc8>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e008      	b.n	8007dd4 <_printf_common+0xa8>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	4638      	mov	r0, r7
 8007dca:	47c8      	blx	r9
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d103      	bne.n	8007dd8 <_printf_common+0xac>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	3501      	adds	r5, #1
 8007dda:	e7c6      	b.n	8007d6a <_printf_common+0x3e>
 8007ddc:	18e1      	adds	r1, r4, r3
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	2030      	movs	r0, #48	@ 0x30
 8007de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007de6:	4422      	add	r2, r4
 8007de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007df0:	3302      	adds	r3, #2
 8007df2:	e7c7      	b.n	8007d84 <_printf_common+0x58>
 8007df4:	2301      	movs	r3, #1
 8007df6:	4622      	mov	r2, r4
 8007df8:	4641      	mov	r1, r8
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c8      	blx	r9
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d0e6      	beq.n	8007dd0 <_printf_common+0xa4>
 8007e02:	3601      	adds	r6, #1
 8007e04:	e7d9      	b.n	8007dba <_printf_common+0x8e>
	...

08007e08 <_printf_i>:
 8007e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0c:	7e0f      	ldrb	r7, [r1, #24]
 8007e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e10:	2f78      	cmp	r7, #120	@ 0x78
 8007e12:	4691      	mov	r9, r2
 8007e14:	4680      	mov	r8, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e1e:	d807      	bhi.n	8007e30 <_printf_i+0x28>
 8007e20:	2f62      	cmp	r7, #98	@ 0x62
 8007e22:	d80a      	bhi.n	8007e3a <_printf_i+0x32>
 8007e24:	2f00      	cmp	r7, #0
 8007e26:	f000 80d2 	beq.w	8007fce <_printf_i+0x1c6>
 8007e2a:	2f58      	cmp	r7, #88	@ 0x58
 8007e2c:	f000 80b9 	beq.w	8007fa2 <_printf_i+0x19a>
 8007e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e38:	e03a      	b.n	8007eb0 <_printf_i+0xa8>
 8007e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e3e:	2b15      	cmp	r3, #21
 8007e40:	d8f6      	bhi.n	8007e30 <_printf_i+0x28>
 8007e42:	a101      	add	r1, pc, #4	@ (adr r1, 8007e48 <_printf_i+0x40>)
 8007e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007eb5 	.word	0x08007eb5
 8007e50:	08007e31 	.word	0x08007e31
 8007e54:	08007e31 	.word	0x08007e31
 8007e58:	08007e31 	.word	0x08007e31
 8007e5c:	08007e31 	.word	0x08007e31
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007e31 	.word	0x08007e31
 8007e68:	08007e31 	.word	0x08007e31
 8007e6c:	08007e31 	.word	0x08007e31
 8007e70:	08007e31 	.word	0x08007e31
 8007e74:	08007fb5 	.word	0x08007fb5
 8007e78:	08007edf 	.word	0x08007edf
 8007e7c:	08007f6f 	.word	0x08007f6f
 8007e80:	08007e31 	.word	0x08007e31
 8007e84:	08007e31 	.word	0x08007e31
 8007e88:	08007fd7 	.word	0x08007fd7
 8007e8c:	08007e31 	.word	0x08007e31
 8007e90:	08007edf 	.word	0x08007edf
 8007e94:	08007e31 	.word	0x08007e31
 8007e98:	08007e31 	.word	0x08007e31
 8007e9c:	08007f77 	.word	0x08007f77
 8007ea0:	6833      	ldr	r3, [r6, #0]
 8007ea2:	1d1a      	adds	r2, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6032      	str	r2, [r6, #0]
 8007ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e09d      	b.n	8007ff0 <_printf_i+0x1e8>
 8007eb4:	6833      	ldr	r3, [r6, #0]
 8007eb6:	6820      	ldr	r0, [r4, #0]
 8007eb8:	1d19      	adds	r1, r3, #4
 8007eba:	6031      	str	r1, [r6, #0]
 8007ebc:	0606      	lsls	r6, r0, #24
 8007ebe:	d501      	bpl.n	8007ec4 <_printf_i+0xbc>
 8007ec0:	681d      	ldr	r5, [r3, #0]
 8007ec2:	e003      	b.n	8007ecc <_printf_i+0xc4>
 8007ec4:	0645      	lsls	r5, r0, #25
 8007ec6:	d5fb      	bpl.n	8007ec0 <_printf_i+0xb8>
 8007ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ecc:	2d00      	cmp	r5, #0
 8007ece:	da03      	bge.n	8007ed8 <_printf_i+0xd0>
 8007ed0:	232d      	movs	r3, #45	@ 0x2d
 8007ed2:	426d      	negs	r5, r5
 8007ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ed8:	4859      	ldr	r0, [pc, #356]	@ (8008040 <_printf_i+0x238>)
 8007eda:	230a      	movs	r3, #10
 8007edc:	e011      	b.n	8007f02 <_printf_i+0xfa>
 8007ede:	6821      	ldr	r1, [r4, #0]
 8007ee0:	6833      	ldr	r3, [r6, #0]
 8007ee2:	0608      	lsls	r0, r1, #24
 8007ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ee8:	d402      	bmi.n	8007ef0 <_printf_i+0xe8>
 8007eea:	0649      	lsls	r1, r1, #25
 8007eec:	bf48      	it	mi
 8007eee:	b2ad      	uxthmi	r5, r5
 8007ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ef2:	4853      	ldr	r0, [pc, #332]	@ (8008040 <_printf_i+0x238>)
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	bf14      	ite	ne
 8007ef8:	230a      	movne	r3, #10
 8007efa:	2308      	moveq	r3, #8
 8007efc:	2100      	movs	r1, #0
 8007efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f02:	6866      	ldr	r6, [r4, #4]
 8007f04:	60a6      	str	r6, [r4, #8]
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	bfa2      	ittt	ge
 8007f0a:	6821      	ldrge	r1, [r4, #0]
 8007f0c:	f021 0104 	bicge.w	r1, r1, #4
 8007f10:	6021      	strge	r1, [r4, #0]
 8007f12:	b90d      	cbnz	r5, 8007f18 <_printf_i+0x110>
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	d04b      	beq.n	8007fb0 <_printf_i+0x1a8>
 8007f18:	4616      	mov	r6, r2
 8007f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8007f22:	5dc7      	ldrb	r7, [r0, r7]
 8007f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f28:	462f      	mov	r7, r5
 8007f2a:	42bb      	cmp	r3, r7
 8007f2c:	460d      	mov	r5, r1
 8007f2e:	d9f4      	bls.n	8007f1a <_printf_i+0x112>
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d10b      	bne.n	8007f4c <_printf_i+0x144>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	07df      	lsls	r7, r3, #31
 8007f38:	d508      	bpl.n	8007f4c <_printf_i+0x144>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	6861      	ldr	r1, [r4, #4]
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	bfde      	ittt	le
 8007f42:	2330      	movle	r3, #48	@ 0x30
 8007f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f48:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007f4c:	1b92      	subs	r2, r2, r6
 8007f4e:	6122      	str	r2, [r4, #16]
 8007f50:	f8cd a000 	str.w	sl, [sp]
 8007f54:	464b      	mov	r3, r9
 8007f56:	aa03      	add	r2, sp, #12
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	f7ff fee6 	bl	8007d2c <_printf_common>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d14a      	bne.n	8007ffa <_printf_i+0x1f2>
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f68:	b004      	add	sp, #16
 8007f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	f043 0320 	orr.w	r3, r3, #32
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	4833      	ldr	r0, [pc, #204]	@ (8008044 <_printf_i+0x23c>)
 8007f78:	2778      	movs	r7, #120	@ 0x78
 8007f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	6831      	ldr	r1, [r6, #0]
 8007f82:	061f      	lsls	r7, r3, #24
 8007f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f88:	d402      	bmi.n	8007f90 <_printf_i+0x188>
 8007f8a:	065f      	lsls	r7, r3, #25
 8007f8c:	bf48      	it	mi
 8007f8e:	b2ad      	uxthmi	r5, r5
 8007f90:	6031      	str	r1, [r6, #0]
 8007f92:	07d9      	lsls	r1, r3, #31
 8007f94:	bf44      	itt	mi
 8007f96:	f043 0320 	orrmi.w	r3, r3, #32
 8007f9a:	6023      	strmi	r3, [r4, #0]
 8007f9c:	b11d      	cbz	r5, 8007fa6 <_printf_i+0x19e>
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	e7ac      	b.n	8007efc <_printf_i+0xf4>
 8007fa2:	4827      	ldr	r0, [pc, #156]	@ (8008040 <_printf_i+0x238>)
 8007fa4:	e7e9      	b.n	8007f7a <_printf_i+0x172>
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	f023 0320 	bic.w	r3, r3, #32
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	e7f6      	b.n	8007f9e <_printf_i+0x196>
 8007fb0:	4616      	mov	r6, r2
 8007fb2:	e7bd      	b.n	8007f30 <_printf_i+0x128>
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	6825      	ldr	r5, [r4, #0]
 8007fb8:	6961      	ldr	r1, [r4, #20]
 8007fba:	1d18      	adds	r0, r3, #4
 8007fbc:	6030      	str	r0, [r6, #0]
 8007fbe:	062e      	lsls	r6, r5, #24
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	d501      	bpl.n	8007fc8 <_printf_i+0x1c0>
 8007fc4:	6019      	str	r1, [r3, #0]
 8007fc6:	e002      	b.n	8007fce <_printf_i+0x1c6>
 8007fc8:	0668      	lsls	r0, r5, #25
 8007fca:	d5fb      	bpl.n	8007fc4 <_printf_i+0x1bc>
 8007fcc:	8019      	strh	r1, [r3, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	6123      	str	r3, [r4, #16]
 8007fd2:	4616      	mov	r6, r2
 8007fd4:	e7bc      	b.n	8007f50 <_printf_i+0x148>
 8007fd6:	6833      	ldr	r3, [r6, #0]
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	6032      	str	r2, [r6, #0]
 8007fdc:	681e      	ldr	r6, [r3, #0]
 8007fde:	6862      	ldr	r2, [r4, #4]
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7f8 f91c 	bl	8000220 <memchr>
 8007fe8:	b108      	cbz	r0, 8007fee <_printf_i+0x1e6>
 8007fea:	1b80      	subs	r0, r0, r6
 8007fec:	6060      	str	r0, [r4, #4]
 8007fee:	6863      	ldr	r3, [r4, #4]
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ff8:	e7aa      	b.n	8007f50 <_printf_i+0x148>
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4649      	mov	r1, r9
 8008000:	4640      	mov	r0, r8
 8008002:	47d0      	blx	sl
 8008004:	3001      	adds	r0, #1
 8008006:	d0ad      	beq.n	8007f64 <_printf_i+0x15c>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	079b      	lsls	r3, r3, #30
 800800c:	d413      	bmi.n	8008036 <_printf_i+0x22e>
 800800e:	68e0      	ldr	r0, [r4, #12]
 8008010:	9b03      	ldr	r3, [sp, #12]
 8008012:	4298      	cmp	r0, r3
 8008014:	bfb8      	it	lt
 8008016:	4618      	movlt	r0, r3
 8008018:	e7a6      	b.n	8007f68 <_printf_i+0x160>
 800801a:	2301      	movs	r3, #1
 800801c:	4632      	mov	r2, r6
 800801e:	4649      	mov	r1, r9
 8008020:	4640      	mov	r0, r8
 8008022:	47d0      	blx	sl
 8008024:	3001      	adds	r0, #1
 8008026:	d09d      	beq.n	8007f64 <_printf_i+0x15c>
 8008028:	3501      	adds	r5, #1
 800802a:	68e3      	ldr	r3, [r4, #12]
 800802c:	9903      	ldr	r1, [sp, #12]
 800802e:	1a5b      	subs	r3, r3, r1
 8008030:	42ab      	cmp	r3, r5
 8008032:	dcf2      	bgt.n	800801a <_printf_i+0x212>
 8008034:	e7eb      	b.n	800800e <_printf_i+0x206>
 8008036:	2500      	movs	r5, #0
 8008038:	f104 0619 	add.w	r6, r4, #25
 800803c:	e7f5      	b.n	800802a <_printf_i+0x222>
 800803e:	bf00      	nop
 8008040:	0800ce84 	.word	0x0800ce84
 8008044:	0800ce95 	.word	0x0800ce95

08008048 <_scanf_float>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	b087      	sub	sp, #28
 800804e:	4617      	mov	r7, r2
 8008050:	9303      	str	r3, [sp, #12]
 8008052:	688b      	ldr	r3, [r1, #8]
 8008054:	1e5a      	subs	r2, r3, #1
 8008056:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800805a:	bf81      	itttt	hi
 800805c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008060:	eb03 0b05 	addhi.w	fp, r3, r5
 8008064:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008068:	608b      	strhi	r3, [r1, #8]
 800806a:	680b      	ldr	r3, [r1, #0]
 800806c:	460a      	mov	r2, r1
 800806e:	f04f 0500 	mov.w	r5, #0
 8008072:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008076:	f842 3b1c 	str.w	r3, [r2], #28
 800807a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800807e:	4680      	mov	r8, r0
 8008080:	460c      	mov	r4, r1
 8008082:	bf98      	it	ls
 8008084:	f04f 0b00 	movls.w	fp, #0
 8008088:	9201      	str	r2, [sp, #4]
 800808a:	4616      	mov	r6, r2
 800808c:	46aa      	mov	sl, r5
 800808e:	46a9      	mov	r9, r5
 8008090:	9502      	str	r5, [sp, #8]
 8008092:	68a2      	ldr	r2, [r4, #8]
 8008094:	b152      	cbz	r2, 80080ac <_scanf_float+0x64>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b4e      	cmp	r3, #78	@ 0x4e
 800809c:	d864      	bhi.n	8008168 <_scanf_float+0x120>
 800809e:	2b40      	cmp	r3, #64	@ 0x40
 80080a0:	d83c      	bhi.n	800811c <_scanf_float+0xd4>
 80080a2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80080a6:	b2c8      	uxtb	r0, r1
 80080a8:	280e      	cmp	r0, #14
 80080aa:	d93a      	bls.n	8008122 <_scanf_float+0xda>
 80080ac:	f1b9 0f00 	cmp.w	r9, #0
 80080b0:	d003      	beq.n	80080ba <_scanf_float+0x72>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80080be:	f1ba 0f01 	cmp.w	sl, #1
 80080c2:	f200 8117 	bhi.w	80082f4 <_scanf_float+0x2ac>
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	429e      	cmp	r6, r3
 80080ca:	f200 8108 	bhi.w	80082de <_scanf_float+0x296>
 80080ce:	2001      	movs	r0, #1
 80080d0:	b007      	add	sp, #28
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80080da:	2a0d      	cmp	r2, #13
 80080dc:	d8e6      	bhi.n	80080ac <_scanf_float+0x64>
 80080de:	a101      	add	r1, pc, #4	@ (adr r1, 80080e4 <_scanf_float+0x9c>)
 80080e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080e4:	0800822b 	.word	0x0800822b
 80080e8:	080080ad 	.word	0x080080ad
 80080ec:	080080ad 	.word	0x080080ad
 80080f0:	080080ad 	.word	0x080080ad
 80080f4:	0800828b 	.word	0x0800828b
 80080f8:	08008263 	.word	0x08008263
 80080fc:	080080ad 	.word	0x080080ad
 8008100:	080080ad 	.word	0x080080ad
 8008104:	08008239 	.word	0x08008239
 8008108:	080080ad 	.word	0x080080ad
 800810c:	080080ad 	.word	0x080080ad
 8008110:	080080ad 	.word	0x080080ad
 8008114:	080080ad 	.word	0x080080ad
 8008118:	080081f1 	.word	0x080081f1
 800811c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008120:	e7db      	b.n	80080da <_scanf_float+0x92>
 8008122:	290e      	cmp	r1, #14
 8008124:	d8c2      	bhi.n	80080ac <_scanf_float+0x64>
 8008126:	a001      	add	r0, pc, #4	@ (adr r0, 800812c <_scanf_float+0xe4>)
 8008128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800812c:	080081e1 	.word	0x080081e1
 8008130:	080080ad 	.word	0x080080ad
 8008134:	080081e1 	.word	0x080081e1
 8008138:	08008277 	.word	0x08008277
 800813c:	080080ad 	.word	0x080080ad
 8008140:	08008189 	.word	0x08008189
 8008144:	080081c7 	.word	0x080081c7
 8008148:	080081c7 	.word	0x080081c7
 800814c:	080081c7 	.word	0x080081c7
 8008150:	080081c7 	.word	0x080081c7
 8008154:	080081c7 	.word	0x080081c7
 8008158:	080081c7 	.word	0x080081c7
 800815c:	080081c7 	.word	0x080081c7
 8008160:	080081c7 	.word	0x080081c7
 8008164:	080081c7 	.word	0x080081c7
 8008168:	2b6e      	cmp	r3, #110	@ 0x6e
 800816a:	d809      	bhi.n	8008180 <_scanf_float+0x138>
 800816c:	2b60      	cmp	r3, #96	@ 0x60
 800816e:	d8b2      	bhi.n	80080d6 <_scanf_float+0x8e>
 8008170:	2b54      	cmp	r3, #84	@ 0x54
 8008172:	d07b      	beq.n	800826c <_scanf_float+0x224>
 8008174:	2b59      	cmp	r3, #89	@ 0x59
 8008176:	d199      	bne.n	80080ac <_scanf_float+0x64>
 8008178:	2d07      	cmp	r5, #7
 800817a:	d197      	bne.n	80080ac <_scanf_float+0x64>
 800817c:	2508      	movs	r5, #8
 800817e:	e02c      	b.n	80081da <_scanf_float+0x192>
 8008180:	2b74      	cmp	r3, #116	@ 0x74
 8008182:	d073      	beq.n	800826c <_scanf_float+0x224>
 8008184:	2b79      	cmp	r3, #121	@ 0x79
 8008186:	e7f6      	b.n	8008176 <_scanf_float+0x12e>
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	05c8      	lsls	r0, r1, #23
 800818c:	d51b      	bpl.n	80081c6 <_scanf_float+0x17e>
 800818e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008192:	6021      	str	r1, [r4, #0]
 8008194:	f109 0901 	add.w	r9, r9, #1
 8008198:	f1bb 0f00 	cmp.w	fp, #0
 800819c:	d003      	beq.n	80081a6 <_scanf_float+0x15e>
 800819e:	3201      	adds	r2, #1
 80081a0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80081a4:	60a2      	str	r2, [r4, #8]
 80081a6:	68a3      	ldr	r3, [r4, #8]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	3301      	adds	r3, #1
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
 80081ba:	f340 8087 	ble.w	80082cc <_scanf_float+0x284>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	e765      	b.n	8008092 <_scanf_float+0x4a>
 80081c6:	eb1a 0105 	adds.w	r1, sl, r5
 80081ca:	f47f af6f 	bne.w	80080ac <_scanf_float+0x64>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80081d4:	6022      	str	r2, [r4, #0]
 80081d6:	460d      	mov	r5, r1
 80081d8:	468a      	mov	sl, r1
 80081da:	f806 3b01 	strb.w	r3, [r6], #1
 80081de:	e7e2      	b.n	80081a6 <_scanf_float+0x15e>
 80081e0:	6822      	ldr	r2, [r4, #0]
 80081e2:	0610      	lsls	r0, r2, #24
 80081e4:	f57f af62 	bpl.w	80080ac <_scanf_float+0x64>
 80081e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081ec:	6022      	str	r2, [r4, #0]
 80081ee:	e7f4      	b.n	80081da <_scanf_float+0x192>
 80081f0:	f1ba 0f00 	cmp.w	sl, #0
 80081f4:	d10e      	bne.n	8008214 <_scanf_float+0x1cc>
 80081f6:	f1b9 0f00 	cmp.w	r9, #0
 80081fa:	d10e      	bne.n	800821a <_scanf_float+0x1d2>
 80081fc:	6822      	ldr	r2, [r4, #0]
 80081fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008202:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008206:	d108      	bne.n	800821a <_scanf_float+0x1d2>
 8008208:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800820c:	6022      	str	r2, [r4, #0]
 800820e:	f04f 0a01 	mov.w	sl, #1
 8008212:	e7e2      	b.n	80081da <_scanf_float+0x192>
 8008214:	f1ba 0f02 	cmp.w	sl, #2
 8008218:	d055      	beq.n	80082c6 <_scanf_float+0x27e>
 800821a:	2d01      	cmp	r5, #1
 800821c:	d002      	beq.n	8008224 <_scanf_float+0x1dc>
 800821e:	2d04      	cmp	r5, #4
 8008220:	f47f af44 	bne.w	80080ac <_scanf_float+0x64>
 8008224:	3501      	adds	r5, #1
 8008226:	b2ed      	uxtb	r5, r5
 8008228:	e7d7      	b.n	80081da <_scanf_float+0x192>
 800822a:	f1ba 0f01 	cmp.w	sl, #1
 800822e:	f47f af3d 	bne.w	80080ac <_scanf_float+0x64>
 8008232:	f04f 0a02 	mov.w	sl, #2
 8008236:	e7d0      	b.n	80081da <_scanf_float+0x192>
 8008238:	b97d      	cbnz	r5, 800825a <_scanf_float+0x212>
 800823a:	f1b9 0f00 	cmp.w	r9, #0
 800823e:	f47f af38 	bne.w	80080b2 <_scanf_float+0x6a>
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008248:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800824c:	f040 8108 	bne.w	8008460 <_scanf_float+0x418>
 8008250:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008254:	6022      	str	r2, [r4, #0]
 8008256:	2501      	movs	r5, #1
 8008258:	e7bf      	b.n	80081da <_scanf_float+0x192>
 800825a:	2d03      	cmp	r5, #3
 800825c:	d0e2      	beq.n	8008224 <_scanf_float+0x1dc>
 800825e:	2d05      	cmp	r5, #5
 8008260:	e7de      	b.n	8008220 <_scanf_float+0x1d8>
 8008262:	2d02      	cmp	r5, #2
 8008264:	f47f af22 	bne.w	80080ac <_scanf_float+0x64>
 8008268:	2503      	movs	r5, #3
 800826a:	e7b6      	b.n	80081da <_scanf_float+0x192>
 800826c:	2d06      	cmp	r5, #6
 800826e:	f47f af1d 	bne.w	80080ac <_scanf_float+0x64>
 8008272:	2507      	movs	r5, #7
 8008274:	e7b1      	b.n	80081da <_scanf_float+0x192>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	0591      	lsls	r1, r2, #22
 800827a:	f57f af17 	bpl.w	80080ac <_scanf_float+0x64>
 800827e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	f8cd 9008 	str.w	r9, [sp, #8]
 8008288:	e7a7      	b.n	80081da <_scanf_float+0x192>
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008290:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008294:	d006      	beq.n	80082a4 <_scanf_float+0x25c>
 8008296:	0550      	lsls	r0, r2, #21
 8008298:	f57f af08 	bpl.w	80080ac <_scanf_float+0x64>
 800829c:	f1b9 0f00 	cmp.w	r9, #0
 80082a0:	f000 80de 	beq.w	8008460 <_scanf_float+0x418>
 80082a4:	0591      	lsls	r1, r2, #22
 80082a6:	bf58      	it	pl
 80082a8:	9902      	ldrpl	r1, [sp, #8]
 80082aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082ae:	bf58      	it	pl
 80082b0:	eba9 0101 	subpl.w	r1, r9, r1
 80082b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80082b8:	bf58      	it	pl
 80082ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	e789      	b.n	80081da <_scanf_float+0x192>
 80082c6:	f04f 0a03 	mov.w	sl, #3
 80082ca:	e786      	b.n	80081da <_scanf_float+0x192>
 80082cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80082d0:	4639      	mov	r1, r7
 80082d2:	4640      	mov	r0, r8
 80082d4:	4798      	blx	r3
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f43f aedb 	beq.w	8008092 <_scanf_float+0x4a>
 80082dc:	e6e6      	b.n	80080ac <_scanf_float+0x64>
 80082de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082e6:	463a      	mov	r2, r7
 80082e8:	4640      	mov	r0, r8
 80082ea:	4798      	blx	r3
 80082ec:	6923      	ldr	r3, [r4, #16]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	6123      	str	r3, [r4, #16]
 80082f2:	e6e8      	b.n	80080c6 <_scanf_float+0x7e>
 80082f4:	1e6b      	subs	r3, r5, #1
 80082f6:	2b06      	cmp	r3, #6
 80082f8:	d824      	bhi.n	8008344 <_scanf_float+0x2fc>
 80082fa:	2d02      	cmp	r5, #2
 80082fc:	d836      	bhi.n	800836c <_scanf_float+0x324>
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	429e      	cmp	r6, r3
 8008302:	f67f aee4 	bls.w	80080ce <_scanf_float+0x86>
 8008306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800830a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800830e:	463a      	mov	r2, r7
 8008310:	4640      	mov	r0, r8
 8008312:	4798      	blx	r3
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	3b01      	subs	r3, #1
 8008318:	6123      	str	r3, [r4, #16]
 800831a:	e7f0      	b.n	80082fe <_scanf_float+0x2b6>
 800831c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008320:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008324:	463a      	mov	r2, r7
 8008326:	4640      	mov	r0, r8
 8008328:	4798      	blx	r3
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	3b01      	subs	r3, #1
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008334:	fa5f fa8a 	uxtb.w	sl, sl
 8008338:	f1ba 0f02 	cmp.w	sl, #2
 800833c:	d1ee      	bne.n	800831c <_scanf_float+0x2d4>
 800833e:	3d03      	subs	r5, #3
 8008340:	b2ed      	uxtb	r5, r5
 8008342:	1b76      	subs	r6, r6, r5
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	05da      	lsls	r2, r3, #23
 8008348:	d530      	bpl.n	80083ac <_scanf_float+0x364>
 800834a:	055b      	lsls	r3, r3, #21
 800834c:	d511      	bpl.n	8008372 <_scanf_float+0x32a>
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	429e      	cmp	r6, r3
 8008352:	f67f aebc 	bls.w	80080ce <_scanf_float+0x86>
 8008356:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800835a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800835e:	463a      	mov	r2, r7
 8008360:	4640      	mov	r0, r8
 8008362:	4798      	blx	r3
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	3b01      	subs	r3, #1
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	e7f0      	b.n	800834e <_scanf_float+0x306>
 800836c:	46aa      	mov	sl, r5
 800836e:	46b3      	mov	fp, r6
 8008370:	e7de      	b.n	8008330 <_scanf_float+0x2e8>
 8008372:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	2965      	cmp	r1, #101	@ 0x65
 800837a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800837e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008382:	6123      	str	r3, [r4, #16]
 8008384:	d00c      	beq.n	80083a0 <_scanf_float+0x358>
 8008386:	2945      	cmp	r1, #69	@ 0x45
 8008388:	d00a      	beq.n	80083a0 <_scanf_float+0x358>
 800838a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800838e:	463a      	mov	r2, r7
 8008390:	4640      	mov	r0, r8
 8008392:	4798      	blx	r3
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800839a:	3b01      	subs	r3, #1
 800839c:	1eb5      	subs	r5, r6, #2
 800839e:	6123      	str	r3, [r4, #16]
 80083a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083a4:	463a      	mov	r2, r7
 80083a6:	4640      	mov	r0, r8
 80083a8:	4798      	blx	r3
 80083aa:	462e      	mov	r6, r5
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	f012 0210 	ands.w	r2, r2, #16
 80083b2:	d001      	beq.n	80083b8 <_scanf_float+0x370>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e68b      	b.n	80080d0 <_scanf_float+0x88>
 80083b8:	7032      	strb	r2, [r6, #0]
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c4:	d11c      	bne.n	8008400 <_scanf_float+0x3b8>
 80083c6:	9b02      	ldr	r3, [sp, #8]
 80083c8:	454b      	cmp	r3, r9
 80083ca:	eba3 0209 	sub.w	r2, r3, r9
 80083ce:	d123      	bne.n	8008418 <_scanf_float+0x3d0>
 80083d0:	9901      	ldr	r1, [sp, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	4640      	mov	r0, r8
 80083d6:	f000 ff83 	bl	80092e0 <_strtod_r>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	6821      	ldr	r1, [r4, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f011 0f02 	tst.w	r1, #2
 80083e4:	ec57 6b10 	vmov	r6, r7, d0
 80083e8:	f103 0204 	add.w	r2, r3, #4
 80083ec:	d01f      	beq.n	800842e <_scanf_float+0x3e6>
 80083ee:	9903      	ldr	r1, [sp, #12]
 80083f0:	600a      	str	r2, [r1, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	e9c3 6700 	strd	r6, r7, [r3]
 80083f8:	68e3      	ldr	r3, [r4, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60e3      	str	r3, [r4, #12]
 80083fe:	e7d9      	b.n	80083b4 <_scanf_float+0x36c>
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0e4      	beq.n	80083d0 <_scanf_float+0x388>
 8008406:	9905      	ldr	r1, [sp, #20]
 8008408:	230a      	movs	r3, #10
 800840a:	3101      	adds	r1, #1
 800840c:	4640      	mov	r0, r8
 800840e:	f000 ffe7 	bl	80093e0 <_strtol_r>
 8008412:	9b04      	ldr	r3, [sp, #16]
 8008414:	9e05      	ldr	r6, [sp, #20]
 8008416:	1ac2      	subs	r2, r0, r3
 8008418:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800841c:	429e      	cmp	r6, r3
 800841e:	bf28      	it	cs
 8008420:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008424:	4910      	ldr	r1, [pc, #64]	@ (8008468 <_scanf_float+0x420>)
 8008426:	4630      	mov	r0, r6
 8008428:	f000 f822 	bl	8008470 <siprintf>
 800842c:	e7d0      	b.n	80083d0 <_scanf_float+0x388>
 800842e:	f011 0f04 	tst.w	r1, #4
 8008432:	9903      	ldr	r1, [sp, #12]
 8008434:	600a      	str	r2, [r1, #0]
 8008436:	d1dc      	bne.n	80083f2 <_scanf_float+0x3aa>
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	4632      	mov	r2, r6
 800843c:	463b      	mov	r3, r7
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f8 fb9b 	bl	8000b7c <__aeabi_dcmpun>
 8008446:	b128      	cbz	r0, 8008454 <_scanf_float+0x40c>
 8008448:	4808      	ldr	r0, [pc, #32]	@ (800846c <_scanf_float+0x424>)
 800844a:	f001 f901 	bl	8009650 <nanf>
 800844e:	ed85 0a00 	vstr	s0, [r5]
 8008452:	e7d1      	b.n	80083f8 <_scanf_float+0x3b0>
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	f7f8 fbee 	bl	8000c38 <__aeabi_d2f>
 800845c:	6028      	str	r0, [r5, #0]
 800845e:	e7cb      	b.n	80083f8 <_scanf_float+0x3b0>
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	e629      	b.n	80080ba <_scanf_float+0x72>
 8008466:	bf00      	nop
 8008468:	0800cea6 	.word	0x0800cea6
 800846c:	0800d2b3 	.word	0x0800d2b3

08008470 <siprintf>:
 8008470:	b40e      	push	{r1, r2, r3}
 8008472:	b500      	push	{lr}
 8008474:	b09c      	sub	sp, #112	@ 0x70
 8008476:	ab1d      	add	r3, sp, #116	@ 0x74
 8008478:	9002      	str	r0, [sp, #8]
 800847a:	9006      	str	r0, [sp, #24]
 800847c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008480:	4809      	ldr	r0, [pc, #36]	@ (80084a8 <siprintf+0x38>)
 8008482:	9107      	str	r1, [sp, #28]
 8008484:	9104      	str	r1, [sp, #16]
 8008486:	4909      	ldr	r1, [pc, #36]	@ (80084ac <siprintf+0x3c>)
 8008488:	f853 2b04 	ldr.w	r2, [r3], #4
 800848c:	9105      	str	r1, [sp, #20]
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	a902      	add	r1, sp, #8
 8008494:	f002 fb0e 	bl	800aab4 <_svfiprintf_r>
 8008498:	9b02      	ldr	r3, [sp, #8]
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	b01c      	add	sp, #112	@ 0x70
 80084a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a4:	b003      	add	sp, #12
 80084a6:	4770      	bx	lr
 80084a8:	2000019c 	.word	0x2000019c
 80084ac:	ffff0208 	.word	0xffff0208

080084b0 <siscanf>:
 80084b0:	b40e      	push	{r1, r2, r3}
 80084b2:	b530      	push	{r4, r5, lr}
 80084b4:	b09c      	sub	sp, #112	@ 0x70
 80084b6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80084b8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80084bc:	f854 5b04 	ldr.w	r5, [r4], #4
 80084c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80084c4:	9002      	str	r0, [sp, #8]
 80084c6:	9006      	str	r0, [sp, #24]
 80084c8:	f7f7 fefa 	bl	80002c0 <strlen>
 80084cc:	4b0b      	ldr	r3, [pc, #44]	@ (80084fc <siscanf+0x4c>)
 80084ce:	9003      	str	r0, [sp, #12]
 80084d0:	9007      	str	r0, [sp, #28]
 80084d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084d4:	480a      	ldr	r0, [pc, #40]	@ (8008500 <siscanf+0x50>)
 80084d6:	9401      	str	r4, [sp, #4]
 80084d8:	2300      	movs	r3, #0
 80084da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80084de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4623      	mov	r3, r4
 80084ea:	a902      	add	r1, sp, #8
 80084ec:	6800      	ldr	r0, [r0, #0]
 80084ee:	f002 fc35 	bl	800ad5c <__ssvfiscanf_r>
 80084f2:	b01c      	add	sp, #112	@ 0x70
 80084f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f8:	b003      	add	sp, #12
 80084fa:	4770      	bx	lr
 80084fc:	08008527 	.word	0x08008527
 8008500:	2000019c 	.word	0x2000019c

08008504 <__sread>:
 8008504:	b510      	push	{r4, lr}
 8008506:	460c      	mov	r4, r1
 8008508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850c:	f001 f838 	bl	8009580 <_read_r>
 8008510:	2800      	cmp	r0, #0
 8008512:	bfab      	itete	ge
 8008514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008516:	89a3      	ldrhlt	r3, [r4, #12]
 8008518:	181b      	addge	r3, r3, r0
 800851a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800851e:	bfac      	ite	ge
 8008520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008522:	81a3      	strhlt	r3, [r4, #12]
 8008524:	bd10      	pop	{r4, pc}

08008526 <__seofread>:
 8008526:	2000      	movs	r0, #0
 8008528:	4770      	bx	lr

0800852a <__swrite>:
 800852a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852e:	461f      	mov	r7, r3
 8008530:	898b      	ldrh	r3, [r1, #12]
 8008532:	05db      	lsls	r3, r3, #23
 8008534:	4605      	mov	r5, r0
 8008536:	460c      	mov	r4, r1
 8008538:	4616      	mov	r6, r2
 800853a:	d505      	bpl.n	8008548 <__swrite+0x1e>
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	2302      	movs	r3, #2
 8008542:	2200      	movs	r2, #0
 8008544:	f001 f80a 	bl	800955c <_lseek_r>
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800854e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	4632      	mov	r2, r6
 8008556:	463b      	mov	r3, r7
 8008558:	4628      	mov	r0, r5
 800855a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	f001 b821 	b.w	80095a4 <_write_r>

08008562 <__sseek>:
 8008562:	b510      	push	{r4, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856a:	f000 fff7 	bl	800955c <_lseek_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	bf15      	itete	ne
 8008574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800857a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800857e:	81a3      	strheq	r3, [r4, #12]
 8008580:	bf18      	it	ne
 8008582:	81a3      	strhne	r3, [r4, #12]
 8008584:	bd10      	pop	{r4, pc}

08008586 <__sclose>:
 8008586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858a:	f000 bfd7 	b.w	800953c <_close_r>
	...

08008590 <std>:
 8008590:	2300      	movs	r3, #0
 8008592:	b510      	push	{r4, lr}
 8008594:	4604      	mov	r4, r0
 8008596:	e9c0 3300 	strd	r3, r3, [r0]
 800859a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859e:	6083      	str	r3, [r0, #8]
 80085a0:	8181      	strh	r1, [r0, #12]
 80085a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80085a4:	81c2      	strh	r2, [r0, #14]
 80085a6:	6183      	str	r3, [r0, #24]
 80085a8:	4619      	mov	r1, r3
 80085aa:	2208      	movs	r2, #8
 80085ac:	305c      	adds	r0, #92	@ 0x5c
 80085ae:	f000 ffb9 	bl	8009524 <memset>
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <std+0x58>)
 80085b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80085b6:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <std+0x5c>)
 80085b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085ba:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <std+0x60>)
 80085bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085be:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <std+0x64>)
 80085c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80085c2:	4b0d      	ldr	r3, [pc, #52]	@ (80085f8 <std+0x68>)
 80085c4:	6224      	str	r4, [r4, #32]
 80085c6:	429c      	cmp	r4, r3
 80085c8:	d006      	beq.n	80085d8 <std+0x48>
 80085ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085ce:	4294      	cmp	r4, r2
 80085d0:	d002      	beq.n	80085d8 <std+0x48>
 80085d2:	33d0      	adds	r3, #208	@ 0xd0
 80085d4:	429c      	cmp	r4, r3
 80085d6:	d105      	bne.n	80085e4 <std+0x54>
 80085d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e0:	f001 b81c 	b.w	800961c <__retarget_lock_init_recursive>
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	bf00      	nop
 80085e8:	08008505 	.word	0x08008505
 80085ec:	0800852b 	.word	0x0800852b
 80085f0:	08008563 	.word	0x08008563
 80085f4:	08008587 	.word	0x08008587
 80085f8:	20000744 	.word	0x20000744

080085fc <stdio_exit_handler>:
 80085fc:	4a02      	ldr	r2, [pc, #8]	@ (8008608 <stdio_exit_handler+0xc>)
 80085fe:	4903      	ldr	r1, [pc, #12]	@ (800860c <stdio_exit_handler+0x10>)
 8008600:	4803      	ldr	r0, [pc, #12]	@ (8008610 <stdio_exit_handler+0x14>)
 8008602:	f000 beef 	b.w	80093e4 <_fwalk_sglue>
 8008606:	bf00      	nop
 8008608:	20000024 	.word	0x20000024
 800860c:	0800b859 	.word	0x0800b859
 8008610:	200001a0 	.word	0x200001a0

08008614 <cleanup_stdio>:
 8008614:	6841      	ldr	r1, [r0, #4]
 8008616:	4b0c      	ldr	r3, [pc, #48]	@ (8008648 <cleanup_stdio+0x34>)
 8008618:	4299      	cmp	r1, r3
 800861a:	b510      	push	{r4, lr}
 800861c:	4604      	mov	r4, r0
 800861e:	d001      	beq.n	8008624 <cleanup_stdio+0x10>
 8008620:	f003 f91a 	bl	800b858 <_fflush_r>
 8008624:	68a1      	ldr	r1, [r4, #8]
 8008626:	4b09      	ldr	r3, [pc, #36]	@ (800864c <cleanup_stdio+0x38>)
 8008628:	4299      	cmp	r1, r3
 800862a:	d002      	beq.n	8008632 <cleanup_stdio+0x1e>
 800862c:	4620      	mov	r0, r4
 800862e:	f003 f913 	bl	800b858 <_fflush_r>
 8008632:	68e1      	ldr	r1, [r4, #12]
 8008634:	4b06      	ldr	r3, [pc, #24]	@ (8008650 <cleanup_stdio+0x3c>)
 8008636:	4299      	cmp	r1, r3
 8008638:	d004      	beq.n	8008644 <cleanup_stdio+0x30>
 800863a:	4620      	mov	r0, r4
 800863c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008640:	f003 b90a 	b.w	800b858 <_fflush_r>
 8008644:	bd10      	pop	{r4, pc}
 8008646:	bf00      	nop
 8008648:	20000744 	.word	0x20000744
 800864c:	200007ac 	.word	0x200007ac
 8008650:	20000814 	.word	0x20000814

08008654 <global_stdio_init.part.0>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4b0b      	ldr	r3, [pc, #44]	@ (8008684 <global_stdio_init.part.0+0x30>)
 8008658:	4c0b      	ldr	r4, [pc, #44]	@ (8008688 <global_stdio_init.part.0+0x34>)
 800865a:	4a0c      	ldr	r2, [pc, #48]	@ (800868c <global_stdio_init.part.0+0x38>)
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	4620      	mov	r0, r4
 8008660:	2200      	movs	r2, #0
 8008662:	2104      	movs	r1, #4
 8008664:	f7ff ff94 	bl	8008590 <std>
 8008668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800866c:	2201      	movs	r2, #1
 800866e:	2109      	movs	r1, #9
 8008670:	f7ff ff8e 	bl	8008590 <std>
 8008674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008678:	2202      	movs	r2, #2
 800867a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800867e:	2112      	movs	r1, #18
 8008680:	f7ff bf86 	b.w	8008590 <std>
 8008684:	2000087c 	.word	0x2000087c
 8008688:	20000744 	.word	0x20000744
 800868c:	080085fd 	.word	0x080085fd

08008690 <__sfp_lock_acquire>:
 8008690:	4801      	ldr	r0, [pc, #4]	@ (8008698 <__sfp_lock_acquire+0x8>)
 8008692:	f000 bfc4 	b.w	800961e <__retarget_lock_acquire_recursive>
 8008696:	bf00      	nop
 8008698:	20000885 	.word	0x20000885

0800869c <__sfp_lock_release>:
 800869c:	4801      	ldr	r0, [pc, #4]	@ (80086a4 <__sfp_lock_release+0x8>)
 800869e:	f000 bfbf 	b.w	8009620 <__retarget_lock_release_recursive>
 80086a2:	bf00      	nop
 80086a4:	20000885 	.word	0x20000885

080086a8 <__sinit>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	4604      	mov	r4, r0
 80086ac:	f7ff fff0 	bl	8008690 <__sfp_lock_acquire>
 80086b0:	6a23      	ldr	r3, [r4, #32]
 80086b2:	b11b      	cbz	r3, 80086bc <__sinit+0x14>
 80086b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b8:	f7ff bff0 	b.w	800869c <__sfp_lock_release>
 80086bc:	4b04      	ldr	r3, [pc, #16]	@ (80086d0 <__sinit+0x28>)
 80086be:	6223      	str	r3, [r4, #32]
 80086c0:	4b04      	ldr	r3, [pc, #16]	@ (80086d4 <__sinit+0x2c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f5      	bne.n	80086b4 <__sinit+0xc>
 80086c8:	f7ff ffc4 	bl	8008654 <global_stdio_init.part.0>
 80086cc:	e7f2      	b.n	80086b4 <__sinit+0xc>
 80086ce:	bf00      	nop
 80086d0:	08008615 	.word	0x08008615
 80086d4:	2000087c 	.word	0x2000087c

080086d8 <sulp>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	4604      	mov	r4, r0
 80086dc:	460d      	mov	r5, r1
 80086de:	ec45 4b10 	vmov	d0, r4, r5
 80086e2:	4616      	mov	r6, r2
 80086e4:	f003 fc60 	bl	800bfa8 <__ulp>
 80086e8:	ec51 0b10 	vmov	r0, r1, d0
 80086ec:	b17e      	cbz	r6, 800870e <sulp+0x36>
 80086ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80086f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd09      	ble.n	800870e <sulp+0x36>
 80086fa:	051b      	lsls	r3, r3, #20
 80086fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008700:	2400      	movs	r4, #0
 8008702:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008706:	4622      	mov	r2, r4
 8008708:	462b      	mov	r3, r5
 800870a:	f7f7 ff9d 	bl	8000648 <__aeabi_dmul>
 800870e:	ec41 0b10 	vmov	d0, r0, r1
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	0000      	movs	r0, r0
	...

08008718 <_strtod_l>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	b09f      	sub	sp, #124	@ 0x7c
 800871e:	460c      	mov	r4, r1
 8008720:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008722:	2200      	movs	r2, #0
 8008724:	921a      	str	r2, [sp, #104]	@ 0x68
 8008726:	9005      	str	r0, [sp, #20]
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	f04f 0b00 	mov.w	fp, #0
 8008730:	460a      	mov	r2, r1
 8008732:	9219      	str	r2, [sp, #100]	@ 0x64
 8008734:	7811      	ldrb	r1, [r2, #0]
 8008736:	292b      	cmp	r1, #43	@ 0x2b
 8008738:	d04a      	beq.n	80087d0 <_strtod_l+0xb8>
 800873a:	d838      	bhi.n	80087ae <_strtod_l+0x96>
 800873c:	290d      	cmp	r1, #13
 800873e:	d832      	bhi.n	80087a6 <_strtod_l+0x8e>
 8008740:	2908      	cmp	r1, #8
 8008742:	d832      	bhi.n	80087aa <_strtod_l+0x92>
 8008744:	2900      	cmp	r1, #0
 8008746:	d03b      	beq.n	80087c0 <_strtod_l+0xa8>
 8008748:	2200      	movs	r2, #0
 800874a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800874c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800874e:	782a      	ldrb	r2, [r5, #0]
 8008750:	2a30      	cmp	r2, #48	@ 0x30
 8008752:	f040 80b3 	bne.w	80088bc <_strtod_l+0x1a4>
 8008756:	786a      	ldrb	r2, [r5, #1]
 8008758:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800875c:	2a58      	cmp	r2, #88	@ 0x58
 800875e:	d16e      	bne.n	800883e <_strtod_l+0x126>
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	ab1a      	add	r3, sp, #104	@ 0x68
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	4a8e      	ldr	r2, [pc, #568]	@ (80089a4 <_strtod_l+0x28c>)
 800876c:	9805      	ldr	r0, [sp, #20]
 800876e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008770:	a919      	add	r1, sp, #100	@ 0x64
 8008772:	f001 fe73 	bl	800a45c <__gethex>
 8008776:	f010 060f 	ands.w	r6, r0, #15
 800877a:	4604      	mov	r4, r0
 800877c:	d005      	beq.n	800878a <_strtod_l+0x72>
 800877e:	2e06      	cmp	r6, #6
 8008780:	d128      	bne.n	80087d4 <_strtod_l+0xbc>
 8008782:	3501      	adds	r5, #1
 8008784:	2300      	movs	r3, #0
 8008786:	9519      	str	r5, [sp, #100]	@ 0x64
 8008788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800878a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 858e 	bne.w	80092ae <_strtod_l+0xb96>
 8008792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008794:	b1cb      	cbz	r3, 80087ca <_strtod_l+0xb2>
 8008796:	4652      	mov	r2, sl
 8008798:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800879c:	ec43 2b10 	vmov	d0, r2, r3
 80087a0:	b01f      	add	sp, #124	@ 0x7c
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	2920      	cmp	r1, #32
 80087a8:	d1ce      	bne.n	8008748 <_strtod_l+0x30>
 80087aa:	3201      	adds	r2, #1
 80087ac:	e7c1      	b.n	8008732 <_strtod_l+0x1a>
 80087ae:	292d      	cmp	r1, #45	@ 0x2d
 80087b0:	d1ca      	bne.n	8008748 <_strtod_l+0x30>
 80087b2:	2101      	movs	r1, #1
 80087b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087b6:	1c51      	adds	r1, r2, #1
 80087b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80087ba:	7852      	ldrb	r2, [r2, #1]
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d1c5      	bne.n	800874c <_strtod_l+0x34>
 80087c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 8570 	bne.w	80092aa <_strtod_l+0xb92>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	e7e5      	b.n	800879c <_strtod_l+0x84>
 80087d0:	2100      	movs	r1, #0
 80087d2:	e7ef      	b.n	80087b4 <_strtod_l+0x9c>
 80087d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087d6:	b13a      	cbz	r2, 80087e8 <_strtod_l+0xd0>
 80087d8:	2135      	movs	r1, #53	@ 0x35
 80087da:	a81c      	add	r0, sp, #112	@ 0x70
 80087dc:	f003 fcde 	bl	800c19c <__copybits>
 80087e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	f003 f8ac 	bl	800b940 <_Bfree>
 80087e8:	3e01      	subs	r6, #1
 80087ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087ec:	2e04      	cmp	r6, #4
 80087ee:	d806      	bhi.n	80087fe <_strtod_l+0xe6>
 80087f0:	e8df f006 	tbb	[pc, r6]
 80087f4:	201d0314 	.word	0x201d0314
 80087f8:	14          	.byte	0x14
 80087f9:	00          	.byte	0x00
 80087fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80087fe:	05e1      	lsls	r1, r4, #23
 8008800:	bf48      	it	mi
 8008802:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800880a:	0d1b      	lsrs	r3, r3, #20
 800880c:	051b      	lsls	r3, r3, #20
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1bb      	bne.n	800878a <_strtod_l+0x72>
 8008812:	f000 fed9 	bl	80095c8 <__errno>
 8008816:	2322      	movs	r3, #34	@ 0x22
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	e7b6      	b.n	800878a <_strtod_l+0x72>
 800881c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008820:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008824:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008828:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800882c:	e7e7      	b.n	80087fe <_strtod_l+0xe6>
 800882e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80089ac <_strtod_l+0x294>
 8008832:	e7e4      	b.n	80087fe <_strtod_l+0xe6>
 8008834:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008838:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800883c:	e7df      	b.n	80087fe <_strtod_l+0xe6>
 800883e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	9219      	str	r2, [sp, #100]	@ 0x64
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	2b30      	cmp	r3, #48	@ 0x30
 8008848:	d0f9      	beq.n	800883e <_strtod_l+0x126>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d09d      	beq.n	800878a <_strtod_l+0x72>
 800884e:	2301      	movs	r3, #1
 8008850:	9309      	str	r3, [sp, #36]	@ 0x24
 8008852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008854:	930c      	str	r3, [sp, #48]	@ 0x30
 8008856:	2300      	movs	r3, #0
 8008858:	9308      	str	r3, [sp, #32]
 800885a:	930a      	str	r3, [sp, #40]	@ 0x28
 800885c:	461f      	mov	r7, r3
 800885e:	220a      	movs	r2, #10
 8008860:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008862:	7805      	ldrb	r5, [r0, #0]
 8008864:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008868:	b2d9      	uxtb	r1, r3
 800886a:	2909      	cmp	r1, #9
 800886c:	d928      	bls.n	80088c0 <_strtod_l+0x1a8>
 800886e:	494e      	ldr	r1, [pc, #312]	@ (80089a8 <_strtod_l+0x290>)
 8008870:	2201      	movs	r2, #1
 8008872:	f000 fe45 	bl	8009500 <strncmp>
 8008876:	2800      	cmp	r0, #0
 8008878:	d032      	beq.n	80088e0 <_strtod_l+0x1c8>
 800887a:	2000      	movs	r0, #0
 800887c:	462a      	mov	r2, r5
 800887e:	4681      	mov	r9, r0
 8008880:	463d      	mov	r5, r7
 8008882:	4603      	mov	r3, r0
 8008884:	2a65      	cmp	r2, #101	@ 0x65
 8008886:	d001      	beq.n	800888c <_strtod_l+0x174>
 8008888:	2a45      	cmp	r2, #69	@ 0x45
 800888a:	d114      	bne.n	80088b6 <_strtod_l+0x19e>
 800888c:	b91d      	cbnz	r5, 8008896 <_strtod_l+0x17e>
 800888e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008890:	4302      	orrs	r2, r0
 8008892:	d095      	beq.n	80087c0 <_strtod_l+0xa8>
 8008894:	2500      	movs	r5, #0
 8008896:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008898:	1c62      	adds	r2, r4, #1
 800889a:	9219      	str	r2, [sp, #100]	@ 0x64
 800889c:	7862      	ldrb	r2, [r4, #1]
 800889e:	2a2b      	cmp	r2, #43	@ 0x2b
 80088a0:	d077      	beq.n	8008992 <_strtod_l+0x27a>
 80088a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80088a4:	d07b      	beq.n	800899e <_strtod_l+0x286>
 80088a6:	f04f 0c00 	mov.w	ip, #0
 80088aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80088ae:	2909      	cmp	r1, #9
 80088b0:	f240 8082 	bls.w	80089b8 <_strtod_l+0x2a0>
 80088b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80088b6:	f04f 0800 	mov.w	r8, #0
 80088ba:	e0a2      	b.n	8008a02 <_strtod_l+0x2ea>
 80088bc:	2300      	movs	r3, #0
 80088be:	e7c7      	b.n	8008850 <_strtod_l+0x138>
 80088c0:	2f08      	cmp	r7, #8
 80088c2:	bfd5      	itete	le
 80088c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80088c6:	9908      	ldrgt	r1, [sp, #32]
 80088c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80088cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80088d0:	f100 0001 	add.w	r0, r0, #1
 80088d4:	bfd4      	ite	le
 80088d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80088d8:	9308      	strgt	r3, [sp, #32]
 80088da:	3701      	adds	r7, #1
 80088dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80088de:	e7bf      	b.n	8008860 <_strtod_l+0x148>
 80088e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80088e6:	785a      	ldrb	r2, [r3, #1]
 80088e8:	b37f      	cbz	r7, 800894a <_strtod_l+0x232>
 80088ea:	4681      	mov	r9, r0
 80088ec:	463d      	mov	r5, r7
 80088ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80088f2:	2b09      	cmp	r3, #9
 80088f4:	d912      	bls.n	800891c <_strtod_l+0x204>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7c4      	b.n	8008884 <_strtod_l+0x16c>
 80088fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008900:	785a      	ldrb	r2, [r3, #1]
 8008902:	3001      	adds	r0, #1
 8008904:	2a30      	cmp	r2, #48	@ 0x30
 8008906:	d0f8      	beq.n	80088fa <_strtod_l+0x1e2>
 8008908:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800890c:	2b08      	cmp	r3, #8
 800890e:	f200 84d3 	bhi.w	80092b8 <_strtod_l+0xba0>
 8008912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008914:	930c      	str	r3, [sp, #48]	@ 0x30
 8008916:	4681      	mov	r9, r0
 8008918:	2000      	movs	r0, #0
 800891a:	4605      	mov	r5, r0
 800891c:	3a30      	subs	r2, #48	@ 0x30
 800891e:	f100 0301 	add.w	r3, r0, #1
 8008922:	d02a      	beq.n	800897a <_strtod_l+0x262>
 8008924:	4499      	add	r9, r3
 8008926:	eb00 0c05 	add.w	ip, r0, r5
 800892a:	462b      	mov	r3, r5
 800892c:	210a      	movs	r1, #10
 800892e:	4563      	cmp	r3, ip
 8008930:	d10d      	bne.n	800894e <_strtod_l+0x236>
 8008932:	1c69      	adds	r1, r5, #1
 8008934:	4401      	add	r1, r0
 8008936:	4428      	add	r0, r5
 8008938:	2808      	cmp	r0, #8
 800893a:	dc16      	bgt.n	800896a <_strtod_l+0x252>
 800893c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800893e:	230a      	movs	r3, #10
 8008940:	fb03 2300 	mla	r3, r3, r0, r2
 8008944:	930a      	str	r3, [sp, #40]	@ 0x28
 8008946:	2300      	movs	r3, #0
 8008948:	e018      	b.n	800897c <_strtod_l+0x264>
 800894a:	4638      	mov	r0, r7
 800894c:	e7da      	b.n	8008904 <_strtod_l+0x1ec>
 800894e:	2b08      	cmp	r3, #8
 8008950:	f103 0301 	add.w	r3, r3, #1
 8008954:	dc03      	bgt.n	800895e <_strtod_l+0x246>
 8008956:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008958:	434e      	muls	r6, r1
 800895a:	960a      	str	r6, [sp, #40]	@ 0x28
 800895c:	e7e7      	b.n	800892e <_strtod_l+0x216>
 800895e:	2b10      	cmp	r3, #16
 8008960:	bfde      	ittt	le
 8008962:	9e08      	ldrle	r6, [sp, #32]
 8008964:	434e      	mulle	r6, r1
 8008966:	9608      	strle	r6, [sp, #32]
 8008968:	e7e1      	b.n	800892e <_strtod_l+0x216>
 800896a:	280f      	cmp	r0, #15
 800896c:	dceb      	bgt.n	8008946 <_strtod_l+0x22e>
 800896e:	9808      	ldr	r0, [sp, #32]
 8008970:	230a      	movs	r3, #10
 8008972:	fb03 2300 	mla	r3, r3, r0, r2
 8008976:	9308      	str	r3, [sp, #32]
 8008978:	e7e5      	b.n	8008946 <_strtod_l+0x22e>
 800897a:	4629      	mov	r1, r5
 800897c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800897e:	1c50      	adds	r0, r2, #1
 8008980:	9019      	str	r0, [sp, #100]	@ 0x64
 8008982:	7852      	ldrb	r2, [r2, #1]
 8008984:	4618      	mov	r0, r3
 8008986:	460d      	mov	r5, r1
 8008988:	e7b1      	b.n	80088ee <_strtod_l+0x1d6>
 800898a:	f04f 0900 	mov.w	r9, #0
 800898e:	2301      	movs	r3, #1
 8008990:	e77d      	b.n	800888e <_strtod_l+0x176>
 8008992:	f04f 0c00 	mov.w	ip, #0
 8008996:	1ca2      	adds	r2, r4, #2
 8008998:	9219      	str	r2, [sp, #100]	@ 0x64
 800899a:	78a2      	ldrb	r2, [r4, #2]
 800899c:	e785      	b.n	80088aa <_strtod_l+0x192>
 800899e:	f04f 0c01 	mov.w	ip, #1
 80089a2:	e7f8      	b.n	8008996 <_strtod_l+0x27e>
 80089a4:	0800cec4 	.word	0x0800cec4
 80089a8:	0800ceab 	.word	0x0800ceab
 80089ac:	7ff00000 	.word	0x7ff00000
 80089b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089b2:	1c51      	adds	r1, r2, #1
 80089b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80089b6:	7852      	ldrb	r2, [r2, #1]
 80089b8:	2a30      	cmp	r2, #48	@ 0x30
 80089ba:	d0f9      	beq.n	80089b0 <_strtod_l+0x298>
 80089bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80089c0:	2908      	cmp	r1, #8
 80089c2:	f63f af78 	bhi.w	80088b6 <_strtod_l+0x19e>
 80089c6:	3a30      	subs	r2, #48	@ 0x30
 80089c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089ce:	f04f 080a 	mov.w	r8, #10
 80089d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089d4:	1c56      	adds	r6, r2, #1
 80089d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80089d8:	7852      	ldrb	r2, [r2, #1]
 80089da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80089de:	f1be 0f09 	cmp.w	lr, #9
 80089e2:	d939      	bls.n	8008a58 <_strtod_l+0x340>
 80089e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80089e6:	1a76      	subs	r6, r6, r1
 80089e8:	2e08      	cmp	r6, #8
 80089ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80089ee:	dc03      	bgt.n	80089f8 <_strtod_l+0x2e0>
 80089f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80089f2:	4588      	cmp	r8, r1
 80089f4:	bfa8      	it	ge
 80089f6:	4688      	movge	r8, r1
 80089f8:	f1bc 0f00 	cmp.w	ip, #0
 80089fc:	d001      	beq.n	8008a02 <_strtod_l+0x2ea>
 80089fe:	f1c8 0800 	rsb	r8, r8, #0
 8008a02:	2d00      	cmp	r5, #0
 8008a04:	d14e      	bne.n	8008aa4 <_strtod_l+0x38c>
 8008a06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a08:	4308      	orrs	r0, r1
 8008a0a:	f47f aebe 	bne.w	800878a <_strtod_l+0x72>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f47f aed6 	bne.w	80087c0 <_strtod_l+0xa8>
 8008a14:	2a69      	cmp	r2, #105	@ 0x69
 8008a16:	d028      	beq.n	8008a6a <_strtod_l+0x352>
 8008a18:	dc25      	bgt.n	8008a66 <_strtod_l+0x34e>
 8008a1a:	2a49      	cmp	r2, #73	@ 0x49
 8008a1c:	d025      	beq.n	8008a6a <_strtod_l+0x352>
 8008a1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008a20:	f47f aece 	bne.w	80087c0 <_strtod_l+0xa8>
 8008a24:	499b      	ldr	r1, [pc, #620]	@ (8008c94 <_strtod_l+0x57c>)
 8008a26:	a819      	add	r0, sp, #100	@ 0x64
 8008a28:	f001 ff3a 	bl	800a8a0 <__match>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f43f aec7 	beq.w	80087c0 <_strtod_l+0xa8>
 8008a32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b28      	cmp	r3, #40	@ 0x28
 8008a38:	d12e      	bne.n	8008a98 <_strtod_l+0x380>
 8008a3a:	4997      	ldr	r1, [pc, #604]	@ (8008c98 <_strtod_l+0x580>)
 8008a3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a3e:	a819      	add	r0, sp, #100	@ 0x64
 8008a40:	f001 ff42 	bl	800a8c8 <__hexnan>
 8008a44:	2805      	cmp	r0, #5
 8008a46:	d127      	bne.n	8008a98 <_strtod_l+0x380>
 8008a48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008a4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008a52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008a56:	e698      	b.n	800878a <_strtod_l+0x72>
 8008a58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a5a:	fb08 2101 	mla	r1, r8, r1, r2
 8008a5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008a62:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a64:	e7b5      	b.n	80089d2 <_strtod_l+0x2ba>
 8008a66:	2a6e      	cmp	r2, #110	@ 0x6e
 8008a68:	e7da      	b.n	8008a20 <_strtod_l+0x308>
 8008a6a:	498c      	ldr	r1, [pc, #560]	@ (8008c9c <_strtod_l+0x584>)
 8008a6c:	a819      	add	r0, sp, #100	@ 0x64
 8008a6e:	f001 ff17 	bl	800a8a0 <__match>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f43f aea4 	beq.w	80087c0 <_strtod_l+0xa8>
 8008a78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a7a:	4989      	ldr	r1, [pc, #548]	@ (8008ca0 <_strtod_l+0x588>)
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	a819      	add	r0, sp, #100	@ 0x64
 8008a80:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a82:	f001 ff0d 	bl	800a8a0 <__match>
 8008a86:	b910      	cbnz	r0, 8008a8e <_strtod_l+0x376>
 8008a88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008cb0 <_strtod_l+0x598>
 8008a92:	f04f 0a00 	mov.w	sl, #0
 8008a96:	e678      	b.n	800878a <_strtod_l+0x72>
 8008a98:	4882      	ldr	r0, [pc, #520]	@ (8008ca4 <_strtod_l+0x58c>)
 8008a9a:	f000 fdd1 	bl	8009640 <nan>
 8008a9e:	ec5b ab10 	vmov	sl, fp, d0
 8008aa2:	e672      	b.n	800878a <_strtod_l+0x72>
 8008aa4:	eba8 0309 	sub.w	r3, r8, r9
 8008aa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	bf08      	it	eq
 8008ab0:	462f      	moveq	r7, r5
 8008ab2:	2d10      	cmp	r5, #16
 8008ab4:	462c      	mov	r4, r5
 8008ab6:	bfa8      	it	ge
 8008ab8:	2410      	movge	r4, #16
 8008aba:	f7f7 fd4b 	bl	8000554 <__aeabi_ui2d>
 8008abe:	2d09      	cmp	r5, #9
 8008ac0:	4682      	mov	sl, r0
 8008ac2:	468b      	mov	fp, r1
 8008ac4:	dc13      	bgt.n	8008aee <_strtod_l+0x3d6>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f43f ae5e 	beq.w	800878a <_strtod_l+0x72>
 8008ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad0:	dd78      	ble.n	8008bc4 <_strtod_l+0x4ac>
 8008ad2:	2b16      	cmp	r3, #22
 8008ad4:	dc5f      	bgt.n	8008b96 <_strtod_l+0x47e>
 8008ad6:	4974      	ldr	r1, [pc, #464]	@ (8008ca8 <_strtod_l+0x590>)
 8008ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	f7f7 fdb0 	bl	8000648 <__aeabi_dmul>
 8008ae8:	4682      	mov	sl, r0
 8008aea:	468b      	mov	fp, r1
 8008aec:	e64d      	b.n	800878a <_strtod_l+0x72>
 8008aee:	4b6e      	ldr	r3, [pc, #440]	@ (8008ca8 <_strtod_l+0x590>)
 8008af0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008af4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008af8:	f7f7 fda6 	bl	8000648 <__aeabi_dmul>
 8008afc:	4682      	mov	sl, r0
 8008afe:	9808      	ldr	r0, [sp, #32]
 8008b00:	468b      	mov	fp, r1
 8008b02:	f7f7 fd27 	bl	8000554 <__aeabi_ui2d>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	f7f7 fbe5 	bl	80002dc <__adddf3>
 8008b12:	2d0f      	cmp	r5, #15
 8008b14:	4682      	mov	sl, r0
 8008b16:	468b      	mov	fp, r1
 8008b18:	ddd5      	ble.n	8008ac6 <_strtod_l+0x3ae>
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	1b2c      	subs	r4, r5, r4
 8008b1e:	441c      	add	r4, r3
 8008b20:	2c00      	cmp	r4, #0
 8008b22:	f340 8096 	ble.w	8008c52 <_strtod_l+0x53a>
 8008b26:	f014 030f 	ands.w	r3, r4, #15
 8008b2a:	d00a      	beq.n	8008b42 <_strtod_l+0x42a>
 8008b2c:	495e      	ldr	r1, [pc, #376]	@ (8008ca8 <_strtod_l+0x590>)
 8008b2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b32:	4652      	mov	r2, sl
 8008b34:	465b      	mov	r3, fp
 8008b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b3a:	f7f7 fd85 	bl	8000648 <__aeabi_dmul>
 8008b3e:	4682      	mov	sl, r0
 8008b40:	468b      	mov	fp, r1
 8008b42:	f034 040f 	bics.w	r4, r4, #15
 8008b46:	d073      	beq.n	8008c30 <_strtod_l+0x518>
 8008b48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008b4c:	dd48      	ble.n	8008be0 <_strtod_l+0x4c8>
 8008b4e:	2400      	movs	r4, #0
 8008b50:	46a0      	mov	r8, r4
 8008b52:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b54:	46a1      	mov	r9, r4
 8008b56:	9a05      	ldr	r2, [sp, #20]
 8008b58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008cb0 <_strtod_l+0x598>
 8008b5c:	2322      	movs	r3, #34	@ 0x22
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	f04f 0a00 	mov.w	sl, #0
 8008b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f43f ae0f 	beq.w	800878a <_strtod_l+0x72>
 8008b6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b6e:	9805      	ldr	r0, [sp, #20]
 8008b70:	f002 fee6 	bl	800b940 <_Bfree>
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	4649      	mov	r1, r9
 8008b78:	f002 fee2 	bl	800b940 <_Bfree>
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	4641      	mov	r1, r8
 8008b80:	f002 fede 	bl	800b940 <_Bfree>
 8008b84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b86:	9805      	ldr	r0, [sp, #20]
 8008b88:	f002 feda 	bl	800b940 <_Bfree>
 8008b8c:	9805      	ldr	r0, [sp, #20]
 8008b8e:	4621      	mov	r1, r4
 8008b90:	f002 fed6 	bl	800b940 <_Bfree>
 8008b94:	e5f9      	b.n	800878a <_strtod_l+0x72>
 8008b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	dbbc      	blt.n	8008b1a <_strtod_l+0x402>
 8008ba0:	4c41      	ldr	r4, [pc, #260]	@ (8008ca8 <_strtod_l+0x590>)
 8008ba2:	f1c5 050f 	rsb	r5, r5, #15
 8008ba6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008baa:	4652      	mov	r2, sl
 8008bac:	465b      	mov	r3, fp
 8008bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb2:	f7f7 fd49 	bl	8000648 <__aeabi_dmul>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb8:	1b5d      	subs	r5, r3, r5
 8008bba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008bc2:	e78f      	b.n	8008ae4 <_strtod_l+0x3cc>
 8008bc4:	3316      	adds	r3, #22
 8008bc6:	dba8      	blt.n	8008b1a <_strtod_l+0x402>
 8008bc8:	4b37      	ldr	r3, [pc, #220]	@ (8008ca8 <_strtod_l+0x590>)
 8008bca:	eba9 0808 	sub.w	r8, r9, r8
 8008bce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008bd2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	4659      	mov	r1, fp
 8008bda:	f7f7 fe5f 	bl	800089c <__aeabi_ddiv>
 8008bde:	e783      	b.n	8008ae8 <_strtod_l+0x3d0>
 8008be0:	4b32      	ldr	r3, [pc, #200]	@ (8008cac <_strtod_l+0x594>)
 8008be2:	9308      	str	r3, [sp, #32]
 8008be4:	2300      	movs	r3, #0
 8008be6:	1124      	asrs	r4, r4, #4
 8008be8:	4650      	mov	r0, sl
 8008bea:	4659      	mov	r1, fp
 8008bec:	461e      	mov	r6, r3
 8008bee:	2c01      	cmp	r4, #1
 8008bf0:	dc21      	bgt.n	8008c36 <_strtod_l+0x51e>
 8008bf2:	b10b      	cbz	r3, 8008bf8 <_strtod_l+0x4e0>
 8008bf4:	4682      	mov	sl, r0
 8008bf6:	468b      	mov	fp, r1
 8008bf8:	492c      	ldr	r1, [pc, #176]	@ (8008cac <_strtod_l+0x594>)
 8008bfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008bfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008c02:	4652      	mov	r2, sl
 8008c04:	465b      	mov	r3, fp
 8008c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c0a:	f7f7 fd1d 	bl	8000648 <__aeabi_dmul>
 8008c0e:	4b28      	ldr	r3, [pc, #160]	@ (8008cb0 <_strtod_l+0x598>)
 8008c10:	460a      	mov	r2, r1
 8008c12:	400b      	ands	r3, r1
 8008c14:	4927      	ldr	r1, [pc, #156]	@ (8008cb4 <_strtod_l+0x59c>)
 8008c16:	428b      	cmp	r3, r1
 8008c18:	4682      	mov	sl, r0
 8008c1a:	d898      	bhi.n	8008b4e <_strtod_l+0x436>
 8008c1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008c20:	428b      	cmp	r3, r1
 8008c22:	bf86      	itte	hi
 8008c24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008cb8 <_strtod_l+0x5a0>
 8008c28:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008c2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008c30:	2300      	movs	r3, #0
 8008c32:	9308      	str	r3, [sp, #32]
 8008c34:	e07a      	b.n	8008d2c <_strtod_l+0x614>
 8008c36:	07e2      	lsls	r2, r4, #31
 8008c38:	d505      	bpl.n	8008c46 <_strtod_l+0x52e>
 8008c3a:	9b08      	ldr	r3, [sp, #32]
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fd02 	bl	8000648 <__aeabi_dmul>
 8008c44:	2301      	movs	r3, #1
 8008c46:	9a08      	ldr	r2, [sp, #32]
 8008c48:	3208      	adds	r2, #8
 8008c4a:	3601      	adds	r6, #1
 8008c4c:	1064      	asrs	r4, r4, #1
 8008c4e:	9208      	str	r2, [sp, #32]
 8008c50:	e7cd      	b.n	8008bee <_strtod_l+0x4d6>
 8008c52:	d0ed      	beq.n	8008c30 <_strtod_l+0x518>
 8008c54:	4264      	negs	r4, r4
 8008c56:	f014 020f 	ands.w	r2, r4, #15
 8008c5a:	d00a      	beq.n	8008c72 <_strtod_l+0x55a>
 8008c5c:	4b12      	ldr	r3, [pc, #72]	@ (8008ca8 <_strtod_l+0x590>)
 8008c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c62:	4650      	mov	r0, sl
 8008c64:	4659      	mov	r1, fp
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fe17 	bl	800089c <__aeabi_ddiv>
 8008c6e:	4682      	mov	sl, r0
 8008c70:	468b      	mov	fp, r1
 8008c72:	1124      	asrs	r4, r4, #4
 8008c74:	d0dc      	beq.n	8008c30 <_strtod_l+0x518>
 8008c76:	2c1f      	cmp	r4, #31
 8008c78:	dd20      	ble.n	8008cbc <_strtod_l+0x5a4>
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	46a0      	mov	r8, r4
 8008c7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c80:	46a1      	mov	r9, r4
 8008c82:	9a05      	ldr	r2, [sp, #20]
 8008c84:	2322      	movs	r3, #34	@ 0x22
 8008c86:	f04f 0a00 	mov.w	sl, #0
 8008c8a:	f04f 0b00 	mov.w	fp, #0
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	e768      	b.n	8008b64 <_strtod_l+0x44c>
 8008c92:	bf00      	nop
 8008c94:	0800ce81 	.word	0x0800ce81
 8008c98:	0800ceb0 	.word	0x0800ceb0
 8008c9c:	0800ce79 	.word	0x0800ce79
 8008ca0:	0800d00c 	.word	0x0800d00c
 8008ca4:	0800d2b3 	.word	0x0800d2b3
 8008ca8:	0800d1b0 	.word	0x0800d1b0
 8008cac:	0800d188 	.word	0x0800d188
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	7ca00000 	.word	0x7ca00000
 8008cb8:	7fefffff 	.word	0x7fefffff
 8008cbc:	f014 0310 	ands.w	r3, r4, #16
 8008cc0:	bf18      	it	ne
 8008cc2:	236a      	movne	r3, #106	@ 0x6a
 8008cc4:	4ea9      	ldr	r6, [pc, #676]	@ (8008f6c <_strtod_l+0x854>)
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	4650      	mov	r0, sl
 8008cca:	4659      	mov	r1, fp
 8008ccc:	2300      	movs	r3, #0
 8008cce:	07e2      	lsls	r2, r4, #31
 8008cd0:	d504      	bpl.n	8008cdc <_strtod_l+0x5c4>
 8008cd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cd6:	f7f7 fcb7 	bl	8000648 <__aeabi_dmul>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	1064      	asrs	r4, r4, #1
 8008cde:	f106 0608 	add.w	r6, r6, #8
 8008ce2:	d1f4      	bne.n	8008cce <_strtod_l+0x5b6>
 8008ce4:	b10b      	cbz	r3, 8008cea <_strtod_l+0x5d2>
 8008ce6:	4682      	mov	sl, r0
 8008ce8:	468b      	mov	fp, r1
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	b1b3      	cbz	r3, 8008d1c <_strtod_l+0x604>
 8008cee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008cf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	4659      	mov	r1, fp
 8008cfa:	dd0f      	ble.n	8008d1c <_strtod_l+0x604>
 8008cfc:	2b1f      	cmp	r3, #31
 8008cfe:	dd55      	ble.n	8008dac <_strtod_l+0x694>
 8008d00:	2b34      	cmp	r3, #52	@ 0x34
 8008d02:	bfde      	ittt	le
 8008d04:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008d08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008d0c:	4093      	lslle	r3, r2
 8008d0e:	f04f 0a00 	mov.w	sl, #0
 8008d12:	bfcc      	ite	gt
 8008d14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008d18:	ea03 0b01 	andle.w	fp, r3, r1
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4650      	mov	r0, sl
 8008d22:	4659      	mov	r1, fp
 8008d24:	f7f7 fef8 	bl	8000b18 <__aeabi_dcmpeq>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1a6      	bne.n	8008c7a <_strtod_l+0x562>
 8008d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008d32:	9805      	ldr	r0, [sp, #20]
 8008d34:	462b      	mov	r3, r5
 8008d36:	463a      	mov	r2, r7
 8008d38:	f002 fe6a 	bl	800ba10 <__s2b>
 8008d3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f af05 	beq.w	8008b4e <_strtod_l+0x436>
 8008d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	eba9 0308 	sub.w	r3, r9, r8
 8008d4c:	bfa8      	it	ge
 8008d4e:	2300      	movge	r3, #0
 8008d50:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d52:	2400      	movs	r4, #0
 8008d54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d58:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d5a:	46a0      	mov	r8, r4
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d5e:	9805      	ldr	r0, [sp, #20]
 8008d60:	6859      	ldr	r1, [r3, #4]
 8008d62:	f002 fdad 	bl	800b8c0 <_Balloc>
 8008d66:	4681      	mov	r9, r0
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f43f aef4 	beq.w	8008b56 <_strtod_l+0x43e>
 8008d6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	3202      	adds	r2, #2
 8008d74:	f103 010c 	add.w	r1, r3, #12
 8008d78:	0092      	lsls	r2, r2, #2
 8008d7a:	300c      	adds	r0, #12
 8008d7c:	f000 fc51 	bl	8009622 <memcpy>
 8008d80:	ec4b ab10 	vmov	d0, sl, fp
 8008d84:	9805      	ldr	r0, [sp, #20]
 8008d86:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d88:	a91b      	add	r1, sp, #108	@ 0x6c
 8008d8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008d8e:	f003 f97b 	bl	800c088 <__d2b>
 8008d92:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d94:	2800      	cmp	r0, #0
 8008d96:	f43f aede 	beq.w	8008b56 <_strtod_l+0x43e>
 8008d9a:	9805      	ldr	r0, [sp, #20]
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	f002 fecd 	bl	800bb3c <__i2b>
 8008da2:	4680      	mov	r8, r0
 8008da4:	b948      	cbnz	r0, 8008dba <_strtod_l+0x6a2>
 8008da6:	f04f 0800 	mov.w	r8, #0
 8008daa:	e6d4      	b.n	8008b56 <_strtod_l+0x43e>
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	ea03 0a0a 	and.w	sl, r3, sl
 8008db8:	e7b0      	b.n	8008d1c <_strtod_l+0x604>
 8008dba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008dbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	bfab      	itete	ge
 8008dc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008dc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008dc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008dc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008dca:	bfac      	ite	ge
 8008dcc:	18ef      	addge	r7, r5, r3
 8008dce:	1b5e      	sublt	r6, r3, r5
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	1aed      	subs	r5, r5, r3
 8008dd4:	4415      	add	r5, r2
 8008dd6:	4b66      	ldr	r3, [pc, #408]	@ (8008f70 <_strtod_l+0x858>)
 8008dd8:	3d01      	subs	r5, #1
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008de0:	da50      	bge.n	8008e84 <_strtod_l+0x76c>
 8008de2:	1b5b      	subs	r3, r3, r5
 8008de4:	2b1f      	cmp	r3, #31
 8008de6:	eba2 0203 	sub.w	r2, r2, r3
 8008dea:	f04f 0101 	mov.w	r1, #1
 8008dee:	dc3d      	bgt.n	8008e6c <_strtod_l+0x754>
 8008df0:	fa01 f303 	lsl.w	r3, r1, r3
 8008df4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008df6:	2300      	movs	r3, #0
 8008df8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008dfa:	18bd      	adds	r5, r7, r2
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	42af      	cmp	r7, r5
 8008e00:	4416      	add	r6, r2
 8008e02:	441e      	add	r6, r3
 8008e04:	463b      	mov	r3, r7
 8008e06:	bfa8      	it	ge
 8008e08:	462b      	movge	r3, r5
 8008e0a:	42b3      	cmp	r3, r6
 8008e0c:	bfa8      	it	ge
 8008e0e:	4633      	movge	r3, r6
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bfc2      	ittt	gt
 8008e14:	1aed      	subgt	r5, r5, r3
 8008e16:	1af6      	subgt	r6, r6, r3
 8008e18:	1aff      	subgt	r7, r7, r3
 8008e1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dd16      	ble.n	8008e4e <_strtod_l+0x736>
 8008e20:	4641      	mov	r1, r8
 8008e22:	9805      	ldr	r0, [sp, #20]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f002 ff49 	bl	800bcbc <__pow5mult>
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d0ba      	beq.n	8008da6 <_strtod_l+0x68e>
 8008e30:	4601      	mov	r1, r0
 8008e32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e34:	9805      	ldr	r0, [sp, #20]
 8008e36:	f002 fe97 	bl	800bb68 <__multiply>
 8008e3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f43f ae8a 	beq.w	8008b56 <_strtod_l+0x43e>
 8008e42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e44:	9805      	ldr	r0, [sp, #20]
 8008e46:	f002 fd7b 	bl	800b940 <_Bfree>
 8008e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	dc1d      	bgt.n	8008e8e <_strtod_l+0x776>
 8008e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dd23      	ble.n	8008ea0 <_strtod_l+0x788>
 8008e58:	4649      	mov	r1, r9
 8008e5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e5c:	9805      	ldr	r0, [sp, #20]
 8008e5e:	f002 ff2d 	bl	800bcbc <__pow5mult>
 8008e62:	4681      	mov	r9, r0
 8008e64:	b9e0      	cbnz	r0, 8008ea0 <_strtod_l+0x788>
 8008e66:	f04f 0900 	mov.w	r9, #0
 8008e6a:	e674      	b.n	8008b56 <_strtod_l+0x43e>
 8008e6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008e70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008e74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008e78:	35e2      	adds	r5, #226	@ 0xe2
 8008e7a:	fa01 f305 	lsl.w	r3, r1, r5
 8008e7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008e82:	e7ba      	b.n	8008dfa <_strtod_l+0x6e2>
 8008e84:	2300      	movs	r3, #0
 8008e86:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e88:	2301      	movs	r3, #1
 8008e8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e8c:	e7b5      	b.n	8008dfa <_strtod_l+0x6e2>
 8008e8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e90:	9805      	ldr	r0, [sp, #20]
 8008e92:	462a      	mov	r2, r5
 8008e94:	f002 ff6c 	bl	800bd70 <__lshift>
 8008e98:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d1d9      	bne.n	8008e52 <_strtod_l+0x73a>
 8008e9e:	e65a      	b.n	8008b56 <_strtod_l+0x43e>
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	dd07      	ble.n	8008eb4 <_strtod_l+0x79c>
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	9805      	ldr	r0, [sp, #20]
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	f002 ff61 	bl	800bd70 <__lshift>
 8008eae:	4681      	mov	r9, r0
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d0d8      	beq.n	8008e66 <_strtod_l+0x74e>
 8008eb4:	2f00      	cmp	r7, #0
 8008eb6:	dd08      	ble.n	8008eca <_strtod_l+0x7b2>
 8008eb8:	4641      	mov	r1, r8
 8008eba:	9805      	ldr	r0, [sp, #20]
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	f002 ff57 	bl	800bd70 <__lshift>
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f43f ae46 	beq.w	8008b56 <_strtod_l+0x43e>
 8008eca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ecc:	9805      	ldr	r0, [sp, #20]
 8008ece:	464a      	mov	r2, r9
 8008ed0:	f002 ffd6 	bl	800be80 <__mdiff>
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f43f ae3d 	beq.w	8008b56 <_strtod_l+0x43e>
 8008edc:	68c3      	ldr	r3, [r0, #12]
 8008ede:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60c3      	str	r3, [r0, #12]
 8008ee4:	4641      	mov	r1, r8
 8008ee6:	f002 ffaf 	bl	800be48 <__mcmp>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	da46      	bge.n	8008f7c <_strtod_l+0x864>
 8008eee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ef4:	d16c      	bne.n	8008fd0 <_strtod_l+0x8b8>
 8008ef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d168      	bne.n	8008fd0 <_strtod_l+0x8b8>
 8008efe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f02:	0d1b      	lsrs	r3, r3, #20
 8008f04:	051b      	lsls	r3, r3, #20
 8008f06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f0a:	d961      	bls.n	8008fd0 <_strtod_l+0x8b8>
 8008f0c:	6963      	ldr	r3, [r4, #20]
 8008f0e:	b913      	cbnz	r3, 8008f16 <_strtod_l+0x7fe>
 8008f10:	6923      	ldr	r3, [r4, #16]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	dd5c      	ble.n	8008fd0 <_strtod_l+0x8b8>
 8008f16:	4621      	mov	r1, r4
 8008f18:	2201      	movs	r2, #1
 8008f1a:	9805      	ldr	r0, [sp, #20]
 8008f1c:	f002 ff28 	bl	800bd70 <__lshift>
 8008f20:	4641      	mov	r1, r8
 8008f22:	4604      	mov	r4, r0
 8008f24:	f002 ff90 	bl	800be48 <__mcmp>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	dd51      	ble.n	8008fd0 <_strtod_l+0x8b8>
 8008f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f30:	9a08      	ldr	r2, [sp, #32]
 8008f32:	0d1b      	lsrs	r3, r3, #20
 8008f34:	051b      	lsls	r3, r3, #20
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	d06b      	beq.n	8009012 <_strtod_l+0x8fa>
 8008f3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f3e:	d868      	bhi.n	8009012 <_strtod_l+0x8fa>
 8008f40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008f44:	f67f ae9d 	bls.w	8008c82 <_strtod_l+0x56a>
 8008f48:	4b0a      	ldr	r3, [pc, #40]	@ (8008f74 <_strtod_l+0x85c>)
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f7f7 fb7a 	bl	8000648 <__aeabi_dmul>
 8008f54:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <_strtod_l+0x860>)
 8008f56:	400b      	ands	r3, r1
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f47f ae05 	bne.w	8008b6c <_strtod_l+0x454>
 8008f62:	9a05      	ldr	r2, [sp, #20]
 8008f64:	2322      	movs	r3, #34	@ 0x22
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	e600      	b.n	8008b6c <_strtod_l+0x454>
 8008f6a:	bf00      	nop
 8008f6c:	0800ced8 	.word	0x0800ced8
 8008f70:	fffffc02 	.word	0xfffffc02
 8008f74:	39500000 	.word	0x39500000
 8008f78:	7ff00000 	.word	0x7ff00000
 8008f7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008f80:	d165      	bne.n	800904e <_strtod_l+0x936>
 8008f82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f88:	b35a      	cbz	r2, 8008fe2 <_strtod_l+0x8ca>
 8008f8a:	4a9f      	ldr	r2, [pc, #636]	@ (8009208 <_strtod_l+0xaf0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d12b      	bne.n	8008fe8 <_strtod_l+0x8d0>
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	4651      	mov	r1, sl
 8008f94:	b303      	cbz	r3, 8008fd8 <_strtod_l+0x8c0>
 8008f96:	4b9d      	ldr	r3, [pc, #628]	@ (800920c <_strtod_l+0xaf4>)
 8008f98:	465a      	mov	r2, fp
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fa4:	d81b      	bhi.n	8008fde <_strtod_l+0x8c6>
 8008fa6:	0d1b      	lsrs	r3, r3, #20
 8008fa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d119      	bne.n	8008fe8 <_strtod_l+0x8d0>
 8008fb4:	4b96      	ldr	r3, [pc, #600]	@ (8009210 <_strtod_l+0xaf8>)
 8008fb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d102      	bne.n	8008fc2 <_strtod_l+0x8aa>
 8008fbc:	3101      	adds	r1, #1
 8008fbe:	f43f adca 	beq.w	8008b56 <_strtod_l+0x43e>
 8008fc2:	4b92      	ldr	r3, [pc, #584]	@ (800920c <_strtod_l+0xaf4>)
 8008fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fc6:	401a      	ands	r2, r3
 8008fc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008fcc:	f04f 0a00 	mov.w	sl, #0
 8008fd0:	9b08      	ldr	r3, [sp, #32]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1b8      	bne.n	8008f48 <_strtod_l+0x830>
 8008fd6:	e5c9      	b.n	8008b6c <_strtod_l+0x454>
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fdc:	e7e8      	b.n	8008fb0 <_strtod_l+0x898>
 8008fde:	4613      	mov	r3, r2
 8008fe0:	e7e6      	b.n	8008fb0 <_strtod_l+0x898>
 8008fe2:	ea53 030a 	orrs.w	r3, r3, sl
 8008fe6:	d0a1      	beq.n	8008f2c <_strtod_l+0x814>
 8008fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fea:	b1db      	cbz	r3, 8009024 <_strtod_l+0x90c>
 8008fec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fee:	4213      	tst	r3, r2
 8008ff0:	d0ee      	beq.n	8008fd0 <_strtod_l+0x8b8>
 8008ff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ff4:	9a08      	ldr	r2, [sp, #32]
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	b1bb      	cbz	r3, 800902c <_strtod_l+0x914>
 8008ffc:	f7ff fb6c 	bl	80086d8 <sulp>
 8009000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009004:	ec53 2b10 	vmov	r2, r3, d0
 8009008:	f7f7 f968 	bl	80002dc <__adddf3>
 800900c:	4682      	mov	sl, r0
 800900e:	468b      	mov	fp, r1
 8009010:	e7de      	b.n	8008fd0 <_strtod_l+0x8b8>
 8009012:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009016:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800901a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800901e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009022:	e7d5      	b.n	8008fd0 <_strtod_l+0x8b8>
 8009024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009026:	ea13 0f0a 	tst.w	r3, sl
 800902a:	e7e1      	b.n	8008ff0 <_strtod_l+0x8d8>
 800902c:	f7ff fb54 	bl	80086d8 <sulp>
 8009030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009034:	ec53 2b10 	vmov	r2, r3, d0
 8009038:	f7f7 f94e 	bl	80002d8 <__aeabi_dsub>
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	f7f7 fd68 	bl	8000b18 <__aeabi_dcmpeq>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0c1      	beq.n	8008fd0 <_strtod_l+0x8b8>
 800904c:	e619      	b.n	8008c82 <_strtod_l+0x56a>
 800904e:	4641      	mov	r1, r8
 8009050:	4620      	mov	r0, r4
 8009052:	f003 f871 	bl	800c138 <__ratio>
 8009056:	ec57 6b10 	vmov	r6, r7, d0
 800905a:	2200      	movs	r2, #0
 800905c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 fd6c 	bl	8000b40 <__aeabi_dcmple>
 8009068:	2800      	cmp	r0, #0
 800906a:	d06f      	beq.n	800914c <_strtod_l+0xa34>
 800906c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d17a      	bne.n	8009168 <_strtod_l+0xa50>
 8009072:	f1ba 0f00 	cmp.w	sl, #0
 8009076:	d158      	bne.n	800912a <_strtod_l+0xa12>
 8009078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800907a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800907e:	2b00      	cmp	r3, #0
 8009080:	d15a      	bne.n	8009138 <_strtod_l+0xa20>
 8009082:	4b64      	ldr	r3, [pc, #400]	@ (8009214 <_strtod_l+0xafc>)
 8009084:	2200      	movs	r2, #0
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 800908e:	2800      	cmp	r0, #0
 8009090:	d159      	bne.n	8009146 <_strtod_l+0xa2e>
 8009092:	4630      	mov	r0, r6
 8009094:	4639      	mov	r1, r7
 8009096:	4b60      	ldr	r3, [pc, #384]	@ (8009218 <_strtod_l+0xb00>)
 8009098:	2200      	movs	r2, #0
 800909a:	f7f7 fad5 	bl	8000648 <__aeabi_dmul>
 800909e:	4606      	mov	r6, r0
 80090a0:	460f      	mov	r7, r1
 80090a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80090a6:	9606      	str	r6, [sp, #24]
 80090a8:	9307      	str	r3, [sp, #28]
 80090aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ae:	4d57      	ldr	r5, [pc, #348]	@ (800920c <_strtod_l+0xaf4>)
 80090b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090b6:	401d      	ands	r5, r3
 80090b8:	4b58      	ldr	r3, [pc, #352]	@ (800921c <_strtod_l+0xb04>)
 80090ba:	429d      	cmp	r5, r3
 80090bc:	f040 80b2 	bne.w	8009224 <_strtod_l+0xb0c>
 80090c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80090c6:	ec4b ab10 	vmov	d0, sl, fp
 80090ca:	f002 ff6d 	bl	800bfa8 <__ulp>
 80090ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090d2:	ec51 0b10 	vmov	r0, r1, d0
 80090d6:	f7f7 fab7 	bl	8000648 <__aeabi_dmul>
 80090da:	4652      	mov	r2, sl
 80090dc:	465b      	mov	r3, fp
 80090de:	f7f7 f8fd 	bl	80002dc <__adddf3>
 80090e2:	460b      	mov	r3, r1
 80090e4:	4949      	ldr	r1, [pc, #292]	@ (800920c <_strtod_l+0xaf4>)
 80090e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009220 <_strtod_l+0xb08>)
 80090e8:	4019      	ands	r1, r3
 80090ea:	4291      	cmp	r1, r2
 80090ec:	4682      	mov	sl, r0
 80090ee:	d942      	bls.n	8009176 <_strtod_l+0xa5e>
 80090f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090f2:	4b47      	ldr	r3, [pc, #284]	@ (8009210 <_strtod_l+0xaf8>)
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d103      	bne.n	8009100 <_strtod_l+0x9e8>
 80090f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090fa:	3301      	adds	r3, #1
 80090fc:	f43f ad2b 	beq.w	8008b56 <_strtod_l+0x43e>
 8009100:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009210 <_strtod_l+0xaf8>
 8009104:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	f002 fc18 	bl	800b940 <_Bfree>
 8009110:	9805      	ldr	r0, [sp, #20]
 8009112:	4649      	mov	r1, r9
 8009114:	f002 fc14 	bl	800b940 <_Bfree>
 8009118:	9805      	ldr	r0, [sp, #20]
 800911a:	4641      	mov	r1, r8
 800911c:	f002 fc10 	bl	800b940 <_Bfree>
 8009120:	9805      	ldr	r0, [sp, #20]
 8009122:	4621      	mov	r1, r4
 8009124:	f002 fc0c 	bl	800b940 <_Bfree>
 8009128:	e618      	b.n	8008d5c <_strtod_l+0x644>
 800912a:	f1ba 0f01 	cmp.w	sl, #1
 800912e:	d103      	bne.n	8009138 <_strtod_l+0xa20>
 8009130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009132:	2b00      	cmp	r3, #0
 8009134:	f43f ada5 	beq.w	8008c82 <_strtod_l+0x56a>
 8009138:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80091e8 <_strtod_l+0xad0>
 800913c:	4f35      	ldr	r7, [pc, #212]	@ (8009214 <_strtod_l+0xafc>)
 800913e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009142:	2600      	movs	r6, #0
 8009144:	e7b1      	b.n	80090aa <_strtod_l+0x992>
 8009146:	4f34      	ldr	r7, [pc, #208]	@ (8009218 <_strtod_l+0xb00>)
 8009148:	2600      	movs	r6, #0
 800914a:	e7aa      	b.n	80090a2 <_strtod_l+0x98a>
 800914c:	4b32      	ldr	r3, [pc, #200]	@ (8009218 <_strtod_l+0xb00>)
 800914e:	4630      	mov	r0, r6
 8009150:	4639      	mov	r1, r7
 8009152:	2200      	movs	r2, #0
 8009154:	f7f7 fa78 	bl	8000648 <__aeabi_dmul>
 8009158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d09f      	beq.n	80090a2 <_strtod_l+0x98a>
 8009162:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009166:	e7a0      	b.n	80090aa <_strtod_l+0x992>
 8009168:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80091f0 <_strtod_l+0xad8>
 800916c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009170:	ec57 6b17 	vmov	r6, r7, d7
 8009174:	e799      	b.n	80090aa <_strtod_l+0x992>
 8009176:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800917a:	9b08      	ldr	r3, [sp, #32]
 800917c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1c1      	bne.n	8009108 <_strtod_l+0x9f0>
 8009184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009188:	0d1b      	lsrs	r3, r3, #20
 800918a:	051b      	lsls	r3, r3, #20
 800918c:	429d      	cmp	r5, r3
 800918e:	d1bb      	bne.n	8009108 <_strtod_l+0x9f0>
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 fdb8 	bl	8000d08 <__aeabi_d2lz>
 8009198:	f7f7 fa28 	bl	80005ec <__aeabi_l2d>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 f898 	bl	80002d8 <__aeabi_dsub>
 80091a8:	460b      	mov	r3, r1
 80091aa:	4602      	mov	r2, r0
 80091ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80091b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80091b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091b6:	ea46 060a 	orr.w	r6, r6, sl
 80091ba:	431e      	orrs	r6, r3
 80091bc:	d06f      	beq.n	800929e <_strtod_l+0xb86>
 80091be:	a30e      	add	r3, pc, #56	@ (adr r3, 80091f8 <_strtod_l+0xae0>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 fcb2 	bl	8000b2c <__aeabi_dcmplt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f47f accf 	bne.w	8008b6c <_strtod_l+0x454>
 80091ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8009200 <_strtod_l+0xae8>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091d8:	f7f7 fcc6 	bl	8000b68 <__aeabi_dcmpgt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d093      	beq.n	8009108 <_strtod_l+0x9f0>
 80091e0:	e4c4      	b.n	8008b6c <_strtod_l+0x454>
 80091e2:	bf00      	nop
 80091e4:	f3af 8000 	nop.w
 80091e8:	00000000 	.word	0x00000000
 80091ec:	bff00000 	.word	0xbff00000
 80091f0:	00000000 	.word	0x00000000
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	94a03595 	.word	0x94a03595
 80091fc:	3fdfffff 	.word	0x3fdfffff
 8009200:	35afe535 	.word	0x35afe535
 8009204:	3fe00000 	.word	0x3fe00000
 8009208:	000fffff 	.word	0x000fffff
 800920c:	7ff00000 	.word	0x7ff00000
 8009210:	7fefffff 	.word	0x7fefffff
 8009214:	3ff00000 	.word	0x3ff00000
 8009218:	3fe00000 	.word	0x3fe00000
 800921c:	7fe00000 	.word	0x7fe00000
 8009220:	7c9fffff 	.word	0x7c9fffff
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	b323      	cbz	r3, 8009272 <_strtod_l+0xb5a>
 8009228:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800922c:	d821      	bhi.n	8009272 <_strtod_l+0xb5a>
 800922e:	a328      	add	r3, pc, #160	@ (adr r3, 80092d0 <_strtod_l+0xbb8>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc82 	bl	8000b40 <__aeabi_dcmple>
 800923c:	b1a0      	cbz	r0, 8009268 <_strtod_l+0xb50>
 800923e:	4639      	mov	r1, r7
 8009240:	4630      	mov	r0, r6
 8009242:	f7f7 fcd9 	bl	8000bf8 <__aeabi_d2uiz>
 8009246:	2801      	cmp	r0, #1
 8009248:	bf38      	it	cc
 800924a:	2001      	movcc	r0, #1
 800924c:	f7f7 f982 	bl	8000554 <__aeabi_ui2d>
 8009250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	b9fb      	cbnz	r3, 8009298 <_strtod_l+0xb80>
 8009258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800925c:	9014      	str	r0, [sp, #80]	@ 0x50
 800925e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009260:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009264:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009268:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800926a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800926e:	1b5b      	subs	r3, r3, r5
 8009270:	9311      	str	r3, [sp, #68]	@ 0x44
 8009272:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009276:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800927a:	f002 fe95 	bl	800bfa8 <__ulp>
 800927e:	4650      	mov	r0, sl
 8009280:	ec53 2b10 	vmov	r2, r3, d0
 8009284:	4659      	mov	r1, fp
 8009286:	f7f7 f9df 	bl	8000648 <__aeabi_dmul>
 800928a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800928e:	f7f7 f825 	bl	80002dc <__adddf3>
 8009292:	4682      	mov	sl, r0
 8009294:	468b      	mov	fp, r1
 8009296:	e770      	b.n	800917a <_strtod_l+0xa62>
 8009298:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800929c:	e7e0      	b.n	8009260 <_strtod_l+0xb48>
 800929e:	a30e      	add	r3, pc, #56	@ (adr r3, 80092d8 <_strtod_l+0xbc0>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f7f7 fc42 	bl	8000b2c <__aeabi_dcmplt>
 80092a8:	e798      	b.n	80091dc <_strtod_l+0xac4>
 80092aa:	2300      	movs	r3, #0
 80092ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80092b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	f7ff ba6d 	b.w	8008792 <_strtod_l+0x7a>
 80092b8:	2a65      	cmp	r2, #101	@ 0x65
 80092ba:	f43f ab66 	beq.w	800898a <_strtod_l+0x272>
 80092be:	2a45      	cmp	r2, #69	@ 0x45
 80092c0:	f43f ab63 	beq.w	800898a <_strtod_l+0x272>
 80092c4:	2301      	movs	r3, #1
 80092c6:	f7ff bb9e 	b.w	8008a06 <_strtod_l+0x2ee>
 80092ca:	bf00      	nop
 80092cc:	f3af 8000 	nop.w
 80092d0:	ffc00000 	.word	0xffc00000
 80092d4:	41dfffff 	.word	0x41dfffff
 80092d8:	94a03595 	.word	0x94a03595
 80092dc:	3fcfffff 	.word	0x3fcfffff

080092e0 <_strtod_r>:
 80092e0:	4b01      	ldr	r3, [pc, #4]	@ (80092e8 <_strtod_r+0x8>)
 80092e2:	f7ff ba19 	b.w	8008718 <_strtod_l>
 80092e6:	bf00      	nop
 80092e8:	20000030 	.word	0x20000030

080092ec <_strtol_l.constprop.0>:
 80092ec:	2b24      	cmp	r3, #36	@ 0x24
 80092ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f2:	4686      	mov	lr, r0
 80092f4:	4690      	mov	r8, r2
 80092f6:	d801      	bhi.n	80092fc <_strtol_l.constprop.0+0x10>
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d106      	bne.n	800930a <_strtol_l.constprop.0+0x1e>
 80092fc:	f000 f964 	bl	80095c8 <__errno>
 8009300:	2316      	movs	r3, #22
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	2000      	movs	r0, #0
 8009306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930a:	4834      	ldr	r0, [pc, #208]	@ (80093dc <_strtol_l.constprop.0+0xf0>)
 800930c:	460d      	mov	r5, r1
 800930e:	462a      	mov	r2, r5
 8009310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009314:	5d06      	ldrb	r6, [r0, r4]
 8009316:	f016 0608 	ands.w	r6, r6, #8
 800931a:	d1f8      	bne.n	800930e <_strtol_l.constprop.0+0x22>
 800931c:	2c2d      	cmp	r4, #45	@ 0x2d
 800931e:	d12d      	bne.n	800937c <_strtol_l.constprop.0+0x90>
 8009320:	782c      	ldrb	r4, [r5, #0]
 8009322:	2601      	movs	r6, #1
 8009324:	1c95      	adds	r5, r2, #2
 8009326:	f033 0210 	bics.w	r2, r3, #16
 800932a:	d109      	bne.n	8009340 <_strtol_l.constprop.0+0x54>
 800932c:	2c30      	cmp	r4, #48	@ 0x30
 800932e:	d12a      	bne.n	8009386 <_strtol_l.constprop.0+0x9a>
 8009330:	782a      	ldrb	r2, [r5, #0]
 8009332:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009336:	2a58      	cmp	r2, #88	@ 0x58
 8009338:	d125      	bne.n	8009386 <_strtol_l.constprop.0+0x9a>
 800933a:	786c      	ldrb	r4, [r5, #1]
 800933c:	2310      	movs	r3, #16
 800933e:	3502      	adds	r5, #2
 8009340:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009344:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009348:	2200      	movs	r2, #0
 800934a:	fbbc f9f3 	udiv	r9, ip, r3
 800934e:	4610      	mov	r0, r2
 8009350:	fb03 ca19 	mls	sl, r3, r9, ip
 8009354:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009358:	2f09      	cmp	r7, #9
 800935a:	d81b      	bhi.n	8009394 <_strtol_l.constprop.0+0xa8>
 800935c:	463c      	mov	r4, r7
 800935e:	42a3      	cmp	r3, r4
 8009360:	dd27      	ble.n	80093b2 <_strtol_l.constprop.0+0xc6>
 8009362:	1c57      	adds	r7, r2, #1
 8009364:	d007      	beq.n	8009376 <_strtol_l.constprop.0+0x8a>
 8009366:	4581      	cmp	r9, r0
 8009368:	d320      	bcc.n	80093ac <_strtol_l.constprop.0+0xc0>
 800936a:	d101      	bne.n	8009370 <_strtol_l.constprop.0+0x84>
 800936c:	45a2      	cmp	sl, r4
 800936e:	db1d      	blt.n	80093ac <_strtol_l.constprop.0+0xc0>
 8009370:	fb00 4003 	mla	r0, r0, r3, r4
 8009374:	2201      	movs	r2, #1
 8009376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800937a:	e7eb      	b.n	8009354 <_strtol_l.constprop.0+0x68>
 800937c:	2c2b      	cmp	r4, #43	@ 0x2b
 800937e:	bf04      	itt	eq
 8009380:	782c      	ldrbeq	r4, [r5, #0]
 8009382:	1c95      	addeq	r5, r2, #2
 8009384:	e7cf      	b.n	8009326 <_strtol_l.constprop.0+0x3a>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1da      	bne.n	8009340 <_strtol_l.constprop.0+0x54>
 800938a:	2c30      	cmp	r4, #48	@ 0x30
 800938c:	bf0c      	ite	eq
 800938e:	2308      	moveq	r3, #8
 8009390:	230a      	movne	r3, #10
 8009392:	e7d5      	b.n	8009340 <_strtol_l.constprop.0+0x54>
 8009394:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009398:	2f19      	cmp	r7, #25
 800939a:	d801      	bhi.n	80093a0 <_strtol_l.constprop.0+0xb4>
 800939c:	3c37      	subs	r4, #55	@ 0x37
 800939e:	e7de      	b.n	800935e <_strtol_l.constprop.0+0x72>
 80093a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80093a4:	2f19      	cmp	r7, #25
 80093a6:	d804      	bhi.n	80093b2 <_strtol_l.constprop.0+0xc6>
 80093a8:	3c57      	subs	r4, #87	@ 0x57
 80093aa:	e7d8      	b.n	800935e <_strtol_l.constprop.0+0x72>
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093b0:	e7e1      	b.n	8009376 <_strtol_l.constprop.0+0x8a>
 80093b2:	1c53      	adds	r3, r2, #1
 80093b4:	d108      	bne.n	80093c8 <_strtol_l.constprop.0+0xdc>
 80093b6:	2322      	movs	r3, #34	@ 0x22
 80093b8:	f8ce 3000 	str.w	r3, [lr]
 80093bc:	4660      	mov	r0, ip
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	d0a0      	beq.n	8009306 <_strtol_l.constprop.0+0x1a>
 80093c4:	1e69      	subs	r1, r5, #1
 80093c6:	e006      	b.n	80093d6 <_strtol_l.constprop.0+0xea>
 80093c8:	b106      	cbz	r6, 80093cc <_strtol_l.constprop.0+0xe0>
 80093ca:	4240      	negs	r0, r0
 80093cc:	f1b8 0f00 	cmp.w	r8, #0
 80093d0:	d099      	beq.n	8009306 <_strtol_l.constprop.0+0x1a>
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d1f6      	bne.n	80093c4 <_strtol_l.constprop.0+0xd8>
 80093d6:	f8c8 1000 	str.w	r1, [r8]
 80093da:	e794      	b.n	8009306 <_strtol_l.constprop.0+0x1a>
 80093dc:	0800cf09 	.word	0x0800cf09

080093e0 <_strtol_r>:
 80093e0:	f7ff bf84 	b.w	80092ec <_strtol_l.constprop.0>

080093e4 <_fwalk_sglue>:
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	4607      	mov	r7, r0
 80093ea:	4688      	mov	r8, r1
 80093ec:	4614      	mov	r4, r2
 80093ee:	2600      	movs	r6, #0
 80093f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f4:	f1b9 0901 	subs.w	r9, r9, #1
 80093f8:	d505      	bpl.n	8009406 <_fwalk_sglue+0x22>
 80093fa:	6824      	ldr	r4, [r4, #0]
 80093fc:	2c00      	cmp	r4, #0
 80093fe:	d1f7      	bne.n	80093f0 <_fwalk_sglue+0xc>
 8009400:	4630      	mov	r0, r6
 8009402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d907      	bls.n	800941c <_fwalk_sglue+0x38>
 800940c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009410:	3301      	adds	r3, #1
 8009412:	d003      	beq.n	800941c <_fwalk_sglue+0x38>
 8009414:	4629      	mov	r1, r5
 8009416:	4638      	mov	r0, r7
 8009418:	47c0      	blx	r8
 800941a:	4306      	orrs	r6, r0
 800941c:	3568      	adds	r5, #104	@ 0x68
 800941e:	e7e9      	b.n	80093f4 <_fwalk_sglue+0x10>

08009420 <iprintf>:
 8009420:	b40f      	push	{r0, r1, r2, r3}
 8009422:	b507      	push	{r0, r1, r2, lr}
 8009424:	4906      	ldr	r1, [pc, #24]	@ (8009440 <iprintf+0x20>)
 8009426:	ab04      	add	r3, sp, #16
 8009428:	6808      	ldr	r0, [r1, #0]
 800942a:	f853 2b04 	ldr.w	r2, [r3], #4
 800942e:	6881      	ldr	r1, [r0, #8]
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	f001 fe31 	bl	800b098 <_vfiprintf_r>
 8009436:	b003      	add	sp, #12
 8009438:	f85d eb04 	ldr.w	lr, [sp], #4
 800943c:	b004      	add	sp, #16
 800943e:	4770      	bx	lr
 8009440:	2000019c 	.word	0x2000019c

08009444 <_puts_r>:
 8009444:	6a03      	ldr	r3, [r0, #32]
 8009446:	b570      	push	{r4, r5, r6, lr}
 8009448:	6884      	ldr	r4, [r0, #8]
 800944a:	4605      	mov	r5, r0
 800944c:	460e      	mov	r6, r1
 800944e:	b90b      	cbnz	r3, 8009454 <_puts_r+0x10>
 8009450:	f7ff f92a 	bl	80086a8 <__sinit>
 8009454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009456:	07db      	lsls	r3, r3, #31
 8009458:	d405      	bmi.n	8009466 <_puts_r+0x22>
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	0598      	lsls	r0, r3, #22
 800945e:	d402      	bmi.n	8009466 <_puts_r+0x22>
 8009460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009462:	f000 f8dc 	bl	800961e <__retarget_lock_acquire_recursive>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	0719      	lsls	r1, r3, #28
 800946a:	d502      	bpl.n	8009472 <_puts_r+0x2e>
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d135      	bne.n	80094de <_puts_r+0x9a>
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f002 ffeb 	bl	800c450 <__swsetup_r>
 800947a:	b380      	cbz	r0, 80094de <_puts_r+0x9a>
 800947c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009482:	07da      	lsls	r2, r3, #31
 8009484:	d405      	bmi.n	8009492 <_puts_r+0x4e>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	059b      	lsls	r3, r3, #22
 800948a:	d402      	bmi.n	8009492 <_puts_r+0x4e>
 800948c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800948e:	f000 f8c7 	bl	8009620 <__retarget_lock_release_recursive>
 8009492:	4628      	mov	r0, r5
 8009494:	bd70      	pop	{r4, r5, r6, pc}
 8009496:	2b00      	cmp	r3, #0
 8009498:	da04      	bge.n	80094a4 <_puts_r+0x60>
 800949a:	69a2      	ldr	r2, [r4, #24]
 800949c:	429a      	cmp	r2, r3
 800949e:	dc17      	bgt.n	80094d0 <_puts_r+0x8c>
 80094a0:	290a      	cmp	r1, #10
 80094a2:	d015      	beq.n	80094d0 <_puts_r+0x8c>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	6022      	str	r2, [r4, #0]
 80094aa:	7019      	strb	r1, [r3, #0]
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094b2:	3b01      	subs	r3, #1
 80094b4:	60a3      	str	r3, [r4, #8]
 80094b6:	2900      	cmp	r1, #0
 80094b8:	d1ed      	bne.n	8009496 <_puts_r+0x52>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da11      	bge.n	80094e2 <_puts_r+0x9e>
 80094be:	4622      	mov	r2, r4
 80094c0:	210a      	movs	r1, #10
 80094c2:	4628      	mov	r0, r5
 80094c4:	f002 ff86 	bl	800c3d4 <__swbuf_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d0d7      	beq.n	800947c <_puts_r+0x38>
 80094cc:	250a      	movs	r5, #10
 80094ce:	e7d7      	b.n	8009480 <_puts_r+0x3c>
 80094d0:	4622      	mov	r2, r4
 80094d2:	4628      	mov	r0, r5
 80094d4:	f002 ff7e 	bl	800c3d4 <__swbuf_r>
 80094d8:	3001      	adds	r0, #1
 80094da:	d1e7      	bne.n	80094ac <_puts_r+0x68>
 80094dc:	e7ce      	b.n	800947c <_puts_r+0x38>
 80094de:	3e01      	subs	r6, #1
 80094e0:	e7e4      	b.n	80094ac <_puts_r+0x68>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	220a      	movs	r2, #10
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	e7ee      	b.n	80094cc <_puts_r+0x88>
	...

080094f0 <puts>:
 80094f0:	4b02      	ldr	r3, [pc, #8]	@ (80094fc <puts+0xc>)
 80094f2:	4601      	mov	r1, r0
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	f7ff bfa5 	b.w	8009444 <_puts_r>
 80094fa:	bf00      	nop
 80094fc:	2000019c 	.word	0x2000019c

08009500 <strncmp>:
 8009500:	b510      	push	{r4, lr}
 8009502:	b16a      	cbz	r2, 8009520 <strncmp+0x20>
 8009504:	3901      	subs	r1, #1
 8009506:	1884      	adds	r4, r0, r2
 8009508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800950c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009510:	429a      	cmp	r2, r3
 8009512:	d103      	bne.n	800951c <strncmp+0x1c>
 8009514:	42a0      	cmp	r0, r4
 8009516:	d001      	beq.n	800951c <strncmp+0x1c>
 8009518:	2a00      	cmp	r2, #0
 800951a:	d1f5      	bne.n	8009508 <strncmp+0x8>
 800951c:	1ad0      	subs	r0, r2, r3
 800951e:	bd10      	pop	{r4, pc}
 8009520:	4610      	mov	r0, r2
 8009522:	e7fc      	b.n	800951e <strncmp+0x1e>

08009524 <memset>:
 8009524:	4402      	add	r2, r0
 8009526:	4603      	mov	r3, r0
 8009528:	4293      	cmp	r3, r2
 800952a:	d100      	bne.n	800952e <memset+0xa>
 800952c:	4770      	bx	lr
 800952e:	f803 1b01 	strb.w	r1, [r3], #1
 8009532:	e7f9      	b.n	8009528 <memset+0x4>

08009534 <_localeconv_r>:
 8009534:	4800      	ldr	r0, [pc, #0]	@ (8009538 <_localeconv_r+0x4>)
 8009536:	4770      	bx	lr
 8009538:	20000120 	.word	0x20000120

0800953c <_close_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	@ (8009558 <_close_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7fa f839 	bl	80035be <_close>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_close_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_close_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20000880 	.word	0x20000880

0800955c <_lseek_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d07      	ldr	r5, [pc, #28]	@ (800957c <_lseek_r+0x20>)
 8009560:	4604      	mov	r4, r0
 8009562:	4608      	mov	r0, r1
 8009564:	4611      	mov	r1, r2
 8009566:	2200      	movs	r2, #0
 8009568:	602a      	str	r2, [r5, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	f7fa f84e 	bl	800360c <_lseek>
 8009570:	1c43      	adds	r3, r0, #1
 8009572:	d102      	bne.n	800957a <_lseek_r+0x1e>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	b103      	cbz	r3, 800957a <_lseek_r+0x1e>
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	20000880 	.word	0x20000880

08009580 <_read_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d07      	ldr	r5, [pc, #28]	@ (80095a0 <_read_r+0x20>)
 8009584:	4604      	mov	r4, r0
 8009586:	4608      	mov	r0, r1
 8009588:	4611      	mov	r1, r2
 800958a:	2200      	movs	r2, #0
 800958c:	602a      	str	r2, [r5, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f7f9 ffdc 	bl	800354c <_read>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_read_r+0x1e>
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	b103      	cbz	r3, 800959e <_read_r+0x1e>
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	20000880 	.word	0x20000880

080095a4 <_write_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4d07      	ldr	r5, [pc, #28]	@ (80095c4 <_write_r+0x20>)
 80095a8:	4604      	mov	r4, r0
 80095aa:	4608      	mov	r0, r1
 80095ac:	4611      	mov	r1, r2
 80095ae:	2200      	movs	r2, #0
 80095b0:	602a      	str	r2, [r5, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	f7f9 ffe7 	bl	8003586 <_write>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_write_r+0x1e>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_write_r+0x1e>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20000880 	.word	0x20000880

080095c8 <__errno>:
 80095c8:	4b01      	ldr	r3, [pc, #4]	@ (80095d0 <__errno+0x8>)
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	2000019c 	.word	0x2000019c

080095d4 <__libc_init_array>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	4d0d      	ldr	r5, [pc, #52]	@ (800960c <__libc_init_array+0x38>)
 80095d8:	4c0d      	ldr	r4, [pc, #52]	@ (8009610 <__libc_init_array+0x3c>)
 80095da:	1b64      	subs	r4, r4, r5
 80095dc:	10a4      	asrs	r4, r4, #2
 80095de:	2600      	movs	r6, #0
 80095e0:	42a6      	cmp	r6, r4
 80095e2:	d109      	bne.n	80095f8 <__libc_init_array+0x24>
 80095e4:	4d0b      	ldr	r5, [pc, #44]	@ (8009614 <__libc_init_array+0x40>)
 80095e6:	4c0c      	ldr	r4, [pc, #48]	@ (8009618 <__libc_init_array+0x44>)
 80095e8:	f003 fb74 	bl	800ccd4 <_init>
 80095ec:	1b64      	subs	r4, r4, r5
 80095ee:	10a4      	asrs	r4, r4, #2
 80095f0:	2600      	movs	r6, #0
 80095f2:	42a6      	cmp	r6, r4
 80095f4:	d105      	bne.n	8009602 <__libc_init_array+0x2e>
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095fc:	4798      	blx	r3
 80095fe:	3601      	adds	r6, #1
 8009600:	e7ee      	b.n	80095e0 <__libc_init_array+0xc>
 8009602:	f855 3b04 	ldr.w	r3, [r5], #4
 8009606:	4798      	blx	r3
 8009608:	3601      	adds	r6, #1
 800960a:	e7f2      	b.n	80095f2 <__libc_init_array+0x1e>
 800960c:	0800d2fc 	.word	0x0800d2fc
 8009610:	0800d2fc 	.word	0x0800d2fc
 8009614:	0800d2fc 	.word	0x0800d2fc
 8009618:	0800d300 	.word	0x0800d300

0800961c <__retarget_lock_init_recursive>:
 800961c:	4770      	bx	lr

0800961e <__retarget_lock_acquire_recursive>:
 800961e:	4770      	bx	lr

08009620 <__retarget_lock_release_recursive>:
 8009620:	4770      	bx	lr

08009622 <memcpy>:
 8009622:	440a      	add	r2, r1
 8009624:	4291      	cmp	r1, r2
 8009626:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800962a:	d100      	bne.n	800962e <memcpy+0xc>
 800962c:	4770      	bx	lr
 800962e:	b510      	push	{r4, lr}
 8009630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009638:	4291      	cmp	r1, r2
 800963a:	d1f9      	bne.n	8009630 <memcpy+0xe>
 800963c:	bd10      	pop	{r4, pc}
	...

08009640 <nan>:
 8009640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009648 <nan+0x8>
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	00000000 	.word	0x00000000
 800964c:	7ff80000 	.word	0x7ff80000

08009650 <nanf>:
 8009650:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009658 <nanf+0x8>
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	7fc00000 	.word	0x7fc00000

0800965c <quorem>:
 800965c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	6903      	ldr	r3, [r0, #16]
 8009662:	690c      	ldr	r4, [r1, #16]
 8009664:	42a3      	cmp	r3, r4
 8009666:	4607      	mov	r7, r0
 8009668:	db7e      	blt.n	8009768 <quorem+0x10c>
 800966a:	3c01      	subs	r4, #1
 800966c:	f101 0814 	add.w	r8, r1, #20
 8009670:	00a3      	lsls	r3, r4, #2
 8009672:	f100 0514 	add.w	r5, r0, #20
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009686:	3301      	adds	r3, #1
 8009688:	429a      	cmp	r2, r3
 800968a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800968e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009692:	d32e      	bcc.n	80096f2 <quorem+0x96>
 8009694:	f04f 0a00 	mov.w	sl, #0
 8009698:	46c4      	mov	ip, r8
 800969a:	46ae      	mov	lr, r5
 800969c:	46d3      	mov	fp, sl
 800969e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096a2:	b298      	uxth	r0, r3
 80096a4:	fb06 a000 	mla	r0, r6, r0, sl
 80096a8:	0c02      	lsrs	r2, r0, #16
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	fb06 2303 	mla	r3, r6, r3, r2
 80096b0:	f8de 2000 	ldr.w	r2, [lr]
 80096b4:	b280      	uxth	r0, r0
 80096b6:	b292      	uxth	r2, r2
 80096b8:	1a12      	subs	r2, r2, r0
 80096ba:	445a      	add	r2, fp
 80096bc:	f8de 0000 	ldr.w	r0, [lr]
 80096c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096ce:	b292      	uxth	r2, r2
 80096d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096d4:	45e1      	cmp	r9, ip
 80096d6:	f84e 2b04 	str.w	r2, [lr], #4
 80096da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096de:	d2de      	bcs.n	800969e <quorem+0x42>
 80096e0:	9b00      	ldr	r3, [sp, #0]
 80096e2:	58eb      	ldr	r3, [r5, r3]
 80096e4:	b92b      	cbnz	r3, 80096f2 <quorem+0x96>
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	429d      	cmp	r5, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	d32f      	bcc.n	8009750 <quorem+0xf4>
 80096f0:	613c      	str	r4, [r7, #16]
 80096f2:	4638      	mov	r0, r7
 80096f4:	f002 fba8 	bl	800be48 <__mcmp>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	db25      	blt.n	8009748 <quorem+0xec>
 80096fc:	4629      	mov	r1, r5
 80096fe:	2000      	movs	r0, #0
 8009700:	f858 2b04 	ldr.w	r2, [r8], #4
 8009704:	f8d1 c000 	ldr.w	ip, [r1]
 8009708:	fa1f fe82 	uxth.w	lr, r2
 800970c:	fa1f f38c 	uxth.w	r3, ip
 8009710:	eba3 030e 	sub.w	r3, r3, lr
 8009714:	4403      	add	r3, r0
 8009716:	0c12      	lsrs	r2, r2, #16
 8009718:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800971c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009720:	b29b      	uxth	r3, r3
 8009722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009726:	45c1      	cmp	r9, r8
 8009728:	f841 3b04 	str.w	r3, [r1], #4
 800972c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009730:	d2e6      	bcs.n	8009700 <quorem+0xa4>
 8009732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800973a:	b922      	cbnz	r2, 8009746 <quorem+0xea>
 800973c:	3b04      	subs	r3, #4
 800973e:	429d      	cmp	r5, r3
 8009740:	461a      	mov	r2, r3
 8009742:	d30b      	bcc.n	800975c <quorem+0x100>
 8009744:	613c      	str	r4, [r7, #16]
 8009746:	3601      	adds	r6, #1
 8009748:	4630      	mov	r0, r6
 800974a:	b003      	add	sp, #12
 800974c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	3b04      	subs	r3, #4
 8009754:	2a00      	cmp	r2, #0
 8009756:	d1cb      	bne.n	80096f0 <quorem+0x94>
 8009758:	3c01      	subs	r4, #1
 800975a:	e7c6      	b.n	80096ea <quorem+0x8e>
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	3b04      	subs	r3, #4
 8009760:	2a00      	cmp	r2, #0
 8009762:	d1ef      	bne.n	8009744 <quorem+0xe8>
 8009764:	3c01      	subs	r4, #1
 8009766:	e7ea      	b.n	800973e <quorem+0xe2>
 8009768:	2000      	movs	r0, #0
 800976a:	e7ee      	b.n	800974a <quorem+0xee>
 800976c:	0000      	movs	r0, r0
	...

08009770 <_dtoa_r>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	69c7      	ldr	r7, [r0, #28]
 8009776:	b099      	sub	sp, #100	@ 0x64
 8009778:	ed8d 0b02 	vstr	d0, [sp, #8]
 800977c:	ec55 4b10 	vmov	r4, r5, d0
 8009780:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009782:	9109      	str	r1, [sp, #36]	@ 0x24
 8009784:	4683      	mov	fp, r0
 8009786:	920e      	str	r2, [sp, #56]	@ 0x38
 8009788:	9313      	str	r3, [sp, #76]	@ 0x4c
 800978a:	b97f      	cbnz	r7, 80097ac <_dtoa_r+0x3c>
 800978c:	2010      	movs	r0, #16
 800978e:	f001 fd9b 	bl	800b2c8 <malloc>
 8009792:	4602      	mov	r2, r0
 8009794:	f8cb 001c 	str.w	r0, [fp, #28]
 8009798:	b920      	cbnz	r0, 80097a4 <_dtoa_r+0x34>
 800979a:	4ba7      	ldr	r3, [pc, #668]	@ (8009a38 <_dtoa_r+0x2c8>)
 800979c:	21ef      	movs	r1, #239	@ 0xef
 800979e:	48a7      	ldr	r0, [pc, #668]	@ (8009a3c <_dtoa_r+0x2cc>)
 80097a0:	f002 ff68 	bl	800c674 <__assert_func>
 80097a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097a8:	6007      	str	r7, [r0, #0]
 80097aa:	60c7      	str	r7, [r0, #12]
 80097ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097b0:	6819      	ldr	r1, [r3, #0]
 80097b2:	b159      	cbz	r1, 80097cc <_dtoa_r+0x5c>
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	604a      	str	r2, [r1, #4]
 80097b8:	2301      	movs	r3, #1
 80097ba:	4093      	lsls	r3, r2
 80097bc:	608b      	str	r3, [r1, #8]
 80097be:	4658      	mov	r0, fp
 80097c0:	f002 f8be 	bl	800b940 <_Bfree>
 80097c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	1e2b      	subs	r3, r5, #0
 80097ce:	bfb9      	ittee	lt
 80097d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097d4:	9303      	strlt	r3, [sp, #12]
 80097d6:	2300      	movge	r3, #0
 80097d8:	6033      	strge	r3, [r6, #0]
 80097da:	9f03      	ldr	r7, [sp, #12]
 80097dc:	4b98      	ldr	r3, [pc, #608]	@ (8009a40 <_dtoa_r+0x2d0>)
 80097de:	bfbc      	itt	lt
 80097e0:	2201      	movlt	r2, #1
 80097e2:	6032      	strlt	r2, [r6, #0]
 80097e4:	43bb      	bics	r3, r7
 80097e6:	d112      	bne.n	800980e <_dtoa_r+0x9e>
 80097e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097f4:	4323      	orrs	r3, r4
 80097f6:	f000 854d 	beq.w	800a294 <_dtoa_r+0xb24>
 80097fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009a54 <_dtoa_r+0x2e4>
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 854f 	beq.w	800a2a4 <_dtoa_r+0xb34>
 8009806:	f10a 0303 	add.w	r3, sl, #3
 800980a:	f000 bd49 	b.w	800a2a0 <_dtoa_r+0xb30>
 800980e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	ec51 0b17 	vmov	r0, r1, d7
 8009818:	2300      	movs	r3, #0
 800981a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800981e:	f7f7 f97b 	bl	8000b18 <__aeabi_dcmpeq>
 8009822:	4680      	mov	r8, r0
 8009824:	b158      	cbz	r0, 800983e <_dtoa_r+0xce>
 8009826:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009828:	2301      	movs	r3, #1
 800982a:	6013      	str	r3, [r2, #0]
 800982c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800982e:	b113      	cbz	r3, 8009836 <_dtoa_r+0xc6>
 8009830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009832:	4b84      	ldr	r3, [pc, #528]	@ (8009a44 <_dtoa_r+0x2d4>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009a58 <_dtoa_r+0x2e8>
 800983a:	f000 bd33 	b.w	800a2a4 <_dtoa_r+0xb34>
 800983e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009842:	aa16      	add	r2, sp, #88	@ 0x58
 8009844:	a917      	add	r1, sp, #92	@ 0x5c
 8009846:	4658      	mov	r0, fp
 8009848:	f002 fc1e 	bl	800c088 <__d2b>
 800984c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009850:	4681      	mov	r9, r0
 8009852:	2e00      	cmp	r6, #0
 8009854:	d077      	beq.n	8009946 <_dtoa_r+0x1d6>
 8009856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009858:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800985c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009864:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009868:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800986c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009870:	4619      	mov	r1, r3
 8009872:	2200      	movs	r2, #0
 8009874:	4b74      	ldr	r3, [pc, #464]	@ (8009a48 <_dtoa_r+0x2d8>)
 8009876:	f7f6 fd2f 	bl	80002d8 <__aeabi_dsub>
 800987a:	a369      	add	r3, pc, #420	@ (adr r3, 8009a20 <_dtoa_r+0x2b0>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fee2 	bl	8000648 <__aeabi_dmul>
 8009884:	a368      	add	r3, pc, #416	@ (adr r3, 8009a28 <_dtoa_r+0x2b8>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f7f6 fd27 	bl	80002dc <__adddf3>
 800988e:	4604      	mov	r4, r0
 8009890:	4630      	mov	r0, r6
 8009892:	460d      	mov	r5, r1
 8009894:	f7f6 fe6e 	bl	8000574 <__aeabi_i2d>
 8009898:	a365      	add	r3, pc, #404	@ (adr r3, 8009a30 <_dtoa_r+0x2c0>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fed3 	bl	8000648 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f7f6 fd17 	bl	80002dc <__adddf3>
 80098ae:	4604      	mov	r4, r0
 80098b0:	460d      	mov	r5, r1
 80098b2:	f7f7 f979 	bl	8000ba8 <__aeabi_d2iz>
 80098b6:	2200      	movs	r2, #0
 80098b8:	4607      	mov	r7, r0
 80098ba:	2300      	movs	r3, #0
 80098bc:	4620      	mov	r0, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	f7f7 f934 	bl	8000b2c <__aeabi_dcmplt>
 80098c4:	b140      	cbz	r0, 80098d8 <_dtoa_r+0x168>
 80098c6:	4638      	mov	r0, r7
 80098c8:	f7f6 fe54 	bl	8000574 <__aeabi_i2d>
 80098cc:	4622      	mov	r2, r4
 80098ce:	462b      	mov	r3, r5
 80098d0:	f7f7 f922 	bl	8000b18 <__aeabi_dcmpeq>
 80098d4:	b900      	cbnz	r0, 80098d8 <_dtoa_r+0x168>
 80098d6:	3f01      	subs	r7, #1
 80098d8:	2f16      	cmp	r7, #22
 80098da:	d851      	bhi.n	8009980 <_dtoa_r+0x210>
 80098dc:	4b5b      	ldr	r3, [pc, #364]	@ (8009a4c <_dtoa_r+0x2dc>)
 80098de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ea:	f7f7 f91f 	bl	8000b2c <__aeabi_dcmplt>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d048      	beq.n	8009984 <_dtoa_r+0x214>
 80098f2:	3f01      	subs	r7, #1
 80098f4:	2300      	movs	r3, #0
 80098f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80098f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098fa:	1b9b      	subs	r3, r3, r6
 80098fc:	1e5a      	subs	r2, r3, #1
 80098fe:	bf44      	itt	mi
 8009900:	f1c3 0801 	rsbmi	r8, r3, #1
 8009904:	2300      	movmi	r3, #0
 8009906:	9208      	str	r2, [sp, #32]
 8009908:	bf54      	ite	pl
 800990a:	f04f 0800 	movpl.w	r8, #0
 800990e:	9308      	strmi	r3, [sp, #32]
 8009910:	2f00      	cmp	r7, #0
 8009912:	db39      	blt.n	8009988 <_dtoa_r+0x218>
 8009914:	9b08      	ldr	r3, [sp, #32]
 8009916:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009918:	443b      	add	r3, r7
 800991a:	9308      	str	r3, [sp, #32]
 800991c:	2300      	movs	r3, #0
 800991e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009922:	2b09      	cmp	r3, #9
 8009924:	d864      	bhi.n	80099f0 <_dtoa_r+0x280>
 8009926:	2b05      	cmp	r3, #5
 8009928:	bfc4      	itt	gt
 800992a:	3b04      	subgt	r3, #4
 800992c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800992e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009930:	f1a3 0302 	sub.w	r3, r3, #2
 8009934:	bfcc      	ite	gt
 8009936:	2400      	movgt	r4, #0
 8009938:	2401      	movle	r4, #1
 800993a:	2b03      	cmp	r3, #3
 800993c:	d863      	bhi.n	8009a06 <_dtoa_r+0x296>
 800993e:	e8df f003 	tbb	[pc, r3]
 8009942:	372a      	.short	0x372a
 8009944:	5535      	.short	0x5535
 8009946:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800994a:	441e      	add	r6, r3
 800994c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009950:	2b20      	cmp	r3, #32
 8009952:	bfc1      	itttt	gt
 8009954:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009958:	409f      	lslgt	r7, r3
 800995a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800995e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009962:	bfd6      	itet	le
 8009964:	f1c3 0320 	rsble	r3, r3, #32
 8009968:	ea47 0003 	orrgt.w	r0, r7, r3
 800996c:	fa04 f003 	lslle.w	r0, r4, r3
 8009970:	f7f6 fdf0 	bl	8000554 <__aeabi_ui2d>
 8009974:	2201      	movs	r2, #1
 8009976:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800997a:	3e01      	subs	r6, #1
 800997c:	9214      	str	r2, [sp, #80]	@ 0x50
 800997e:	e777      	b.n	8009870 <_dtoa_r+0x100>
 8009980:	2301      	movs	r3, #1
 8009982:	e7b8      	b.n	80098f6 <_dtoa_r+0x186>
 8009984:	9012      	str	r0, [sp, #72]	@ 0x48
 8009986:	e7b7      	b.n	80098f8 <_dtoa_r+0x188>
 8009988:	427b      	negs	r3, r7
 800998a:	930a      	str	r3, [sp, #40]	@ 0x28
 800998c:	2300      	movs	r3, #0
 800998e:	eba8 0807 	sub.w	r8, r8, r7
 8009992:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009994:	e7c4      	b.n	8009920 <_dtoa_r+0x1b0>
 8009996:	2300      	movs	r3, #0
 8009998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800999a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800999c:	2b00      	cmp	r3, #0
 800999e:	dc35      	bgt.n	8009a0c <_dtoa_r+0x29c>
 80099a0:	2301      	movs	r3, #1
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	9307      	str	r3, [sp, #28]
 80099a6:	461a      	mov	r2, r3
 80099a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80099aa:	e00b      	b.n	80099c4 <_dtoa_r+0x254>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e7f3      	b.n	8009998 <_dtoa_r+0x228>
 80099b0:	2300      	movs	r3, #0
 80099b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099b6:	18fb      	adds	r3, r7, r3
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	3301      	adds	r3, #1
 80099bc:	2b01      	cmp	r3, #1
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	bfb8      	it	lt
 80099c2:	2301      	movlt	r3, #1
 80099c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80099c8:	2100      	movs	r1, #0
 80099ca:	2204      	movs	r2, #4
 80099cc:	f102 0514 	add.w	r5, r2, #20
 80099d0:	429d      	cmp	r5, r3
 80099d2:	d91f      	bls.n	8009a14 <_dtoa_r+0x2a4>
 80099d4:	6041      	str	r1, [r0, #4]
 80099d6:	4658      	mov	r0, fp
 80099d8:	f001 ff72 	bl	800b8c0 <_Balloc>
 80099dc:	4682      	mov	sl, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	d13c      	bne.n	8009a5c <_dtoa_r+0x2ec>
 80099e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a50 <_dtoa_r+0x2e0>)
 80099e4:	4602      	mov	r2, r0
 80099e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80099ea:	e6d8      	b.n	800979e <_dtoa_r+0x2e>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e7e0      	b.n	80099b2 <_dtoa_r+0x242>
 80099f0:	2401      	movs	r4, #1
 80099f2:	2300      	movs	r3, #0
 80099f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	2200      	movs	r2, #0
 8009a02:	2312      	movs	r3, #18
 8009a04:	e7d0      	b.n	80099a8 <_dtoa_r+0x238>
 8009a06:	2301      	movs	r3, #1
 8009a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a0a:	e7f5      	b.n	80099f8 <_dtoa_r+0x288>
 8009a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	9307      	str	r3, [sp, #28]
 8009a12:	e7d7      	b.n	80099c4 <_dtoa_r+0x254>
 8009a14:	3101      	adds	r1, #1
 8009a16:	0052      	lsls	r2, r2, #1
 8009a18:	e7d8      	b.n	80099cc <_dtoa_r+0x25c>
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w
 8009a20:	636f4361 	.word	0x636f4361
 8009a24:	3fd287a7 	.word	0x3fd287a7
 8009a28:	8b60c8b3 	.word	0x8b60c8b3
 8009a2c:	3fc68a28 	.word	0x3fc68a28
 8009a30:	509f79fb 	.word	0x509f79fb
 8009a34:	3fd34413 	.word	0x3fd34413
 8009a38:	0800d016 	.word	0x0800d016
 8009a3c:	0800d02d 	.word	0x0800d02d
 8009a40:	7ff00000 	.word	0x7ff00000
 8009a44:	0800d11e 	.word	0x0800d11e
 8009a48:	3ff80000 	.word	0x3ff80000
 8009a4c:	0800d1b0 	.word	0x0800d1b0
 8009a50:	0800d085 	.word	0x0800d085
 8009a54:	0800d012 	.word	0x0800d012
 8009a58:	0800d11d 	.word	0x0800d11d
 8009a5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a60:	6018      	str	r0, [r3, #0]
 8009a62:	9b07      	ldr	r3, [sp, #28]
 8009a64:	2b0e      	cmp	r3, #14
 8009a66:	f200 80a4 	bhi.w	8009bb2 <_dtoa_r+0x442>
 8009a6a:	2c00      	cmp	r4, #0
 8009a6c:	f000 80a1 	beq.w	8009bb2 <_dtoa_r+0x442>
 8009a70:	2f00      	cmp	r7, #0
 8009a72:	dd33      	ble.n	8009adc <_dtoa_r+0x36c>
 8009a74:	4bad      	ldr	r3, [pc, #692]	@ (8009d2c <_dtoa_r+0x5bc>)
 8009a76:	f007 020f 	and.w	r2, r7, #15
 8009a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a7e:	ed93 7b00 	vldr	d7, [r3]
 8009a82:	05f8      	lsls	r0, r7, #23
 8009a84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a8c:	d516      	bpl.n	8009abc <_dtoa_r+0x34c>
 8009a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8009d30 <_dtoa_r+0x5c0>)
 8009a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a98:	f7f6 ff00 	bl	800089c <__aeabi_ddiv>
 8009a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aa0:	f004 040f 	and.w	r4, r4, #15
 8009aa4:	2603      	movs	r6, #3
 8009aa6:	4da2      	ldr	r5, [pc, #648]	@ (8009d30 <_dtoa_r+0x5c0>)
 8009aa8:	b954      	cbnz	r4, 8009ac0 <_dtoa_r+0x350>
 8009aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab2:	f7f6 fef3 	bl	800089c <__aeabi_ddiv>
 8009ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aba:	e028      	b.n	8009b0e <_dtoa_r+0x39e>
 8009abc:	2602      	movs	r6, #2
 8009abe:	e7f2      	b.n	8009aa6 <_dtoa_r+0x336>
 8009ac0:	07e1      	lsls	r1, r4, #31
 8009ac2:	d508      	bpl.n	8009ad6 <_dtoa_r+0x366>
 8009ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009acc:	f7f6 fdbc 	bl	8000648 <__aeabi_dmul>
 8009ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	1064      	asrs	r4, r4, #1
 8009ad8:	3508      	adds	r5, #8
 8009ada:	e7e5      	b.n	8009aa8 <_dtoa_r+0x338>
 8009adc:	f000 80d2 	beq.w	8009c84 <_dtoa_r+0x514>
 8009ae0:	427c      	negs	r4, r7
 8009ae2:	4b92      	ldr	r3, [pc, #584]	@ (8009d2c <_dtoa_r+0x5bc>)
 8009ae4:	4d92      	ldr	r5, [pc, #584]	@ (8009d30 <_dtoa_r+0x5c0>)
 8009ae6:	f004 020f 	and.w	r2, r4, #15
 8009aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009af6:	f7f6 fda7 	bl	8000648 <__aeabi_dmul>
 8009afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009afe:	1124      	asrs	r4, r4, #4
 8009b00:	2300      	movs	r3, #0
 8009b02:	2602      	movs	r6, #2
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	f040 80b2 	bne.w	8009c6e <_dtoa_r+0x4fe>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1d3      	bne.n	8009ab6 <_dtoa_r+0x346>
 8009b0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80b7 	beq.w	8009c88 <_dtoa_r+0x518>
 8009b1a:	4b86      	ldr	r3, [pc, #536]	@ (8009d34 <_dtoa_r+0x5c4>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f7 f803 	bl	8000b2c <__aeabi_dcmplt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f000 80ae 	beq.w	8009c88 <_dtoa_r+0x518>
 8009b2c:	9b07      	ldr	r3, [sp, #28]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80aa 	beq.w	8009c88 <_dtoa_r+0x518>
 8009b34:	9b00      	ldr	r3, [sp, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd37      	ble.n	8009baa <_dtoa_r+0x43a>
 8009b3a:	1e7b      	subs	r3, r7, #1
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4b7d      	ldr	r3, [pc, #500]	@ (8009d38 <_dtoa_r+0x5c8>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7f6 fd7f 	bl	8000648 <__aeabi_dmul>
 8009b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b4e:	9c00      	ldr	r4, [sp, #0]
 8009b50:	3601      	adds	r6, #1
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7f6 fd0e 	bl	8000574 <__aeabi_i2d>
 8009b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b5c:	f7f6 fd74 	bl	8000648 <__aeabi_dmul>
 8009b60:	4b76      	ldr	r3, [pc, #472]	@ (8009d3c <_dtoa_r+0x5cc>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fbba 	bl	80002dc <__adddf3>
 8009b68:	4605      	mov	r5, r0
 8009b6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	f040 808d 	bne.w	8009c8e <_dtoa_r+0x51e>
 8009b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b78:	4b71      	ldr	r3, [pc, #452]	@ (8009d40 <_dtoa_r+0x5d0>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f7f6 fbac 	bl	80002d8 <__aeabi_dsub>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b88:	462a      	mov	r2, r5
 8009b8a:	4633      	mov	r3, r6
 8009b8c:	f7f6 ffec 	bl	8000b68 <__aeabi_dcmpgt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f040 828b 	bne.w	800a0ac <_dtoa_r+0x93c>
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ba0:	f7f6 ffc4 	bl	8000b2c <__aeabi_dcmplt>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	f040 8128 	bne.w	8009dfa <_dtoa_r+0x68a>
 8009baa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009bae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009bb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f2c0 815a 	blt.w	8009e6e <_dtoa_r+0x6fe>
 8009bba:	2f0e      	cmp	r7, #14
 8009bbc:	f300 8157 	bgt.w	8009e6e <_dtoa_r+0x6fe>
 8009bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8009d2c <_dtoa_r+0x5bc>)
 8009bc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009bc6:	ed93 7b00 	vldr	d7, [r3]
 8009bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	ed8d 7b00 	vstr	d7, [sp]
 8009bd2:	da03      	bge.n	8009bdc <_dtoa_r+0x46c>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f340 8101 	ble.w	8009dde <_dtoa_r+0x66e>
 8009bdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009be0:	4656      	mov	r6, sl
 8009be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7f6 fe57 	bl	800089c <__aeabi_ddiv>
 8009bee:	f7f6 ffdb 	bl	8000ba8 <__aeabi_d2iz>
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	f7f6 fcbe 	bl	8000574 <__aeabi_i2d>
 8009bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bfc:	f7f6 fd24 	bl	8000648 <__aeabi_dmul>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c0c:	f7f6 fb64 	bl	80002d8 <__aeabi_dsub>
 8009c10:	f806 4b01 	strb.w	r4, [r6], #1
 8009c14:	9d07      	ldr	r5, [sp, #28]
 8009c16:	eba6 040a 	sub.w	r4, r6, sl
 8009c1a:	42a5      	cmp	r5, r4
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	f040 8117 	bne.w	8009e52 <_dtoa_r+0x6e2>
 8009c24:	f7f6 fb5a 	bl	80002dc <__adddf3>
 8009c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	460d      	mov	r5, r1
 8009c30:	f7f6 ff9a 	bl	8000b68 <__aeabi_dcmpgt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f040 80f9 	bne.w	8009e2c <_dtoa_r+0x6bc>
 8009c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 ff69 	bl	8000b18 <__aeabi_dcmpeq>
 8009c46:	b118      	cbz	r0, 8009c50 <_dtoa_r+0x4e0>
 8009c48:	f018 0f01 	tst.w	r8, #1
 8009c4c:	f040 80ee 	bne.w	8009e2c <_dtoa_r+0x6bc>
 8009c50:	4649      	mov	r1, r9
 8009c52:	4658      	mov	r0, fp
 8009c54:	f001 fe74 	bl	800b940 <_Bfree>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	7033      	strb	r3, [r6, #0]
 8009c5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c5e:	3701      	adds	r7, #1
 8009c60:	601f      	str	r7, [r3, #0]
 8009c62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 831d 	beq.w	800a2a4 <_dtoa_r+0xb34>
 8009c6a:	601e      	str	r6, [r3, #0]
 8009c6c:	e31a      	b.n	800a2a4 <_dtoa_r+0xb34>
 8009c6e:	07e2      	lsls	r2, r4, #31
 8009c70:	d505      	bpl.n	8009c7e <_dtoa_r+0x50e>
 8009c72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c76:	f7f6 fce7 	bl	8000648 <__aeabi_dmul>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	1064      	asrs	r4, r4, #1
 8009c80:	3508      	adds	r5, #8
 8009c82:	e73f      	b.n	8009b04 <_dtoa_r+0x394>
 8009c84:	2602      	movs	r6, #2
 8009c86:	e742      	b.n	8009b0e <_dtoa_r+0x39e>
 8009c88:	9c07      	ldr	r4, [sp, #28]
 8009c8a:	9704      	str	r7, [sp, #16]
 8009c8c:	e761      	b.n	8009b52 <_dtoa_r+0x3e2>
 8009c8e:	4b27      	ldr	r3, [pc, #156]	@ (8009d2c <_dtoa_r+0x5bc>)
 8009c90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c9a:	4454      	add	r4, sl
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d053      	beq.n	8009d48 <_dtoa_r+0x5d8>
 8009ca0:	4928      	ldr	r1, [pc, #160]	@ (8009d44 <_dtoa_r+0x5d4>)
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	f7f6 fdfa 	bl	800089c <__aeabi_ddiv>
 8009ca8:	4633      	mov	r3, r6
 8009caa:	462a      	mov	r2, r5
 8009cac:	f7f6 fb14 	bl	80002d8 <__aeabi_dsub>
 8009cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cb4:	4656      	mov	r6, sl
 8009cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cba:	f7f6 ff75 	bl	8000ba8 <__aeabi_d2iz>
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	f7f6 fc58 	bl	8000574 <__aeabi_i2d>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ccc:	f7f6 fb04 	bl	80002d8 <__aeabi_dsub>
 8009cd0:	3530      	adds	r5, #48	@ 0x30
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cda:	f806 5b01 	strb.w	r5, [r6], #1
 8009cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ce2:	f7f6 ff23 	bl	8000b2c <__aeabi_dcmplt>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d171      	bne.n	8009dce <_dtoa_r+0x65e>
 8009cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cee:	4911      	ldr	r1, [pc, #68]	@ (8009d34 <_dtoa_r+0x5c4>)
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	f7f6 faf1 	bl	80002d8 <__aeabi_dsub>
 8009cf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cfa:	f7f6 ff17 	bl	8000b2c <__aeabi_dcmplt>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f040 8095 	bne.w	8009e2e <_dtoa_r+0x6be>
 8009d04:	42a6      	cmp	r6, r4
 8009d06:	f43f af50 	beq.w	8009baa <_dtoa_r+0x43a>
 8009d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d38 <_dtoa_r+0x5c8>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	f7f6 fc99 	bl	8000648 <__aeabi_dmul>
 8009d16:	4b08      	ldr	r3, [pc, #32]	@ (8009d38 <_dtoa_r+0x5c8>)
 8009d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d22:	f7f6 fc91 	bl	8000648 <__aeabi_dmul>
 8009d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2a:	e7c4      	b.n	8009cb6 <_dtoa_r+0x546>
 8009d2c:	0800d1b0 	.word	0x0800d1b0
 8009d30:	0800d188 	.word	0x0800d188
 8009d34:	3ff00000 	.word	0x3ff00000
 8009d38:	40240000 	.word	0x40240000
 8009d3c:	401c0000 	.word	0x401c0000
 8009d40:	40140000 	.word	0x40140000
 8009d44:	3fe00000 	.word	0x3fe00000
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f7f6 fc7c 	bl	8000648 <__aeabi_dmul>
 8009d50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d54:	9415      	str	r4, [sp, #84]	@ 0x54
 8009d56:	4656      	mov	r6, sl
 8009d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5c:	f7f6 ff24 	bl	8000ba8 <__aeabi_d2iz>
 8009d60:	4605      	mov	r5, r0
 8009d62:	f7f6 fc07 	bl	8000574 <__aeabi_i2d>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d6e:	f7f6 fab3 	bl	80002d8 <__aeabi_dsub>
 8009d72:	3530      	adds	r5, #48	@ 0x30
 8009d74:	f806 5b01 	strb.w	r5, [r6], #1
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	42a6      	cmp	r6, r4
 8009d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d82:	f04f 0200 	mov.w	r2, #0
 8009d86:	d124      	bne.n	8009dd2 <_dtoa_r+0x662>
 8009d88:	4bac      	ldr	r3, [pc, #688]	@ (800a03c <_dtoa_r+0x8cc>)
 8009d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d8e:	f7f6 faa5 	bl	80002dc <__adddf3>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d9a:	f7f6 fee5 	bl	8000b68 <__aeabi_dcmpgt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d145      	bne.n	8009e2e <_dtoa_r+0x6be>
 8009da2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009da6:	49a5      	ldr	r1, [pc, #660]	@ (800a03c <_dtoa_r+0x8cc>)
 8009da8:	2000      	movs	r0, #0
 8009daa:	f7f6 fa95 	bl	80002d8 <__aeabi_dsub>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db6:	f7f6 feb9 	bl	8000b2c <__aeabi_dcmplt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f43f aef5 	beq.w	8009baa <_dtoa_r+0x43a>
 8009dc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009dc2:	1e73      	subs	r3, r6, #1
 8009dc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009dc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dca:	2b30      	cmp	r3, #48	@ 0x30
 8009dcc:	d0f8      	beq.n	8009dc0 <_dtoa_r+0x650>
 8009dce:	9f04      	ldr	r7, [sp, #16]
 8009dd0:	e73e      	b.n	8009c50 <_dtoa_r+0x4e0>
 8009dd2:	4b9b      	ldr	r3, [pc, #620]	@ (800a040 <_dtoa_r+0x8d0>)
 8009dd4:	f7f6 fc38 	bl	8000648 <__aeabi_dmul>
 8009dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ddc:	e7bc      	b.n	8009d58 <_dtoa_r+0x5e8>
 8009dde:	d10c      	bne.n	8009dfa <_dtoa_r+0x68a>
 8009de0:	4b98      	ldr	r3, [pc, #608]	@ (800a044 <_dtoa_r+0x8d4>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009de8:	f7f6 fc2e 	bl	8000648 <__aeabi_dmul>
 8009dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009df0:	f7f6 feb0 	bl	8000b54 <__aeabi_dcmpge>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	f000 8157 	beq.w	800a0a8 <_dtoa_r+0x938>
 8009dfa:	2400      	movs	r4, #0
 8009dfc:	4625      	mov	r5, r4
 8009dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e00:	43db      	mvns	r3, r3
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	4656      	mov	r6, sl
 8009e06:	2700      	movs	r7, #0
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4658      	mov	r0, fp
 8009e0c:	f001 fd98 	bl	800b940 <_Bfree>
 8009e10:	2d00      	cmp	r5, #0
 8009e12:	d0dc      	beq.n	8009dce <_dtoa_r+0x65e>
 8009e14:	b12f      	cbz	r7, 8009e22 <_dtoa_r+0x6b2>
 8009e16:	42af      	cmp	r7, r5
 8009e18:	d003      	beq.n	8009e22 <_dtoa_r+0x6b2>
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	f001 fd8f 	bl	800b940 <_Bfree>
 8009e22:	4629      	mov	r1, r5
 8009e24:	4658      	mov	r0, fp
 8009e26:	f001 fd8b 	bl	800b940 <_Bfree>
 8009e2a:	e7d0      	b.n	8009dce <_dtoa_r+0x65e>
 8009e2c:	9704      	str	r7, [sp, #16]
 8009e2e:	4633      	mov	r3, r6
 8009e30:	461e      	mov	r6, r3
 8009e32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e36:	2a39      	cmp	r2, #57	@ 0x39
 8009e38:	d107      	bne.n	8009e4a <_dtoa_r+0x6da>
 8009e3a:	459a      	cmp	sl, r3
 8009e3c:	d1f8      	bne.n	8009e30 <_dtoa_r+0x6c0>
 8009e3e:	9a04      	ldr	r2, [sp, #16]
 8009e40:	3201      	adds	r2, #1
 8009e42:	9204      	str	r2, [sp, #16]
 8009e44:	2230      	movs	r2, #48	@ 0x30
 8009e46:	f88a 2000 	strb.w	r2, [sl]
 8009e4a:	781a      	ldrb	r2, [r3, #0]
 8009e4c:	3201      	adds	r2, #1
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e7bd      	b.n	8009dce <_dtoa_r+0x65e>
 8009e52:	4b7b      	ldr	r3, [pc, #492]	@ (800a040 <_dtoa_r+0x8d0>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	f7f6 fbf7 	bl	8000648 <__aeabi_dmul>
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	460d      	mov	r5, r1
 8009e62:	f7f6 fe59 	bl	8000b18 <__aeabi_dcmpeq>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f43f aebb 	beq.w	8009be2 <_dtoa_r+0x472>
 8009e6c:	e6f0      	b.n	8009c50 <_dtoa_r+0x4e0>
 8009e6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	f000 80db 	beq.w	800a02c <_dtoa_r+0x8bc>
 8009e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e78:	2a01      	cmp	r2, #1
 8009e7a:	f300 80bf 	bgt.w	8009ffc <_dtoa_r+0x88c>
 8009e7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	f000 80b7 	beq.w	8009ff4 <_dtoa_r+0x884>
 8009e86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e8c:	4646      	mov	r6, r8
 8009e8e:	9a08      	ldr	r2, [sp, #32]
 8009e90:	2101      	movs	r1, #1
 8009e92:	441a      	add	r2, r3
 8009e94:	4658      	mov	r0, fp
 8009e96:	4498      	add	r8, r3
 8009e98:	9208      	str	r2, [sp, #32]
 8009e9a:	f001 fe4f 	bl	800bb3c <__i2b>
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	b15e      	cbz	r6, 8009eba <_dtoa_r+0x74a>
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dd08      	ble.n	8009eba <_dtoa_r+0x74a>
 8009ea8:	42b3      	cmp	r3, r6
 8009eaa:	9a08      	ldr	r2, [sp, #32]
 8009eac:	bfa8      	it	ge
 8009eae:	4633      	movge	r3, r6
 8009eb0:	eba8 0803 	sub.w	r8, r8, r3
 8009eb4:	1af6      	subs	r6, r6, r3
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	9308      	str	r3, [sp, #32]
 8009eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ebc:	b1f3      	cbz	r3, 8009efc <_dtoa_r+0x78c>
 8009ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 80b7 	beq.w	800a034 <_dtoa_r+0x8c4>
 8009ec6:	b18c      	cbz	r4, 8009eec <_dtoa_r+0x77c>
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4658      	mov	r0, fp
 8009ece:	f001 fef5 	bl	800bcbc <__pow5mult>
 8009ed2:	464a      	mov	r2, r9
 8009ed4:	4601      	mov	r1, r0
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	4658      	mov	r0, fp
 8009eda:	f001 fe45 	bl	800bb68 <__multiply>
 8009ede:	4649      	mov	r1, r9
 8009ee0:	9004      	str	r0, [sp, #16]
 8009ee2:	4658      	mov	r0, fp
 8009ee4:	f001 fd2c 	bl	800b940 <_Bfree>
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	4699      	mov	r9, r3
 8009eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eee:	1b1a      	subs	r2, r3, r4
 8009ef0:	d004      	beq.n	8009efc <_dtoa_r+0x78c>
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	4658      	mov	r0, fp
 8009ef6:	f001 fee1 	bl	800bcbc <__pow5mult>
 8009efa:	4681      	mov	r9, r0
 8009efc:	2101      	movs	r1, #1
 8009efe:	4658      	mov	r0, fp
 8009f00:	f001 fe1c 	bl	800bb3c <__i2b>
 8009f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f06:	4604      	mov	r4, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 81cf 	beq.w	800a2ac <_dtoa_r+0xb3c>
 8009f0e:	461a      	mov	r2, r3
 8009f10:	4601      	mov	r1, r0
 8009f12:	4658      	mov	r0, fp
 8009f14:	f001 fed2 	bl	800bcbc <__pow5mult>
 8009f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	f300 8095 	bgt.w	800a04c <_dtoa_r+0x8dc>
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f040 8087 	bne.w	800a038 <_dtoa_r+0x8c8>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f040 8089 	bne.w	800a048 <_dtoa_r+0x8d8>
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f3c:	0d1b      	lsrs	r3, r3, #20
 8009f3e:	051b      	lsls	r3, r3, #20
 8009f40:	b12b      	cbz	r3, 8009f4e <_dtoa_r+0x7de>
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	3301      	adds	r3, #1
 8009f46:	9308      	str	r3, [sp, #32]
 8009f48:	f108 0801 	add.w	r8, r8, #1
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 81b0 	beq.w	800a2b8 <_dtoa_r+0xb48>
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f5e:	6918      	ldr	r0, [r3, #16]
 8009f60:	f001 fda0 	bl	800baa4 <__hi0bits>
 8009f64:	f1c0 0020 	rsb	r0, r0, #32
 8009f68:	9b08      	ldr	r3, [sp, #32]
 8009f6a:	4418      	add	r0, r3
 8009f6c:	f010 001f 	ands.w	r0, r0, #31
 8009f70:	d077      	beq.n	800a062 <_dtoa_r+0x8f2>
 8009f72:	f1c0 0320 	rsb	r3, r0, #32
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	dd6b      	ble.n	800a052 <_dtoa_r+0x8e2>
 8009f7a:	9b08      	ldr	r3, [sp, #32]
 8009f7c:	f1c0 001c 	rsb	r0, r0, #28
 8009f80:	4403      	add	r3, r0
 8009f82:	4480      	add	r8, r0
 8009f84:	4406      	add	r6, r0
 8009f86:	9308      	str	r3, [sp, #32]
 8009f88:	f1b8 0f00 	cmp.w	r8, #0
 8009f8c:	dd05      	ble.n	8009f9a <_dtoa_r+0x82a>
 8009f8e:	4649      	mov	r1, r9
 8009f90:	4642      	mov	r2, r8
 8009f92:	4658      	mov	r0, fp
 8009f94:	f001 feec 	bl	800bd70 <__lshift>
 8009f98:	4681      	mov	r9, r0
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dd05      	ble.n	8009fac <_dtoa_r+0x83c>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4658      	mov	r0, fp
 8009fa6:	f001 fee3 	bl	800bd70 <__lshift>
 8009faa:	4604      	mov	r4, r0
 8009fac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d059      	beq.n	800a066 <_dtoa_r+0x8f6>
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f001 ff47 	bl	800be48 <__mcmp>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	da53      	bge.n	800a066 <_dtoa_r+0x8f6>
 8009fbe:	1e7b      	subs	r3, r7, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	220a      	movs	r2, #10
 8009fc8:	4658      	mov	r0, fp
 8009fca:	f001 fcdb 	bl	800b984 <__multadd>
 8009fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd0:	4681      	mov	r9, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8172 	beq.w	800a2bc <_dtoa_r+0xb4c>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4629      	mov	r1, r5
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4658      	mov	r0, fp
 8009fe0:	f001 fcd0 	bl	800b984 <__multadd>
 8009fe4:	9b00      	ldr	r3, [sp, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	4605      	mov	r5, r0
 8009fea:	dc67      	bgt.n	800a0bc <_dtoa_r+0x94c>
 8009fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	dc41      	bgt.n	800a076 <_dtoa_r+0x906>
 8009ff2:	e063      	b.n	800a0bc <_dtoa_r+0x94c>
 8009ff4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ff6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ffa:	e746      	b.n	8009e8a <_dtoa_r+0x71a>
 8009ffc:	9b07      	ldr	r3, [sp, #28]
 8009ffe:	1e5c      	subs	r4, r3, #1
 800a000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a002:	42a3      	cmp	r3, r4
 800a004:	bfbf      	itttt	lt
 800a006:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a008:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a00a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a00c:	1ae3      	sublt	r3, r4, r3
 800a00e:	bfb4      	ite	lt
 800a010:	18d2      	addlt	r2, r2, r3
 800a012:	1b1c      	subge	r4, r3, r4
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	bfbc      	itt	lt
 800a018:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a01a:	2400      	movlt	r4, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bfb5      	itete	lt
 800a020:	eba8 0603 	sublt.w	r6, r8, r3
 800a024:	9b07      	ldrge	r3, [sp, #28]
 800a026:	2300      	movlt	r3, #0
 800a028:	4646      	movge	r6, r8
 800a02a:	e730      	b.n	8009e8e <_dtoa_r+0x71e>
 800a02c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a02e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a030:	4646      	mov	r6, r8
 800a032:	e735      	b.n	8009ea0 <_dtoa_r+0x730>
 800a034:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a036:	e75c      	b.n	8009ef2 <_dtoa_r+0x782>
 800a038:	2300      	movs	r3, #0
 800a03a:	e788      	b.n	8009f4e <_dtoa_r+0x7de>
 800a03c:	3fe00000 	.word	0x3fe00000
 800a040:	40240000 	.word	0x40240000
 800a044:	40140000 	.word	0x40140000
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	e780      	b.n	8009f4e <_dtoa_r+0x7de>
 800a04c:	2300      	movs	r3, #0
 800a04e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a050:	e782      	b.n	8009f58 <_dtoa_r+0x7e8>
 800a052:	d099      	beq.n	8009f88 <_dtoa_r+0x818>
 800a054:	9a08      	ldr	r2, [sp, #32]
 800a056:	331c      	adds	r3, #28
 800a058:	441a      	add	r2, r3
 800a05a:	4498      	add	r8, r3
 800a05c:	441e      	add	r6, r3
 800a05e:	9208      	str	r2, [sp, #32]
 800a060:	e792      	b.n	8009f88 <_dtoa_r+0x818>
 800a062:	4603      	mov	r3, r0
 800a064:	e7f6      	b.n	800a054 <_dtoa_r+0x8e4>
 800a066:	9b07      	ldr	r3, [sp, #28]
 800a068:	9704      	str	r7, [sp, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc20      	bgt.n	800a0b0 <_dtoa_r+0x940>
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a072:	2b02      	cmp	r3, #2
 800a074:	dd1e      	ble.n	800a0b4 <_dtoa_r+0x944>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f47f aec0 	bne.w	8009dfe <_dtoa_r+0x68e>
 800a07e:	4621      	mov	r1, r4
 800a080:	2205      	movs	r2, #5
 800a082:	4658      	mov	r0, fp
 800a084:	f001 fc7e 	bl	800b984 <__multadd>
 800a088:	4601      	mov	r1, r0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4648      	mov	r0, r9
 800a08e:	f001 fedb 	bl	800be48 <__mcmp>
 800a092:	2800      	cmp	r0, #0
 800a094:	f77f aeb3 	ble.w	8009dfe <_dtoa_r+0x68e>
 800a098:	4656      	mov	r6, sl
 800a09a:	2331      	movs	r3, #49	@ 0x31
 800a09c:	f806 3b01 	strb.w	r3, [r6], #1
 800a0a0:	9b04      	ldr	r3, [sp, #16]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	e6ae      	b.n	8009e06 <_dtoa_r+0x696>
 800a0a8:	9c07      	ldr	r4, [sp, #28]
 800a0aa:	9704      	str	r7, [sp, #16]
 800a0ac:	4625      	mov	r5, r4
 800a0ae:	e7f3      	b.n	800a098 <_dtoa_r+0x928>
 800a0b0:	9b07      	ldr	r3, [sp, #28]
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 8104 	beq.w	800a2c4 <_dtoa_r+0xb54>
 800a0bc:	2e00      	cmp	r6, #0
 800a0be:	dd05      	ble.n	800a0cc <_dtoa_r+0x95c>
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	4632      	mov	r2, r6
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f001 fe53 	bl	800bd70 <__lshift>
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d05a      	beq.n	800a188 <_dtoa_r+0xa18>
 800a0d2:	6869      	ldr	r1, [r5, #4]
 800a0d4:	4658      	mov	r0, fp
 800a0d6:	f001 fbf3 	bl	800b8c0 <_Balloc>
 800a0da:	4606      	mov	r6, r0
 800a0dc:	b928      	cbnz	r0, 800a0ea <_dtoa_r+0x97a>
 800a0de:	4b84      	ldr	r3, [pc, #528]	@ (800a2f0 <_dtoa_r+0xb80>)
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a0e6:	f7ff bb5a 	b.w	800979e <_dtoa_r+0x2e>
 800a0ea:	692a      	ldr	r2, [r5, #16]
 800a0ec:	3202      	adds	r2, #2
 800a0ee:	0092      	lsls	r2, r2, #2
 800a0f0:	f105 010c 	add.w	r1, r5, #12
 800a0f4:	300c      	adds	r0, #12
 800a0f6:	f7ff fa94 	bl	8009622 <memcpy>
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4658      	mov	r0, fp
 800a100:	f001 fe36 	bl	800bd70 <__lshift>
 800a104:	f10a 0301 	add.w	r3, sl, #1
 800a108:	9307      	str	r3, [sp, #28]
 800a10a:	9b00      	ldr	r3, [sp, #0]
 800a10c:	4453      	add	r3, sl
 800a10e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	462f      	mov	r7, r5
 800a118:	930a      	str	r3, [sp, #40]	@ 0x28
 800a11a:	4605      	mov	r5, r0
 800a11c:	9b07      	ldr	r3, [sp, #28]
 800a11e:	4621      	mov	r1, r4
 800a120:	3b01      	subs	r3, #1
 800a122:	4648      	mov	r0, r9
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	f7ff fa99 	bl	800965c <quorem>
 800a12a:	4639      	mov	r1, r7
 800a12c:	9002      	str	r0, [sp, #8]
 800a12e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a132:	4648      	mov	r0, r9
 800a134:	f001 fe88 	bl	800be48 <__mcmp>
 800a138:	462a      	mov	r2, r5
 800a13a:	9008      	str	r0, [sp, #32]
 800a13c:	4621      	mov	r1, r4
 800a13e:	4658      	mov	r0, fp
 800a140:	f001 fe9e 	bl	800be80 <__mdiff>
 800a144:	68c2      	ldr	r2, [r0, #12]
 800a146:	4606      	mov	r6, r0
 800a148:	bb02      	cbnz	r2, 800a18c <_dtoa_r+0xa1c>
 800a14a:	4601      	mov	r1, r0
 800a14c:	4648      	mov	r0, r9
 800a14e:	f001 fe7b 	bl	800be48 <__mcmp>
 800a152:	4602      	mov	r2, r0
 800a154:	4631      	mov	r1, r6
 800a156:	4658      	mov	r0, fp
 800a158:	920e      	str	r2, [sp, #56]	@ 0x38
 800a15a:	f001 fbf1 	bl	800b940 <_Bfree>
 800a15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a160:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a162:	9e07      	ldr	r6, [sp, #28]
 800a164:	ea43 0102 	orr.w	r1, r3, r2
 800a168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16a:	4319      	orrs	r1, r3
 800a16c:	d110      	bne.n	800a190 <_dtoa_r+0xa20>
 800a16e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a172:	d029      	beq.n	800a1c8 <_dtoa_r+0xa58>
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	dd02      	ble.n	800a180 <_dtoa_r+0xa10>
 800a17a:	9b02      	ldr	r3, [sp, #8]
 800a17c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a180:	9b00      	ldr	r3, [sp, #0]
 800a182:	f883 8000 	strb.w	r8, [r3]
 800a186:	e63f      	b.n	8009e08 <_dtoa_r+0x698>
 800a188:	4628      	mov	r0, r5
 800a18a:	e7bb      	b.n	800a104 <_dtoa_r+0x994>
 800a18c:	2201      	movs	r2, #1
 800a18e:	e7e1      	b.n	800a154 <_dtoa_r+0x9e4>
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	2b00      	cmp	r3, #0
 800a194:	db04      	blt.n	800a1a0 <_dtoa_r+0xa30>
 800a196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a198:	430b      	orrs	r3, r1
 800a19a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a19c:	430b      	orrs	r3, r1
 800a19e:	d120      	bne.n	800a1e2 <_dtoa_r+0xa72>
 800a1a0:	2a00      	cmp	r2, #0
 800a1a2:	dded      	ble.n	800a180 <_dtoa_r+0xa10>
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4658      	mov	r0, fp
 800a1aa:	f001 fde1 	bl	800bd70 <__lshift>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4681      	mov	r9, r0
 800a1b2:	f001 fe49 	bl	800be48 <__mcmp>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	dc03      	bgt.n	800a1c2 <_dtoa_r+0xa52>
 800a1ba:	d1e1      	bne.n	800a180 <_dtoa_r+0xa10>
 800a1bc:	f018 0f01 	tst.w	r8, #1
 800a1c0:	d0de      	beq.n	800a180 <_dtoa_r+0xa10>
 800a1c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1c6:	d1d8      	bne.n	800a17a <_dtoa_r+0xa0a>
 800a1c8:	9a00      	ldr	r2, [sp, #0]
 800a1ca:	2339      	movs	r3, #57	@ 0x39
 800a1cc:	7013      	strb	r3, [r2, #0]
 800a1ce:	4633      	mov	r3, r6
 800a1d0:	461e      	mov	r6, r3
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1d8:	2a39      	cmp	r2, #57	@ 0x39
 800a1da:	d052      	beq.n	800a282 <_dtoa_r+0xb12>
 800a1dc:	3201      	adds	r2, #1
 800a1de:	701a      	strb	r2, [r3, #0]
 800a1e0:	e612      	b.n	8009e08 <_dtoa_r+0x698>
 800a1e2:	2a00      	cmp	r2, #0
 800a1e4:	dd07      	ble.n	800a1f6 <_dtoa_r+0xa86>
 800a1e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1ea:	d0ed      	beq.n	800a1c8 <_dtoa_r+0xa58>
 800a1ec:	9a00      	ldr	r2, [sp, #0]
 800a1ee:	f108 0301 	add.w	r3, r8, #1
 800a1f2:	7013      	strb	r3, [r2, #0]
 800a1f4:	e608      	b.n	8009e08 <_dtoa_r+0x698>
 800a1f6:	9b07      	ldr	r3, [sp, #28]
 800a1f8:	9a07      	ldr	r2, [sp, #28]
 800a1fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a200:	4293      	cmp	r3, r2
 800a202:	d028      	beq.n	800a256 <_dtoa_r+0xae6>
 800a204:	4649      	mov	r1, r9
 800a206:	2300      	movs	r3, #0
 800a208:	220a      	movs	r2, #10
 800a20a:	4658      	mov	r0, fp
 800a20c:	f001 fbba 	bl	800b984 <__multadd>
 800a210:	42af      	cmp	r7, r5
 800a212:	4681      	mov	r9, r0
 800a214:	f04f 0300 	mov.w	r3, #0
 800a218:	f04f 020a 	mov.w	r2, #10
 800a21c:	4639      	mov	r1, r7
 800a21e:	4658      	mov	r0, fp
 800a220:	d107      	bne.n	800a232 <_dtoa_r+0xac2>
 800a222:	f001 fbaf 	bl	800b984 <__multadd>
 800a226:	4607      	mov	r7, r0
 800a228:	4605      	mov	r5, r0
 800a22a:	9b07      	ldr	r3, [sp, #28]
 800a22c:	3301      	adds	r3, #1
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	e774      	b.n	800a11c <_dtoa_r+0x9ac>
 800a232:	f001 fba7 	bl	800b984 <__multadd>
 800a236:	4629      	mov	r1, r5
 800a238:	4607      	mov	r7, r0
 800a23a:	2300      	movs	r3, #0
 800a23c:	220a      	movs	r2, #10
 800a23e:	4658      	mov	r0, fp
 800a240:	f001 fba0 	bl	800b984 <__multadd>
 800a244:	4605      	mov	r5, r0
 800a246:	e7f0      	b.n	800a22a <_dtoa_r+0xaba>
 800a248:	9b00      	ldr	r3, [sp, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfcc      	ite	gt
 800a24e:	461e      	movgt	r6, r3
 800a250:	2601      	movle	r6, #1
 800a252:	4456      	add	r6, sl
 800a254:	2700      	movs	r7, #0
 800a256:	4649      	mov	r1, r9
 800a258:	2201      	movs	r2, #1
 800a25a:	4658      	mov	r0, fp
 800a25c:	f001 fd88 	bl	800bd70 <__lshift>
 800a260:	4621      	mov	r1, r4
 800a262:	4681      	mov	r9, r0
 800a264:	f001 fdf0 	bl	800be48 <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	dcb0      	bgt.n	800a1ce <_dtoa_r+0xa5e>
 800a26c:	d102      	bne.n	800a274 <_dtoa_r+0xb04>
 800a26e:	f018 0f01 	tst.w	r8, #1
 800a272:	d1ac      	bne.n	800a1ce <_dtoa_r+0xa5e>
 800a274:	4633      	mov	r3, r6
 800a276:	461e      	mov	r6, r3
 800a278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a27c:	2a30      	cmp	r2, #48	@ 0x30
 800a27e:	d0fa      	beq.n	800a276 <_dtoa_r+0xb06>
 800a280:	e5c2      	b.n	8009e08 <_dtoa_r+0x698>
 800a282:	459a      	cmp	sl, r3
 800a284:	d1a4      	bne.n	800a1d0 <_dtoa_r+0xa60>
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	3301      	adds	r3, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	2331      	movs	r3, #49	@ 0x31
 800a28e:	f88a 3000 	strb.w	r3, [sl]
 800a292:	e5b9      	b.n	8009e08 <_dtoa_r+0x698>
 800a294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a296:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a2f4 <_dtoa_r+0xb84>
 800a29a:	b11b      	cbz	r3, 800a2a4 <_dtoa_r+0xb34>
 800a29c:	f10a 0308 	add.w	r3, sl, #8
 800a2a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	b019      	add	sp, #100	@ 0x64
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	f77f ae37 	ble.w	8009f22 <_dtoa_r+0x7b2>
 800a2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b8:	2001      	movs	r0, #1
 800a2ba:	e655      	b.n	8009f68 <_dtoa_r+0x7f8>
 800a2bc:	9b00      	ldr	r3, [sp, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f77f aed6 	ble.w	800a070 <_dtoa_r+0x900>
 800a2c4:	4656      	mov	r6, sl
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	f7ff f9c7 	bl	800965c <quorem>
 800a2ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2d2:	f806 8b01 	strb.w	r8, [r6], #1
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	eba6 020a 	sub.w	r2, r6, sl
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	ddb3      	ble.n	800a248 <_dtoa_r+0xad8>
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	220a      	movs	r2, #10
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f001 fb4c 	bl	800b984 <__multadd>
 800a2ec:	4681      	mov	r9, r0
 800a2ee:	e7ea      	b.n	800a2c6 <_dtoa_r+0xb56>
 800a2f0:	0800d085 	.word	0x0800d085
 800a2f4:	0800d009 	.word	0x0800d009

0800a2f8 <_free_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d041      	beq.n	800a384 <_free_r+0x8c>
 800a300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a304:	1f0c      	subs	r4, r1, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	bfb8      	it	lt
 800a30a:	18e4      	addlt	r4, r4, r3
 800a30c:	f001 facc 	bl	800b8a8 <__malloc_lock>
 800a310:	4a1d      	ldr	r2, [pc, #116]	@ (800a388 <_free_r+0x90>)
 800a312:	6813      	ldr	r3, [r2, #0]
 800a314:	b933      	cbnz	r3, 800a324 <_free_r+0x2c>
 800a316:	6063      	str	r3, [r4, #4]
 800a318:	6014      	str	r4, [r2, #0]
 800a31a:	4628      	mov	r0, r5
 800a31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a320:	f001 bac8 	b.w	800b8b4 <__malloc_unlock>
 800a324:	42a3      	cmp	r3, r4
 800a326:	d908      	bls.n	800a33a <_free_r+0x42>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	1821      	adds	r1, r4, r0
 800a32c:	428b      	cmp	r3, r1
 800a32e:	bf01      	itttt	eq
 800a330:	6819      	ldreq	r1, [r3, #0]
 800a332:	685b      	ldreq	r3, [r3, #4]
 800a334:	1809      	addeq	r1, r1, r0
 800a336:	6021      	streq	r1, [r4, #0]
 800a338:	e7ed      	b.n	800a316 <_free_r+0x1e>
 800a33a:	461a      	mov	r2, r3
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b10b      	cbz	r3, 800a344 <_free_r+0x4c>
 800a340:	42a3      	cmp	r3, r4
 800a342:	d9fa      	bls.n	800a33a <_free_r+0x42>
 800a344:	6811      	ldr	r1, [r2, #0]
 800a346:	1850      	adds	r0, r2, r1
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d10b      	bne.n	800a364 <_free_r+0x6c>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	4401      	add	r1, r0
 800a350:	1850      	adds	r0, r2, r1
 800a352:	4283      	cmp	r3, r0
 800a354:	6011      	str	r1, [r2, #0]
 800a356:	d1e0      	bne.n	800a31a <_free_r+0x22>
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	6053      	str	r3, [r2, #4]
 800a35e:	4408      	add	r0, r1
 800a360:	6010      	str	r0, [r2, #0]
 800a362:	e7da      	b.n	800a31a <_free_r+0x22>
 800a364:	d902      	bls.n	800a36c <_free_r+0x74>
 800a366:	230c      	movs	r3, #12
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	e7d6      	b.n	800a31a <_free_r+0x22>
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	1821      	adds	r1, r4, r0
 800a370:	428b      	cmp	r3, r1
 800a372:	bf04      	itt	eq
 800a374:	6819      	ldreq	r1, [r3, #0]
 800a376:	685b      	ldreq	r3, [r3, #4]
 800a378:	6063      	str	r3, [r4, #4]
 800a37a:	bf04      	itt	eq
 800a37c:	1809      	addeq	r1, r1, r0
 800a37e:	6021      	streq	r1, [r4, #0]
 800a380:	6054      	str	r4, [r2, #4]
 800a382:	e7ca      	b.n	800a31a <_free_r+0x22>
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	2000088c 	.word	0x2000088c

0800a38c <rshift>:
 800a38c:	6903      	ldr	r3, [r0, #16]
 800a38e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a392:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a396:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a39a:	f100 0414 	add.w	r4, r0, #20
 800a39e:	dd45      	ble.n	800a42c <rshift+0xa0>
 800a3a0:	f011 011f 	ands.w	r1, r1, #31
 800a3a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3ac:	d10c      	bne.n	800a3c8 <rshift+0x3c>
 800a3ae:	f100 0710 	add.w	r7, r0, #16
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	42b1      	cmp	r1, r6
 800a3b6:	d334      	bcc.n	800a422 <rshift+0x96>
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	1eea      	subs	r2, r5, #3
 800a3be:	4296      	cmp	r6, r2
 800a3c0:	bf38      	it	cc
 800a3c2:	2300      	movcc	r3, #0
 800a3c4:	4423      	add	r3, r4
 800a3c6:	e015      	b.n	800a3f4 <rshift+0x68>
 800a3c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3cc:	f1c1 0820 	rsb	r8, r1, #32
 800a3d0:	40cf      	lsrs	r7, r1
 800a3d2:	f105 0e04 	add.w	lr, r5, #4
 800a3d6:	46a1      	mov	r9, r4
 800a3d8:	4576      	cmp	r6, lr
 800a3da:	46f4      	mov	ip, lr
 800a3dc:	d815      	bhi.n	800a40a <rshift+0x7e>
 800a3de:	1a9a      	subs	r2, r3, r2
 800a3e0:	0092      	lsls	r2, r2, #2
 800a3e2:	3a04      	subs	r2, #4
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	42ae      	cmp	r6, r5
 800a3e8:	bf38      	it	cc
 800a3ea:	2200      	movcc	r2, #0
 800a3ec:	18a3      	adds	r3, r4, r2
 800a3ee:	50a7      	str	r7, [r4, r2]
 800a3f0:	b107      	cbz	r7, 800a3f4 <rshift+0x68>
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	1b1a      	subs	r2, r3, r4
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3fc:	bf08      	it	eq
 800a3fe:	2300      	moveq	r3, #0
 800a400:	6102      	str	r2, [r0, #16]
 800a402:	bf08      	it	eq
 800a404:	6143      	streq	r3, [r0, #20]
 800a406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40a:	f8dc c000 	ldr.w	ip, [ip]
 800a40e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a412:	ea4c 0707 	orr.w	r7, ip, r7
 800a416:	f849 7b04 	str.w	r7, [r9], #4
 800a41a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a41e:	40cf      	lsrs	r7, r1
 800a420:	e7da      	b.n	800a3d8 <rshift+0x4c>
 800a422:	f851 cb04 	ldr.w	ip, [r1], #4
 800a426:	f847 cf04 	str.w	ip, [r7, #4]!
 800a42a:	e7c3      	b.n	800a3b4 <rshift+0x28>
 800a42c:	4623      	mov	r3, r4
 800a42e:	e7e1      	b.n	800a3f4 <rshift+0x68>

0800a430 <__hexdig_fun>:
 800a430:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a434:	2b09      	cmp	r3, #9
 800a436:	d802      	bhi.n	800a43e <__hexdig_fun+0xe>
 800a438:	3820      	subs	r0, #32
 800a43a:	b2c0      	uxtb	r0, r0
 800a43c:	4770      	bx	lr
 800a43e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a442:	2b05      	cmp	r3, #5
 800a444:	d801      	bhi.n	800a44a <__hexdig_fun+0x1a>
 800a446:	3847      	subs	r0, #71	@ 0x47
 800a448:	e7f7      	b.n	800a43a <__hexdig_fun+0xa>
 800a44a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a44e:	2b05      	cmp	r3, #5
 800a450:	d801      	bhi.n	800a456 <__hexdig_fun+0x26>
 800a452:	3827      	subs	r0, #39	@ 0x27
 800a454:	e7f1      	b.n	800a43a <__hexdig_fun+0xa>
 800a456:	2000      	movs	r0, #0
 800a458:	4770      	bx	lr
	...

0800a45c <__gethex>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	b085      	sub	sp, #20
 800a462:	468a      	mov	sl, r1
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	680b      	ldr	r3, [r1, #0]
 800a468:	9001      	str	r0, [sp, #4]
 800a46a:	4690      	mov	r8, r2
 800a46c:	1c9c      	adds	r4, r3, #2
 800a46e:	46a1      	mov	r9, r4
 800a470:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a474:	2830      	cmp	r0, #48	@ 0x30
 800a476:	d0fa      	beq.n	800a46e <__gethex+0x12>
 800a478:	eba9 0303 	sub.w	r3, r9, r3
 800a47c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a480:	f7ff ffd6 	bl	800a430 <__hexdig_fun>
 800a484:	4605      	mov	r5, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d168      	bne.n	800a55c <__gethex+0x100>
 800a48a:	49a0      	ldr	r1, [pc, #640]	@ (800a70c <__gethex+0x2b0>)
 800a48c:	2201      	movs	r2, #1
 800a48e:	4648      	mov	r0, r9
 800a490:	f7ff f836 	bl	8009500 <strncmp>
 800a494:	4607      	mov	r7, r0
 800a496:	2800      	cmp	r0, #0
 800a498:	d167      	bne.n	800a56a <__gethex+0x10e>
 800a49a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a49e:	4626      	mov	r6, r4
 800a4a0:	f7ff ffc6 	bl	800a430 <__hexdig_fun>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d062      	beq.n	800a56e <__gethex+0x112>
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	7818      	ldrb	r0, [r3, #0]
 800a4ac:	2830      	cmp	r0, #48	@ 0x30
 800a4ae:	4699      	mov	r9, r3
 800a4b0:	f103 0301 	add.w	r3, r3, #1
 800a4b4:	d0f9      	beq.n	800a4aa <__gethex+0x4e>
 800a4b6:	f7ff ffbb 	bl	800a430 <__hexdig_fun>
 800a4ba:	fab0 f580 	clz	r5, r0
 800a4be:	096d      	lsrs	r5, r5, #5
 800a4c0:	f04f 0b01 	mov.w	fp, #1
 800a4c4:	464a      	mov	r2, r9
 800a4c6:	4616      	mov	r6, r2
 800a4c8:	3201      	adds	r2, #1
 800a4ca:	7830      	ldrb	r0, [r6, #0]
 800a4cc:	f7ff ffb0 	bl	800a430 <__hexdig_fun>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1f8      	bne.n	800a4c6 <__gethex+0x6a>
 800a4d4:	498d      	ldr	r1, [pc, #564]	@ (800a70c <__gethex+0x2b0>)
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f7ff f811 	bl	8009500 <strncmp>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d13f      	bne.n	800a562 <__gethex+0x106>
 800a4e2:	b944      	cbnz	r4, 800a4f6 <__gethex+0x9a>
 800a4e4:	1c74      	adds	r4, r6, #1
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	7830      	ldrb	r0, [r6, #0]
 800a4ee:	f7ff ff9f 	bl	800a430 <__hexdig_fun>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d1f8      	bne.n	800a4e8 <__gethex+0x8c>
 800a4f6:	1ba4      	subs	r4, r4, r6
 800a4f8:	00a7      	lsls	r7, r4, #2
 800a4fa:	7833      	ldrb	r3, [r6, #0]
 800a4fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a500:	2b50      	cmp	r3, #80	@ 0x50
 800a502:	d13e      	bne.n	800a582 <__gethex+0x126>
 800a504:	7873      	ldrb	r3, [r6, #1]
 800a506:	2b2b      	cmp	r3, #43	@ 0x2b
 800a508:	d033      	beq.n	800a572 <__gethex+0x116>
 800a50a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a50c:	d034      	beq.n	800a578 <__gethex+0x11c>
 800a50e:	1c71      	adds	r1, r6, #1
 800a510:	2400      	movs	r4, #0
 800a512:	7808      	ldrb	r0, [r1, #0]
 800a514:	f7ff ff8c 	bl	800a430 <__hexdig_fun>
 800a518:	1e43      	subs	r3, r0, #1
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b18      	cmp	r3, #24
 800a51e:	d830      	bhi.n	800a582 <__gethex+0x126>
 800a520:	f1a0 0210 	sub.w	r2, r0, #16
 800a524:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a528:	f7ff ff82 	bl	800a430 <__hexdig_fun>
 800a52c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a530:	fa5f fc8c 	uxtb.w	ip, ip
 800a534:	f1bc 0f18 	cmp.w	ip, #24
 800a538:	f04f 030a 	mov.w	r3, #10
 800a53c:	d91e      	bls.n	800a57c <__gethex+0x120>
 800a53e:	b104      	cbz	r4, 800a542 <__gethex+0xe6>
 800a540:	4252      	negs	r2, r2
 800a542:	4417      	add	r7, r2
 800a544:	f8ca 1000 	str.w	r1, [sl]
 800a548:	b1ed      	cbz	r5, 800a586 <__gethex+0x12a>
 800a54a:	f1bb 0f00 	cmp.w	fp, #0
 800a54e:	bf0c      	ite	eq
 800a550:	2506      	moveq	r5, #6
 800a552:	2500      	movne	r5, #0
 800a554:	4628      	mov	r0, r5
 800a556:	b005      	add	sp, #20
 800a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55c:	2500      	movs	r5, #0
 800a55e:	462c      	mov	r4, r5
 800a560:	e7b0      	b.n	800a4c4 <__gethex+0x68>
 800a562:	2c00      	cmp	r4, #0
 800a564:	d1c7      	bne.n	800a4f6 <__gethex+0x9a>
 800a566:	4627      	mov	r7, r4
 800a568:	e7c7      	b.n	800a4fa <__gethex+0x9e>
 800a56a:	464e      	mov	r6, r9
 800a56c:	462f      	mov	r7, r5
 800a56e:	2501      	movs	r5, #1
 800a570:	e7c3      	b.n	800a4fa <__gethex+0x9e>
 800a572:	2400      	movs	r4, #0
 800a574:	1cb1      	adds	r1, r6, #2
 800a576:	e7cc      	b.n	800a512 <__gethex+0xb6>
 800a578:	2401      	movs	r4, #1
 800a57a:	e7fb      	b.n	800a574 <__gethex+0x118>
 800a57c:	fb03 0002 	mla	r0, r3, r2, r0
 800a580:	e7ce      	b.n	800a520 <__gethex+0xc4>
 800a582:	4631      	mov	r1, r6
 800a584:	e7de      	b.n	800a544 <__gethex+0xe8>
 800a586:	eba6 0309 	sub.w	r3, r6, r9
 800a58a:	3b01      	subs	r3, #1
 800a58c:	4629      	mov	r1, r5
 800a58e:	2b07      	cmp	r3, #7
 800a590:	dc0a      	bgt.n	800a5a8 <__gethex+0x14c>
 800a592:	9801      	ldr	r0, [sp, #4]
 800a594:	f001 f994 	bl	800b8c0 <_Balloc>
 800a598:	4604      	mov	r4, r0
 800a59a:	b940      	cbnz	r0, 800a5ae <__gethex+0x152>
 800a59c:	4b5c      	ldr	r3, [pc, #368]	@ (800a710 <__gethex+0x2b4>)
 800a59e:	4602      	mov	r2, r0
 800a5a0:	21e4      	movs	r1, #228	@ 0xe4
 800a5a2:	485c      	ldr	r0, [pc, #368]	@ (800a714 <__gethex+0x2b8>)
 800a5a4:	f002 f866 	bl	800c674 <__assert_func>
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	105b      	asrs	r3, r3, #1
 800a5ac:	e7ef      	b.n	800a58e <__gethex+0x132>
 800a5ae:	f100 0a14 	add.w	sl, r0, #20
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	4655      	mov	r5, sl
 800a5b6:	469b      	mov	fp, r3
 800a5b8:	45b1      	cmp	r9, r6
 800a5ba:	d337      	bcc.n	800a62c <__gethex+0x1d0>
 800a5bc:	f845 bb04 	str.w	fp, [r5], #4
 800a5c0:	eba5 050a 	sub.w	r5, r5, sl
 800a5c4:	10ad      	asrs	r5, r5, #2
 800a5c6:	6125      	str	r5, [r4, #16]
 800a5c8:	4658      	mov	r0, fp
 800a5ca:	f001 fa6b 	bl	800baa4 <__hi0bits>
 800a5ce:	016d      	lsls	r5, r5, #5
 800a5d0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5d4:	1a2d      	subs	r5, r5, r0
 800a5d6:	42b5      	cmp	r5, r6
 800a5d8:	dd54      	ble.n	800a684 <__gethex+0x228>
 800a5da:	1bad      	subs	r5, r5, r6
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f001 fdff 	bl	800c1e2 <__any_on>
 800a5e4:	4681      	mov	r9, r0
 800a5e6:	b178      	cbz	r0, 800a608 <__gethex+0x1ac>
 800a5e8:	1e6b      	subs	r3, r5, #1
 800a5ea:	1159      	asrs	r1, r3, #5
 800a5ec:	f003 021f 	and.w	r2, r3, #31
 800a5f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5f4:	f04f 0901 	mov.w	r9, #1
 800a5f8:	fa09 f202 	lsl.w	r2, r9, r2
 800a5fc:	420a      	tst	r2, r1
 800a5fe:	d003      	beq.n	800a608 <__gethex+0x1ac>
 800a600:	454b      	cmp	r3, r9
 800a602:	dc36      	bgt.n	800a672 <__gethex+0x216>
 800a604:	f04f 0902 	mov.w	r9, #2
 800a608:	4629      	mov	r1, r5
 800a60a:	4620      	mov	r0, r4
 800a60c:	f7ff febe 	bl	800a38c <rshift>
 800a610:	442f      	add	r7, r5
 800a612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a616:	42bb      	cmp	r3, r7
 800a618:	da42      	bge.n	800a6a0 <__gethex+0x244>
 800a61a:	9801      	ldr	r0, [sp, #4]
 800a61c:	4621      	mov	r1, r4
 800a61e:	f001 f98f 	bl	800b940 <_Bfree>
 800a622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a624:	2300      	movs	r3, #0
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	25a3      	movs	r5, #163	@ 0xa3
 800a62a:	e793      	b.n	800a554 <__gethex+0xf8>
 800a62c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a630:	2a2e      	cmp	r2, #46	@ 0x2e
 800a632:	d012      	beq.n	800a65a <__gethex+0x1fe>
 800a634:	2b20      	cmp	r3, #32
 800a636:	d104      	bne.n	800a642 <__gethex+0x1e6>
 800a638:	f845 bb04 	str.w	fp, [r5], #4
 800a63c:	f04f 0b00 	mov.w	fp, #0
 800a640:	465b      	mov	r3, fp
 800a642:	7830      	ldrb	r0, [r6, #0]
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	f7ff fef3 	bl	800a430 <__hexdig_fun>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	f000 000f 	and.w	r0, r0, #15
 800a650:	4098      	lsls	r0, r3
 800a652:	ea4b 0b00 	orr.w	fp, fp, r0
 800a656:	3304      	adds	r3, #4
 800a658:	e7ae      	b.n	800a5b8 <__gethex+0x15c>
 800a65a:	45b1      	cmp	r9, r6
 800a65c:	d8ea      	bhi.n	800a634 <__gethex+0x1d8>
 800a65e:	492b      	ldr	r1, [pc, #172]	@ (800a70c <__gethex+0x2b0>)
 800a660:	9303      	str	r3, [sp, #12]
 800a662:	2201      	movs	r2, #1
 800a664:	4630      	mov	r0, r6
 800a666:	f7fe ff4b 	bl	8009500 <strncmp>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d1e1      	bne.n	800a634 <__gethex+0x1d8>
 800a670:	e7a2      	b.n	800a5b8 <__gethex+0x15c>
 800a672:	1ea9      	subs	r1, r5, #2
 800a674:	4620      	mov	r0, r4
 800a676:	f001 fdb4 	bl	800c1e2 <__any_on>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d0c2      	beq.n	800a604 <__gethex+0x1a8>
 800a67e:	f04f 0903 	mov.w	r9, #3
 800a682:	e7c1      	b.n	800a608 <__gethex+0x1ac>
 800a684:	da09      	bge.n	800a69a <__gethex+0x23e>
 800a686:	1b75      	subs	r5, r6, r5
 800a688:	4621      	mov	r1, r4
 800a68a:	9801      	ldr	r0, [sp, #4]
 800a68c:	462a      	mov	r2, r5
 800a68e:	f001 fb6f 	bl	800bd70 <__lshift>
 800a692:	1b7f      	subs	r7, r7, r5
 800a694:	4604      	mov	r4, r0
 800a696:	f100 0a14 	add.w	sl, r0, #20
 800a69a:	f04f 0900 	mov.w	r9, #0
 800a69e:	e7b8      	b.n	800a612 <__gethex+0x1b6>
 800a6a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6a4:	42bd      	cmp	r5, r7
 800a6a6:	dd6f      	ble.n	800a788 <__gethex+0x32c>
 800a6a8:	1bed      	subs	r5, r5, r7
 800a6aa:	42ae      	cmp	r6, r5
 800a6ac:	dc34      	bgt.n	800a718 <__gethex+0x2bc>
 800a6ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d022      	beq.n	800a6fc <__gethex+0x2a0>
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d024      	beq.n	800a704 <__gethex+0x2a8>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d115      	bne.n	800a6ea <__gethex+0x28e>
 800a6be:	42ae      	cmp	r6, r5
 800a6c0:	d113      	bne.n	800a6ea <__gethex+0x28e>
 800a6c2:	2e01      	cmp	r6, #1
 800a6c4:	d10b      	bne.n	800a6de <__gethex+0x282>
 800a6c6:	9a02      	ldr	r2, [sp, #8]
 800a6c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	f8ca 3000 	str.w	r3, [sl]
 800a6d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d8:	2562      	movs	r5, #98	@ 0x62
 800a6da:	601c      	str	r4, [r3, #0]
 800a6dc:	e73a      	b.n	800a554 <__gethex+0xf8>
 800a6de:	1e71      	subs	r1, r6, #1
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f001 fd7e 	bl	800c1e2 <__any_on>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d1ed      	bne.n	800a6c6 <__gethex+0x26a>
 800a6ea:	9801      	ldr	r0, [sp, #4]
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	f001 f927 	bl	800b940 <_Bfree>
 800a6f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	2550      	movs	r5, #80	@ 0x50
 800a6fa:	e72b      	b.n	800a554 <__gethex+0xf8>
 800a6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1f3      	bne.n	800a6ea <__gethex+0x28e>
 800a702:	e7e0      	b.n	800a6c6 <__gethex+0x26a>
 800a704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1dd      	bne.n	800a6c6 <__gethex+0x26a>
 800a70a:	e7ee      	b.n	800a6ea <__gethex+0x28e>
 800a70c:	0800ceab 	.word	0x0800ceab
 800a710:	0800d085 	.word	0x0800d085
 800a714:	0800d096 	.word	0x0800d096
 800a718:	1e6f      	subs	r7, r5, #1
 800a71a:	f1b9 0f00 	cmp.w	r9, #0
 800a71e:	d130      	bne.n	800a782 <__gethex+0x326>
 800a720:	b127      	cbz	r7, 800a72c <__gethex+0x2d0>
 800a722:	4639      	mov	r1, r7
 800a724:	4620      	mov	r0, r4
 800a726:	f001 fd5c 	bl	800c1e2 <__any_on>
 800a72a:	4681      	mov	r9, r0
 800a72c:	117a      	asrs	r2, r7, #5
 800a72e:	2301      	movs	r3, #1
 800a730:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a734:	f007 071f 	and.w	r7, r7, #31
 800a738:	40bb      	lsls	r3, r7
 800a73a:	4213      	tst	r3, r2
 800a73c:	4629      	mov	r1, r5
 800a73e:	4620      	mov	r0, r4
 800a740:	bf18      	it	ne
 800a742:	f049 0902 	orrne.w	r9, r9, #2
 800a746:	f7ff fe21 	bl	800a38c <rshift>
 800a74a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a74e:	1b76      	subs	r6, r6, r5
 800a750:	2502      	movs	r5, #2
 800a752:	f1b9 0f00 	cmp.w	r9, #0
 800a756:	d047      	beq.n	800a7e8 <__gethex+0x38c>
 800a758:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d015      	beq.n	800a78c <__gethex+0x330>
 800a760:	2b03      	cmp	r3, #3
 800a762:	d017      	beq.n	800a794 <__gethex+0x338>
 800a764:	2b01      	cmp	r3, #1
 800a766:	d109      	bne.n	800a77c <__gethex+0x320>
 800a768:	f019 0f02 	tst.w	r9, #2
 800a76c:	d006      	beq.n	800a77c <__gethex+0x320>
 800a76e:	f8da 3000 	ldr.w	r3, [sl]
 800a772:	ea49 0903 	orr.w	r9, r9, r3
 800a776:	f019 0f01 	tst.w	r9, #1
 800a77a:	d10e      	bne.n	800a79a <__gethex+0x33e>
 800a77c:	f045 0510 	orr.w	r5, r5, #16
 800a780:	e032      	b.n	800a7e8 <__gethex+0x38c>
 800a782:	f04f 0901 	mov.w	r9, #1
 800a786:	e7d1      	b.n	800a72c <__gethex+0x2d0>
 800a788:	2501      	movs	r5, #1
 800a78a:	e7e2      	b.n	800a752 <__gethex+0x2f6>
 800a78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a78e:	f1c3 0301 	rsb	r3, r3, #1
 800a792:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0f0      	beq.n	800a77c <__gethex+0x320>
 800a79a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a79e:	f104 0314 	add.w	r3, r4, #20
 800a7a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7aa:	f04f 0c00 	mov.w	ip, #0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a7b8:	d01b      	beq.n	800a7f2 <__gethex+0x396>
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	6002      	str	r2, [r0, #0]
 800a7be:	2d02      	cmp	r5, #2
 800a7c0:	f104 0314 	add.w	r3, r4, #20
 800a7c4:	d13c      	bne.n	800a840 <__gethex+0x3e4>
 800a7c6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7ca:	3a01      	subs	r2, #1
 800a7cc:	42b2      	cmp	r2, r6
 800a7ce:	d109      	bne.n	800a7e4 <__gethex+0x388>
 800a7d0:	1171      	asrs	r1, r6, #5
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7d8:	f006 061f 	and.w	r6, r6, #31
 800a7dc:	fa02 f606 	lsl.w	r6, r2, r6
 800a7e0:	421e      	tst	r6, r3
 800a7e2:	d13a      	bne.n	800a85a <__gethex+0x3fe>
 800a7e4:	f045 0520 	orr.w	r5, r5, #32
 800a7e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ea:	601c      	str	r4, [r3, #0]
 800a7ec:	9b02      	ldr	r3, [sp, #8]
 800a7ee:	601f      	str	r7, [r3, #0]
 800a7f0:	e6b0      	b.n	800a554 <__gethex+0xf8>
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7f8:	d8d9      	bhi.n	800a7ae <__gethex+0x352>
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	459b      	cmp	fp, r3
 800a7fe:	db17      	blt.n	800a830 <__gethex+0x3d4>
 800a800:	6861      	ldr	r1, [r4, #4]
 800a802:	9801      	ldr	r0, [sp, #4]
 800a804:	3101      	adds	r1, #1
 800a806:	f001 f85b 	bl	800b8c0 <_Balloc>
 800a80a:	4681      	mov	r9, r0
 800a80c:	b918      	cbnz	r0, 800a816 <__gethex+0x3ba>
 800a80e:	4b1a      	ldr	r3, [pc, #104]	@ (800a878 <__gethex+0x41c>)
 800a810:	4602      	mov	r2, r0
 800a812:	2184      	movs	r1, #132	@ 0x84
 800a814:	e6c5      	b.n	800a5a2 <__gethex+0x146>
 800a816:	6922      	ldr	r2, [r4, #16]
 800a818:	3202      	adds	r2, #2
 800a81a:	f104 010c 	add.w	r1, r4, #12
 800a81e:	0092      	lsls	r2, r2, #2
 800a820:	300c      	adds	r0, #12
 800a822:	f7fe fefe 	bl	8009622 <memcpy>
 800a826:	4621      	mov	r1, r4
 800a828:	9801      	ldr	r0, [sp, #4]
 800a82a:	f001 f889 	bl	800b940 <_Bfree>
 800a82e:	464c      	mov	r4, r9
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a838:	6122      	str	r2, [r4, #16]
 800a83a:	2201      	movs	r2, #1
 800a83c:	615a      	str	r2, [r3, #20]
 800a83e:	e7be      	b.n	800a7be <__gethex+0x362>
 800a840:	6922      	ldr	r2, [r4, #16]
 800a842:	455a      	cmp	r2, fp
 800a844:	dd0b      	ble.n	800a85e <__gethex+0x402>
 800a846:	2101      	movs	r1, #1
 800a848:	4620      	mov	r0, r4
 800a84a:	f7ff fd9f 	bl	800a38c <rshift>
 800a84e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a852:	3701      	adds	r7, #1
 800a854:	42bb      	cmp	r3, r7
 800a856:	f6ff aee0 	blt.w	800a61a <__gethex+0x1be>
 800a85a:	2501      	movs	r5, #1
 800a85c:	e7c2      	b.n	800a7e4 <__gethex+0x388>
 800a85e:	f016 061f 	ands.w	r6, r6, #31
 800a862:	d0fa      	beq.n	800a85a <__gethex+0x3fe>
 800a864:	4453      	add	r3, sl
 800a866:	f1c6 0620 	rsb	r6, r6, #32
 800a86a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a86e:	f001 f919 	bl	800baa4 <__hi0bits>
 800a872:	42b0      	cmp	r0, r6
 800a874:	dbe7      	blt.n	800a846 <__gethex+0x3ea>
 800a876:	e7f0      	b.n	800a85a <__gethex+0x3fe>
 800a878:	0800d085 	.word	0x0800d085

0800a87c <L_shift>:
 800a87c:	f1c2 0208 	rsb	r2, r2, #8
 800a880:	0092      	lsls	r2, r2, #2
 800a882:	b570      	push	{r4, r5, r6, lr}
 800a884:	f1c2 0620 	rsb	r6, r2, #32
 800a888:	6843      	ldr	r3, [r0, #4]
 800a88a:	6804      	ldr	r4, [r0, #0]
 800a88c:	fa03 f506 	lsl.w	r5, r3, r6
 800a890:	432c      	orrs	r4, r5
 800a892:	40d3      	lsrs	r3, r2
 800a894:	6004      	str	r4, [r0, #0]
 800a896:	f840 3f04 	str.w	r3, [r0, #4]!
 800a89a:	4288      	cmp	r0, r1
 800a89c:	d3f4      	bcc.n	800a888 <L_shift+0xc>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}

0800a8a0 <__match>:
 800a8a0:	b530      	push	{r4, r5, lr}
 800a8a2:	6803      	ldr	r3, [r0, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8aa:	b914      	cbnz	r4, 800a8b2 <__match+0x12>
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	bd30      	pop	{r4, r5, pc}
 800a8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8ba:	2d19      	cmp	r5, #25
 800a8bc:	bf98      	it	ls
 800a8be:	3220      	addls	r2, #32
 800a8c0:	42a2      	cmp	r2, r4
 800a8c2:	d0f0      	beq.n	800a8a6 <__match+0x6>
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e7f3      	b.n	800a8b0 <__match+0x10>

0800a8c8 <__hexnan>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	680b      	ldr	r3, [r1, #0]
 800a8ce:	6801      	ldr	r1, [r0, #0]
 800a8d0:	115e      	asrs	r6, r3, #5
 800a8d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8d6:	f013 031f 	ands.w	r3, r3, #31
 800a8da:	b087      	sub	sp, #28
 800a8dc:	bf18      	it	ne
 800a8de:	3604      	addne	r6, #4
 800a8e0:	2500      	movs	r5, #0
 800a8e2:	1f37      	subs	r7, r6, #4
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	4690      	mov	r8, r2
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8ee:	46b9      	mov	r9, r7
 800a8f0:	463c      	mov	r4, r7
 800a8f2:	9502      	str	r5, [sp, #8]
 800a8f4:	46ab      	mov	fp, r5
 800a8f6:	784a      	ldrb	r2, [r1, #1]
 800a8f8:	1c4b      	adds	r3, r1, #1
 800a8fa:	9303      	str	r3, [sp, #12]
 800a8fc:	b342      	cbz	r2, 800a950 <__hexnan+0x88>
 800a8fe:	4610      	mov	r0, r2
 800a900:	9105      	str	r1, [sp, #20]
 800a902:	9204      	str	r2, [sp, #16]
 800a904:	f7ff fd94 	bl	800a430 <__hexdig_fun>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d151      	bne.n	800a9b0 <__hexnan+0xe8>
 800a90c:	9a04      	ldr	r2, [sp, #16]
 800a90e:	9905      	ldr	r1, [sp, #20]
 800a910:	2a20      	cmp	r2, #32
 800a912:	d818      	bhi.n	800a946 <__hexnan+0x7e>
 800a914:	9b02      	ldr	r3, [sp, #8]
 800a916:	459b      	cmp	fp, r3
 800a918:	dd13      	ble.n	800a942 <__hexnan+0x7a>
 800a91a:	454c      	cmp	r4, r9
 800a91c:	d206      	bcs.n	800a92c <__hexnan+0x64>
 800a91e:	2d07      	cmp	r5, #7
 800a920:	dc04      	bgt.n	800a92c <__hexnan+0x64>
 800a922:	462a      	mov	r2, r5
 800a924:	4649      	mov	r1, r9
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff ffa8 	bl	800a87c <L_shift>
 800a92c:	4544      	cmp	r4, r8
 800a92e:	d952      	bls.n	800a9d6 <__hexnan+0x10e>
 800a930:	2300      	movs	r3, #0
 800a932:	f1a4 0904 	sub.w	r9, r4, #4
 800a936:	f844 3c04 	str.w	r3, [r4, #-4]
 800a93a:	f8cd b008 	str.w	fp, [sp, #8]
 800a93e:	464c      	mov	r4, r9
 800a940:	461d      	mov	r5, r3
 800a942:	9903      	ldr	r1, [sp, #12]
 800a944:	e7d7      	b.n	800a8f6 <__hexnan+0x2e>
 800a946:	2a29      	cmp	r2, #41	@ 0x29
 800a948:	d157      	bne.n	800a9fa <__hexnan+0x132>
 800a94a:	3102      	adds	r1, #2
 800a94c:	f8ca 1000 	str.w	r1, [sl]
 800a950:	f1bb 0f00 	cmp.w	fp, #0
 800a954:	d051      	beq.n	800a9fa <__hexnan+0x132>
 800a956:	454c      	cmp	r4, r9
 800a958:	d206      	bcs.n	800a968 <__hexnan+0xa0>
 800a95a:	2d07      	cmp	r5, #7
 800a95c:	dc04      	bgt.n	800a968 <__hexnan+0xa0>
 800a95e:	462a      	mov	r2, r5
 800a960:	4649      	mov	r1, r9
 800a962:	4620      	mov	r0, r4
 800a964:	f7ff ff8a 	bl	800a87c <L_shift>
 800a968:	4544      	cmp	r4, r8
 800a96a:	d936      	bls.n	800a9da <__hexnan+0x112>
 800a96c:	f1a8 0204 	sub.w	r2, r8, #4
 800a970:	4623      	mov	r3, r4
 800a972:	f853 1b04 	ldr.w	r1, [r3], #4
 800a976:	f842 1f04 	str.w	r1, [r2, #4]!
 800a97a:	429f      	cmp	r7, r3
 800a97c:	d2f9      	bcs.n	800a972 <__hexnan+0xaa>
 800a97e:	1b3b      	subs	r3, r7, r4
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	3304      	adds	r3, #4
 800a986:	3401      	adds	r4, #1
 800a988:	3e03      	subs	r6, #3
 800a98a:	42b4      	cmp	r4, r6
 800a98c:	bf88      	it	hi
 800a98e:	2304      	movhi	r3, #4
 800a990:	4443      	add	r3, r8
 800a992:	2200      	movs	r2, #0
 800a994:	f843 2b04 	str.w	r2, [r3], #4
 800a998:	429f      	cmp	r7, r3
 800a99a:	d2fb      	bcs.n	800a994 <__hexnan+0xcc>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	b91b      	cbnz	r3, 800a9a8 <__hexnan+0xe0>
 800a9a0:	4547      	cmp	r7, r8
 800a9a2:	d128      	bne.n	800a9f6 <__hexnan+0x12e>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	2005      	movs	r0, #5
 800a9aa:	b007      	add	sp, #28
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	2d08      	cmp	r5, #8
 800a9b4:	f10b 0b01 	add.w	fp, fp, #1
 800a9b8:	dd06      	ble.n	800a9c8 <__hexnan+0x100>
 800a9ba:	4544      	cmp	r4, r8
 800a9bc:	d9c1      	bls.n	800a942 <__hexnan+0x7a>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9c4:	2501      	movs	r5, #1
 800a9c6:	3c04      	subs	r4, #4
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	f000 000f 	and.w	r0, r0, #15
 800a9ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9d2:	6020      	str	r0, [r4, #0]
 800a9d4:	e7b5      	b.n	800a942 <__hexnan+0x7a>
 800a9d6:	2508      	movs	r5, #8
 800a9d8:	e7b3      	b.n	800a942 <__hexnan+0x7a>
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0dd      	beq.n	800a99c <__hexnan+0xd4>
 800a9e0:	f1c3 0320 	rsb	r3, r3, #32
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9e8:	40da      	lsrs	r2, r3
 800a9ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9f4:	e7d2      	b.n	800a99c <__hexnan+0xd4>
 800a9f6:	3f04      	subs	r7, #4
 800a9f8:	e7d0      	b.n	800a99c <__hexnan+0xd4>
 800a9fa:	2004      	movs	r0, #4
 800a9fc:	e7d5      	b.n	800a9aa <__hexnan+0xe2>

0800a9fe <__ssputs_r>:
 800a9fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa02:	688e      	ldr	r6, [r1, #8]
 800aa04:	461f      	mov	r7, r3
 800aa06:	42be      	cmp	r6, r7
 800aa08:	680b      	ldr	r3, [r1, #0]
 800aa0a:	4682      	mov	sl, r0
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	4690      	mov	r8, r2
 800aa10:	d82d      	bhi.n	800aa6e <__ssputs_r+0x70>
 800aa12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa16:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa1a:	d026      	beq.n	800aa6a <__ssputs_r+0x6c>
 800aa1c:	6965      	ldr	r5, [r4, #20]
 800aa1e:	6909      	ldr	r1, [r1, #16]
 800aa20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa24:	eba3 0901 	sub.w	r9, r3, r1
 800aa28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa2c:	1c7b      	adds	r3, r7, #1
 800aa2e:	444b      	add	r3, r9
 800aa30:	106d      	asrs	r5, r5, #1
 800aa32:	429d      	cmp	r5, r3
 800aa34:	bf38      	it	cc
 800aa36:	461d      	movcc	r5, r3
 800aa38:	0553      	lsls	r3, r2, #21
 800aa3a:	d527      	bpl.n	800aa8c <__ssputs_r+0x8e>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f000 fc6d 	bl	800b31c <_malloc_r>
 800aa42:	4606      	mov	r6, r0
 800aa44:	b360      	cbz	r0, 800aaa0 <__ssputs_r+0xa2>
 800aa46:	6921      	ldr	r1, [r4, #16]
 800aa48:	464a      	mov	r2, r9
 800aa4a:	f7fe fdea 	bl	8009622 <memcpy>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	6126      	str	r6, [r4, #16]
 800aa5c:	6165      	str	r5, [r4, #20]
 800aa5e:	444e      	add	r6, r9
 800aa60:	eba5 0509 	sub.w	r5, r5, r9
 800aa64:	6026      	str	r6, [r4, #0]
 800aa66:	60a5      	str	r5, [r4, #8]
 800aa68:	463e      	mov	r6, r7
 800aa6a:	42be      	cmp	r6, r7
 800aa6c:	d900      	bls.n	800aa70 <__ssputs_r+0x72>
 800aa6e:	463e      	mov	r6, r7
 800aa70:	6820      	ldr	r0, [r4, #0]
 800aa72:	4632      	mov	r2, r6
 800aa74:	4641      	mov	r1, r8
 800aa76:	f001 fdb0 	bl	800c5da <memmove>
 800aa7a:	68a3      	ldr	r3, [r4, #8]
 800aa7c:	1b9b      	subs	r3, r3, r6
 800aa7e:	60a3      	str	r3, [r4, #8]
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	4433      	add	r3, r6
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	2000      	movs	r0, #0
 800aa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	f001 fc03 	bl	800c298 <_realloc_r>
 800aa92:	4606      	mov	r6, r0
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d1e0      	bne.n	800aa5a <__ssputs_r+0x5c>
 800aa98:	6921      	ldr	r1, [r4, #16]
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	f7ff fc2c 	bl	800a2f8 <_free_r>
 800aaa0:	230c      	movs	r3, #12
 800aaa2:	f8ca 3000 	str.w	r3, [sl]
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aab2:	e7e9      	b.n	800aa88 <__ssputs_r+0x8a>

0800aab4 <_svfiprintf_r>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	4698      	mov	r8, r3
 800aaba:	898b      	ldrh	r3, [r1, #12]
 800aabc:	061b      	lsls	r3, r3, #24
 800aabe:	b09d      	sub	sp, #116	@ 0x74
 800aac0:	4607      	mov	r7, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	4614      	mov	r4, r2
 800aac6:	d510      	bpl.n	800aaea <_svfiprintf_r+0x36>
 800aac8:	690b      	ldr	r3, [r1, #16]
 800aaca:	b973      	cbnz	r3, 800aaea <_svfiprintf_r+0x36>
 800aacc:	2140      	movs	r1, #64	@ 0x40
 800aace:	f000 fc25 	bl	800b31c <_malloc_r>
 800aad2:	6028      	str	r0, [r5, #0]
 800aad4:	6128      	str	r0, [r5, #16]
 800aad6:	b930      	cbnz	r0, 800aae6 <_svfiprintf_r+0x32>
 800aad8:	230c      	movs	r3, #12
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aae0:	b01d      	add	sp, #116	@ 0x74
 800aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae6:	2340      	movs	r3, #64	@ 0x40
 800aae8:	616b      	str	r3, [r5, #20]
 800aaea:	2300      	movs	r3, #0
 800aaec:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaee:	2320      	movs	r3, #32
 800aaf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaf8:	2330      	movs	r3, #48	@ 0x30
 800aafa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac98 <_svfiprintf_r+0x1e4>
 800aafe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab02:	f04f 0901 	mov.w	r9, #1
 800ab06:	4623      	mov	r3, r4
 800ab08:	469a      	mov	sl, r3
 800ab0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab0e:	b10a      	cbz	r2, 800ab14 <_svfiprintf_r+0x60>
 800ab10:	2a25      	cmp	r2, #37	@ 0x25
 800ab12:	d1f9      	bne.n	800ab08 <_svfiprintf_r+0x54>
 800ab14:	ebba 0b04 	subs.w	fp, sl, r4
 800ab18:	d00b      	beq.n	800ab32 <_svfiprintf_r+0x7e>
 800ab1a:	465b      	mov	r3, fp
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ff6c 	bl	800a9fe <__ssputs_r>
 800ab26:	3001      	adds	r0, #1
 800ab28:	f000 80a7 	beq.w	800ac7a <_svfiprintf_r+0x1c6>
 800ab2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab2e:	445a      	add	r2, fp
 800ab30:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab32:	f89a 3000 	ldrb.w	r3, [sl]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 809f 	beq.w	800ac7a <_svfiprintf_r+0x1c6>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab46:	f10a 0a01 	add.w	sl, sl, #1
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	9307      	str	r3, [sp, #28]
 800ab4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab52:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab54:	4654      	mov	r4, sl
 800ab56:	2205      	movs	r2, #5
 800ab58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5c:	484e      	ldr	r0, [pc, #312]	@ (800ac98 <_svfiprintf_r+0x1e4>)
 800ab5e:	f7f5 fb5f 	bl	8000220 <memchr>
 800ab62:	9a04      	ldr	r2, [sp, #16]
 800ab64:	b9d8      	cbnz	r0, 800ab9e <_svfiprintf_r+0xea>
 800ab66:	06d0      	lsls	r0, r2, #27
 800ab68:	bf44      	itt	mi
 800ab6a:	2320      	movmi	r3, #32
 800ab6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab70:	0711      	lsls	r1, r2, #28
 800ab72:	bf44      	itt	mi
 800ab74:	232b      	movmi	r3, #43	@ 0x2b
 800ab76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab80:	d015      	beq.n	800abae <_svfiprintf_r+0xfa>
 800ab82:	9a07      	ldr	r2, [sp, #28]
 800ab84:	4654      	mov	r4, sl
 800ab86:	2000      	movs	r0, #0
 800ab88:	f04f 0c0a 	mov.w	ip, #10
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab92:	3b30      	subs	r3, #48	@ 0x30
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d94b      	bls.n	800ac30 <_svfiprintf_r+0x17c>
 800ab98:	b1b0      	cbz	r0, 800abc8 <_svfiprintf_r+0x114>
 800ab9a:	9207      	str	r2, [sp, #28]
 800ab9c:	e014      	b.n	800abc8 <_svfiprintf_r+0x114>
 800ab9e:	eba0 0308 	sub.w	r3, r0, r8
 800aba2:	fa09 f303 	lsl.w	r3, r9, r3
 800aba6:	4313      	orrs	r3, r2
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	46a2      	mov	sl, r4
 800abac:	e7d2      	b.n	800ab54 <_svfiprintf_r+0xa0>
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	1d19      	adds	r1, r3, #4
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	9103      	str	r1, [sp, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bfbb      	ittet	lt
 800abba:	425b      	neglt	r3, r3
 800abbc:	f042 0202 	orrlt.w	r2, r2, #2
 800abc0:	9307      	strge	r3, [sp, #28]
 800abc2:	9307      	strlt	r3, [sp, #28]
 800abc4:	bfb8      	it	lt
 800abc6:	9204      	strlt	r2, [sp, #16]
 800abc8:	7823      	ldrb	r3, [r4, #0]
 800abca:	2b2e      	cmp	r3, #46	@ 0x2e
 800abcc:	d10a      	bne.n	800abe4 <_svfiprintf_r+0x130>
 800abce:	7863      	ldrb	r3, [r4, #1]
 800abd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd2:	d132      	bne.n	800ac3a <_svfiprintf_r+0x186>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d1a      	adds	r2, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9203      	str	r2, [sp, #12]
 800abdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abe0:	3402      	adds	r4, #2
 800abe2:	9305      	str	r3, [sp, #20]
 800abe4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aca8 <_svfiprintf_r+0x1f4>
 800abe8:	7821      	ldrb	r1, [r4, #0]
 800abea:	2203      	movs	r2, #3
 800abec:	4650      	mov	r0, sl
 800abee:	f7f5 fb17 	bl	8000220 <memchr>
 800abf2:	b138      	cbz	r0, 800ac04 <_svfiprintf_r+0x150>
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	eba0 000a 	sub.w	r0, r0, sl
 800abfa:	2240      	movs	r2, #64	@ 0x40
 800abfc:	4082      	lsls	r2, r0
 800abfe:	4313      	orrs	r3, r2
 800ac00:	3401      	adds	r4, #1
 800ac02:	9304      	str	r3, [sp, #16]
 800ac04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac08:	4824      	ldr	r0, [pc, #144]	@ (800ac9c <_svfiprintf_r+0x1e8>)
 800ac0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac0e:	2206      	movs	r2, #6
 800ac10:	f7f5 fb06 	bl	8000220 <memchr>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d036      	beq.n	800ac86 <_svfiprintf_r+0x1d2>
 800ac18:	4b21      	ldr	r3, [pc, #132]	@ (800aca0 <_svfiprintf_r+0x1ec>)
 800ac1a:	bb1b      	cbnz	r3, 800ac64 <_svfiprintf_r+0x1b0>
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	3307      	adds	r3, #7
 800ac20:	f023 0307 	bic.w	r3, r3, #7
 800ac24:	3308      	adds	r3, #8
 800ac26:	9303      	str	r3, [sp, #12]
 800ac28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac2a:	4433      	add	r3, r6
 800ac2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac2e:	e76a      	b.n	800ab06 <_svfiprintf_r+0x52>
 800ac30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac34:	460c      	mov	r4, r1
 800ac36:	2001      	movs	r0, #1
 800ac38:	e7a8      	b.n	800ab8c <_svfiprintf_r+0xd8>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	3401      	adds	r4, #1
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	4619      	mov	r1, r3
 800ac42:	f04f 0c0a 	mov.w	ip, #10
 800ac46:	4620      	mov	r0, r4
 800ac48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac4c:	3a30      	subs	r2, #48	@ 0x30
 800ac4e:	2a09      	cmp	r2, #9
 800ac50:	d903      	bls.n	800ac5a <_svfiprintf_r+0x1a6>
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0c6      	beq.n	800abe4 <_svfiprintf_r+0x130>
 800ac56:	9105      	str	r1, [sp, #20]
 800ac58:	e7c4      	b.n	800abe4 <_svfiprintf_r+0x130>
 800ac5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac5e:	4604      	mov	r4, r0
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7f0      	b.n	800ac46 <_svfiprintf_r+0x192>
 800ac64:	ab03      	add	r3, sp, #12
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	462a      	mov	r2, r5
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <_svfiprintf_r+0x1f0>)
 800ac6c:	a904      	add	r1, sp, #16
 800ac6e:	4638      	mov	r0, r7
 800ac70:	f7fc fe32 	bl	80078d8 <_printf_float>
 800ac74:	1c42      	adds	r2, r0, #1
 800ac76:	4606      	mov	r6, r0
 800ac78:	d1d6      	bne.n	800ac28 <_svfiprintf_r+0x174>
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	065b      	lsls	r3, r3, #25
 800ac7e:	f53f af2d 	bmi.w	800aadc <_svfiprintf_r+0x28>
 800ac82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac84:	e72c      	b.n	800aae0 <_svfiprintf_r+0x2c>
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4b05      	ldr	r3, [pc, #20]	@ (800aca4 <_svfiprintf_r+0x1f0>)
 800ac8e:	a904      	add	r1, sp, #16
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7fd f8b9 	bl	8007e08 <_printf_i>
 800ac96:	e7ed      	b.n	800ac74 <_svfiprintf_r+0x1c0>
 800ac98:	0800d0f6 	.word	0x0800d0f6
 800ac9c:	0800d100 	.word	0x0800d100
 800aca0:	080078d9 	.word	0x080078d9
 800aca4:	0800a9ff 	.word	0x0800a9ff
 800aca8:	0800d0fc 	.word	0x0800d0fc

0800acac <_sungetc_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	1c4b      	adds	r3, r1, #1
 800acb0:	4614      	mov	r4, r2
 800acb2:	d103      	bne.n	800acbc <_sungetc_r+0x10>
 800acb4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800acb8:	4628      	mov	r0, r5
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	8993      	ldrh	r3, [r2, #12]
 800acbe:	f023 0320 	bic.w	r3, r3, #32
 800acc2:	8193      	strh	r3, [r2, #12]
 800acc4:	6853      	ldr	r3, [r2, #4]
 800acc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800acc8:	b2cd      	uxtb	r5, r1
 800acca:	b18a      	cbz	r2, 800acf0 <_sungetc_r+0x44>
 800accc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800acce:	429a      	cmp	r2, r3
 800acd0:	dd08      	ble.n	800ace4 <_sungetc_r+0x38>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	1e5a      	subs	r2, r3, #1
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800acdc:	6863      	ldr	r3, [r4, #4]
 800acde:	3301      	adds	r3, #1
 800ace0:	6063      	str	r3, [r4, #4]
 800ace2:	e7e9      	b.n	800acb8 <_sungetc_r+0xc>
 800ace4:	4621      	mov	r1, r4
 800ace6:	f001 fa9d 	bl	800c224 <__submore>
 800acea:	2800      	cmp	r0, #0
 800acec:	d0f1      	beq.n	800acd2 <_sungetc_r+0x26>
 800acee:	e7e1      	b.n	800acb4 <_sungetc_r+0x8>
 800acf0:	6921      	ldr	r1, [r4, #16]
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	b141      	cbz	r1, 800ad08 <_sungetc_r+0x5c>
 800acf6:	4291      	cmp	r1, r2
 800acf8:	d206      	bcs.n	800ad08 <_sungetc_r+0x5c>
 800acfa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800acfe:	42a9      	cmp	r1, r5
 800ad00:	d102      	bne.n	800ad08 <_sungetc_r+0x5c>
 800ad02:	3a01      	subs	r2, #1
 800ad04:	6022      	str	r2, [r4, #0]
 800ad06:	e7ea      	b.n	800acde <_sungetc_r+0x32>
 800ad08:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ad0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad10:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad12:	2303      	movs	r3, #3
 800ad14:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ad16:	4623      	mov	r3, r4
 800ad18:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e7de      	b.n	800ace0 <_sungetc_r+0x34>

0800ad22 <__ssrefill_r>:
 800ad22:	b510      	push	{r4, lr}
 800ad24:	460c      	mov	r4, r1
 800ad26:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ad28:	b169      	cbz	r1, 800ad46 <__ssrefill_r+0x24>
 800ad2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	d001      	beq.n	800ad36 <__ssrefill_r+0x14>
 800ad32:	f7ff fae1 	bl	800a2f8 <_free_r>
 800ad36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	6360      	str	r0, [r4, #52]	@ 0x34
 800ad3e:	b113      	cbz	r3, 800ad46 <__ssrefill_r+0x24>
 800ad40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6063      	str	r3, [r4, #4]
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f043 0320 	orr.w	r3, r3, #32
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad5a:	e7f3      	b.n	800ad44 <__ssrefill_r+0x22>

0800ad5c <__ssvfiscanf_r>:
 800ad5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad60:	460c      	mov	r4, r1
 800ad62:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ad66:	2100      	movs	r1, #0
 800ad68:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ad6c:	49a5      	ldr	r1, [pc, #660]	@ (800b004 <__ssvfiscanf_r+0x2a8>)
 800ad6e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ad70:	f10d 0804 	add.w	r8, sp, #4
 800ad74:	49a4      	ldr	r1, [pc, #656]	@ (800b008 <__ssvfiscanf_r+0x2ac>)
 800ad76:	4fa5      	ldr	r7, [pc, #660]	@ (800b00c <__ssvfiscanf_r+0x2b0>)
 800ad78:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	7813      	ldrb	r3, [r2, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8158 	beq.w	800b03a <__ssvfiscanf_r+0x2de>
 800ad8a:	5cf9      	ldrb	r1, [r7, r3]
 800ad8c:	f011 0108 	ands.w	r1, r1, #8
 800ad90:	f102 0501 	add.w	r5, r2, #1
 800ad94:	d019      	beq.n	800adca <__ssvfiscanf_r+0x6e>
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dd0f      	ble.n	800adbc <__ssvfiscanf_r+0x60>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	781a      	ldrb	r2, [r3, #0]
 800ada0:	5cba      	ldrb	r2, [r7, r2]
 800ada2:	0712      	lsls	r2, r2, #28
 800ada4:	d401      	bmi.n	800adaa <__ssvfiscanf_r+0x4e>
 800ada6:	462a      	mov	r2, r5
 800ada8:	e7eb      	b.n	800ad82 <__ssvfiscanf_r+0x26>
 800adaa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800adac:	3201      	adds	r2, #1
 800adae:	9245      	str	r2, [sp, #276]	@ 0x114
 800adb0:	6862      	ldr	r2, [r4, #4]
 800adb2:	3301      	adds	r3, #1
 800adb4:	3a01      	subs	r2, #1
 800adb6:	6062      	str	r2, [r4, #4]
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	e7ec      	b.n	800ad96 <__ssvfiscanf_r+0x3a>
 800adbc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800adbe:	4621      	mov	r1, r4
 800adc0:	4630      	mov	r0, r6
 800adc2:	4798      	blx	r3
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d0e9      	beq.n	800ad9c <__ssvfiscanf_r+0x40>
 800adc8:	e7ed      	b.n	800ada6 <__ssvfiscanf_r+0x4a>
 800adca:	2b25      	cmp	r3, #37	@ 0x25
 800adcc:	d012      	beq.n	800adf4 <__ssvfiscanf_r+0x98>
 800adce:	4699      	mov	r9, r3
 800add0:	6863      	ldr	r3, [r4, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f340 8093 	ble.w	800aefe <__ssvfiscanf_r+0x1a2>
 800add8:	6822      	ldr	r2, [r4, #0]
 800adda:	7813      	ldrb	r3, [r2, #0]
 800addc:	454b      	cmp	r3, r9
 800adde:	f040 812c 	bne.w	800b03a <__ssvfiscanf_r+0x2de>
 800ade2:	6863      	ldr	r3, [r4, #4]
 800ade4:	3b01      	subs	r3, #1
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800adea:	3201      	adds	r2, #1
 800adec:	3301      	adds	r3, #1
 800adee:	6022      	str	r2, [r4, #0]
 800adf0:	9345      	str	r3, [sp, #276]	@ 0x114
 800adf2:	e7d8      	b.n	800ada6 <__ssvfiscanf_r+0x4a>
 800adf4:	9141      	str	r1, [sp, #260]	@ 0x104
 800adf6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800adf8:	7853      	ldrb	r3, [r2, #1]
 800adfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800adfc:	bf02      	ittt	eq
 800adfe:	2310      	moveq	r3, #16
 800ae00:	1c95      	addeq	r5, r2, #2
 800ae02:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ae04:	220a      	movs	r2, #10
 800ae06:	46a9      	mov	r9, r5
 800ae08:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ae0c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ae10:	2b09      	cmp	r3, #9
 800ae12:	d91e      	bls.n	800ae52 <__ssvfiscanf_r+0xf6>
 800ae14:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b010 <__ssvfiscanf_r+0x2b4>
 800ae18:	2203      	movs	r2, #3
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	f7f5 fa00 	bl	8000220 <memchr>
 800ae20:	b138      	cbz	r0, 800ae32 <__ssvfiscanf_r+0xd6>
 800ae22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ae24:	eba0 000a 	sub.w	r0, r0, sl
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4083      	lsls	r3, r0
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	9341      	str	r3, [sp, #260]	@ 0x104
 800ae30:	464d      	mov	r5, r9
 800ae32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae36:	2b78      	cmp	r3, #120	@ 0x78
 800ae38:	d806      	bhi.n	800ae48 <__ssvfiscanf_r+0xec>
 800ae3a:	2b57      	cmp	r3, #87	@ 0x57
 800ae3c:	d810      	bhi.n	800ae60 <__ssvfiscanf_r+0x104>
 800ae3e:	2b25      	cmp	r3, #37	@ 0x25
 800ae40:	d0c5      	beq.n	800adce <__ssvfiscanf_r+0x72>
 800ae42:	d857      	bhi.n	800aef4 <__ssvfiscanf_r+0x198>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d065      	beq.n	800af14 <__ssvfiscanf_r+0x1b8>
 800ae48:	2303      	movs	r3, #3
 800ae4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ae4c:	230a      	movs	r3, #10
 800ae4e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ae50:	e078      	b.n	800af44 <__ssvfiscanf_r+0x1e8>
 800ae52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ae54:	fb02 1103 	mla	r1, r2, r3, r1
 800ae58:	3930      	subs	r1, #48	@ 0x30
 800ae5a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ae5c:	464d      	mov	r5, r9
 800ae5e:	e7d2      	b.n	800ae06 <__ssvfiscanf_r+0xaa>
 800ae60:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ae64:	2a20      	cmp	r2, #32
 800ae66:	d8ef      	bhi.n	800ae48 <__ssvfiscanf_r+0xec>
 800ae68:	a101      	add	r1, pc, #4	@ (adr r1, 800ae70 <__ssvfiscanf_r+0x114>)
 800ae6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800af23 	.word	0x0800af23
 800ae74:	0800ae49 	.word	0x0800ae49
 800ae78:	0800ae49 	.word	0x0800ae49
 800ae7c:	0800af7d 	.word	0x0800af7d
 800ae80:	0800ae49 	.word	0x0800ae49
 800ae84:	0800ae49 	.word	0x0800ae49
 800ae88:	0800ae49 	.word	0x0800ae49
 800ae8c:	0800ae49 	.word	0x0800ae49
 800ae90:	0800ae49 	.word	0x0800ae49
 800ae94:	0800ae49 	.word	0x0800ae49
 800ae98:	0800ae49 	.word	0x0800ae49
 800ae9c:	0800af93 	.word	0x0800af93
 800aea0:	0800af79 	.word	0x0800af79
 800aea4:	0800aefb 	.word	0x0800aefb
 800aea8:	0800aefb 	.word	0x0800aefb
 800aeac:	0800aefb 	.word	0x0800aefb
 800aeb0:	0800ae49 	.word	0x0800ae49
 800aeb4:	0800af35 	.word	0x0800af35
 800aeb8:	0800ae49 	.word	0x0800ae49
 800aebc:	0800ae49 	.word	0x0800ae49
 800aec0:	0800ae49 	.word	0x0800ae49
 800aec4:	0800ae49 	.word	0x0800ae49
 800aec8:	0800afa3 	.word	0x0800afa3
 800aecc:	0800af3d 	.word	0x0800af3d
 800aed0:	0800af1b 	.word	0x0800af1b
 800aed4:	0800ae49 	.word	0x0800ae49
 800aed8:	0800ae49 	.word	0x0800ae49
 800aedc:	0800af9f 	.word	0x0800af9f
 800aee0:	0800ae49 	.word	0x0800ae49
 800aee4:	0800af79 	.word	0x0800af79
 800aee8:	0800ae49 	.word	0x0800ae49
 800aeec:	0800ae49 	.word	0x0800ae49
 800aef0:	0800af23 	.word	0x0800af23
 800aef4:	3b45      	subs	r3, #69	@ 0x45
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d8a6      	bhi.n	800ae48 <__ssvfiscanf_r+0xec>
 800aefa:	2305      	movs	r3, #5
 800aefc:	e021      	b.n	800af42 <__ssvfiscanf_r+0x1e6>
 800aefe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800af00:	4621      	mov	r1, r4
 800af02:	4630      	mov	r0, r6
 800af04:	4798      	blx	r3
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f af66 	beq.w	800add8 <__ssvfiscanf_r+0x7c>
 800af0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800af0e:	2800      	cmp	r0, #0
 800af10:	f040 808b 	bne.w	800b02a <__ssvfiscanf_r+0x2ce>
 800af14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af18:	e08b      	b.n	800b032 <__ssvfiscanf_r+0x2d6>
 800af1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800af1c:	f042 0220 	orr.w	r2, r2, #32
 800af20:	9241      	str	r2, [sp, #260]	@ 0x104
 800af22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800af24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af28:	9241      	str	r2, [sp, #260]	@ 0x104
 800af2a:	2210      	movs	r2, #16
 800af2c:	2b6e      	cmp	r3, #110	@ 0x6e
 800af2e:	9242      	str	r2, [sp, #264]	@ 0x108
 800af30:	d902      	bls.n	800af38 <__ssvfiscanf_r+0x1dc>
 800af32:	e005      	b.n	800af40 <__ssvfiscanf_r+0x1e4>
 800af34:	2300      	movs	r3, #0
 800af36:	9342      	str	r3, [sp, #264]	@ 0x108
 800af38:	2303      	movs	r3, #3
 800af3a:	e002      	b.n	800af42 <__ssvfiscanf_r+0x1e6>
 800af3c:	2308      	movs	r3, #8
 800af3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800af40:	2304      	movs	r3, #4
 800af42:	9347      	str	r3, [sp, #284]	@ 0x11c
 800af44:	6863      	ldr	r3, [r4, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	dd39      	ble.n	800afbe <__ssvfiscanf_r+0x262>
 800af4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af4c:	0659      	lsls	r1, r3, #25
 800af4e:	d404      	bmi.n	800af5a <__ssvfiscanf_r+0x1fe>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	5cba      	ldrb	r2, [r7, r2]
 800af56:	0712      	lsls	r2, r2, #28
 800af58:	d438      	bmi.n	800afcc <__ssvfiscanf_r+0x270>
 800af5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	dc47      	bgt.n	800aff0 <__ssvfiscanf_r+0x294>
 800af60:	466b      	mov	r3, sp
 800af62:	4622      	mov	r2, r4
 800af64:	a941      	add	r1, sp, #260	@ 0x104
 800af66:	4630      	mov	r0, r6
 800af68:	f000 fa6a 	bl	800b440 <_scanf_chars>
 800af6c:	2801      	cmp	r0, #1
 800af6e:	d064      	beq.n	800b03a <__ssvfiscanf_r+0x2de>
 800af70:	2802      	cmp	r0, #2
 800af72:	f47f af18 	bne.w	800ada6 <__ssvfiscanf_r+0x4a>
 800af76:	e7c9      	b.n	800af0c <__ssvfiscanf_r+0x1b0>
 800af78:	220a      	movs	r2, #10
 800af7a:	e7d7      	b.n	800af2c <__ssvfiscanf_r+0x1d0>
 800af7c:	4629      	mov	r1, r5
 800af7e:	4640      	mov	r0, r8
 800af80:	f000 fbac 	bl	800b6dc <__sccl>
 800af84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af8a:	9341      	str	r3, [sp, #260]	@ 0x104
 800af8c:	4605      	mov	r5, r0
 800af8e:	2301      	movs	r3, #1
 800af90:	e7d7      	b.n	800af42 <__ssvfiscanf_r+0x1e6>
 800af92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af98:	9341      	str	r3, [sp, #260]	@ 0x104
 800af9a:	2300      	movs	r3, #0
 800af9c:	e7d1      	b.n	800af42 <__ssvfiscanf_r+0x1e6>
 800af9e:	2302      	movs	r3, #2
 800afa0:	e7cf      	b.n	800af42 <__ssvfiscanf_r+0x1e6>
 800afa2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800afa4:	06c3      	lsls	r3, r0, #27
 800afa6:	f53f aefe 	bmi.w	800ada6 <__ssvfiscanf_r+0x4a>
 800afaa:	9b00      	ldr	r3, [sp, #0]
 800afac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800afae:	1d19      	adds	r1, r3, #4
 800afb0:	9100      	str	r1, [sp, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	07c0      	lsls	r0, r0, #31
 800afb6:	bf4c      	ite	mi
 800afb8:	801a      	strhmi	r2, [r3, #0]
 800afba:	601a      	strpl	r2, [r3, #0]
 800afbc:	e6f3      	b.n	800ada6 <__ssvfiscanf_r+0x4a>
 800afbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800afc0:	4621      	mov	r1, r4
 800afc2:	4630      	mov	r0, r6
 800afc4:	4798      	blx	r3
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0bf      	beq.n	800af4a <__ssvfiscanf_r+0x1ee>
 800afca:	e79f      	b.n	800af0c <__ssvfiscanf_r+0x1b0>
 800afcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800afce:	3201      	adds	r2, #1
 800afd0:	9245      	str	r2, [sp, #276]	@ 0x114
 800afd2:	6862      	ldr	r2, [r4, #4]
 800afd4:	3a01      	subs	r2, #1
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	6062      	str	r2, [r4, #4]
 800afda:	dd02      	ble.n	800afe2 <__ssvfiscanf_r+0x286>
 800afdc:	3301      	adds	r3, #1
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	e7b6      	b.n	800af50 <__ssvfiscanf_r+0x1f4>
 800afe2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800afe4:	4621      	mov	r1, r4
 800afe6:	4630      	mov	r0, r6
 800afe8:	4798      	blx	r3
 800afea:	2800      	cmp	r0, #0
 800afec:	d0b0      	beq.n	800af50 <__ssvfiscanf_r+0x1f4>
 800afee:	e78d      	b.n	800af0c <__ssvfiscanf_r+0x1b0>
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	dc0f      	bgt.n	800b014 <__ssvfiscanf_r+0x2b8>
 800aff4:	466b      	mov	r3, sp
 800aff6:	4622      	mov	r2, r4
 800aff8:	a941      	add	r1, sp, #260	@ 0x104
 800affa:	4630      	mov	r0, r6
 800affc:	f000 fa7a 	bl	800b4f4 <_scanf_i>
 800b000:	e7b4      	b.n	800af6c <__ssvfiscanf_r+0x210>
 800b002:	bf00      	nop
 800b004:	0800acad 	.word	0x0800acad
 800b008:	0800ad23 	.word	0x0800ad23
 800b00c:	0800cf09 	.word	0x0800cf09
 800b010:	0800d0fc 	.word	0x0800d0fc
 800b014:	4b0a      	ldr	r3, [pc, #40]	@ (800b040 <__ssvfiscanf_r+0x2e4>)
 800b016:	2b00      	cmp	r3, #0
 800b018:	f43f aec5 	beq.w	800ada6 <__ssvfiscanf_r+0x4a>
 800b01c:	466b      	mov	r3, sp
 800b01e:	4622      	mov	r2, r4
 800b020:	a941      	add	r1, sp, #260	@ 0x104
 800b022:	4630      	mov	r0, r6
 800b024:	f7fd f810 	bl	8008048 <_scanf_float>
 800b028:	e7a0      	b.n	800af6c <__ssvfiscanf_r+0x210>
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	065b      	lsls	r3, r3, #25
 800b02e:	f53f af71 	bmi.w	800af14 <__ssvfiscanf_r+0x1b8>
 800b032:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b03c:	e7f9      	b.n	800b032 <__ssvfiscanf_r+0x2d6>
 800b03e:	bf00      	nop
 800b040:	08008049 	.word	0x08008049

0800b044 <__sfputc_r>:
 800b044:	6893      	ldr	r3, [r2, #8]
 800b046:	3b01      	subs	r3, #1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	b410      	push	{r4}
 800b04c:	6093      	str	r3, [r2, #8]
 800b04e:	da08      	bge.n	800b062 <__sfputc_r+0x1e>
 800b050:	6994      	ldr	r4, [r2, #24]
 800b052:	42a3      	cmp	r3, r4
 800b054:	db01      	blt.n	800b05a <__sfputc_r+0x16>
 800b056:	290a      	cmp	r1, #10
 800b058:	d103      	bne.n	800b062 <__sfputc_r+0x1e>
 800b05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b05e:	f001 b9b9 	b.w	800c3d4 <__swbuf_r>
 800b062:	6813      	ldr	r3, [r2, #0]
 800b064:	1c58      	adds	r0, r3, #1
 800b066:	6010      	str	r0, [r2, #0]
 800b068:	7019      	strb	r1, [r3, #0]
 800b06a:	4608      	mov	r0, r1
 800b06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <__sfputs_r>:
 800b072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	4614      	mov	r4, r2
 800b07a:	18d5      	adds	r5, r2, r3
 800b07c:	42ac      	cmp	r4, r5
 800b07e:	d101      	bne.n	800b084 <__sfputs_r+0x12>
 800b080:	2000      	movs	r0, #0
 800b082:	e007      	b.n	800b094 <__sfputs_r+0x22>
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	463a      	mov	r2, r7
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7ff ffda 	bl	800b044 <__sfputc_r>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d1f3      	bne.n	800b07c <__sfputs_r+0xa>
 800b094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b098 <_vfiprintf_r>:
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	460d      	mov	r5, r1
 800b09e:	b09d      	sub	sp, #116	@ 0x74
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	4698      	mov	r8, r3
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	b118      	cbz	r0, 800b0b0 <_vfiprintf_r+0x18>
 800b0a8:	6a03      	ldr	r3, [r0, #32]
 800b0aa:	b90b      	cbnz	r3, 800b0b0 <_vfiprintf_r+0x18>
 800b0ac:	f7fd fafc 	bl	80086a8 <__sinit>
 800b0b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0b2:	07d9      	lsls	r1, r3, #31
 800b0b4:	d405      	bmi.n	800b0c2 <_vfiprintf_r+0x2a>
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	059a      	lsls	r2, r3, #22
 800b0ba:	d402      	bmi.n	800b0c2 <_vfiprintf_r+0x2a>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0be:	f7fe faae 	bl	800961e <__retarget_lock_acquire_recursive>
 800b0c2:	89ab      	ldrh	r3, [r5, #12]
 800b0c4:	071b      	lsls	r3, r3, #28
 800b0c6:	d501      	bpl.n	800b0cc <_vfiprintf_r+0x34>
 800b0c8:	692b      	ldr	r3, [r5, #16]
 800b0ca:	b99b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x5c>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f001 f9be 	bl	800c450 <__swsetup_r>
 800b0d4:	b170      	cbz	r0, 800b0f4 <_vfiprintf_r+0x5c>
 800b0d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0d8:	07dc      	lsls	r4, r3, #31
 800b0da:	d504      	bpl.n	800b0e6 <_vfiprintf_r+0x4e>
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0e0:	b01d      	add	sp, #116	@ 0x74
 800b0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	0598      	lsls	r0, r3, #22
 800b0ea:	d4f7      	bmi.n	800b0dc <_vfiprintf_r+0x44>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ee:	f7fe fa97 	bl	8009620 <__retarget_lock_release_recursive>
 800b0f2:	e7f3      	b.n	800b0dc <_vfiprintf_r+0x44>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f8:	2320      	movs	r3, #32
 800b0fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b102:	2330      	movs	r3, #48	@ 0x30
 800b104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2b4 <_vfiprintf_r+0x21c>
 800b108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b10c:	f04f 0901 	mov.w	r9, #1
 800b110:	4623      	mov	r3, r4
 800b112:	469a      	mov	sl, r3
 800b114:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b118:	b10a      	cbz	r2, 800b11e <_vfiprintf_r+0x86>
 800b11a:	2a25      	cmp	r2, #37	@ 0x25
 800b11c:	d1f9      	bne.n	800b112 <_vfiprintf_r+0x7a>
 800b11e:	ebba 0b04 	subs.w	fp, sl, r4
 800b122:	d00b      	beq.n	800b13c <_vfiprintf_r+0xa4>
 800b124:	465b      	mov	r3, fp
 800b126:	4622      	mov	r2, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	4630      	mov	r0, r6
 800b12c:	f7ff ffa1 	bl	800b072 <__sfputs_r>
 800b130:	3001      	adds	r0, #1
 800b132:	f000 80a7 	beq.w	800b284 <_vfiprintf_r+0x1ec>
 800b136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b138:	445a      	add	r2, fp
 800b13a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b13c:	f89a 3000 	ldrb.w	r3, [sl]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 809f 	beq.w	800b284 <_vfiprintf_r+0x1ec>
 800b146:	2300      	movs	r3, #0
 800b148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b150:	f10a 0a01 	add.w	sl, sl, #1
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	9307      	str	r3, [sp, #28]
 800b158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b15c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b15e:	4654      	mov	r4, sl
 800b160:	2205      	movs	r2, #5
 800b162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b166:	4853      	ldr	r0, [pc, #332]	@ (800b2b4 <_vfiprintf_r+0x21c>)
 800b168:	f7f5 f85a 	bl	8000220 <memchr>
 800b16c:	9a04      	ldr	r2, [sp, #16]
 800b16e:	b9d8      	cbnz	r0, 800b1a8 <_vfiprintf_r+0x110>
 800b170:	06d1      	lsls	r1, r2, #27
 800b172:	bf44      	itt	mi
 800b174:	2320      	movmi	r3, #32
 800b176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b17a:	0713      	lsls	r3, r2, #28
 800b17c:	bf44      	itt	mi
 800b17e:	232b      	movmi	r3, #43	@ 0x2b
 800b180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b184:	f89a 3000 	ldrb.w	r3, [sl]
 800b188:	2b2a      	cmp	r3, #42	@ 0x2a
 800b18a:	d015      	beq.n	800b1b8 <_vfiprintf_r+0x120>
 800b18c:	9a07      	ldr	r2, [sp, #28]
 800b18e:	4654      	mov	r4, sl
 800b190:	2000      	movs	r0, #0
 800b192:	f04f 0c0a 	mov.w	ip, #10
 800b196:	4621      	mov	r1, r4
 800b198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b19c:	3b30      	subs	r3, #48	@ 0x30
 800b19e:	2b09      	cmp	r3, #9
 800b1a0:	d94b      	bls.n	800b23a <_vfiprintf_r+0x1a2>
 800b1a2:	b1b0      	cbz	r0, 800b1d2 <_vfiprintf_r+0x13a>
 800b1a4:	9207      	str	r2, [sp, #28]
 800b1a6:	e014      	b.n	800b1d2 <_vfiprintf_r+0x13a>
 800b1a8:	eba0 0308 	sub.w	r3, r0, r8
 800b1ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	9304      	str	r3, [sp, #16]
 800b1b4:	46a2      	mov	sl, r4
 800b1b6:	e7d2      	b.n	800b15e <_vfiprintf_r+0xc6>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	1d19      	adds	r1, r3, #4
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	9103      	str	r1, [sp, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bfbb      	ittet	lt
 800b1c4:	425b      	neglt	r3, r3
 800b1c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1ca:	9307      	strge	r3, [sp, #28]
 800b1cc:	9307      	strlt	r3, [sp, #28]
 800b1ce:	bfb8      	it	lt
 800b1d0:	9204      	strlt	r2, [sp, #16]
 800b1d2:	7823      	ldrb	r3, [r4, #0]
 800b1d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1d6:	d10a      	bne.n	800b1ee <_vfiprintf_r+0x156>
 800b1d8:	7863      	ldrb	r3, [r4, #1]
 800b1da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1dc:	d132      	bne.n	800b244 <_vfiprintf_r+0x1ac>
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	1d1a      	adds	r2, r3, #4
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	9203      	str	r2, [sp, #12]
 800b1e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1ea:	3402      	adds	r4, #2
 800b1ec:	9305      	str	r3, [sp, #20]
 800b1ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2c4 <_vfiprintf_r+0x22c>
 800b1f2:	7821      	ldrb	r1, [r4, #0]
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f7f5 f812 	bl	8000220 <memchr>
 800b1fc:	b138      	cbz	r0, 800b20e <_vfiprintf_r+0x176>
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	eba0 000a 	sub.w	r0, r0, sl
 800b204:	2240      	movs	r2, #64	@ 0x40
 800b206:	4082      	lsls	r2, r0
 800b208:	4313      	orrs	r3, r2
 800b20a:	3401      	adds	r4, #1
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b212:	4829      	ldr	r0, [pc, #164]	@ (800b2b8 <_vfiprintf_r+0x220>)
 800b214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b218:	2206      	movs	r2, #6
 800b21a:	f7f5 f801 	bl	8000220 <memchr>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d03f      	beq.n	800b2a2 <_vfiprintf_r+0x20a>
 800b222:	4b26      	ldr	r3, [pc, #152]	@ (800b2bc <_vfiprintf_r+0x224>)
 800b224:	bb1b      	cbnz	r3, 800b26e <_vfiprintf_r+0x1d6>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	3307      	adds	r3, #7
 800b22a:	f023 0307 	bic.w	r3, r3, #7
 800b22e:	3308      	adds	r3, #8
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b234:	443b      	add	r3, r7
 800b236:	9309      	str	r3, [sp, #36]	@ 0x24
 800b238:	e76a      	b.n	800b110 <_vfiprintf_r+0x78>
 800b23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b23e:	460c      	mov	r4, r1
 800b240:	2001      	movs	r0, #1
 800b242:	e7a8      	b.n	800b196 <_vfiprintf_r+0xfe>
 800b244:	2300      	movs	r3, #0
 800b246:	3401      	adds	r4, #1
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	4619      	mov	r1, r3
 800b24c:	f04f 0c0a 	mov.w	ip, #10
 800b250:	4620      	mov	r0, r4
 800b252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b256:	3a30      	subs	r2, #48	@ 0x30
 800b258:	2a09      	cmp	r2, #9
 800b25a:	d903      	bls.n	800b264 <_vfiprintf_r+0x1cc>
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d0c6      	beq.n	800b1ee <_vfiprintf_r+0x156>
 800b260:	9105      	str	r1, [sp, #20]
 800b262:	e7c4      	b.n	800b1ee <_vfiprintf_r+0x156>
 800b264:	fb0c 2101 	mla	r1, ip, r1, r2
 800b268:	4604      	mov	r4, r0
 800b26a:	2301      	movs	r3, #1
 800b26c:	e7f0      	b.n	800b250 <_vfiprintf_r+0x1b8>
 800b26e:	ab03      	add	r3, sp, #12
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	462a      	mov	r2, r5
 800b274:	4b12      	ldr	r3, [pc, #72]	@ (800b2c0 <_vfiprintf_r+0x228>)
 800b276:	a904      	add	r1, sp, #16
 800b278:	4630      	mov	r0, r6
 800b27a:	f7fc fb2d 	bl	80078d8 <_printf_float>
 800b27e:	4607      	mov	r7, r0
 800b280:	1c78      	adds	r0, r7, #1
 800b282:	d1d6      	bne.n	800b232 <_vfiprintf_r+0x19a>
 800b284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b286:	07d9      	lsls	r1, r3, #31
 800b288:	d405      	bmi.n	800b296 <_vfiprintf_r+0x1fe>
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	059a      	lsls	r2, r3, #22
 800b28e:	d402      	bmi.n	800b296 <_vfiprintf_r+0x1fe>
 800b290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b292:	f7fe f9c5 	bl	8009620 <__retarget_lock_release_recursive>
 800b296:	89ab      	ldrh	r3, [r5, #12]
 800b298:	065b      	lsls	r3, r3, #25
 800b29a:	f53f af1f 	bmi.w	800b0dc <_vfiprintf_r+0x44>
 800b29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2a0:	e71e      	b.n	800b0e0 <_vfiprintf_r+0x48>
 800b2a2:	ab03      	add	r3, sp, #12
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	462a      	mov	r2, r5
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <_vfiprintf_r+0x228>)
 800b2aa:	a904      	add	r1, sp, #16
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7fc fdab 	bl	8007e08 <_printf_i>
 800b2b2:	e7e4      	b.n	800b27e <_vfiprintf_r+0x1e6>
 800b2b4:	0800d0f6 	.word	0x0800d0f6
 800b2b8:	0800d100 	.word	0x0800d100
 800b2bc:	080078d9 	.word	0x080078d9
 800b2c0:	0800b073 	.word	0x0800b073
 800b2c4:	0800d0fc 	.word	0x0800d0fc

0800b2c8 <malloc>:
 800b2c8:	4b02      	ldr	r3, [pc, #8]	@ (800b2d4 <malloc+0xc>)
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	f000 b825 	b.w	800b31c <_malloc_r>
 800b2d2:	bf00      	nop
 800b2d4:	2000019c 	.word	0x2000019c

0800b2d8 <sbrk_aligned>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	4e0f      	ldr	r6, [pc, #60]	@ (800b318 <sbrk_aligned+0x40>)
 800b2dc:	460c      	mov	r4, r1
 800b2de:	6831      	ldr	r1, [r6, #0]
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	b911      	cbnz	r1, 800b2ea <sbrk_aligned+0x12>
 800b2e4:	f001 f9b6 	bl	800c654 <_sbrk_r>
 800b2e8:	6030      	str	r0, [r6, #0]
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f001 f9b1 	bl	800c654 <_sbrk_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	d103      	bne.n	800b2fe <sbrk_aligned+0x26>
 800b2f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	bd70      	pop	{r4, r5, r6, pc}
 800b2fe:	1cc4      	adds	r4, r0, #3
 800b300:	f024 0403 	bic.w	r4, r4, #3
 800b304:	42a0      	cmp	r0, r4
 800b306:	d0f8      	beq.n	800b2fa <sbrk_aligned+0x22>
 800b308:	1a21      	subs	r1, r4, r0
 800b30a:	4628      	mov	r0, r5
 800b30c:	f001 f9a2 	bl	800c654 <_sbrk_r>
 800b310:	3001      	adds	r0, #1
 800b312:	d1f2      	bne.n	800b2fa <sbrk_aligned+0x22>
 800b314:	e7ef      	b.n	800b2f6 <sbrk_aligned+0x1e>
 800b316:	bf00      	nop
 800b318:	20000888 	.word	0x20000888

0800b31c <_malloc_r>:
 800b31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b320:	1ccd      	adds	r5, r1, #3
 800b322:	f025 0503 	bic.w	r5, r5, #3
 800b326:	3508      	adds	r5, #8
 800b328:	2d0c      	cmp	r5, #12
 800b32a:	bf38      	it	cc
 800b32c:	250c      	movcc	r5, #12
 800b32e:	2d00      	cmp	r5, #0
 800b330:	4606      	mov	r6, r0
 800b332:	db01      	blt.n	800b338 <_malloc_r+0x1c>
 800b334:	42a9      	cmp	r1, r5
 800b336:	d904      	bls.n	800b342 <_malloc_r+0x26>
 800b338:	230c      	movs	r3, #12
 800b33a:	6033      	str	r3, [r6, #0]
 800b33c:	2000      	movs	r0, #0
 800b33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b418 <_malloc_r+0xfc>
 800b346:	f000 faaf 	bl	800b8a8 <__malloc_lock>
 800b34a:	f8d8 3000 	ldr.w	r3, [r8]
 800b34e:	461c      	mov	r4, r3
 800b350:	bb44      	cbnz	r4, 800b3a4 <_malloc_r+0x88>
 800b352:	4629      	mov	r1, r5
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff ffbf 	bl	800b2d8 <sbrk_aligned>
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	4604      	mov	r4, r0
 800b35e:	d158      	bne.n	800b412 <_malloc_r+0xf6>
 800b360:	f8d8 4000 	ldr.w	r4, [r8]
 800b364:	4627      	mov	r7, r4
 800b366:	2f00      	cmp	r7, #0
 800b368:	d143      	bne.n	800b3f2 <_malloc_r+0xd6>
 800b36a:	2c00      	cmp	r4, #0
 800b36c:	d04b      	beq.n	800b406 <_malloc_r+0xea>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	4639      	mov	r1, r7
 800b372:	4630      	mov	r0, r6
 800b374:	eb04 0903 	add.w	r9, r4, r3
 800b378:	f001 f96c 	bl	800c654 <_sbrk_r>
 800b37c:	4581      	cmp	r9, r0
 800b37e:	d142      	bne.n	800b406 <_malloc_r+0xea>
 800b380:	6821      	ldr	r1, [r4, #0]
 800b382:	1a6d      	subs	r5, r5, r1
 800b384:	4629      	mov	r1, r5
 800b386:	4630      	mov	r0, r6
 800b388:	f7ff ffa6 	bl	800b2d8 <sbrk_aligned>
 800b38c:	3001      	adds	r0, #1
 800b38e:	d03a      	beq.n	800b406 <_malloc_r+0xea>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	442b      	add	r3, r5
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	f8d8 3000 	ldr.w	r3, [r8]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	bb62      	cbnz	r2, 800b3f8 <_malloc_r+0xdc>
 800b39e:	f8c8 7000 	str.w	r7, [r8]
 800b3a2:	e00f      	b.n	800b3c4 <_malloc_r+0xa8>
 800b3a4:	6822      	ldr	r2, [r4, #0]
 800b3a6:	1b52      	subs	r2, r2, r5
 800b3a8:	d420      	bmi.n	800b3ec <_malloc_r+0xd0>
 800b3aa:	2a0b      	cmp	r2, #11
 800b3ac:	d917      	bls.n	800b3de <_malloc_r+0xc2>
 800b3ae:	1961      	adds	r1, r4, r5
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	6025      	str	r5, [r4, #0]
 800b3b4:	bf18      	it	ne
 800b3b6:	6059      	strne	r1, [r3, #4]
 800b3b8:	6863      	ldr	r3, [r4, #4]
 800b3ba:	bf08      	it	eq
 800b3bc:	f8c8 1000 	streq.w	r1, [r8]
 800b3c0:	5162      	str	r2, [r4, r5]
 800b3c2:	604b      	str	r3, [r1, #4]
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f000 fa75 	bl	800b8b4 <__malloc_unlock>
 800b3ca:	f104 000b 	add.w	r0, r4, #11
 800b3ce:	1d23      	adds	r3, r4, #4
 800b3d0:	f020 0007 	bic.w	r0, r0, #7
 800b3d4:	1ac2      	subs	r2, r0, r3
 800b3d6:	bf1c      	itt	ne
 800b3d8:	1a1b      	subne	r3, r3, r0
 800b3da:	50a3      	strne	r3, [r4, r2]
 800b3dc:	e7af      	b.n	800b33e <_malloc_r+0x22>
 800b3de:	6862      	ldr	r2, [r4, #4]
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	bf0c      	ite	eq
 800b3e4:	f8c8 2000 	streq.w	r2, [r8]
 800b3e8:	605a      	strne	r2, [r3, #4]
 800b3ea:	e7eb      	b.n	800b3c4 <_malloc_r+0xa8>
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	6864      	ldr	r4, [r4, #4]
 800b3f0:	e7ae      	b.n	800b350 <_malloc_r+0x34>
 800b3f2:	463c      	mov	r4, r7
 800b3f4:	687f      	ldr	r7, [r7, #4]
 800b3f6:	e7b6      	b.n	800b366 <_malloc_r+0x4a>
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	d1fb      	bne.n	800b3f8 <_malloc_r+0xdc>
 800b400:	2300      	movs	r3, #0
 800b402:	6053      	str	r3, [r2, #4]
 800b404:	e7de      	b.n	800b3c4 <_malloc_r+0xa8>
 800b406:	230c      	movs	r3, #12
 800b408:	6033      	str	r3, [r6, #0]
 800b40a:	4630      	mov	r0, r6
 800b40c:	f000 fa52 	bl	800b8b4 <__malloc_unlock>
 800b410:	e794      	b.n	800b33c <_malloc_r+0x20>
 800b412:	6005      	str	r5, [r0, #0]
 800b414:	e7d6      	b.n	800b3c4 <_malloc_r+0xa8>
 800b416:	bf00      	nop
 800b418:	2000088c 	.word	0x2000088c

0800b41c <__ascii_mbtowc>:
 800b41c:	b082      	sub	sp, #8
 800b41e:	b901      	cbnz	r1, 800b422 <__ascii_mbtowc+0x6>
 800b420:	a901      	add	r1, sp, #4
 800b422:	b142      	cbz	r2, 800b436 <__ascii_mbtowc+0x1a>
 800b424:	b14b      	cbz	r3, 800b43a <__ascii_mbtowc+0x1e>
 800b426:	7813      	ldrb	r3, [r2, #0]
 800b428:	600b      	str	r3, [r1, #0]
 800b42a:	7812      	ldrb	r2, [r2, #0]
 800b42c:	1e10      	subs	r0, r2, #0
 800b42e:	bf18      	it	ne
 800b430:	2001      	movne	r0, #1
 800b432:	b002      	add	sp, #8
 800b434:	4770      	bx	lr
 800b436:	4610      	mov	r0, r2
 800b438:	e7fb      	b.n	800b432 <__ascii_mbtowc+0x16>
 800b43a:	f06f 0001 	mvn.w	r0, #1
 800b43e:	e7f8      	b.n	800b432 <__ascii_mbtowc+0x16>

0800b440 <_scanf_chars>:
 800b440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b444:	4615      	mov	r5, r2
 800b446:	688a      	ldr	r2, [r1, #8]
 800b448:	4680      	mov	r8, r0
 800b44a:	460c      	mov	r4, r1
 800b44c:	b932      	cbnz	r2, 800b45c <_scanf_chars+0x1c>
 800b44e:	698a      	ldr	r2, [r1, #24]
 800b450:	2a00      	cmp	r2, #0
 800b452:	bf14      	ite	ne
 800b454:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800b458:	2201      	moveq	r2, #1
 800b45a:	608a      	str	r2, [r1, #8]
 800b45c:	6822      	ldr	r2, [r4, #0]
 800b45e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b4f0 <_scanf_chars+0xb0>
 800b462:	06d1      	lsls	r1, r2, #27
 800b464:	bf5f      	itttt	pl
 800b466:	681a      	ldrpl	r2, [r3, #0]
 800b468:	1d11      	addpl	r1, r2, #4
 800b46a:	6019      	strpl	r1, [r3, #0]
 800b46c:	6816      	ldrpl	r6, [r2, #0]
 800b46e:	2700      	movs	r7, #0
 800b470:	69a0      	ldr	r0, [r4, #24]
 800b472:	b188      	cbz	r0, 800b498 <_scanf_chars+0x58>
 800b474:	2801      	cmp	r0, #1
 800b476:	d107      	bne.n	800b488 <_scanf_chars+0x48>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	781a      	ldrb	r2, [r3, #0]
 800b47c:	6963      	ldr	r3, [r4, #20]
 800b47e:	5c9b      	ldrb	r3, [r3, r2]
 800b480:	b953      	cbnz	r3, 800b498 <_scanf_chars+0x58>
 800b482:	2f00      	cmp	r7, #0
 800b484:	d031      	beq.n	800b4ea <_scanf_chars+0xaa>
 800b486:	e022      	b.n	800b4ce <_scanf_chars+0x8e>
 800b488:	2802      	cmp	r0, #2
 800b48a:	d120      	bne.n	800b4ce <_scanf_chars+0x8e>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b494:	071b      	lsls	r3, r3, #28
 800b496:	d41a      	bmi.n	800b4ce <_scanf_chars+0x8e>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	06da      	lsls	r2, r3, #27
 800b49c:	bf5e      	ittt	pl
 800b49e:	682b      	ldrpl	r3, [r5, #0]
 800b4a0:	781b      	ldrbpl	r3, [r3, #0]
 800b4a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b4a6:	682a      	ldr	r2, [r5, #0]
 800b4a8:	686b      	ldr	r3, [r5, #4]
 800b4aa:	3201      	adds	r2, #1
 800b4ac:	602a      	str	r2, [r5, #0]
 800b4ae:	68a2      	ldr	r2, [r4, #8]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	3a01      	subs	r2, #1
 800b4b4:	606b      	str	r3, [r5, #4]
 800b4b6:	3701      	adds	r7, #1
 800b4b8:	60a2      	str	r2, [r4, #8]
 800b4ba:	b142      	cbz	r2, 800b4ce <_scanf_chars+0x8e>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dcd7      	bgt.n	800b470 <_scanf_chars+0x30>
 800b4c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	4798      	blx	r3
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0d0      	beq.n	800b470 <_scanf_chars+0x30>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	f013 0310 	ands.w	r3, r3, #16
 800b4d4:	d105      	bne.n	800b4e2 <_scanf_chars+0xa2>
 800b4d6:	68e2      	ldr	r2, [r4, #12]
 800b4d8:	3201      	adds	r2, #1
 800b4da:	60e2      	str	r2, [r4, #12]
 800b4dc:	69a2      	ldr	r2, [r4, #24]
 800b4de:	b102      	cbz	r2, 800b4e2 <_scanf_chars+0xa2>
 800b4e0:	7033      	strb	r3, [r6, #0]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	443b      	add	r3, r7
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	bf00      	nop
 800b4f0:	0800cf09 	.word	0x0800cf09

0800b4f4 <_scanf_i>:
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	4698      	mov	r8, r3
 800b4fa:	4b74      	ldr	r3, [pc, #464]	@ (800b6cc <_scanf_i+0x1d8>)
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	4682      	mov	sl, r0
 800b500:	4616      	mov	r6, r2
 800b502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b506:	b087      	sub	sp, #28
 800b508:	ab03      	add	r3, sp, #12
 800b50a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b50e:	4b70      	ldr	r3, [pc, #448]	@ (800b6d0 <_scanf_i+0x1dc>)
 800b510:	69a1      	ldr	r1, [r4, #24]
 800b512:	4a70      	ldr	r2, [pc, #448]	@ (800b6d4 <_scanf_i+0x1e0>)
 800b514:	2903      	cmp	r1, #3
 800b516:	bf08      	it	eq
 800b518:	461a      	moveq	r2, r3
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	9201      	str	r2, [sp, #4]
 800b51e:	1e5a      	subs	r2, r3, #1
 800b520:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b524:	bf88      	it	hi
 800b526:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b52a:	4627      	mov	r7, r4
 800b52c:	bf82      	ittt	hi
 800b52e:	eb03 0905 	addhi.w	r9, r3, r5
 800b532:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b536:	60a3      	strhi	r3, [r4, #8]
 800b538:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b53c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b540:	bf98      	it	ls
 800b542:	f04f 0900 	movls.w	r9, #0
 800b546:	6023      	str	r3, [r4, #0]
 800b548:	463d      	mov	r5, r7
 800b54a:	f04f 0b00 	mov.w	fp, #0
 800b54e:	6831      	ldr	r1, [r6, #0]
 800b550:	ab03      	add	r3, sp, #12
 800b552:	7809      	ldrb	r1, [r1, #0]
 800b554:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b558:	2202      	movs	r2, #2
 800b55a:	f7f4 fe61 	bl	8000220 <memchr>
 800b55e:	b328      	cbz	r0, 800b5ac <_scanf_i+0xb8>
 800b560:	f1bb 0f01 	cmp.w	fp, #1
 800b564:	d159      	bne.n	800b61a <_scanf_i+0x126>
 800b566:	6862      	ldr	r2, [r4, #4]
 800b568:	b92a      	cbnz	r2, 800b576 <_scanf_i+0x82>
 800b56a:	6822      	ldr	r2, [r4, #0]
 800b56c:	2108      	movs	r1, #8
 800b56e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b572:	6061      	str	r1, [r4, #4]
 800b574:	6022      	str	r2, [r4, #0]
 800b576:	6822      	ldr	r2, [r4, #0]
 800b578:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b57c:	6022      	str	r2, [r4, #0]
 800b57e:	68a2      	ldr	r2, [r4, #8]
 800b580:	1e51      	subs	r1, r2, #1
 800b582:	60a1      	str	r1, [r4, #8]
 800b584:	b192      	cbz	r2, 800b5ac <_scanf_i+0xb8>
 800b586:	6832      	ldr	r2, [r6, #0]
 800b588:	1c51      	adds	r1, r2, #1
 800b58a:	6031      	str	r1, [r6, #0]
 800b58c:	7812      	ldrb	r2, [r2, #0]
 800b58e:	f805 2b01 	strb.w	r2, [r5], #1
 800b592:	6872      	ldr	r2, [r6, #4]
 800b594:	3a01      	subs	r2, #1
 800b596:	2a00      	cmp	r2, #0
 800b598:	6072      	str	r2, [r6, #4]
 800b59a:	dc07      	bgt.n	800b5ac <_scanf_i+0xb8>
 800b59c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4650      	mov	r0, sl
 800b5a4:	4790      	blx	r2
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f040 8085 	bne.w	800b6b6 <_scanf_i+0x1c2>
 800b5ac:	f10b 0b01 	add.w	fp, fp, #1
 800b5b0:	f1bb 0f03 	cmp.w	fp, #3
 800b5b4:	d1cb      	bne.n	800b54e <_scanf_i+0x5a>
 800b5b6:	6863      	ldr	r3, [r4, #4]
 800b5b8:	b90b      	cbnz	r3, 800b5be <_scanf_i+0xca>
 800b5ba:	230a      	movs	r3, #10
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6863      	ldr	r3, [r4, #4]
 800b5c0:	4945      	ldr	r1, [pc, #276]	@ (800b6d8 <_scanf_i+0x1e4>)
 800b5c2:	6960      	ldr	r0, [r4, #20]
 800b5c4:	1ac9      	subs	r1, r1, r3
 800b5c6:	f000 f889 	bl	800b6dc <__sccl>
 800b5ca:	f04f 0b00 	mov.w	fp, #0
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	6822      	ldr	r2, [r4, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d03d      	beq.n	800b652 <_scanf_i+0x15e>
 800b5d6:	6831      	ldr	r1, [r6, #0]
 800b5d8:	6960      	ldr	r0, [r4, #20]
 800b5da:	f891 c000 	ldrb.w	ip, [r1]
 800b5de:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d035      	beq.n	800b652 <_scanf_i+0x15e>
 800b5e6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b5ea:	d124      	bne.n	800b636 <_scanf_i+0x142>
 800b5ec:	0510      	lsls	r0, r2, #20
 800b5ee:	d522      	bpl.n	800b636 <_scanf_i+0x142>
 800b5f0:	f10b 0b01 	add.w	fp, fp, #1
 800b5f4:	f1b9 0f00 	cmp.w	r9, #0
 800b5f8:	d003      	beq.n	800b602 <_scanf_i+0x10e>
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	6873      	ldr	r3, [r6, #4]
 800b604:	3b01      	subs	r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	6073      	str	r3, [r6, #4]
 800b60a:	dd1b      	ble.n	800b644 <_scanf_i+0x150>
 800b60c:	6833      	ldr	r3, [r6, #0]
 800b60e:	3301      	adds	r3, #1
 800b610:	6033      	str	r3, [r6, #0]
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	3b01      	subs	r3, #1
 800b616:	60a3      	str	r3, [r4, #8]
 800b618:	e7d9      	b.n	800b5ce <_scanf_i+0xda>
 800b61a:	f1bb 0f02 	cmp.w	fp, #2
 800b61e:	d1ae      	bne.n	800b57e <_scanf_i+0x8a>
 800b620:	6822      	ldr	r2, [r4, #0]
 800b622:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b626:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b62a:	d1bf      	bne.n	800b5ac <_scanf_i+0xb8>
 800b62c:	2110      	movs	r1, #16
 800b62e:	6061      	str	r1, [r4, #4]
 800b630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b634:	e7a2      	b.n	800b57c <_scanf_i+0x88>
 800b636:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b63a:	6022      	str	r2, [r4, #0]
 800b63c:	780b      	ldrb	r3, [r1, #0]
 800b63e:	f805 3b01 	strb.w	r3, [r5], #1
 800b642:	e7de      	b.n	800b602 <_scanf_i+0x10e>
 800b644:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b648:	4631      	mov	r1, r6
 800b64a:	4650      	mov	r0, sl
 800b64c:	4798      	blx	r3
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0df      	beq.n	800b612 <_scanf_i+0x11e>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	05d9      	lsls	r1, r3, #23
 800b656:	d50d      	bpl.n	800b674 <_scanf_i+0x180>
 800b658:	42bd      	cmp	r5, r7
 800b65a:	d909      	bls.n	800b670 <_scanf_i+0x17c>
 800b65c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b660:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b664:	4632      	mov	r2, r6
 800b666:	4650      	mov	r0, sl
 800b668:	4798      	blx	r3
 800b66a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800b66e:	464d      	mov	r5, r9
 800b670:	42bd      	cmp	r5, r7
 800b672:	d028      	beq.n	800b6c6 <_scanf_i+0x1d2>
 800b674:	6822      	ldr	r2, [r4, #0]
 800b676:	f012 0210 	ands.w	r2, r2, #16
 800b67a:	d113      	bne.n	800b6a4 <_scanf_i+0x1b0>
 800b67c:	702a      	strb	r2, [r5, #0]
 800b67e:	6863      	ldr	r3, [r4, #4]
 800b680:	9e01      	ldr	r6, [sp, #4]
 800b682:	4639      	mov	r1, r7
 800b684:	4650      	mov	r0, sl
 800b686:	47b0      	blx	r6
 800b688:	f8d8 3000 	ldr.w	r3, [r8]
 800b68c:	6821      	ldr	r1, [r4, #0]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	f8c8 2000 	str.w	r2, [r8]
 800b694:	f011 0f20 	tst.w	r1, #32
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	d00f      	beq.n	800b6bc <_scanf_i+0x1c8>
 800b69c:	6018      	str	r0, [r3, #0]
 800b69e:	68e3      	ldr	r3, [r4, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60e3      	str	r3, [r4, #12]
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	1bed      	subs	r5, r5, r7
 800b6a8:	445d      	add	r5, fp
 800b6aa:	442b      	add	r3, r5
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	b007      	add	sp, #28
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	f04f 0b00 	mov.w	fp, #0
 800b6ba:	e7ca      	b.n	800b652 <_scanf_i+0x15e>
 800b6bc:	07ca      	lsls	r2, r1, #31
 800b6be:	bf4c      	ite	mi
 800b6c0:	8018      	strhmi	r0, [r3, #0]
 800b6c2:	6018      	strpl	r0, [r3, #0]
 800b6c4:	e7eb      	b.n	800b69e <_scanf_i+0x1aa>
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	e7f2      	b.n	800b6b0 <_scanf_i+0x1bc>
 800b6ca:	bf00      	nop
 800b6cc:	0800ce24 	.word	0x0800ce24
 800b6d0:	080093e1 	.word	0x080093e1
 800b6d4:	0800c3d1 	.word	0x0800c3d1
 800b6d8:	0800d117 	.word	0x0800d117

0800b6dc <__sccl>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	780b      	ldrb	r3, [r1, #0]
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	2b5e      	cmp	r3, #94	@ 0x5e
 800b6e4:	bf0b      	itete	eq
 800b6e6:	784b      	ldrbeq	r3, [r1, #1]
 800b6e8:	1c4a      	addne	r2, r1, #1
 800b6ea:	1c8a      	addeq	r2, r1, #2
 800b6ec:	2100      	movne	r1, #0
 800b6ee:	bf08      	it	eq
 800b6f0:	2101      	moveq	r1, #1
 800b6f2:	3801      	subs	r0, #1
 800b6f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b6f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b6fc:	42a8      	cmp	r0, r5
 800b6fe:	d1fb      	bne.n	800b6f8 <__sccl+0x1c>
 800b700:	b90b      	cbnz	r3, 800b706 <__sccl+0x2a>
 800b702:	1e50      	subs	r0, r2, #1
 800b704:	bd70      	pop	{r4, r5, r6, pc}
 800b706:	f081 0101 	eor.w	r1, r1, #1
 800b70a:	54e1      	strb	r1, [r4, r3]
 800b70c:	4610      	mov	r0, r2
 800b70e:	4602      	mov	r2, r0
 800b710:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b714:	2d2d      	cmp	r5, #45	@ 0x2d
 800b716:	d005      	beq.n	800b724 <__sccl+0x48>
 800b718:	2d5d      	cmp	r5, #93	@ 0x5d
 800b71a:	d016      	beq.n	800b74a <__sccl+0x6e>
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	d0f1      	beq.n	800b704 <__sccl+0x28>
 800b720:	462b      	mov	r3, r5
 800b722:	e7f2      	b.n	800b70a <__sccl+0x2e>
 800b724:	7846      	ldrb	r6, [r0, #1]
 800b726:	2e5d      	cmp	r6, #93	@ 0x5d
 800b728:	d0fa      	beq.n	800b720 <__sccl+0x44>
 800b72a:	42b3      	cmp	r3, r6
 800b72c:	dcf8      	bgt.n	800b720 <__sccl+0x44>
 800b72e:	3002      	adds	r0, #2
 800b730:	461a      	mov	r2, r3
 800b732:	3201      	adds	r2, #1
 800b734:	4296      	cmp	r6, r2
 800b736:	54a1      	strb	r1, [r4, r2]
 800b738:	dcfb      	bgt.n	800b732 <__sccl+0x56>
 800b73a:	1af2      	subs	r2, r6, r3
 800b73c:	3a01      	subs	r2, #1
 800b73e:	1c5d      	adds	r5, r3, #1
 800b740:	42b3      	cmp	r3, r6
 800b742:	bfa8      	it	ge
 800b744:	2200      	movge	r2, #0
 800b746:	18ab      	adds	r3, r5, r2
 800b748:	e7e1      	b.n	800b70e <__sccl+0x32>
 800b74a:	4610      	mov	r0, r2
 800b74c:	e7da      	b.n	800b704 <__sccl+0x28>
	...

0800b750 <__sflush_r>:
 800b750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	0716      	lsls	r6, r2, #28
 800b75a:	4605      	mov	r5, r0
 800b75c:	460c      	mov	r4, r1
 800b75e:	d454      	bmi.n	800b80a <__sflush_r+0xba>
 800b760:	684b      	ldr	r3, [r1, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	dc02      	bgt.n	800b76c <__sflush_r+0x1c>
 800b766:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dd48      	ble.n	800b7fe <__sflush_r+0xae>
 800b76c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b76e:	2e00      	cmp	r6, #0
 800b770:	d045      	beq.n	800b7fe <__sflush_r+0xae>
 800b772:	2300      	movs	r3, #0
 800b774:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b778:	682f      	ldr	r7, [r5, #0]
 800b77a:	6a21      	ldr	r1, [r4, #32]
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	d030      	beq.n	800b7e2 <__sflush_r+0x92>
 800b780:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	0759      	lsls	r1, r3, #29
 800b786:	d505      	bpl.n	800b794 <__sflush_r+0x44>
 800b788:	6863      	ldr	r3, [r4, #4]
 800b78a:	1ad2      	subs	r2, r2, r3
 800b78c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b78e:	b10b      	cbz	r3, 800b794 <__sflush_r+0x44>
 800b790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b792:	1ad2      	subs	r2, r2, r3
 800b794:	2300      	movs	r3, #0
 800b796:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b798:	6a21      	ldr	r1, [r4, #32]
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b0      	blx	r6
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	d106      	bne.n	800b7b2 <__sflush_r+0x62>
 800b7a4:	6829      	ldr	r1, [r5, #0]
 800b7a6:	291d      	cmp	r1, #29
 800b7a8:	d82b      	bhi.n	800b802 <__sflush_r+0xb2>
 800b7aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b854 <__sflush_r+0x104>)
 800b7ac:	410a      	asrs	r2, r1
 800b7ae:	07d6      	lsls	r6, r2, #31
 800b7b0:	d427      	bmi.n	800b802 <__sflush_r+0xb2>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	6062      	str	r2, [r4, #4]
 800b7b6:	04d9      	lsls	r1, r3, #19
 800b7b8:	6922      	ldr	r2, [r4, #16]
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	d504      	bpl.n	800b7c8 <__sflush_r+0x78>
 800b7be:	1c42      	adds	r2, r0, #1
 800b7c0:	d101      	bne.n	800b7c6 <__sflush_r+0x76>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b903      	cbnz	r3, 800b7c8 <__sflush_r+0x78>
 800b7c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ca:	602f      	str	r7, [r5, #0]
 800b7cc:	b1b9      	cbz	r1, 800b7fe <__sflush_r+0xae>
 800b7ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7d2:	4299      	cmp	r1, r3
 800b7d4:	d002      	beq.n	800b7dc <__sflush_r+0x8c>
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f7fe fd8e 	bl	800a2f8 <_free_r>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7e0:	e00d      	b.n	800b7fe <__sflush_r+0xae>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	47b0      	blx	r6
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	1c50      	adds	r0, r2, #1
 800b7ec:	d1c9      	bne.n	800b782 <__sflush_r+0x32>
 800b7ee:	682b      	ldr	r3, [r5, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d0c6      	beq.n	800b782 <__sflush_r+0x32>
 800b7f4:	2b1d      	cmp	r3, #29
 800b7f6:	d001      	beq.n	800b7fc <__sflush_r+0xac>
 800b7f8:	2b16      	cmp	r3, #22
 800b7fa:	d11e      	bne.n	800b83a <__sflush_r+0xea>
 800b7fc:	602f      	str	r7, [r5, #0]
 800b7fe:	2000      	movs	r0, #0
 800b800:	e022      	b.n	800b848 <__sflush_r+0xf8>
 800b802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b806:	b21b      	sxth	r3, r3
 800b808:	e01b      	b.n	800b842 <__sflush_r+0xf2>
 800b80a:	690f      	ldr	r7, [r1, #16]
 800b80c:	2f00      	cmp	r7, #0
 800b80e:	d0f6      	beq.n	800b7fe <__sflush_r+0xae>
 800b810:	0793      	lsls	r3, r2, #30
 800b812:	680e      	ldr	r6, [r1, #0]
 800b814:	bf08      	it	eq
 800b816:	694b      	ldreq	r3, [r1, #20]
 800b818:	600f      	str	r7, [r1, #0]
 800b81a:	bf18      	it	ne
 800b81c:	2300      	movne	r3, #0
 800b81e:	eba6 0807 	sub.w	r8, r6, r7
 800b822:	608b      	str	r3, [r1, #8]
 800b824:	f1b8 0f00 	cmp.w	r8, #0
 800b828:	dde9      	ble.n	800b7fe <__sflush_r+0xae>
 800b82a:	6a21      	ldr	r1, [r4, #32]
 800b82c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b82e:	4643      	mov	r3, r8
 800b830:	463a      	mov	r2, r7
 800b832:	4628      	mov	r0, r5
 800b834:	47b0      	blx	r6
 800b836:	2800      	cmp	r0, #0
 800b838:	dc08      	bgt.n	800b84c <__sflush_r+0xfc>
 800b83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b84c:	4407      	add	r7, r0
 800b84e:	eba8 0800 	sub.w	r8, r8, r0
 800b852:	e7e7      	b.n	800b824 <__sflush_r+0xd4>
 800b854:	dfbffffe 	.word	0xdfbffffe

0800b858 <_fflush_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	690b      	ldr	r3, [r1, #16]
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	b913      	cbnz	r3, 800b868 <_fflush_r+0x10>
 800b862:	2500      	movs	r5, #0
 800b864:	4628      	mov	r0, r5
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	b118      	cbz	r0, 800b872 <_fflush_r+0x1a>
 800b86a:	6a03      	ldr	r3, [r0, #32]
 800b86c:	b90b      	cbnz	r3, 800b872 <_fflush_r+0x1a>
 800b86e:	f7fc ff1b 	bl	80086a8 <__sinit>
 800b872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0f3      	beq.n	800b862 <_fflush_r+0xa>
 800b87a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b87c:	07d0      	lsls	r0, r2, #31
 800b87e:	d404      	bmi.n	800b88a <_fflush_r+0x32>
 800b880:	0599      	lsls	r1, r3, #22
 800b882:	d402      	bmi.n	800b88a <_fflush_r+0x32>
 800b884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b886:	f7fd feca 	bl	800961e <__retarget_lock_acquire_recursive>
 800b88a:	4628      	mov	r0, r5
 800b88c:	4621      	mov	r1, r4
 800b88e:	f7ff ff5f 	bl	800b750 <__sflush_r>
 800b892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b894:	07da      	lsls	r2, r3, #31
 800b896:	4605      	mov	r5, r0
 800b898:	d4e4      	bmi.n	800b864 <_fflush_r+0xc>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	059b      	lsls	r3, r3, #22
 800b89e:	d4e1      	bmi.n	800b864 <_fflush_r+0xc>
 800b8a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8a2:	f7fd febd 	bl	8009620 <__retarget_lock_release_recursive>
 800b8a6:	e7dd      	b.n	800b864 <_fflush_r+0xc>

0800b8a8 <__malloc_lock>:
 800b8a8:	4801      	ldr	r0, [pc, #4]	@ (800b8b0 <__malloc_lock+0x8>)
 800b8aa:	f7fd beb8 	b.w	800961e <__retarget_lock_acquire_recursive>
 800b8ae:	bf00      	nop
 800b8b0:	20000884 	.word	0x20000884

0800b8b4 <__malloc_unlock>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	@ (800b8bc <__malloc_unlock+0x8>)
 800b8b6:	f7fd beb3 	b.w	8009620 <__retarget_lock_release_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	20000884 	.word	0x20000884

0800b8c0 <_Balloc>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	69c6      	ldr	r6, [r0, #28]
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	b976      	cbnz	r6, 800b8e8 <_Balloc+0x28>
 800b8ca:	2010      	movs	r0, #16
 800b8cc:	f7ff fcfc 	bl	800b2c8 <malloc>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	61e0      	str	r0, [r4, #28]
 800b8d4:	b920      	cbnz	r0, 800b8e0 <_Balloc+0x20>
 800b8d6:	4b18      	ldr	r3, [pc, #96]	@ (800b938 <_Balloc+0x78>)
 800b8d8:	4818      	ldr	r0, [pc, #96]	@ (800b93c <_Balloc+0x7c>)
 800b8da:	216b      	movs	r1, #107	@ 0x6b
 800b8dc:	f000 feca 	bl	800c674 <__assert_func>
 800b8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8e4:	6006      	str	r6, [r0, #0]
 800b8e6:	60c6      	str	r6, [r0, #12]
 800b8e8:	69e6      	ldr	r6, [r4, #28]
 800b8ea:	68f3      	ldr	r3, [r6, #12]
 800b8ec:	b183      	cbz	r3, 800b910 <_Balloc+0x50>
 800b8ee:	69e3      	ldr	r3, [r4, #28]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8f6:	b9b8      	cbnz	r0, 800b928 <_Balloc+0x68>
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b8fe:	1d72      	adds	r2, r6, #5
 800b900:	0092      	lsls	r2, r2, #2
 800b902:	4620      	mov	r0, r4
 800b904:	f000 fed4 	bl	800c6b0 <_calloc_r>
 800b908:	b160      	cbz	r0, 800b924 <_Balloc+0x64>
 800b90a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b90e:	e00e      	b.n	800b92e <_Balloc+0x6e>
 800b910:	2221      	movs	r2, #33	@ 0x21
 800b912:	2104      	movs	r1, #4
 800b914:	4620      	mov	r0, r4
 800b916:	f000 fecb 	bl	800c6b0 <_calloc_r>
 800b91a:	69e3      	ldr	r3, [r4, #28]
 800b91c:	60f0      	str	r0, [r6, #12]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1e4      	bne.n	800b8ee <_Balloc+0x2e>
 800b924:	2000      	movs	r0, #0
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	6802      	ldr	r2, [r0, #0]
 800b92a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b92e:	2300      	movs	r3, #0
 800b930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b934:	e7f7      	b.n	800b926 <_Balloc+0x66>
 800b936:	bf00      	nop
 800b938:	0800d016 	.word	0x0800d016
 800b93c:	0800d122 	.word	0x0800d122

0800b940 <_Bfree>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	69c6      	ldr	r6, [r0, #28]
 800b944:	4605      	mov	r5, r0
 800b946:	460c      	mov	r4, r1
 800b948:	b976      	cbnz	r6, 800b968 <_Bfree+0x28>
 800b94a:	2010      	movs	r0, #16
 800b94c:	f7ff fcbc 	bl	800b2c8 <malloc>
 800b950:	4602      	mov	r2, r0
 800b952:	61e8      	str	r0, [r5, #28]
 800b954:	b920      	cbnz	r0, 800b960 <_Bfree+0x20>
 800b956:	4b09      	ldr	r3, [pc, #36]	@ (800b97c <_Bfree+0x3c>)
 800b958:	4809      	ldr	r0, [pc, #36]	@ (800b980 <_Bfree+0x40>)
 800b95a:	218f      	movs	r1, #143	@ 0x8f
 800b95c:	f000 fe8a 	bl	800c674 <__assert_func>
 800b960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b964:	6006      	str	r6, [r0, #0]
 800b966:	60c6      	str	r6, [r0, #12]
 800b968:	b13c      	cbz	r4, 800b97a <_Bfree+0x3a>
 800b96a:	69eb      	ldr	r3, [r5, #28]
 800b96c:	6862      	ldr	r2, [r4, #4]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b974:	6021      	str	r1, [r4, #0]
 800b976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
 800b97c:	0800d016 	.word	0x0800d016
 800b980:	0800d122 	.word	0x0800d122

0800b984 <__multadd>:
 800b984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b988:	690d      	ldr	r5, [r1, #16]
 800b98a:	4607      	mov	r7, r0
 800b98c:	460c      	mov	r4, r1
 800b98e:	461e      	mov	r6, r3
 800b990:	f101 0c14 	add.w	ip, r1, #20
 800b994:	2000      	movs	r0, #0
 800b996:	f8dc 3000 	ldr.w	r3, [ip]
 800b99a:	b299      	uxth	r1, r3
 800b99c:	fb02 6101 	mla	r1, r2, r1, r6
 800b9a0:	0c1e      	lsrs	r6, r3, #16
 800b9a2:	0c0b      	lsrs	r3, r1, #16
 800b9a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b9a8:	b289      	uxth	r1, r1
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9b0:	4285      	cmp	r5, r0
 800b9b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b9b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9ba:	dcec      	bgt.n	800b996 <__multadd+0x12>
 800b9bc:	b30e      	cbz	r6, 800ba02 <__multadd+0x7e>
 800b9be:	68a3      	ldr	r3, [r4, #8]
 800b9c0:	42ab      	cmp	r3, r5
 800b9c2:	dc19      	bgt.n	800b9f8 <__multadd+0x74>
 800b9c4:	6861      	ldr	r1, [r4, #4]
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	3101      	adds	r1, #1
 800b9ca:	f7ff ff79 	bl	800b8c0 <_Balloc>
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	b928      	cbnz	r0, 800b9de <__multadd+0x5a>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800ba08 <__multadd+0x84>)
 800b9d6:	480d      	ldr	r0, [pc, #52]	@ (800ba0c <__multadd+0x88>)
 800b9d8:	21ba      	movs	r1, #186	@ 0xba
 800b9da:	f000 fe4b 	bl	800c674 <__assert_func>
 800b9de:	6922      	ldr	r2, [r4, #16]
 800b9e0:	3202      	adds	r2, #2
 800b9e2:	f104 010c 	add.w	r1, r4, #12
 800b9e6:	0092      	lsls	r2, r2, #2
 800b9e8:	300c      	adds	r0, #12
 800b9ea:	f7fd fe1a 	bl	8009622 <memcpy>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff ffa5 	bl	800b940 <_Bfree>
 800b9f6:	4644      	mov	r4, r8
 800b9f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	615e      	str	r6, [r3, #20]
 800ba00:	6125      	str	r5, [r4, #16]
 800ba02:	4620      	mov	r0, r4
 800ba04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba08:	0800d085 	.word	0x0800d085
 800ba0c:	0800d122 	.word	0x0800d122

0800ba10 <__s2b>:
 800ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	4615      	mov	r5, r2
 800ba18:	461f      	mov	r7, r3
 800ba1a:	2209      	movs	r2, #9
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	4606      	mov	r6, r0
 800ba20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba24:	2100      	movs	r1, #0
 800ba26:	2201      	movs	r2, #1
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	db09      	blt.n	800ba40 <__s2b+0x30>
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f7ff ff47 	bl	800b8c0 <_Balloc>
 800ba32:	b940      	cbnz	r0, 800ba46 <__s2b+0x36>
 800ba34:	4602      	mov	r2, r0
 800ba36:	4b19      	ldr	r3, [pc, #100]	@ (800ba9c <__s2b+0x8c>)
 800ba38:	4819      	ldr	r0, [pc, #100]	@ (800baa0 <__s2b+0x90>)
 800ba3a:	21d3      	movs	r1, #211	@ 0xd3
 800ba3c:	f000 fe1a 	bl	800c674 <__assert_func>
 800ba40:	0052      	lsls	r2, r2, #1
 800ba42:	3101      	adds	r1, #1
 800ba44:	e7f0      	b.n	800ba28 <__s2b+0x18>
 800ba46:	9b08      	ldr	r3, [sp, #32]
 800ba48:	6143      	str	r3, [r0, #20]
 800ba4a:	2d09      	cmp	r5, #9
 800ba4c:	f04f 0301 	mov.w	r3, #1
 800ba50:	6103      	str	r3, [r0, #16]
 800ba52:	dd16      	ble.n	800ba82 <__s2b+0x72>
 800ba54:	f104 0909 	add.w	r9, r4, #9
 800ba58:	46c8      	mov	r8, r9
 800ba5a:	442c      	add	r4, r5
 800ba5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba60:	4601      	mov	r1, r0
 800ba62:	3b30      	subs	r3, #48	@ 0x30
 800ba64:	220a      	movs	r2, #10
 800ba66:	4630      	mov	r0, r6
 800ba68:	f7ff ff8c 	bl	800b984 <__multadd>
 800ba6c:	45a0      	cmp	r8, r4
 800ba6e:	d1f5      	bne.n	800ba5c <__s2b+0x4c>
 800ba70:	f1a5 0408 	sub.w	r4, r5, #8
 800ba74:	444c      	add	r4, r9
 800ba76:	1b2d      	subs	r5, r5, r4
 800ba78:	1963      	adds	r3, r4, r5
 800ba7a:	42bb      	cmp	r3, r7
 800ba7c:	db04      	blt.n	800ba88 <__s2b+0x78>
 800ba7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba82:	340a      	adds	r4, #10
 800ba84:	2509      	movs	r5, #9
 800ba86:	e7f6      	b.n	800ba76 <__s2b+0x66>
 800ba88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba8c:	4601      	mov	r1, r0
 800ba8e:	3b30      	subs	r3, #48	@ 0x30
 800ba90:	220a      	movs	r2, #10
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7ff ff76 	bl	800b984 <__multadd>
 800ba98:	e7ee      	b.n	800ba78 <__s2b+0x68>
 800ba9a:	bf00      	nop
 800ba9c:	0800d085 	.word	0x0800d085
 800baa0:	0800d122 	.word	0x0800d122

0800baa4 <__hi0bits>:
 800baa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800baa8:	4603      	mov	r3, r0
 800baaa:	bf36      	itet	cc
 800baac:	0403      	lslcc	r3, r0, #16
 800baae:	2000      	movcs	r0, #0
 800bab0:	2010      	movcc	r0, #16
 800bab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bab6:	bf3c      	itt	cc
 800bab8:	021b      	lslcc	r3, r3, #8
 800baba:	3008      	addcc	r0, #8
 800babc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bac0:	bf3c      	itt	cc
 800bac2:	011b      	lslcc	r3, r3, #4
 800bac4:	3004      	addcc	r0, #4
 800bac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baca:	bf3c      	itt	cc
 800bacc:	009b      	lslcc	r3, r3, #2
 800bace:	3002      	addcc	r0, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	db05      	blt.n	800bae0 <__hi0bits+0x3c>
 800bad4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bad8:	f100 0001 	add.w	r0, r0, #1
 800badc:	bf08      	it	eq
 800bade:	2020      	moveq	r0, #32
 800bae0:	4770      	bx	lr

0800bae2 <__lo0bits>:
 800bae2:	6803      	ldr	r3, [r0, #0]
 800bae4:	4602      	mov	r2, r0
 800bae6:	f013 0007 	ands.w	r0, r3, #7
 800baea:	d00b      	beq.n	800bb04 <__lo0bits+0x22>
 800baec:	07d9      	lsls	r1, r3, #31
 800baee:	d421      	bmi.n	800bb34 <__lo0bits+0x52>
 800baf0:	0798      	lsls	r0, r3, #30
 800baf2:	bf49      	itett	mi
 800baf4:	085b      	lsrmi	r3, r3, #1
 800baf6:	089b      	lsrpl	r3, r3, #2
 800baf8:	2001      	movmi	r0, #1
 800bafa:	6013      	strmi	r3, [r2, #0]
 800bafc:	bf5c      	itt	pl
 800bafe:	6013      	strpl	r3, [r2, #0]
 800bb00:	2002      	movpl	r0, #2
 800bb02:	4770      	bx	lr
 800bb04:	b299      	uxth	r1, r3
 800bb06:	b909      	cbnz	r1, 800bb0c <__lo0bits+0x2a>
 800bb08:	0c1b      	lsrs	r3, r3, #16
 800bb0a:	2010      	movs	r0, #16
 800bb0c:	b2d9      	uxtb	r1, r3
 800bb0e:	b909      	cbnz	r1, 800bb14 <__lo0bits+0x32>
 800bb10:	3008      	adds	r0, #8
 800bb12:	0a1b      	lsrs	r3, r3, #8
 800bb14:	0719      	lsls	r1, r3, #28
 800bb16:	bf04      	itt	eq
 800bb18:	091b      	lsreq	r3, r3, #4
 800bb1a:	3004      	addeq	r0, #4
 800bb1c:	0799      	lsls	r1, r3, #30
 800bb1e:	bf04      	itt	eq
 800bb20:	089b      	lsreq	r3, r3, #2
 800bb22:	3002      	addeq	r0, #2
 800bb24:	07d9      	lsls	r1, r3, #31
 800bb26:	d403      	bmi.n	800bb30 <__lo0bits+0x4e>
 800bb28:	085b      	lsrs	r3, r3, #1
 800bb2a:	f100 0001 	add.w	r0, r0, #1
 800bb2e:	d003      	beq.n	800bb38 <__lo0bits+0x56>
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	4770      	bx	lr
 800bb34:	2000      	movs	r0, #0
 800bb36:	4770      	bx	lr
 800bb38:	2020      	movs	r0, #32
 800bb3a:	4770      	bx	lr

0800bb3c <__i2b>:
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	460c      	mov	r4, r1
 800bb40:	2101      	movs	r1, #1
 800bb42:	f7ff febd 	bl	800b8c0 <_Balloc>
 800bb46:	4602      	mov	r2, r0
 800bb48:	b928      	cbnz	r0, 800bb56 <__i2b+0x1a>
 800bb4a:	4b05      	ldr	r3, [pc, #20]	@ (800bb60 <__i2b+0x24>)
 800bb4c:	4805      	ldr	r0, [pc, #20]	@ (800bb64 <__i2b+0x28>)
 800bb4e:	f240 1145 	movw	r1, #325	@ 0x145
 800bb52:	f000 fd8f 	bl	800c674 <__assert_func>
 800bb56:	2301      	movs	r3, #1
 800bb58:	6144      	str	r4, [r0, #20]
 800bb5a:	6103      	str	r3, [r0, #16]
 800bb5c:	bd10      	pop	{r4, pc}
 800bb5e:	bf00      	nop
 800bb60:	0800d085 	.word	0x0800d085
 800bb64:	0800d122 	.word	0x0800d122

0800bb68 <__multiply>:
 800bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	690a      	ldr	r2, [r1, #16]
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	bfa8      	it	ge
 800bb76:	4623      	movge	r3, r4
 800bb78:	460f      	mov	r7, r1
 800bb7a:	bfa4      	itt	ge
 800bb7c:	460c      	movge	r4, r1
 800bb7e:	461f      	movge	r7, r3
 800bb80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	6861      	ldr	r1, [r4, #4]
 800bb8c:	eb0a 0609 	add.w	r6, sl, r9
 800bb90:	42b3      	cmp	r3, r6
 800bb92:	b085      	sub	sp, #20
 800bb94:	bfb8      	it	lt
 800bb96:	3101      	addlt	r1, #1
 800bb98:	f7ff fe92 	bl	800b8c0 <_Balloc>
 800bb9c:	b930      	cbnz	r0, 800bbac <__multiply+0x44>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	4b44      	ldr	r3, [pc, #272]	@ (800bcb4 <__multiply+0x14c>)
 800bba2:	4845      	ldr	r0, [pc, #276]	@ (800bcb8 <__multiply+0x150>)
 800bba4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bba8:	f000 fd64 	bl	800c674 <__assert_func>
 800bbac:	f100 0514 	add.w	r5, r0, #20
 800bbb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4543      	cmp	r3, r8
 800bbba:	d321      	bcc.n	800bc00 <__multiply+0x98>
 800bbbc:	f107 0114 	add.w	r1, r7, #20
 800bbc0:	f104 0214 	add.w	r2, r4, #20
 800bbc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bbc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bbcc:	9302      	str	r3, [sp, #8]
 800bbce:	1b13      	subs	r3, r2, r4
 800bbd0:	3b15      	subs	r3, #21
 800bbd2:	f023 0303 	bic.w	r3, r3, #3
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	f104 0715 	add.w	r7, r4, #21
 800bbdc:	42ba      	cmp	r2, r7
 800bbde:	bf38      	it	cc
 800bbe0:	2304      	movcc	r3, #4
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	9b02      	ldr	r3, [sp, #8]
 800bbe6:	9103      	str	r1, [sp, #12]
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	d80c      	bhi.n	800bc06 <__multiply+0x9e>
 800bbec:	2e00      	cmp	r6, #0
 800bbee:	dd03      	ble.n	800bbf8 <__multiply+0x90>
 800bbf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d05b      	beq.n	800bcb0 <__multiply+0x148>
 800bbf8:	6106      	str	r6, [r0, #16]
 800bbfa:	b005      	add	sp, #20
 800bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc00:	f843 2b04 	str.w	r2, [r3], #4
 800bc04:	e7d8      	b.n	800bbb8 <__multiply+0x50>
 800bc06:	f8b1 a000 	ldrh.w	sl, [r1]
 800bc0a:	f1ba 0f00 	cmp.w	sl, #0
 800bc0e:	d024      	beq.n	800bc5a <__multiply+0xf2>
 800bc10:	f104 0e14 	add.w	lr, r4, #20
 800bc14:	46a9      	mov	r9, r5
 800bc16:	f04f 0c00 	mov.w	ip, #0
 800bc1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc1e:	f8d9 3000 	ldr.w	r3, [r9]
 800bc22:	fa1f fb87 	uxth.w	fp, r7
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bc30:	f8d9 7000 	ldr.w	r7, [r9]
 800bc34:	4463      	add	r3, ip
 800bc36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc3a:	fb0a c70b 	mla	r7, sl, fp, ip
 800bc3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc48:	4572      	cmp	r2, lr
 800bc4a:	f849 3b04 	str.w	r3, [r9], #4
 800bc4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc52:	d8e2      	bhi.n	800bc1a <__multiply+0xb2>
 800bc54:	9b01      	ldr	r3, [sp, #4]
 800bc56:	f845 c003 	str.w	ip, [r5, r3]
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc60:	3104      	adds	r1, #4
 800bc62:	f1b9 0f00 	cmp.w	r9, #0
 800bc66:	d021      	beq.n	800bcac <__multiply+0x144>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	f104 0c14 	add.w	ip, r4, #20
 800bc6e:	46ae      	mov	lr, r5
 800bc70:	f04f 0a00 	mov.w	sl, #0
 800bc74:	f8bc b000 	ldrh.w	fp, [ip]
 800bc78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc7c:	fb09 770b 	mla	r7, r9, fp, r7
 800bc80:	4457      	add	r7, sl
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc88:	f84e 3b04 	str.w	r3, [lr], #4
 800bc8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc94:	f8be 3000 	ldrh.w	r3, [lr]
 800bc98:	fb09 330a 	mla	r3, r9, sl, r3
 800bc9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bca0:	4562      	cmp	r2, ip
 800bca2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bca6:	d8e5      	bhi.n	800bc74 <__multiply+0x10c>
 800bca8:	9f01      	ldr	r7, [sp, #4]
 800bcaa:	51eb      	str	r3, [r5, r7]
 800bcac:	3504      	adds	r5, #4
 800bcae:	e799      	b.n	800bbe4 <__multiply+0x7c>
 800bcb0:	3e01      	subs	r6, #1
 800bcb2:	e79b      	b.n	800bbec <__multiply+0x84>
 800bcb4:	0800d085 	.word	0x0800d085
 800bcb8:	0800d122 	.word	0x0800d122

0800bcbc <__pow5mult>:
 800bcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	f012 0203 	ands.w	r2, r2, #3
 800bcc6:	4607      	mov	r7, r0
 800bcc8:	460e      	mov	r6, r1
 800bcca:	d007      	beq.n	800bcdc <__pow5mult+0x20>
 800bccc:	4c25      	ldr	r4, [pc, #148]	@ (800bd64 <__pow5mult+0xa8>)
 800bcce:	3a01      	subs	r2, #1
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcd6:	f7ff fe55 	bl	800b984 <__multadd>
 800bcda:	4606      	mov	r6, r0
 800bcdc:	10ad      	asrs	r5, r5, #2
 800bcde:	d03d      	beq.n	800bd5c <__pow5mult+0xa0>
 800bce0:	69fc      	ldr	r4, [r7, #28]
 800bce2:	b97c      	cbnz	r4, 800bd04 <__pow5mult+0x48>
 800bce4:	2010      	movs	r0, #16
 800bce6:	f7ff faef 	bl	800b2c8 <malloc>
 800bcea:	4602      	mov	r2, r0
 800bcec:	61f8      	str	r0, [r7, #28]
 800bcee:	b928      	cbnz	r0, 800bcfc <__pow5mult+0x40>
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	@ (800bd68 <__pow5mult+0xac>)
 800bcf2:	481e      	ldr	r0, [pc, #120]	@ (800bd6c <__pow5mult+0xb0>)
 800bcf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bcf8:	f000 fcbc 	bl	800c674 <__assert_func>
 800bcfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd00:	6004      	str	r4, [r0, #0]
 800bd02:	60c4      	str	r4, [r0, #12]
 800bd04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bd08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd0c:	b94c      	cbnz	r4, 800bd22 <__pow5mult+0x66>
 800bd0e:	f240 2171 	movw	r1, #625	@ 0x271
 800bd12:	4638      	mov	r0, r7
 800bd14:	f7ff ff12 	bl	800bb3c <__i2b>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd1e:	4604      	mov	r4, r0
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	f04f 0900 	mov.w	r9, #0
 800bd26:	07eb      	lsls	r3, r5, #31
 800bd28:	d50a      	bpl.n	800bd40 <__pow5mult+0x84>
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f7ff ff1a 	bl	800bb68 <__multiply>
 800bd34:	4631      	mov	r1, r6
 800bd36:	4680      	mov	r8, r0
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff fe01 	bl	800b940 <_Bfree>
 800bd3e:	4646      	mov	r6, r8
 800bd40:	106d      	asrs	r5, r5, #1
 800bd42:	d00b      	beq.n	800bd5c <__pow5mult+0xa0>
 800bd44:	6820      	ldr	r0, [r4, #0]
 800bd46:	b938      	cbnz	r0, 800bd58 <__pow5mult+0x9c>
 800bd48:	4622      	mov	r2, r4
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f7ff ff0b 	bl	800bb68 <__multiply>
 800bd52:	6020      	str	r0, [r4, #0]
 800bd54:	f8c0 9000 	str.w	r9, [r0]
 800bd58:	4604      	mov	r4, r0
 800bd5a:	e7e4      	b.n	800bd26 <__pow5mult+0x6a>
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd62:	bf00      	nop
 800bd64:	0800d17c 	.word	0x0800d17c
 800bd68:	0800d016 	.word	0x0800d016
 800bd6c:	0800d122 	.word	0x0800d122

0800bd70 <__lshift>:
 800bd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	460c      	mov	r4, r1
 800bd76:	6849      	ldr	r1, [r1, #4]
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd7e:	68a3      	ldr	r3, [r4, #8]
 800bd80:	4607      	mov	r7, r0
 800bd82:	4691      	mov	r9, r2
 800bd84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd88:	f108 0601 	add.w	r6, r8, #1
 800bd8c:	42b3      	cmp	r3, r6
 800bd8e:	db0b      	blt.n	800bda8 <__lshift+0x38>
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff fd95 	bl	800b8c0 <_Balloc>
 800bd96:	4605      	mov	r5, r0
 800bd98:	b948      	cbnz	r0, 800bdae <__lshift+0x3e>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	4b28      	ldr	r3, [pc, #160]	@ (800be40 <__lshift+0xd0>)
 800bd9e:	4829      	ldr	r0, [pc, #164]	@ (800be44 <__lshift+0xd4>)
 800bda0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bda4:	f000 fc66 	bl	800c674 <__assert_func>
 800bda8:	3101      	adds	r1, #1
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	e7ee      	b.n	800bd8c <__lshift+0x1c>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f100 0114 	add.w	r1, r0, #20
 800bdb4:	f100 0210 	add.w	r2, r0, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	4553      	cmp	r3, sl
 800bdbc:	db33      	blt.n	800be26 <__lshift+0xb6>
 800bdbe:	6920      	ldr	r0, [r4, #16]
 800bdc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdc4:	f104 0314 	add.w	r3, r4, #20
 800bdc8:	f019 091f 	ands.w	r9, r9, #31
 800bdcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdd4:	d02b      	beq.n	800be2e <__lshift+0xbe>
 800bdd6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdda:	468a      	mov	sl, r1
 800bddc:	2200      	movs	r2, #0
 800bdde:	6818      	ldr	r0, [r3, #0]
 800bde0:	fa00 f009 	lsl.w	r0, r0, r9
 800bde4:	4310      	orrs	r0, r2
 800bde6:	f84a 0b04 	str.w	r0, [sl], #4
 800bdea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdee:	459c      	cmp	ip, r3
 800bdf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdf4:	d8f3      	bhi.n	800bdde <__lshift+0x6e>
 800bdf6:	ebac 0304 	sub.w	r3, ip, r4
 800bdfa:	3b15      	subs	r3, #21
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	3304      	adds	r3, #4
 800be02:	f104 0015 	add.w	r0, r4, #21
 800be06:	4584      	cmp	ip, r0
 800be08:	bf38      	it	cc
 800be0a:	2304      	movcc	r3, #4
 800be0c:	50ca      	str	r2, [r1, r3]
 800be0e:	b10a      	cbz	r2, 800be14 <__lshift+0xa4>
 800be10:	f108 0602 	add.w	r6, r8, #2
 800be14:	3e01      	subs	r6, #1
 800be16:	4638      	mov	r0, r7
 800be18:	612e      	str	r6, [r5, #16]
 800be1a:	4621      	mov	r1, r4
 800be1c:	f7ff fd90 	bl	800b940 <_Bfree>
 800be20:	4628      	mov	r0, r5
 800be22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be26:	f842 0f04 	str.w	r0, [r2, #4]!
 800be2a:	3301      	adds	r3, #1
 800be2c:	e7c5      	b.n	800bdba <__lshift+0x4a>
 800be2e:	3904      	subs	r1, #4
 800be30:	f853 2b04 	ldr.w	r2, [r3], #4
 800be34:	f841 2f04 	str.w	r2, [r1, #4]!
 800be38:	459c      	cmp	ip, r3
 800be3a:	d8f9      	bhi.n	800be30 <__lshift+0xc0>
 800be3c:	e7ea      	b.n	800be14 <__lshift+0xa4>
 800be3e:	bf00      	nop
 800be40:	0800d085 	.word	0x0800d085
 800be44:	0800d122 	.word	0x0800d122

0800be48 <__mcmp>:
 800be48:	690a      	ldr	r2, [r1, #16]
 800be4a:	4603      	mov	r3, r0
 800be4c:	6900      	ldr	r0, [r0, #16]
 800be4e:	1a80      	subs	r0, r0, r2
 800be50:	b530      	push	{r4, r5, lr}
 800be52:	d10e      	bne.n	800be72 <__mcmp+0x2a>
 800be54:	3314      	adds	r3, #20
 800be56:	3114      	adds	r1, #20
 800be58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be68:	4295      	cmp	r5, r2
 800be6a:	d003      	beq.n	800be74 <__mcmp+0x2c>
 800be6c:	d205      	bcs.n	800be7a <__mcmp+0x32>
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be72:	bd30      	pop	{r4, r5, pc}
 800be74:	42a3      	cmp	r3, r4
 800be76:	d3f3      	bcc.n	800be60 <__mcmp+0x18>
 800be78:	e7fb      	b.n	800be72 <__mcmp+0x2a>
 800be7a:	2001      	movs	r0, #1
 800be7c:	e7f9      	b.n	800be72 <__mcmp+0x2a>
	...

0800be80 <__mdiff>:
 800be80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4689      	mov	r9, r1
 800be86:	4606      	mov	r6, r0
 800be88:	4611      	mov	r1, r2
 800be8a:	4648      	mov	r0, r9
 800be8c:	4614      	mov	r4, r2
 800be8e:	f7ff ffdb 	bl	800be48 <__mcmp>
 800be92:	1e05      	subs	r5, r0, #0
 800be94:	d112      	bne.n	800bebc <__mdiff+0x3c>
 800be96:	4629      	mov	r1, r5
 800be98:	4630      	mov	r0, r6
 800be9a:	f7ff fd11 	bl	800b8c0 <_Balloc>
 800be9e:	4602      	mov	r2, r0
 800bea0:	b928      	cbnz	r0, 800beae <__mdiff+0x2e>
 800bea2:	4b3f      	ldr	r3, [pc, #252]	@ (800bfa0 <__mdiff+0x120>)
 800bea4:	f240 2137 	movw	r1, #567	@ 0x237
 800bea8:	483e      	ldr	r0, [pc, #248]	@ (800bfa4 <__mdiff+0x124>)
 800beaa:	f000 fbe3 	bl	800c674 <__assert_func>
 800beae:	2301      	movs	r3, #1
 800beb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800beb4:	4610      	mov	r0, r2
 800beb6:	b003      	add	sp, #12
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	bfbc      	itt	lt
 800bebe:	464b      	movlt	r3, r9
 800bec0:	46a1      	movlt	r9, r4
 800bec2:	4630      	mov	r0, r6
 800bec4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bec8:	bfba      	itte	lt
 800beca:	461c      	movlt	r4, r3
 800becc:	2501      	movlt	r5, #1
 800bece:	2500      	movge	r5, #0
 800bed0:	f7ff fcf6 	bl	800b8c0 <_Balloc>
 800bed4:	4602      	mov	r2, r0
 800bed6:	b918      	cbnz	r0, 800bee0 <__mdiff+0x60>
 800bed8:	4b31      	ldr	r3, [pc, #196]	@ (800bfa0 <__mdiff+0x120>)
 800beda:	f240 2145 	movw	r1, #581	@ 0x245
 800bede:	e7e3      	b.n	800bea8 <__mdiff+0x28>
 800bee0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bee4:	6926      	ldr	r6, [r4, #16]
 800bee6:	60c5      	str	r5, [r0, #12]
 800bee8:	f109 0310 	add.w	r3, r9, #16
 800beec:	f109 0514 	add.w	r5, r9, #20
 800bef0:	f104 0e14 	add.w	lr, r4, #20
 800bef4:	f100 0b14 	add.w	fp, r0, #20
 800bef8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800befc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	46d9      	mov	r9, fp
 800bf04:	f04f 0c00 	mov.w	ip, #0
 800bf08:	9b01      	ldr	r3, [sp, #4]
 800bf0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bf0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	fa1f f38a 	uxth.w	r3, sl
 800bf18:	4619      	mov	r1, r3
 800bf1a:	b283      	uxth	r3, r0
 800bf1c:	1acb      	subs	r3, r1, r3
 800bf1e:	0c00      	lsrs	r0, r0, #16
 800bf20:	4463      	add	r3, ip
 800bf22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bf26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf30:	4576      	cmp	r6, lr
 800bf32:	f849 3b04 	str.w	r3, [r9], #4
 800bf36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf3a:	d8e5      	bhi.n	800bf08 <__mdiff+0x88>
 800bf3c:	1b33      	subs	r3, r6, r4
 800bf3e:	3b15      	subs	r3, #21
 800bf40:	f023 0303 	bic.w	r3, r3, #3
 800bf44:	3415      	adds	r4, #21
 800bf46:	3304      	adds	r3, #4
 800bf48:	42a6      	cmp	r6, r4
 800bf4a:	bf38      	it	cc
 800bf4c:	2304      	movcc	r3, #4
 800bf4e:	441d      	add	r5, r3
 800bf50:	445b      	add	r3, fp
 800bf52:	461e      	mov	r6, r3
 800bf54:	462c      	mov	r4, r5
 800bf56:	4544      	cmp	r4, r8
 800bf58:	d30e      	bcc.n	800bf78 <__mdiff+0xf8>
 800bf5a:	f108 0103 	add.w	r1, r8, #3
 800bf5e:	1b49      	subs	r1, r1, r5
 800bf60:	f021 0103 	bic.w	r1, r1, #3
 800bf64:	3d03      	subs	r5, #3
 800bf66:	45a8      	cmp	r8, r5
 800bf68:	bf38      	it	cc
 800bf6a:	2100      	movcc	r1, #0
 800bf6c:	440b      	add	r3, r1
 800bf6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf72:	b191      	cbz	r1, 800bf9a <__mdiff+0x11a>
 800bf74:	6117      	str	r7, [r2, #16]
 800bf76:	e79d      	b.n	800beb4 <__mdiff+0x34>
 800bf78:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf7c:	46e6      	mov	lr, ip
 800bf7e:	0c08      	lsrs	r0, r1, #16
 800bf80:	fa1c fc81 	uxtah	ip, ip, r1
 800bf84:	4471      	add	r1, lr
 800bf86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf8a:	b289      	uxth	r1, r1
 800bf8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf90:	f846 1b04 	str.w	r1, [r6], #4
 800bf94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf98:	e7dd      	b.n	800bf56 <__mdiff+0xd6>
 800bf9a:	3f01      	subs	r7, #1
 800bf9c:	e7e7      	b.n	800bf6e <__mdiff+0xee>
 800bf9e:	bf00      	nop
 800bfa0:	0800d085 	.word	0x0800d085
 800bfa4:	0800d122 	.word	0x0800d122

0800bfa8 <__ulp>:
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	ed8d 0b00 	vstr	d0, [sp]
 800bfae:	9a01      	ldr	r2, [sp, #4]
 800bfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bff0 <__ulp+0x48>)
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	dc08      	bgt.n	800bfce <__ulp+0x26>
 800bfbc:	425b      	negs	r3, r3
 800bfbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bfc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bfc6:	da04      	bge.n	800bfd2 <__ulp+0x2a>
 800bfc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bfcc:	4113      	asrs	r3, r2
 800bfce:	2200      	movs	r2, #0
 800bfd0:	e008      	b.n	800bfe4 <__ulp+0x3c>
 800bfd2:	f1a2 0314 	sub.w	r3, r2, #20
 800bfd6:	2b1e      	cmp	r3, #30
 800bfd8:	bfda      	itte	le
 800bfda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bfde:	40da      	lsrle	r2, r3
 800bfe0:	2201      	movgt	r2, #1
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	ec41 0b10 	vmov	d0, r0, r1
 800bfec:	b002      	add	sp, #8
 800bfee:	4770      	bx	lr
 800bff0:	7ff00000 	.word	0x7ff00000

0800bff4 <__b2d>:
 800bff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff8:	6906      	ldr	r6, [r0, #16]
 800bffa:	f100 0814 	add.w	r8, r0, #20
 800bffe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c002:	1f37      	subs	r7, r6, #4
 800c004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c008:	4610      	mov	r0, r2
 800c00a:	f7ff fd4b 	bl	800baa4 <__hi0bits>
 800c00e:	f1c0 0320 	rsb	r3, r0, #32
 800c012:	280a      	cmp	r0, #10
 800c014:	600b      	str	r3, [r1, #0]
 800c016:	491b      	ldr	r1, [pc, #108]	@ (800c084 <__b2d+0x90>)
 800c018:	dc15      	bgt.n	800c046 <__b2d+0x52>
 800c01a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c01e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c022:	45b8      	cmp	r8, r7
 800c024:	ea43 0501 	orr.w	r5, r3, r1
 800c028:	bf34      	ite	cc
 800c02a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c02e:	2300      	movcs	r3, #0
 800c030:	3015      	adds	r0, #21
 800c032:	fa02 f000 	lsl.w	r0, r2, r0
 800c036:	fa23 f30c 	lsr.w	r3, r3, ip
 800c03a:	4303      	orrs	r3, r0
 800c03c:	461c      	mov	r4, r3
 800c03e:	ec45 4b10 	vmov	d0, r4, r5
 800c042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c046:	45b8      	cmp	r8, r7
 800c048:	bf3a      	itte	cc
 800c04a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c04e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c052:	2300      	movcs	r3, #0
 800c054:	380b      	subs	r0, #11
 800c056:	d012      	beq.n	800c07e <__b2d+0x8a>
 800c058:	f1c0 0120 	rsb	r1, r0, #32
 800c05c:	fa23 f401 	lsr.w	r4, r3, r1
 800c060:	4082      	lsls	r2, r0
 800c062:	4322      	orrs	r2, r4
 800c064:	4547      	cmp	r7, r8
 800c066:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c06a:	bf8c      	ite	hi
 800c06c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c070:	2200      	movls	r2, #0
 800c072:	4083      	lsls	r3, r0
 800c074:	40ca      	lsrs	r2, r1
 800c076:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c07a:	4313      	orrs	r3, r2
 800c07c:	e7de      	b.n	800c03c <__b2d+0x48>
 800c07e:	ea42 0501 	orr.w	r5, r2, r1
 800c082:	e7db      	b.n	800c03c <__b2d+0x48>
 800c084:	3ff00000 	.word	0x3ff00000

0800c088 <__d2b>:
 800c088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c08c:	460f      	mov	r7, r1
 800c08e:	2101      	movs	r1, #1
 800c090:	ec59 8b10 	vmov	r8, r9, d0
 800c094:	4616      	mov	r6, r2
 800c096:	f7ff fc13 	bl	800b8c0 <_Balloc>
 800c09a:	4604      	mov	r4, r0
 800c09c:	b930      	cbnz	r0, 800c0ac <__d2b+0x24>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	4b23      	ldr	r3, [pc, #140]	@ (800c130 <__d2b+0xa8>)
 800c0a2:	4824      	ldr	r0, [pc, #144]	@ (800c134 <__d2b+0xac>)
 800c0a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c0a8:	f000 fae4 	bl	800c674 <__assert_func>
 800c0ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0b4:	b10d      	cbz	r5, 800c0ba <__d2b+0x32>
 800c0b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	f1b8 0300 	subs.w	r3, r8, #0
 800c0c0:	d023      	beq.n	800c10a <__d2b+0x82>
 800c0c2:	4668      	mov	r0, sp
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	f7ff fd0c 	bl	800bae2 <__lo0bits>
 800c0ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0ce:	b1d0      	cbz	r0, 800c106 <__d2b+0x7e>
 800c0d0:	f1c0 0320 	rsb	r3, r0, #32
 800c0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d8:	430b      	orrs	r3, r1
 800c0da:	40c2      	lsrs	r2, r0
 800c0dc:	6163      	str	r3, [r4, #20]
 800c0de:	9201      	str	r2, [sp, #4]
 800c0e0:	9b01      	ldr	r3, [sp, #4]
 800c0e2:	61a3      	str	r3, [r4, #24]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bf0c      	ite	eq
 800c0e8:	2201      	moveq	r2, #1
 800c0ea:	2202      	movne	r2, #2
 800c0ec:	6122      	str	r2, [r4, #16]
 800c0ee:	b1a5      	cbz	r5, 800c11a <__d2b+0x92>
 800c0f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0f4:	4405      	add	r5, r0
 800c0f6:	603d      	str	r5, [r7, #0]
 800c0f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0fc:	6030      	str	r0, [r6, #0]
 800c0fe:	4620      	mov	r0, r4
 800c100:	b003      	add	sp, #12
 800c102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c106:	6161      	str	r1, [r4, #20]
 800c108:	e7ea      	b.n	800c0e0 <__d2b+0x58>
 800c10a:	a801      	add	r0, sp, #4
 800c10c:	f7ff fce9 	bl	800bae2 <__lo0bits>
 800c110:	9b01      	ldr	r3, [sp, #4]
 800c112:	6163      	str	r3, [r4, #20]
 800c114:	3020      	adds	r0, #32
 800c116:	2201      	movs	r2, #1
 800c118:	e7e8      	b.n	800c0ec <__d2b+0x64>
 800c11a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c11e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c122:	6038      	str	r0, [r7, #0]
 800c124:	6918      	ldr	r0, [r3, #16]
 800c126:	f7ff fcbd 	bl	800baa4 <__hi0bits>
 800c12a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c12e:	e7e5      	b.n	800c0fc <__d2b+0x74>
 800c130:	0800d085 	.word	0x0800d085
 800c134:	0800d122 	.word	0x0800d122

0800c138 <__ratio>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	b085      	sub	sp, #20
 800c13e:	e9cd 1000 	strd	r1, r0, [sp]
 800c142:	a902      	add	r1, sp, #8
 800c144:	f7ff ff56 	bl	800bff4 <__b2d>
 800c148:	9800      	ldr	r0, [sp, #0]
 800c14a:	a903      	add	r1, sp, #12
 800c14c:	ec55 4b10 	vmov	r4, r5, d0
 800c150:	f7ff ff50 	bl	800bff4 <__b2d>
 800c154:	9b01      	ldr	r3, [sp, #4]
 800c156:	6919      	ldr	r1, [r3, #16]
 800c158:	9b00      	ldr	r3, [sp, #0]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	1ac9      	subs	r1, r1, r3
 800c15e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c162:	1a9b      	subs	r3, r3, r2
 800c164:	ec5b ab10 	vmov	sl, fp, d0
 800c168:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	bfce      	itee	gt
 800c170:	462a      	movgt	r2, r5
 800c172:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c176:	465a      	movle	r2, fp
 800c178:	462f      	mov	r7, r5
 800c17a:	46d9      	mov	r9, fp
 800c17c:	bfcc      	ite	gt
 800c17e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c182:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c186:	464b      	mov	r3, r9
 800c188:	4652      	mov	r2, sl
 800c18a:	4620      	mov	r0, r4
 800c18c:	4639      	mov	r1, r7
 800c18e:	f7f4 fb85 	bl	800089c <__aeabi_ddiv>
 800c192:	ec41 0b10 	vmov	d0, r0, r1
 800c196:	b005      	add	sp, #20
 800c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c19c <__copybits>:
 800c19c:	3901      	subs	r1, #1
 800c19e:	b570      	push	{r4, r5, r6, lr}
 800c1a0:	1149      	asrs	r1, r1, #5
 800c1a2:	6914      	ldr	r4, [r2, #16]
 800c1a4:	3101      	adds	r1, #1
 800c1a6:	f102 0314 	add.w	r3, r2, #20
 800c1aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1b2:	1f05      	subs	r5, r0, #4
 800c1b4:	42a3      	cmp	r3, r4
 800c1b6:	d30c      	bcc.n	800c1d2 <__copybits+0x36>
 800c1b8:	1aa3      	subs	r3, r4, r2
 800c1ba:	3b11      	subs	r3, #17
 800c1bc:	f023 0303 	bic.w	r3, r3, #3
 800c1c0:	3211      	adds	r2, #17
 800c1c2:	42a2      	cmp	r2, r4
 800c1c4:	bf88      	it	hi
 800c1c6:	2300      	movhi	r3, #0
 800c1c8:	4418      	add	r0, r3
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	4288      	cmp	r0, r1
 800c1ce:	d305      	bcc.n	800c1dc <__copybits+0x40>
 800c1d0:	bd70      	pop	{r4, r5, r6, pc}
 800c1d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1da:	e7eb      	b.n	800c1b4 <__copybits+0x18>
 800c1dc:	f840 3b04 	str.w	r3, [r0], #4
 800c1e0:	e7f4      	b.n	800c1cc <__copybits+0x30>

0800c1e2 <__any_on>:
 800c1e2:	f100 0214 	add.w	r2, r0, #20
 800c1e6:	6900      	ldr	r0, [r0, #16]
 800c1e8:	114b      	asrs	r3, r1, #5
 800c1ea:	4298      	cmp	r0, r3
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	db11      	blt.n	800c214 <__any_on+0x32>
 800c1f0:	dd0a      	ble.n	800c208 <__any_on+0x26>
 800c1f2:	f011 011f 	ands.w	r1, r1, #31
 800c1f6:	d007      	beq.n	800c208 <__any_on+0x26>
 800c1f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1fc:	fa24 f001 	lsr.w	r0, r4, r1
 800c200:	fa00 f101 	lsl.w	r1, r0, r1
 800c204:	428c      	cmp	r4, r1
 800c206:	d10b      	bne.n	800c220 <__any_on+0x3e>
 800c208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d803      	bhi.n	800c218 <__any_on+0x36>
 800c210:	2000      	movs	r0, #0
 800c212:	bd10      	pop	{r4, pc}
 800c214:	4603      	mov	r3, r0
 800c216:	e7f7      	b.n	800c208 <__any_on+0x26>
 800c218:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c21c:	2900      	cmp	r1, #0
 800c21e:	d0f5      	beq.n	800c20c <__any_on+0x2a>
 800c220:	2001      	movs	r0, #1
 800c222:	e7f6      	b.n	800c212 <__any_on+0x30>

0800c224 <__submore>:
 800c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c228:	460c      	mov	r4, r1
 800c22a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c22c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c230:	4299      	cmp	r1, r3
 800c232:	d11d      	bne.n	800c270 <__submore+0x4c>
 800c234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c238:	f7ff f870 	bl	800b31c <_malloc_r>
 800c23c:	b918      	cbnz	r0, 800c246 <__submore+0x22>
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c24a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c24c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c250:	6360      	str	r0, [r4, #52]	@ 0x34
 800c252:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c256:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c25a:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c25e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c262:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c266:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c26a:	6020      	str	r0, [r4, #0]
 800c26c:	2000      	movs	r0, #0
 800c26e:	e7e8      	b.n	800c242 <__submore+0x1e>
 800c270:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c272:	0077      	lsls	r7, r6, #1
 800c274:	463a      	mov	r2, r7
 800c276:	f000 f80f 	bl	800c298 <_realloc_r>
 800c27a:	4605      	mov	r5, r0
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d0de      	beq.n	800c23e <__submore+0x1a>
 800c280:	eb00 0806 	add.w	r8, r0, r6
 800c284:	4601      	mov	r1, r0
 800c286:	4632      	mov	r2, r6
 800c288:	4640      	mov	r0, r8
 800c28a:	f7fd f9ca 	bl	8009622 <memcpy>
 800c28e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c292:	f8c4 8000 	str.w	r8, [r4]
 800c296:	e7e9      	b.n	800c26c <__submore+0x48>

0800c298 <_realloc_r>:
 800c298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29c:	4680      	mov	r8, r0
 800c29e:	4615      	mov	r5, r2
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	b921      	cbnz	r1, 800c2ae <_realloc_r+0x16>
 800c2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	f7ff b837 	b.w	800b31c <_malloc_r>
 800c2ae:	b92a      	cbnz	r2, 800c2bc <_realloc_r+0x24>
 800c2b0:	f7fe f822 	bl	800a2f8 <_free_r>
 800c2b4:	2400      	movs	r4, #0
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2bc:	f000 fa0c 	bl	800c6d8 <_malloc_usable_size_r>
 800c2c0:	4285      	cmp	r5, r0
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	d802      	bhi.n	800c2cc <_realloc_r+0x34>
 800c2c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c2ca:	d8f4      	bhi.n	800c2b6 <_realloc_r+0x1e>
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	f7ff f824 	bl	800b31c <_malloc_r>
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d0ec      	beq.n	800c2b4 <_realloc_r+0x1c>
 800c2da:	42b5      	cmp	r5, r6
 800c2dc:	462a      	mov	r2, r5
 800c2de:	4621      	mov	r1, r4
 800c2e0:	bf28      	it	cs
 800c2e2:	4632      	movcs	r2, r6
 800c2e4:	f7fd f99d 	bl	8009622 <memcpy>
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4640      	mov	r0, r8
 800c2ec:	f7fe f804 	bl	800a2f8 <_free_r>
 800c2f0:	463c      	mov	r4, r7
 800c2f2:	e7e0      	b.n	800c2b6 <_realloc_r+0x1e>

0800c2f4 <_strtoul_l.constprop.0>:
 800c2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2f8:	4e34      	ldr	r6, [pc, #208]	@ (800c3cc <_strtoul_l.constprop.0+0xd8>)
 800c2fa:	4686      	mov	lr, r0
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	4628      	mov	r0, r5
 800c300:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c304:	5d37      	ldrb	r7, [r6, r4]
 800c306:	f017 0708 	ands.w	r7, r7, #8
 800c30a:	d1f8      	bne.n	800c2fe <_strtoul_l.constprop.0+0xa>
 800c30c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c30e:	d12f      	bne.n	800c370 <_strtoul_l.constprop.0+0x7c>
 800c310:	782c      	ldrb	r4, [r5, #0]
 800c312:	2701      	movs	r7, #1
 800c314:	1c85      	adds	r5, r0, #2
 800c316:	f033 0010 	bics.w	r0, r3, #16
 800c31a:	d109      	bne.n	800c330 <_strtoul_l.constprop.0+0x3c>
 800c31c:	2c30      	cmp	r4, #48	@ 0x30
 800c31e:	d12c      	bne.n	800c37a <_strtoul_l.constprop.0+0x86>
 800c320:	7828      	ldrb	r0, [r5, #0]
 800c322:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c326:	2858      	cmp	r0, #88	@ 0x58
 800c328:	d127      	bne.n	800c37a <_strtoul_l.constprop.0+0x86>
 800c32a:	786c      	ldrb	r4, [r5, #1]
 800c32c:	2310      	movs	r3, #16
 800c32e:	3502      	adds	r5, #2
 800c330:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800c334:	2600      	movs	r6, #0
 800c336:	fbb8 f8f3 	udiv	r8, r8, r3
 800c33a:	fb03 f908 	mul.w	r9, r3, r8
 800c33e:	ea6f 0909 	mvn.w	r9, r9
 800c342:	4630      	mov	r0, r6
 800c344:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c348:	f1bc 0f09 	cmp.w	ip, #9
 800c34c:	d81c      	bhi.n	800c388 <_strtoul_l.constprop.0+0x94>
 800c34e:	4664      	mov	r4, ip
 800c350:	42a3      	cmp	r3, r4
 800c352:	dd2a      	ble.n	800c3aa <_strtoul_l.constprop.0+0xb6>
 800c354:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800c358:	d007      	beq.n	800c36a <_strtoul_l.constprop.0+0x76>
 800c35a:	4580      	cmp	r8, r0
 800c35c:	d322      	bcc.n	800c3a4 <_strtoul_l.constprop.0+0xb0>
 800c35e:	d101      	bne.n	800c364 <_strtoul_l.constprop.0+0x70>
 800c360:	45a1      	cmp	r9, r4
 800c362:	db1f      	blt.n	800c3a4 <_strtoul_l.constprop.0+0xb0>
 800c364:	fb00 4003 	mla	r0, r0, r3, r4
 800c368:	2601      	movs	r6, #1
 800c36a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c36e:	e7e9      	b.n	800c344 <_strtoul_l.constprop.0+0x50>
 800c370:	2c2b      	cmp	r4, #43	@ 0x2b
 800c372:	bf04      	itt	eq
 800c374:	782c      	ldrbeq	r4, [r5, #0]
 800c376:	1c85      	addeq	r5, r0, #2
 800c378:	e7cd      	b.n	800c316 <_strtoul_l.constprop.0+0x22>
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1d8      	bne.n	800c330 <_strtoul_l.constprop.0+0x3c>
 800c37e:	2c30      	cmp	r4, #48	@ 0x30
 800c380:	bf0c      	ite	eq
 800c382:	2308      	moveq	r3, #8
 800c384:	230a      	movne	r3, #10
 800c386:	e7d3      	b.n	800c330 <_strtoul_l.constprop.0+0x3c>
 800c388:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c38c:	f1bc 0f19 	cmp.w	ip, #25
 800c390:	d801      	bhi.n	800c396 <_strtoul_l.constprop.0+0xa2>
 800c392:	3c37      	subs	r4, #55	@ 0x37
 800c394:	e7dc      	b.n	800c350 <_strtoul_l.constprop.0+0x5c>
 800c396:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c39a:	f1bc 0f19 	cmp.w	ip, #25
 800c39e:	d804      	bhi.n	800c3aa <_strtoul_l.constprop.0+0xb6>
 800c3a0:	3c57      	subs	r4, #87	@ 0x57
 800c3a2:	e7d5      	b.n	800c350 <_strtoul_l.constprop.0+0x5c>
 800c3a4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800c3a8:	e7df      	b.n	800c36a <_strtoul_l.constprop.0+0x76>
 800c3aa:	1c73      	adds	r3, r6, #1
 800c3ac:	d106      	bne.n	800c3bc <_strtoul_l.constprop.0+0xc8>
 800c3ae:	2322      	movs	r3, #34	@ 0x22
 800c3b0:	f8ce 3000 	str.w	r3, [lr]
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	b932      	cbnz	r2, 800c3c6 <_strtoul_l.constprop.0+0xd2>
 800c3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3bc:	b107      	cbz	r7, 800c3c0 <_strtoul_l.constprop.0+0xcc>
 800c3be:	4240      	negs	r0, r0
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	d0f9      	beq.n	800c3b8 <_strtoul_l.constprop.0+0xc4>
 800c3c4:	b106      	cbz	r6, 800c3c8 <_strtoul_l.constprop.0+0xd4>
 800c3c6:	1e69      	subs	r1, r5, #1
 800c3c8:	6011      	str	r1, [r2, #0]
 800c3ca:	e7f5      	b.n	800c3b8 <_strtoul_l.constprop.0+0xc4>
 800c3cc:	0800cf09 	.word	0x0800cf09

0800c3d0 <_strtoul_r>:
 800c3d0:	f7ff bf90 	b.w	800c2f4 <_strtoul_l.constprop.0>

0800c3d4 <__swbuf_r>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	460e      	mov	r6, r1
 800c3d8:	4614      	mov	r4, r2
 800c3da:	4605      	mov	r5, r0
 800c3dc:	b118      	cbz	r0, 800c3e6 <__swbuf_r+0x12>
 800c3de:	6a03      	ldr	r3, [r0, #32]
 800c3e0:	b90b      	cbnz	r3, 800c3e6 <__swbuf_r+0x12>
 800c3e2:	f7fc f961 	bl	80086a8 <__sinit>
 800c3e6:	69a3      	ldr	r3, [r4, #24]
 800c3e8:	60a3      	str	r3, [r4, #8]
 800c3ea:	89a3      	ldrh	r3, [r4, #12]
 800c3ec:	071a      	lsls	r2, r3, #28
 800c3ee:	d501      	bpl.n	800c3f4 <__swbuf_r+0x20>
 800c3f0:	6923      	ldr	r3, [r4, #16]
 800c3f2:	b943      	cbnz	r3, 800c406 <__swbuf_r+0x32>
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f000 f82a 	bl	800c450 <__swsetup_r>
 800c3fc:	b118      	cbz	r0, 800c406 <__swbuf_r+0x32>
 800c3fe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c402:	4638      	mov	r0, r7
 800c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	6922      	ldr	r2, [r4, #16]
 800c40a:	1a98      	subs	r0, r3, r2
 800c40c:	6963      	ldr	r3, [r4, #20]
 800c40e:	b2f6      	uxtb	r6, r6
 800c410:	4283      	cmp	r3, r0
 800c412:	4637      	mov	r7, r6
 800c414:	dc05      	bgt.n	800c422 <__swbuf_r+0x4e>
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f7ff fa1d 	bl	800b858 <_fflush_r>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d1ed      	bne.n	800c3fe <__swbuf_r+0x2a>
 800c422:	68a3      	ldr	r3, [r4, #8]
 800c424:	3b01      	subs	r3, #1
 800c426:	60a3      	str	r3, [r4, #8]
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	6022      	str	r2, [r4, #0]
 800c42e:	701e      	strb	r6, [r3, #0]
 800c430:	6962      	ldr	r2, [r4, #20]
 800c432:	1c43      	adds	r3, r0, #1
 800c434:	429a      	cmp	r2, r3
 800c436:	d004      	beq.n	800c442 <__swbuf_r+0x6e>
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	07db      	lsls	r3, r3, #31
 800c43c:	d5e1      	bpl.n	800c402 <__swbuf_r+0x2e>
 800c43e:	2e0a      	cmp	r6, #10
 800c440:	d1df      	bne.n	800c402 <__swbuf_r+0x2e>
 800c442:	4621      	mov	r1, r4
 800c444:	4628      	mov	r0, r5
 800c446:	f7ff fa07 	bl	800b858 <_fflush_r>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d0d9      	beq.n	800c402 <__swbuf_r+0x2e>
 800c44e:	e7d6      	b.n	800c3fe <__swbuf_r+0x2a>

0800c450 <__swsetup_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4b29      	ldr	r3, [pc, #164]	@ (800c4f8 <__swsetup_r+0xa8>)
 800c454:	4605      	mov	r5, r0
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	460c      	mov	r4, r1
 800c45a:	b118      	cbz	r0, 800c464 <__swsetup_r+0x14>
 800c45c:	6a03      	ldr	r3, [r0, #32]
 800c45e:	b90b      	cbnz	r3, 800c464 <__swsetup_r+0x14>
 800c460:	f7fc f922 	bl	80086a8 <__sinit>
 800c464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c468:	0719      	lsls	r1, r3, #28
 800c46a:	d422      	bmi.n	800c4b2 <__swsetup_r+0x62>
 800c46c:	06da      	lsls	r2, r3, #27
 800c46e:	d407      	bmi.n	800c480 <__swsetup_r+0x30>
 800c470:	2209      	movs	r2, #9
 800c472:	602a      	str	r2, [r5, #0]
 800c474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c47e:	e033      	b.n	800c4e8 <__swsetup_r+0x98>
 800c480:	0758      	lsls	r0, r3, #29
 800c482:	d512      	bpl.n	800c4aa <__swsetup_r+0x5a>
 800c484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c486:	b141      	cbz	r1, 800c49a <__swsetup_r+0x4a>
 800c488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d002      	beq.n	800c496 <__swsetup_r+0x46>
 800c490:	4628      	mov	r0, r5
 800c492:	f7fd ff31 	bl	800a2f8 <_free_r>
 800c496:	2300      	movs	r3, #0
 800c498:	6363      	str	r3, [r4, #52]	@ 0x34
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f043 0308 	orr.w	r3, r3, #8
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	b94b      	cbnz	r3, 800c4ca <__swsetup_r+0x7a>
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4c0:	d003      	beq.n	800c4ca <__swsetup_r+0x7a>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f000 f84c 	bl	800c562 <__smakebuf_r>
 800c4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ce:	f013 0201 	ands.w	r2, r3, #1
 800c4d2:	d00a      	beq.n	800c4ea <__swsetup_r+0x9a>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	60a2      	str	r2, [r4, #8]
 800c4d8:	6962      	ldr	r2, [r4, #20]
 800c4da:	4252      	negs	r2, r2
 800c4dc:	61a2      	str	r2, [r4, #24]
 800c4de:	6922      	ldr	r2, [r4, #16]
 800c4e0:	b942      	cbnz	r2, 800c4f4 <__swsetup_r+0xa4>
 800c4e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4e6:	d1c5      	bne.n	800c474 <__swsetup_r+0x24>
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	0799      	lsls	r1, r3, #30
 800c4ec:	bf58      	it	pl
 800c4ee:	6962      	ldrpl	r2, [r4, #20]
 800c4f0:	60a2      	str	r2, [r4, #8]
 800c4f2:	e7f4      	b.n	800c4de <__swsetup_r+0x8e>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e7f7      	b.n	800c4e8 <__swsetup_r+0x98>
 800c4f8:	2000019c 	.word	0x2000019c

0800c4fc <__ascii_wctomb>:
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	b141      	cbz	r1, 800c514 <__ascii_wctomb+0x18>
 800c502:	2aff      	cmp	r2, #255	@ 0xff
 800c504:	d904      	bls.n	800c510 <__ascii_wctomb+0x14>
 800c506:	228a      	movs	r2, #138	@ 0x8a
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c50e:	4770      	bx	lr
 800c510:	700a      	strb	r2, [r1, #0]
 800c512:	2001      	movs	r0, #1
 800c514:	4770      	bx	lr

0800c516 <__swhatbuf_r>:
 800c516:	b570      	push	{r4, r5, r6, lr}
 800c518:	460c      	mov	r4, r1
 800c51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c51e:	2900      	cmp	r1, #0
 800c520:	b096      	sub	sp, #88	@ 0x58
 800c522:	4615      	mov	r5, r2
 800c524:	461e      	mov	r6, r3
 800c526:	da0d      	bge.n	800c544 <__swhatbuf_r+0x2e>
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c52e:	f04f 0100 	mov.w	r1, #0
 800c532:	bf14      	ite	ne
 800c534:	2340      	movne	r3, #64	@ 0x40
 800c536:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c53a:	2000      	movs	r0, #0
 800c53c:	6031      	str	r1, [r6, #0]
 800c53e:	602b      	str	r3, [r5, #0]
 800c540:	b016      	add	sp, #88	@ 0x58
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	466a      	mov	r2, sp
 800c546:	f000 f863 	bl	800c610 <_fstat_r>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	dbec      	blt.n	800c528 <__swhatbuf_r+0x12>
 800c54e:	9901      	ldr	r1, [sp, #4]
 800c550:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c554:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c558:	4259      	negs	r1, r3
 800c55a:	4159      	adcs	r1, r3
 800c55c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c560:	e7eb      	b.n	800c53a <__swhatbuf_r+0x24>

0800c562 <__smakebuf_r>:
 800c562:	898b      	ldrh	r3, [r1, #12]
 800c564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c566:	079d      	lsls	r5, r3, #30
 800c568:	4606      	mov	r6, r0
 800c56a:	460c      	mov	r4, r1
 800c56c:	d507      	bpl.n	800c57e <__smakebuf_r+0x1c>
 800c56e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	6123      	str	r3, [r4, #16]
 800c576:	2301      	movs	r3, #1
 800c578:	6163      	str	r3, [r4, #20]
 800c57a:	b003      	add	sp, #12
 800c57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c57e:	ab01      	add	r3, sp, #4
 800c580:	466a      	mov	r2, sp
 800c582:	f7ff ffc8 	bl	800c516 <__swhatbuf_r>
 800c586:	9f00      	ldr	r7, [sp, #0]
 800c588:	4605      	mov	r5, r0
 800c58a:	4639      	mov	r1, r7
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7fe fec5 	bl	800b31c <_malloc_r>
 800c592:	b948      	cbnz	r0, 800c5a8 <__smakebuf_r+0x46>
 800c594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d4ee      	bmi.n	800c57a <__smakebuf_r+0x18>
 800c59c:	f023 0303 	bic.w	r3, r3, #3
 800c5a0:	f043 0302 	orr.w	r3, r3, #2
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	e7e2      	b.n	800c56e <__smakebuf_r+0xc>
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	6020      	str	r0, [r4, #0]
 800c5ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5b0:	81a3      	strh	r3, [r4, #12]
 800c5b2:	9b01      	ldr	r3, [sp, #4]
 800c5b4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5b8:	b15b      	cbz	r3, 800c5d2 <__smakebuf_r+0x70>
 800c5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f000 f838 	bl	800c634 <_isatty_r>
 800c5c4:	b128      	cbz	r0, 800c5d2 <__smakebuf_r+0x70>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	f023 0303 	bic.w	r3, r3, #3
 800c5cc:	f043 0301 	orr.w	r3, r3, #1
 800c5d0:	81a3      	strh	r3, [r4, #12]
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	431d      	orrs	r5, r3
 800c5d6:	81a5      	strh	r5, [r4, #12]
 800c5d8:	e7cf      	b.n	800c57a <__smakebuf_r+0x18>

0800c5da <memmove>:
 800c5da:	4288      	cmp	r0, r1
 800c5dc:	b510      	push	{r4, lr}
 800c5de:	eb01 0402 	add.w	r4, r1, r2
 800c5e2:	d902      	bls.n	800c5ea <memmove+0x10>
 800c5e4:	4284      	cmp	r4, r0
 800c5e6:	4623      	mov	r3, r4
 800c5e8:	d807      	bhi.n	800c5fa <memmove+0x20>
 800c5ea:	1e43      	subs	r3, r0, #1
 800c5ec:	42a1      	cmp	r1, r4
 800c5ee:	d008      	beq.n	800c602 <memmove+0x28>
 800c5f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5f8:	e7f8      	b.n	800c5ec <memmove+0x12>
 800c5fa:	4402      	add	r2, r0
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	428a      	cmp	r2, r1
 800c600:	d100      	bne.n	800c604 <memmove+0x2a>
 800c602:	bd10      	pop	{r4, pc}
 800c604:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c608:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c60c:	e7f7      	b.n	800c5fe <memmove+0x24>
	...

0800c610 <_fstat_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d07      	ldr	r5, [pc, #28]	@ (800c630 <_fstat_r+0x20>)
 800c614:	2300      	movs	r3, #0
 800c616:	4604      	mov	r4, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	4611      	mov	r1, r2
 800c61c:	602b      	str	r3, [r5, #0]
 800c61e:	f7f6 ffda 	bl	80035d6 <_fstat>
 800c622:	1c43      	adds	r3, r0, #1
 800c624:	d102      	bne.n	800c62c <_fstat_r+0x1c>
 800c626:	682b      	ldr	r3, [r5, #0]
 800c628:	b103      	cbz	r3, 800c62c <_fstat_r+0x1c>
 800c62a:	6023      	str	r3, [r4, #0]
 800c62c:	bd38      	pop	{r3, r4, r5, pc}
 800c62e:	bf00      	nop
 800c630:	20000880 	.word	0x20000880

0800c634 <_isatty_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4d06      	ldr	r5, [pc, #24]	@ (800c650 <_isatty_r+0x1c>)
 800c638:	2300      	movs	r3, #0
 800c63a:	4604      	mov	r4, r0
 800c63c:	4608      	mov	r0, r1
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	f7f6 ffd9 	bl	80035f6 <_isatty>
 800c644:	1c43      	adds	r3, r0, #1
 800c646:	d102      	bne.n	800c64e <_isatty_r+0x1a>
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	b103      	cbz	r3, 800c64e <_isatty_r+0x1a>
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
 800c650:	20000880 	.word	0x20000880

0800c654 <_sbrk_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d06      	ldr	r5, [pc, #24]	@ (800c670 <_sbrk_r+0x1c>)
 800c658:	2300      	movs	r3, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7f6 ffe2 	bl	8003628 <_sbrk>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_sbrk_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_sbrk_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	20000880 	.word	0x20000880

0800c674 <__assert_func>:
 800c674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c676:	4614      	mov	r4, r2
 800c678:	461a      	mov	r2, r3
 800c67a:	4b09      	ldr	r3, [pc, #36]	@ (800c6a0 <__assert_func+0x2c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4605      	mov	r5, r0
 800c680:	68d8      	ldr	r0, [r3, #12]
 800c682:	b954      	cbnz	r4, 800c69a <__assert_func+0x26>
 800c684:	4b07      	ldr	r3, [pc, #28]	@ (800c6a4 <__assert_func+0x30>)
 800c686:	461c      	mov	r4, r3
 800c688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c68c:	9100      	str	r1, [sp, #0]
 800c68e:	462b      	mov	r3, r5
 800c690:	4905      	ldr	r1, [pc, #20]	@ (800c6a8 <__assert_func+0x34>)
 800c692:	f000 f829 	bl	800c6e8 <fiprintf>
 800c696:	f000 f839 	bl	800c70c <abort>
 800c69a:	4b04      	ldr	r3, [pc, #16]	@ (800c6ac <__assert_func+0x38>)
 800c69c:	e7f4      	b.n	800c688 <__assert_func+0x14>
 800c69e:	bf00      	nop
 800c6a0:	2000019c 	.word	0x2000019c
 800c6a4:	0800d2b3 	.word	0x0800d2b3
 800c6a8:	0800d285 	.word	0x0800d285
 800c6ac:	0800d278 	.word	0x0800d278

0800c6b0 <_calloc_r>:
 800c6b0:	b570      	push	{r4, r5, r6, lr}
 800c6b2:	fba1 5402 	umull	r5, r4, r1, r2
 800c6b6:	b93c      	cbnz	r4, 800c6c8 <_calloc_r+0x18>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7fe fe2f 	bl	800b31c <_malloc_r>
 800c6be:	4606      	mov	r6, r0
 800c6c0:	b928      	cbnz	r0, 800c6ce <_calloc_r+0x1e>
 800c6c2:	2600      	movs	r6, #0
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	6002      	str	r2, [r0, #0]
 800c6cc:	e7f9      	b.n	800c6c2 <_calloc_r+0x12>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f7fc ff27 	bl	8009524 <memset>
 800c6d6:	e7f5      	b.n	800c6c4 <_calloc_r+0x14>

0800c6d8 <_malloc_usable_size_r>:
 800c6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6dc:	1f18      	subs	r0, r3, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfbc      	itt	lt
 800c6e2:	580b      	ldrlt	r3, [r1, r0]
 800c6e4:	18c0      	addlt	r0, r0, r3
 800c6e6:	4770      	bx	lr

0800c6e8 <fiprintf>:
 800c6e8:	b40e      	push	{r1, r2, r3}
 800c6ea:	b503      	push	{r0, r1, lr}
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	4805      	ldr	r0, [pc, #20]	@ (800c708 <fiprintf+0x20>)
 800c6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f6:	6800      	ldr	r0, [r0, #0]
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	f7fe fccd 	bl	800b098 <_vfiprintf_r>
 800c6fe:	b002      	add	sp, #8
 800c700:	f85d eb04 	ldr.w	lr, [sp], #4
 800c704:	b003      	add	sp, #12
 800c706:	4770      	bx	lr
 800c708:	2000019c 	.word	0x2000019c

0800c70c <abort>:
 800c70c:	b508      	push	{r3, lr}
 800c70e:	2006      	movs	r0, #6
 800c710:	f000 f82c 	bl	800c76c <raise>
 800c714:	2001      	movs	r0, #1
 800c716:	f7f6 ff0e 	bl	8003536 <_exit>

0800c71a <_raise_r>:
 800c71a:	291f      	cmp	r1, #31
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4605      	mov	r5, r0
 800c720:	460c      	mov	r4, r1
 800c722:	d904      	bls.n	800c72e <_raise_r+0x14>
 800c724:	2316      	movs	r3, #22
 800c726:	6003      	str	r3, [r0, #0]
 800c728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c72c:	bd38      	pop	{r3, r4, r5, pc}
 800c72e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c730:	b112      	cbz	r2, 800c738 <_raise_r+0x1e>
 800c732:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c736:	b94b      	cbnz	r3, 800c74c <_raise_r+0x32>
 800c738:	4628      	mov	r0, r5
 800c73a:	f000 f831 	bl	800c7a0 <_getpid_r>
 800c73e:	4622      	mov	r2, r4
 800c740:	4601      	mov	r1, r0
 800c742:	4628      	mov	r0, r5
 800c744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c748:	f000 b818 	b.w	800c77c <_kill_r>
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d00a      	beq.n	800c766 <_raise_r+0x4c>
 800c750:	1c59      	adds	r1, r3, #1
 800c752:	d103      	bne.n	800c75c <_raise_r+0x42>
 800c754:	2316      	movs	r3, #22
 800c756:	6003      	str	r3, [r0, #0]
 800c758:	2001      	movs	r0, #1
 800c75a:	e7e7      	b.n	800c72c <_raise_r+0x12>
 800c75c:	2100      	movs	r1, #0
 800c75e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c762:	4620      	mov	r0, r4
 800c764:	4798      	blx	r3
 800c766:	2000      	movs	r0, #0
 800c768:	e7e0      	b.n	800c72c <_raise_r+0x12>
	...

0800c76c <raise>:
 800c76c:	4b02      	ldr	r3, [pc, #8]	@ (800c778 <raise+0xc>)
 800c76e:	4601      	mov	r1, r0
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	f7ff bfd2 	b.w	800c71a <_raise_r>
 800c776:	bf00      	nop
 800c778:	2000019c 	.word	0x2000019c

0800c77c <_kill_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4d07      	ldr	r5, [pc, #28]	@ (800c79c <_kill_r+0x20>)
 800c780:	2300      	movs	r3, #0
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	4611      	mov	r1, r2
 800c788:	602b      	str	r3, [r5, #0]
 800c78a:	f7f6 fec4 	bl	8003516 <_kill>
 800c78e:	1c43      	adds	r3, r0, #1
 800c790:	d102      	bne.n	800c798 <_kill_r+0x1c>
 800c792:	682b      	ldr	r3, [r5, #0]
 800c794:	b103      	cbz	r3, 800c798 <_kill_r+0x1c>
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	bd38      	pop	{r3, r4, r5, pc}
 800c79a:	bf00      	nop
 800c79c:	20000880 	.word	0x20000880

0800c7a0 <_getpid_r>:
 800c7a0:	f7f6 beb1 	b.w	8003506 <_getpid>

0800c7a4 <atan2f>:
 800c7a4:	f000 b83e 	b.w	800c824 <__ieee754_atan2f>

0800c7a8 <fmodf>:
 800c7a8:	b508      	push	{r3, lr}
 800c7aa:	ed2d 8b02 	vpush	{d8}
 800c7ae:	eef0 8a40 	vmov.f32	s17, s0
 800c7b2:	eeb0 8a60 	vmov.f32	s16, s1
 800c7b6:	f000 f8d9 	bl	800c96c <__ieee754_fmodf>
 800c7ba:	eef4 8a48 	vcmp.f32	s17, s16
 800c7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c2:	d60c      	bvs.n	800c7de <fmodf+0x36>
 800c7c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c7e4 <fmodf+0x3c>
 800c7c8:	eeb4 8a68 	vcmp.f32	s16, s17
 800c7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d0:	d105      	bne.n	800c7de <fmodf+0x36>
 800c7d2:	f7fc fef9 	bl	80095c8 <__errno>
 800c7d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c7da:	2321      	movs	r3, #33	@ 0x21
 800c7dc:	6003      	str	r3, [r0, #0]
 800c7de:	ecbd 8b02 	vpop	{d8}
 800c7e2:	bd08      	pop	{r3, pc}
 800c7e4:	00000000 	.word	0x00000000

0800c7e8 <sqrtf>:
 800c7e8:	b508      	push	{r3, lr}
 800c7ea:	ed2d 8b02 	vpush	{d8}
 800c7ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c7f2:	f000 f8b7 	bl	800c964 <__ieee754_sqrtf>
 800c7f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800c7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fe:	d60c      	bvs.n	800c81a <sqrtf+0x32>
 800c800:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c820 <sqrtf+0x38>
 800c804:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c80c:	d505      	bpl.n	800c81a <sqrtf+0x32>
 800c80e:	f7fc fedb 	bl	80095c8 <__errno>
 800c812:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c816:	2321      	movs	r3, #33	@ 0x21
 800c818:	6003      	str	r3, [r0, #0]
 800c81a:	ecbd 8b02 	vpop	{d8}
 800c81e:	bd08      	pop	{r3, pc}
 800c820:	00000000 	.word	0x00000000

0800c824 <__ieee754_atan2f>:
 800c824:	ee10 2a90 	vmov	r2, s1
 800c828:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c82c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c830:	b510      	push	{r4, lr}
 800c832:	eef0 7a40 	vmov.f32	s15, s0
 800c836:	d806      	bhi.n	800c846 <__ieee754_atan2f+0x22>
 800c838:	ee10 0a10 	vmov	r0, s0
 800c83c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c840:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c844:	d904      	bls.n	800c850 <__ieee754_atan2f+0x2c>
 800c846:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c84a:	eeb0 0a67 	vmov.f32	s0, s15
 800c84e:	bd10      	pop	{r4, pc}
 800c850:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c854:	d103      	bne.n	800c85e <__ieee754_atan2f+0x3a>
 800c856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c85a:	f000 b95f 	b.w	800cb1c <atanf>
 800c85e:	1794      	asrs	r4, r2, #30
 800c860:	f004 0402 	and.w	r4, r4, #2
 800c864:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c868:	b943      	cbnz	r3, 800c87c <__ieee754_atan2f+0x58>
 800c86a:	2c02      	cmp	r4, #2
 800c86c:	d05e      	beq.n	800c92c <__ieee754_atan2f+0x108>
 800c86e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c940 <__ieee754_atan2f+0x11c>
 800c872:	2c03      	cmp	r4, #3
 800c874:	bf08      	it	eq
 800c876:	eef0 7a47 	vmoveq.f32	s15, s14
 800c87a:	e7e6      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c87c:	b941      	cbnz	r1, 800c890 <__ieee754_atan2f+0x6c>
 800c87e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c944 <__ieee754_atan2f+0x120>
 800c882:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c948 <__ieee754_atan2f+0x124>
 800c886:	2800      	cmp	r0, #0
 800c888:	bfb8      	it	lt
 800c88a:	eef0 7a47 	vmovlt.f32	s15, s14
 800c88e:	e7dc      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c890:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c894:	d110      	bne.n	800c8b8 <__ieee754_atan2f+0x94>
 800c896:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c89a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c89e:	d107      	bne.n	800c8b0 <__ieee754_atan2f+0x8c>
 800c8a0:	2c02      	cmp	r4, #2
 800c8a2:	d846      	bhi.n	800c932 <__ieee754_atan2f+0x10e>
 800c8a4:	4b29      	ldr	r3, [pc, #164]	@ (800c94c <__ieee754_atan2f+0x128>)
 800c8a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c8aa:	edd3 7a00 	vldr	s15, [r3]
 800c8ae:	e7cc      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c8b0:	2c02      	cmp	r4, #2
 800c8b2:	d841      	bhi.n	800c938 <__ieee754_atan2f+0x114>
 800c8b4:	4b26      	ldr	r3, [pc, #152]	@ (800c950 <__ieee754_atan2f+0x12c>)
 800c8b6:	e7f6      	b.n	800c8a6 <__ieee754_atan2f+0x82>
 800c8b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8bc:	d0df      	beq.n	800c87e <__ieee754_atan2f+0x5a>
 800c8be:	1a5b      	subs	r3, r3, r1
 800c8c0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c8c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c8c8:	da1a      	bge.n	800c900 <__ieee754_atan2f+0xdc>
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	da01      	bge.n	800c8d2 <__ieee754_atan2f+0xae>
 800c8ce:	313c      	adds	r1, #60	@ 0x3c
 800c8d0:	db19      	blt.n	800c906 <__ieee754_atan2f+0xe2>
 800c8d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c8d6:	f000 f9f5 	bl	800ccc4 <fabsf>
 800c8da:	f000 f91f 	bl	800cb1c <atanf>
 800c8de:	eef0 7a40 	vmov.f32	s15, s0
 800c8e2:	2c01      	cmp	r4, #1
 800c8e4:	d012      	beq.n	800c90c <__ieee754_atan2f+0xe8>
 800c8e6:	2c02      	cmp	r4, #2
 800c8e8:	d017      	beq.n	800c91a <__ieee754_atan2f+0xf6>
 800c8ea:	2c00      	cmp	r4, #0
 800c8ec:	d0ad      	beq.n	800c84a <__ieee754_atan2f+0x26>
 800c8ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c954 <__ieee754_atan2f+0x130>
 800c8f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c958 <__ieee754_atan2f+0x134>
 800c8fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8fe:	e7a4      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c900:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c944 <__ieee754_atan2f+0x120>
 800c904:	e7ed      	b.n	800c8e2 <__ieee754_atan2f+0xbe>
 800c906:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c95c <__ieee754_atan2f+0x138>
 800c90a:	e7ea      	b.n	800c8e2 <__ieee754_atan2f+0xbe>
 800c90c:	ee17 3a90 	vmov	r3, s15
 800c910:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c914:	ee07 3a90 	vmov	s15, r3
 800c918:	e797      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c91a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c954 <__ieee754_atan2f+0x130>
 800c91e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c922:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c958 <__ieee754_atan2f+0x134>
 800c926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c92a:	e78e      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c92c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c958 <__ieee754_atan2f+0x134>
 800c930:	e78b      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c932:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c960 <__ieee754_atan2f+0x13c>
 800c936:	e788      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c938:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c95c <__ieee754_atan2f+0x138>
 800c93c:	e785      	b.n	800c84a <__ieee754_atan2f+0x26>
 800c93e:	bf00      	nop
 800c940:	c0490fdb 	.word	0xc0490fdb
 800c944:	3fc90fdb 	.word	0x3fc90fdb
 800c948:	bfc90fdb 	.word	0xbfc90fdb
 800c94c:	0800d2c0 	.word	0x0800d2c0
 800c950:	0800d2b4 	.word	0x0800d2b4
 800c954:	33bbbd2e 	.word	0x33bbbd2e
 800c958:	40490fdb 	.word	0x40490fdb
 800c95c:	00000000 	.word	0x00000000
 800c960:	3f490fdb 	.word	0x3f490fdb

0800c964 <__ieee754_sqrtf>:
 800c964:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c968:	4770      	bx	lr
	...

0800c96c <__ieee754_fmodf>:
 800c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96e:	ee10 5a90 	vmov	r5, s1
 800c972:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800c976:	1e43      	subs	r3, r0, #1
 800c978:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c97c:	d206      	bcs.n	800c98c <__ieee754_fmodf+0x20>
 800c97e:	ee10 3a10 	vmov	r3, s0
 800c982:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800c986:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c98a:	d304      	bcc.n	800c996 <__ieee754_fmodf+0x2a>
 800c98c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c990:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c996:	4286      	cmp	r6, r0
 800c998:	dbfc      	blt.n	800c994 <__ieee754_fmodf+0x28>
 800c99a:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800c99e:	d105      	bne.n	800c9ac <__ieee754_fmodf+0x40>
 800c9a0:	4b32      	ldr	r3, [pc, #200]	@ (800ca6c <__ieee754_fmodf+0x100>)
 800c9a2:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800c9a6:	ed93 0a00 	vldr	s0, [r3]
 800c9aa:	e7f3      	b.n	800c994 <__ieee754_fmodf+0x28>
 800c9ac:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c9b0:	d140      	bne.n	800ca34 <__ieee754_fmodf+0xc8>
 800c9b2:	0232      	lsls	r2, r6, #8
 800c9b4:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800c9b8:	2a00      	cmp	r2, #0
 800c9ba:	dc38      	bgt.n	800ca2e <__ieee754_fmodf+0xc2>
 800c9bc:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800c9c0:	d13e      	bne.n	800ca40 <__ieee754_fmodf+0xd4>
 800c9c2:	0207      	lsls	r7, r0, #8
 800c9c4:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800c9c8:	2f00      	cmp	r7, #0
 800c9ca:	da36      	bge.n	800ca3a <__ieee754_fmodf+0xce>
 800c9cc:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800c9d0:	bfb9      	ittee	lt
 800c9d2:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800c9d6:	1a5b      	sublt	r3, r3, r1
 800c9d8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800c9dc:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800c9e0:	bfb8      	it	lt
 800c9e2:	fa06 f303 	lsllt.w	r3, r6, r3
 800c9e6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c9ea:	bfb5      	itete	lt
 800c9ec:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800c9f0:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800c9f4:	1aad      	sublt	r5, r5, r2
 800c9f6:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800c9fa:	bfb8      	it	lt
 800c9fc:	40a8      	lsllt	r0, r5
 800c9fe:	1a89      	subs	r1, r1, r2
 800ca00:	1a1d      	subs	r5, r3, r0
 800ca02:	bb01      	cbnz	r1, 800ca46 <__ieee754_fmodf+0xda>
 800ca04:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800ca08:	bf38      	it	cc
 800ca0a:	462b      	movcc	r3, r5
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0c7      	beq.n	800c9a0 <__ieee754_fmodf+0x34>
 800ca10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca14:	db1f      	blt.n	800ca56 <__ieee754_fmodf+0xea>
 800ca16:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800ca1a:	db1f      	blt.n	800ca5c <__ieee754_fmodf+0xf0>
 800ca1c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800ca20:	327f      	adds	r2, #127	@ 0x7f
 800ca22:	4323      	orrs	r3, r4
 800ca24:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ca28:	ee00 3a10 	vmov	s0, r3
 800ca2c:	e7b2      	b.n	800c994 <__ieee754_fmodf+0x28>
 800ca2e:	3901      	subs	r1, #1
 800ca30:	0052      	lsls	r2, r2, #1
 800ca32:	e7c1      	b.n	800c9b8 <__ieee754_fmodf+0x4c>
 800ca34:	15f1      	asrs	r1, r6, #23
 800ca36:	397f      	subs	r1, #127	@ 0x7f
 800ca38:	e7c0      	b.n	800c9bc <__ieee754_fmodf+0x50>
 800ca3a:	3a01      	subs	r2, #1
 800ca3c:	007f      	lsls	r7, r7, #1
 800ca3e:	e7c3      	b.n	800c9c8 <__ieee754_fmodf+0x5c>
 800ca40:	15c2      	asrs	r2, r0, #23
 800ca42:	3a7f      	subs	r2, #127	@ 0x7f
 800ca44:	e7c2      	b.n	800c9cc <__ieee754_fmodf+0x60>
 800ca46:	2d00      	cmp	r5, #0
 800ca48:	da02      	bge.n	800ca50 <__ieee754_fmodf+0xe4>
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	3901      	subs	r1, #1
 800ca4e:	e7d7      	b.n	800ca00 <__ieee754_fmodf+0x94>
 800ca50:	d0a6      	beq.n	800c9a0 <__ieee754_fmodf+0x34>
 800ca52:	006b      	lsls	r3, r5, #1
 800ca54:	e7fa      	b.n	800ca4c <__ieee754_fmodf+0xe0>
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	3a01      	subs	r2, #1
 800ca5a:	e7d9      	b.n	800ca10 <__ieee754_fmodf+0xa4>
 800ca5c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800ca60:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ca64:	3282      	adds	r2, #130	@ 0x82
 800ca66:	4113      	asrs	r3, r2
 800ca68:	4323      	orrs	r3, r4
 800ca6a:	e7dd      	b.n	800ca28 <__ieee754_fmodf+0xbc>
 800ca6c:	0800d2cc 	.word	0x0800d2cc

0800ca70 <fmaxf>:
 800ca70:	b508      	push	{r3, lr}
 800ca72:	ed2d 8b02 	vpush	{d8}
 800ca76:	eeb0 8a40 	vmov.f32	s16, s0
 800ca7a:	eef0 8a60 	vmov.f32	s17, s1
 800ca7e:	f000 f831 	bl	800cae4 <__fpclassifyf>
 800ca82:	b930      	cbnz	r0, 800ca92 <fmaxf+0x22>
 800ca84:	eeb0 8a68 	vmov.f32	s16, s17
 800ca88:	eeb0 0a48 	vmov.f32	s0, s16
 800ca8c:	ecbd 8b02 	vpop	{d8}
 800ca90:	bd08      	pop	{r3, pc}
 800ca92:	eeb0 0a68 	vmov.f32	s0, s17
 800ca96:	f000 f825 	bl	800cae4 <__fpclassifyf>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d0f4      	beq.n	800ca88 <fmaxf+0x18>
 800ca9e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800caa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa6:	dded      	ble.n	800ca84 <fmaxf+0x14>
 800caa8:	e7ee      	b.n	800ca88 <fmaxf+0x18>

0800caaa <fminf>:
 800caaa:	b508      	push	{r3, lr}
 800caac:	ed2d 8b02 	vpush	{d8}
 800cab0:	eeb0 8a40 	vmov.f32	s16, s0
 800cab4:	eef0 8a60 	vmov.f32	s17, s1
 800cab8:	f000 f814 	bl	800cae4 <__fpclassifyf>
 800cabc:	b930      	cbnz	r0, 800cacc <fminf+0x22>
 800cabe:	eeb0 8a68 	vmov.f32	s16, s17
 800cac2:	eeb0 0a48 	vmov.f32	s0, s16
 800cac6:	ecbd 8b02 	vpop	{d8}
 800caca:	bd08      	pop	{r3, pc}
 800cacc:	eeb0 0a68 	vmov.f32	s0, s17
 800cad0:	f000 f808 	bl	800cae4 <__fpclassifyf>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d0f4      	beq.n	800cac2 <fminf+0x18>
 800cad8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae0:	d5ed      	bpl.n	800cabe <fminf+0x14>
 800cae2:	e7ee      	b.n	800cac2 <fminf+0x18>

0800cae4 <__fpclassifyf>:
 800cae4:	ee10 3a10 	vmov	r3, s0
 800cae8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800caec:	d00d      	beq.n	800cb0a <__fpclassifyf+0x26>
 800caee:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800caf2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800caf6:	d30a      	bcc.n	800cb0e <__fpclassifyf+0x2a>
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <__fpclassifyf+0x34>)
 800cafa:	1e42      	subs	r2, r0, #1
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d908      	bls.n	800cb12 <__fpclassifyf+0x2e>
 800cb00:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800cb04:	4258      	negs	r0, r3
 800cb06:	4158      	adcs	r0, r3
 800cb08:	4770      	bx	lr
 800cb0a:	2002      	movs	r0, #2
 800cb0c:	4770      	bx	lr
 800cb0e:	2004      	movs	r0, #4
 800cb10:	4770      	bx	lr
 800cb12:	2003      	movs	r0, #3
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	007ffffe 	.word	0x007ffffe

0800cb1c <atanf>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	ee10 5a10 	vmov	r5, s0
 800cb22:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cb26:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800cb2a:	eef0 7a40 	vmov.f32	s15, s0
 800cb2e:	d310      	bcc.n	800cb52 <atanf+0x36>
 800cb30:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cb34:	d904      	bls.n	800cb40 <atanf+0x24>
 800cb36:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cb3a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800cc78 <atanf+0x15c>
 800cb44:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800cc7c <atanf+0x160>
 800cb48:	2d00      	cmp	r5, #0
 800cb4a:	bfc8      	it	gt
 800cb4c:	eef0 7a47 	vmovgt.f32	s15, s14
 800cb50:	e7f3      	b.n	800cb3a <atanf+0x1e>
 800cb52:	4b4b      	ldr	r3, [pc, #300]	@ (800cc80 <atanf+0x164>)
 800cb54:	429c      	cmp	r4, r3
 800cb56:	d810      	bhi.n	800cb7a <atanf+0x5e>
 800cb58:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cb5c:	d20a      	bcs.n	800cb74 <atanf+0x58>
 800cb5e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800cc84 <atanf+0x168>
 800cb62:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cb66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb72:	dce2      	bgt.n	800cb3a <atanf+0x1e>
 800cb74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb78:	e013      	b.n	800cba2 <atanf+0x86>
 800cb7a:	f000 f8a3 	bl	800ccc4 <fabsf>
 800cb7e:	4b42      	ldr	r3, [pc, #264]	@ (800cc88 <atanf+0x16c>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	d84f      	bhi.n	800cc24 <atanf+0x108>
 800cb84:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cb88:	429c      	cmp	r4, r3
 800cb8a:	d841      	bhi.n	800cc10 <atanf+0xf4>
 800cb8c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cb90:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cb94:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cb98:	2300      	movs	r3, #0
 800cb9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cba8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800cc8c <atanf+0x170>
 800cbac:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800cc90 <atanf+0x174>
 800cbb0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800cc94 <atanf+0x178>
 800cbb4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cbb8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cbbc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800cc98 <atanf+0x17c>
 800cbc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cbc4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800cc9c <atanf+0x180>
 800cbc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cbcc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800cca0 <atanf+0x184>
 800cbd0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cbd4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800cca4 <atanf+0x188>
 800cbd8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cbdc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800cca8 <atanf+0x18c>
 800cbe0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cbe4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ccac <atanf+0x190>
 800cbe8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cbec:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ccb0 <atanf+0x194>
 800cbf0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cbf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ccb4 <atanf+0x198>
 800cbf8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cbfc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc00:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cc04:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc08:	d121      	bne.n	800cc4e <atanf+0x132>
 800cc0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc0e:	e794      	b.n	800cb3a <atanf+0x1e>
 800cc10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc14:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cc18:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc22:	e7be      	b.n	800cba2 <atanf+0x86>
 800cc24:	4b24      	ldr	r3, [pc, #144]	@ (800ccb8 <atanf+0x19c>)
 800cc26:	429c      	cmp	r4, r3
 800cc28:	d80b      	bhi.n	800cc42 <atanf+0x126>
 800cc2a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cc2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc32:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc36:	2302      	movs	r3, #2
 800cc38:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc40:	e7af      	b.n	800cba2 <atanf+0x86>
 800cc42:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cc46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e7a9      	b.n	800cba2 <atanf+0x86>
 800cc4e:	4a1b      	ldr	r2, [pc, #108]	@ (800ccbc <atanf+0x1a0>)
 800cc50:	491b      	ldr	r1, [pc, #108]	@ (800ccc0 <atanf+0x1a4>)
 800cc52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cc5a:	edd3 6a00 	vldr	s13, [r3]
 800cc5e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc68:	edd2 7a00 	vldr	s15, [r2]
 800cc6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc70:	bfb8      	it	lt
 800cc72:	eef1 7a67 	vneglt.f32	s15, s15
 800cc76:	e760      	b.n	800cb3a <atanf+0x1e>
 800cc78:	bfc90fdb 	.word	0xbfc90fdb
 800cc7c:	3fc90fdb 	.word	0x3fc90fdb
 800cc80:	3edfffff 	.word	0x3edfffff
 800cc84:	7149f2ca 	.word	0x7149f2ca
 800cc88:	3f97ffff 	.word	0x3f97ffff
 800cc8c:	3c8569d7 	.word	0x3c8569d7
 800cc90:	3d4bda59 	.word	0x3d4bda59
 800cc94:	bd6ef16b 	.word	0xbd6ef16b
 800cc98:	3d886b35 	.word	0x3d886b35
 800cc9c:	3dba2e6e 	.word	0x3dba2e6e
 800cca0:	3e124925 	.word	0x3e124925
 800cca4:	3eaaaaab 	.word	0x3eaaaaab
 800cca8:	bd15a221 	.word	0xbd15a221
 800ccac:	bd9d8795 	.word	0xbd9d8795
 800ccb0:	bde38e38 	.word	0xbde38e38
 800ccb4:	be4ccccd 	.word	0xbe4ccccd
 800ccb8:	401bffff 	.word	0x401bffff
 800ccbc:	0800d2e4 	.word	0x0800d2e4
 800ccc0:	0800d2d4 	.word	0x0800d2d4

0800ccc4 <fabsf>:
 800ccc4:	ee10 3a10 	vmov	r3, s0
 800ccc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cccc:	ee00 3a10 	vmov	s0, r3
 800ccd0:	4770      	bx	lr
	...

0800ccd4 <_init>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	bf00      	nop
 800ccd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccda:	bc08      	pop	{r3}
 800ccdc:	469e      	mov	lr, r3
 800ccde:	4770      	bx	lr

0800cce0 <_fini>:
 800cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce2:	bf00      	nop
 800cce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce6:	bc08      	pop	{r3}
 800cce8:	469e      	mov	lr, r3
 800ccea:	4770      	bx	lr
