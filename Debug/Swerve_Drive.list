
Swerve_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007264  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007694  08007694  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007694  08007694  00008694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800769c  0800769c  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800769c  0800769c  0000869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080076a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000080  08007724  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08007724  0000961c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158ef  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d38  00000000  00000000  0001e99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  000216d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e58  00000000  00000000  00022950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028181  00000000  00000000  000237a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c4b  00000000  00000000  0004b929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff2fb  00000000  00000000  00061574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016086f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005854  00000000  00000000  001608b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00166108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800742c 	.word	0x0800742c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800742c 	.word	0x0800742c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <JOYSTICK_Init>:
static char _data_buffer[256];
static uint16_t _buf_index = 0;
static JoystickData _current_data = {0};
static bool _new_data_available = false;

void JOYSTICK_Init(UART_HandleTypeDef *huart) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    _huart = huart;
 80005c8:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <JOYSTICK_Init+0x28>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
    memset(_data_buffer, 0, sizeof(_data_buffer));
 80005ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005d2:	2100      	movs	r1, #0
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <JOYSTICK_Init+0x2c>)
 80005d6:	f005 fc53 	bl	8005e80 <memset>
    _buf_index = 0;
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <JOYSTICK_Init+0x30>)
 80005dc:	2200      	movs	r2, #0
 80005de:	801a      	strh	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	200000a0 	.word	0x200000a0
 80005f0:	200001a0 	.word	0x200001a0

080005f4 <JOYSTICK_SetTimeout>:

void JOYSTICK_SetTimeout(uint32_t timeout) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    _timeout = timeout;
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <JOYSTICK_SetTimeout+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <JOYSTICK_Process>:

void JOYSTICK_Process(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	@ 0x40
 8000618:	af08      	add	r7, sp, #32
    char c;

    // Read until buffer full or newline received
    while (_buf_index < sizeof(_data_buffer) - 1) {
 800061a:	e050      	b.n	80006be <JOYSTICK_Process+0xaa>
        if (HAL_UART_Receive(_huart, (uint8_t *)&c, 1, _timeout) == HAL_OK) {
 800061c:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <JOYSTICK_Process+0xc0>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <JOYSTICK_Process+0xc4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f107 011f 	add.w	r1, r7, #31
 8000628:	2201      	movs	r2, #1
 800062a:	f004 fbff 	bl	8004e2c <HAL_UART_Receive>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d149      	bne.n	80006c8 <JOYSTICK_Process+0xb4>
            if (c == '\n') {
 8000634:	7ffb      	ldrb	r3, [r7, #31]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d137      	bne.n	80006aa <JOYSTICK_Process+0x96>
                // Process complete message
                _data_buffer[_buf_index] = '\0';
 800063a:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <JOYSTICK_Process+0xc8>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <JOYSTICK_Process+0xcc>)
 8000642:	2100      	movs	r1, #0
 8000644:	5499      	strb	r1, [r3, r2]

                // Temporary variables for parsing
                uint16_t dpad, buttons, misc;
                int32_t ax, ay, rax, ray, brake, throttle;

                sscanf(_data_buffer,
 8000646:	f107 011a 	add.w	r1, r7, #26
 800064a:	f107 021c 	add.w	r2, r7, #28
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	9306      	str	r3, [sp, #24]
 8000654:	463b      	mov	r3, r7
 8000656:	9305      	str	r3, [sp, #20]
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	9304      	str	r3, [sp, #16]
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	9303      	str	r3, [sp, #12]
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	460b      	mov	r3, r1
 8000676:	491b      	ldr	r1, [pc, #108]	@ (80006e4 <JOYSTICK_Process+0xd0>)
 8000678:	4819      	ldr	r0, [pc, #100]	@ (80006e0 <JOYSTICK_Process+0xcc>)
 800067a:	f005 fabd 	bl	8005bf8 <siscanf>
                       "dpad: 0x%04hx, buttons: 0x%04hx, axis L: %ld, %ld, axis R: %ld, %ld, brake: %ld, throttle: %ld, misc: 0x%04hx",
                       &dpad, &buttons, &ax, &ay, &rax, &ray, &brake, &throttle, &misc);

                // Update data structure
                _current_data.axisX = ax;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4a19      	ldr	r2, [pc, #100]	@ (80006e8 <JOYSTICK_Process+0xd4>)
 8000682:	6013      	str	r3, [r2, #0]
                _current_data.axisY = ay;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <JOYSTICK_Process+0xd4>)
 8000688:	6053      	str	r3, [r2, #4]
                _current_data.axisRX = rax;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4a16      	ldr	r2, [pc, #88]	@ (80006e8 <JOYSTICK_Process+0xd4>)
 800068e:	6093      	str	r3, [r2, #8]
                _new_data_available = true;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <JOYSTICK_Process+0xd8>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]

                // Reset buffer
                memset(_data_buffer, 0, sizeof(_data_buffer));
 8000696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069a:	2100      	movs	r1, #0
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <JOYSTICK_Process+0xcc>)
 800069e:	f005 fbef 	bl	8005e80 <memset>
                _buf_index = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <JOYSTICK_Process+0xc8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	801a      	strh	r2, [r3, #0]
                break;
 80006a8:	e00f      	b.n	80006ca <JOYSTICK_Process+0xb6>
            }
            _data_buffer[_buf_index++] = c;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <JOYSTICK_Process+0xc8>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	b291      	uxth	r1, r2
 80006b2:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <JOYSTICK_Process+0xc8>)
 80006b4:	8011      	strh	r1, [r2, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	7ff9      	ldrb	r1, [r7, #31]
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <JOYSTICK_Process+0xcc>)
 80006bc:	5499      	strb	r1, [r3, r2]
    while (_buf_index < sizeof(_data_buffer) - 1) {
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <JOYSTICK_Process+0xc8>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80006c4:	d9aa      	bls.n	800061c <JOYSTICK_Process+0x8>
        } else {
            // Timeout occurred
            break;
        }
    }
}
 80006c6:	e000      	b.n	80006ca <JOYSTICK_Process+0xb6>
            break;
 80006c8:	bf00      	nop
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000009c 	.word	0x2000009c
 80006d8:	20000000 	.word	0x20000000
 80006dc:	200001a0 	.word	0x200001a0
 80006e0:	200000a0 	.word	0x200000a0
 80006e4:	08007444 	.word	0x08007444
 80006e8:	200001a4 	.word	0x200001a4
 80006ec:	200001b4 	.word	0x200001b4

080006f0 <JOYSTICK_NewDataAvailable>:

bool JOYSTICK_NewDataAvailable(void) {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
    return _new_data_available;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <JOYSTICK_NewDataAvailable+0x14>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	200001b4 	.word	0x200001b4

08000708 <JOYSTICK_GetData>:

JoystickData JOYSTICK_GetData(void) {
 8000708:	b490      	push	{r4, r7}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    _new_data_available = false;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <JOYSTICK_GetData+0x28>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
    return _current_data;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <JOYSTICK_GetData+0x2c>)
 800071a:	461c      	mov	r4, r3
 800071c:	4613      	mov	r3, r2
 800071e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bc90      	pop	{r4, r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200001b4 	.word	0x200001b4
 8000734:	200001a4 	.word	0x200001a4

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0d0      	sub	sp, #320	@ 0x140
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  SwerveModule moduleRF = {	// Configuration moduleRF
 800073e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000742:	2248      	movs	r2, #72	@ 0x48
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f005 fb9a 	bl	8005e80 <memset>
 800074c:	4bca      	ldr	r3, [pc, #808]	@ (8000a78 <main+0x340>)
 800074e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000756:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
 800075a:	4bc8      	ldr	r3, [pc, #800]	@ (8000a7c <main+0x344>)
 800075c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000760:	4bc7      	ldr	r3, [pc, #796]	@ (8000a80 <main+0x348>)
 8000762:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000766:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800076a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800076e:	4bc5      	ldr	r3, [pc, #788]	@ (8000a84 <main+0x34c>)
 8000770:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000774:	4bc4      	ldr	r3, [pc, #784]	@ (8000a88 <main+0x350>)
 8000776:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800077a:	4bc4      	ldr	r3, [pc, #784]	@ (8000a8c <main+0x354>)
 800077c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000780:	4bc1      	ldr	r3, [pc, #772]	@ (8000a88 <main+0x350>)
 8000782:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000786:	23c7      	movs	r3, #199	@ 0xc7
 8000788:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 800078c:	4bc0      	ldr	r3, [pc, #768]	@ (8000a90 <main+0x358>)
 800078e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000792:	f240 434c 	movw	r3, #1100	@ 0x44c
 8000796:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
 800079a:	f240 736c 	movw	r3, #1900	@ 0x76c
 800079e:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
 80007a2:	f240 434b 	movw	r3, #1099	@ 0x44b
 80007a6:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
 80007aa:	4bba      	ldr	r3, [pc, #744]	@ (8000a94 <main+0x35c>)
 80007ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	      .arming_pulse = 1099
	  },
	  .counts_per_degree = 2000.0f / 360.0f  // Adjust based on encoder
  };

  SwerveModule moduleLF = {	// Configuration moduleRF
 80007b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007b4:	2248      	movs	r2, #72	@ 0x48
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 fb61 	bl	8005e80 <memset>
 80007be:	4bae      	ldr	r3, [pc, #696]	@ (8000a78 <main+0x340>)
 80007c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 80007cc:	4bab      	ldr	r3, [pc, #684]	@ (8000a7c <main+0x344>)
 80007ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80007d2:	2304      	movs	r3, #4
 80007d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80007d8:	4baf      	ldr	r3, [pc, #700]	@ (8000a98 <main+0x360>)
 80007da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80007de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80007e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80007e6:	4ba7      	ldr	r3, [pc, #668]	@ (8000a84 <main+0x34c>)
 80007e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80007ec:	4ba6      	ldr	r3, [pc, #664]	@ (8000a88 <main+0x350>)
 80007ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80007f2:	4ba6      	ldr	r3, [pc, #664]	@ (8000a8c <main+0x354>)
 80007f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80007f8:	4ba3      	ldr	r3, [pc, #652]	@ (8000a88 <main+0x350>)
 80007fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80007fe:	23c7      	movs	r3, #199	@ 0xc7
 8000800:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
 8000804:	4ba2      	ldr	r3, [pc, #648]	@ (8000a90 <main+0x358>)
 8000806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800080a:	2304      	movs	r3, #4
 800080c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000810:	f240 434c 	movw	r3, #1100	@ 0x44c
 8000814:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 8000818:	f240 736c 	movw	r3, #1900	@ 0x76c
 800081c:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 8000820:	f240 434b 	movw	r3, #1099	@ 0x44b
 8000824:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 8000828:	4b9a      	ldr	r3, [pc, #616]	@ (8000a94 <main+0x35c>)
 800082a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	      .arming_pulse = 1099
	  },
	  .counts_per_degree = 2000.0f / 360.0f  // Adjust based on encoder
  };

  SwerveModule moduleRB = {	// Configuration moduleRF
 800082e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000832:	2248      	movs	r2, #72	@ 0x48
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f005 fb22 	bl	8005e80 <memset>
 800083c:	4b8e      	ldr	r3, [pc, #568]	@ (8000a78 <main+0x340>)
 800083e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000840:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000844:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000848:	4b8c      	ldr	r3, [pc, #560]	@ (8000a7c <main+0x344>)
 800084a:	667b      	str	r3, [r7, #100]	@ 0x64
 800084c:	2308      	movs	r3, #8
 800084e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000850:	4b92      	ldr	r3, [pc, #584]	@ (8000a9c <main+0x364>)
 8000852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000854:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000858:	673b      	str	r3, [r7, #112]	@ 0x70
 800085a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a84 <main+0x34c>)
 800085c:	677b      	str	r3, [r7, #116]	@ 0x74
 800085e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a88 <main+0x350>)
 8000860:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000862:	4b8a      	ldr	r3, [pc, #552]	@ (8000a8c <main+0x354>)
 8000864:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000866:	4b88      	ldr	r3, [pc, #544]	@ (8000a88 <main+0x350>)
 8000868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800086c:	23c7      	movs	r3, #199	@ 0xc7
 800086e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8000872:	4b87      	ldr	r3, [pc, #540]	@ (8000a90 <main+0x358>)
 8000874:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000878:	2308      	movs	r3, #8
 800087a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800087e:	f240 434c 	movw	r3, #1100	@ 0x44c
 8000882:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 8000886:	f240 736c 	movw	r3, #1900	@ 0x76c
 800088a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 800088e:	f240 434b 	movw	r3, #1099	@ 0x44b
 8000892:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8000896:	4b7f      	ldr	r3, [pc, #508]	@ (8000a94 <main+0x35c>)
 8000898:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	      .arming_pulse = 1099
	  },
	  .counts_per_degree = 2000.0f / 360.0f  // Adjust based on encoder
  };

  SwerveModule moduleLB = {	// Configuration moduleRF
 800089c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008a4:	4618      	mov	r0, r3
 80008a6:	2348      	movs	r3, #72	@ 0x48
 80008a8:	461a      	mov	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f005 fae8 	bl	8005e80 <memset>
 80008b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008b8:	4a6f      	ldr	r2, [pc, #444]	@ (8000a78 <main+0x340>)
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008c8:	809a      	strh	r2, [r3, #4]
 80008ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008d2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a7c <main+0x344>)
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008de:	220c      	movs	r2, #12
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008ea:	4a6d      	ldr	r2, [pc, #436]	@ (8000aa0 <main+0x368>)
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80008f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80008f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000900:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000904:	4a5f      	ldr	r2, [pc, #380]	@ (8000a84 <main+0x34c>)
 8000906:	619a      	str	r2, [r3, #24]
 8000908:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800090c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000910:	4a5d      	ldr	r2, [pc, #372]	@ (8000a88 <main+0x350>)
 8000912:	61da      	str	r2, [r3, #28]
 8000914:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000918:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800091c:	4a5b      	ldr	r2, [pc, #364]	@ (8000a8c <main+0x354>)
 800091e:	621a      	str	r2, [r3, #32]
 8000920:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000928:	4a57      	ldr	r2, [pc, #348]	@ (8000a88 <main+0x350>)
 800092a:	625a      	str	r2, [r3, #36]	@ 0x24
 800092c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000930:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000934:	22c7      	movs	r2, #199	@ 0xc7
 8000936:	861a      	strh	r2, [r3, #48]	@ 0x30
 8000938:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800093c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000940:	4a53      	ldr	r2, [pc, #332]	@ (8000a90 <main+0x358>)
 8000942:	635a      	str	r2, [r3, #52]	@ 0x34
 8000944:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000948:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800094c:	220c      	movs	r2, #12
 800094e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000950:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000954:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000958:	f240 424c 	movw	r2, #1100	@ 0x44c
 800095c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800095e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000962:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000966:	f240 726c 	movw	r2, #1900	@ 0x76c
 800096a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800096c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000970:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000974:	f240 424b 	movw	r2, #1099	@ 0x44b
 8000978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800097c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000980:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000984:	4a43      	ldr	r2, [pc, #268]	@ (8000a94 <main+0x35c>)
 8000986:	645a      	str	r2, [r3, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f001 fa9a 	bl	8001ec0 <HAL_Init>

  /* USER CODE BEGIN Init */
  JOYSTICK_Init(&huart3);  // Pass your UART handle
 800098c:	4845      	ldr	r0, [pc, #276]	@ (8000aa4 <main+0x36c>)
 800098e:	f7ff fe17 	bl	80005c0 <JOYSTICK_Init>
  JOYSTICK_SetTimeout(50); // Optional: Set custom timeout
 8000992:	2032      	movs	r0, #50	@ 0x32
 8000994:	f7ff fe2e 	bl	80005f4 <JOYSTICK_SetTimeout>
	// Initialization
  SM_Init(&moduleRF);
 8000998:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fef9 	bl	8001794 <SM_Init>
  SM_Init(&moduleLF);
 80009a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fef4 	bl	8001794 <SM_Init>
  SM_Init(&moduleRB);
 80009ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 feef 	bl	8001794 <SM_Init>
  SM_Init(&moduleLB);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 feea 	bl	8001794 <SM_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f8cc 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 fc2c 	bl	8001220 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009c8:	f000 f914 	bl	8000bf4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009cc:	f000 f9e6 	bl	8000d9c <MX_TIM2_Init>
  MX_TIM4_Init();
 80009d0:	f000 fad2 	bl	8000f78 <MX_TIM4_Init>
  MX_TIM3_Init();
 80009d4:	f000 fa7a 	bl	8000ecc <MX_TIM3_Init>
  MX_TIM5_Init();
 80009d8:	f000 fb24 	bl	8001024 <MX_TIM5_Init>
  MX_TIM8_Init();
 80009dc:	f000 fb78 	bl	80010d0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 fbd0 	bl	8001184 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SM_CalibrateESC(&moduleRF.driving);
 80009e4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80009e8:	3334      	adds	r3, #52	@ 0x34
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 ff40 	bl	8001870 <SM_CalibrateESC>
  SM_CalibrateESC(&moduleLF.driving);
 80009f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009f4:	3334      	adds	r3, #52	@ 0x34
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 ff3a 	bl	8001870 <SM_CalibrateESC>
  SM_CalibrateESC(&moduleRB.driving);
 80009fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a00:	3334      	adds	r3, #52	@ 0x34
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 ff34 	bl	8001870 <SM_CalibrateESC>
  SM_CalibrateESC(&moduleLB.driving);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	3334      	adds	r3, #52	@ 0x34
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 ff2e 	bl	8001870 <SM_CalibrateESC>
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 f89f 	bl	8001b58 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f001 f8fd 	bl	8001c1c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <main+0x370>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <main+0x370>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <main+0x370>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <main+0x370>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <main+0x370>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a42:	4919      	ldr	r1, [pc, #100]	@ (8000aa8 <main+0x370>)
 8000a44:	2000      	movs	r0, #0
 8000a46:	f001 f969 	bl	8001d1c <BSP_COM_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <main+0x31c>
  {
    Error_Handler();
 8000a50:	f000 fc52 	bl	80012f8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world ! ready.\n\r");
 8000a54:	4815      	ldr	r0, [pc, #84]	@ (8000aac <main+0x374>)
 8000a56:	f005 fa01 	bl	8005e5c <iprintf>

  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f001 f8b2 	bl	8001bc4 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <main+0x378>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d125      	bne.n	8000ab4 <main+0x37c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <main+0x378>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f001 f8be 	bl	8001bf0 <BSP_LED_Toggle>
 8000a74:	e01e      	b.n	8000ab4 <main+0x37c>
 8000a76:	bf00      	nop
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	200001cc 	.word	0x200001cc
 8000a80:	20000264 	.word	0x20000264
 8000a84:	3dcccccd 	.word	0x3dcccccd
 8000a88:	3c23d70a 	.word	0x3c23d70a
 8000a8c:	43fa0000 	.word	0x43fa0000
 8000a90:	20000218 	.word	0x20000218
 8000a94:	40b1c71c 	.word	0x40b1c71c
 8000a98:	200002b0 	.word	0x200002b0
 8000a9c:	200002fc 	.word	0x200002fc
 8000aa0:	20000348 	.word	0x20000348
 8000aa4:	20000394 	.word	0x20000394
 8000aa8:	200001b8 	.word	0x200001b8
 8000aac:	080074b4 	.word	0x080074b4
 8000ab0:	200001c8 	.word	0x200001c8
      /* ..... Perform your action ..... */
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    JOYSTICK_Process();
 8000ab4:	f7ff fdae 	bl	8000614 <JOYSTICK_Process>

    if (JOYSTICK_NewDataAvailable()) {
 8000ab8:	f7ff fe1a 	bl	80006f0 <JOYSTICK_NewDataAvailable>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0ce      	beq.n	8000a60 <main+0x328>
    	JoystickData data = JOYSTICK_GetData();
 8000ac2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ac6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe1c 	bl	8000708 <JOYSTICK_GetData>

#ifdef DEBUG_PRINT
        printf("X: %ld, Y: %ld, RX: %ld\n", data.axisX, data.axisY, data.axisRX);
 8000ad0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ad4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000ad8:	6819      	ldr	r1, [r3, #0]
 8000ada:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ade:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ae8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4818      	ldr	r0, [pc, #96]	@ (8000b50 <main+0x418>)
 8000af0:	f005 f9b4 	bl	8005e5c <iprintf>
#endif

        float xSpeed = (float)data.axisX / 512.0f;
 8000af4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000af8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b06:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000b54 <main+0x41c>
 8000b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0e:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
        float ySpeed = (float)data.axisY / -512.0f;
 8000b12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000b16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	ee07 3a90 	vmov	s15, r3
 8000b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b24:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000b58 <main+0x420>
 8000b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b2c:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
        float rot = (float)data.axisRX / 512.0f;
 8000b30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000b34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	ee07 3a90 	vmov	s15, r3
 8000b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b42:	eddf 6a04 	vldr	s13, [pc, #16]	@ 8000b54 <main+0x41c>
 8000b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b4a:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    if (BspButtonState == BUTTON_PRESSED)
 8000b4e:	e787      	b.n	8000a60 <main+0x328>
 8000b50:	080074d8 	.word	0x080074d8
 8000b54:	44000000 	.word	0x44000000
 8000b58:	c4000000 	.word	0xc4000000

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2238      	movs	r2, #56	@ 0x38
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f005 f988 	bl	8005e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f001 fd54 	bl	800262c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8e:	2340      	movs	r3, #64	@ 0x40
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b9e:	2355      	movs	r3, #85	@ 0x55
 8000ba0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fdee 	bl	8002794 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bbe:	f000 fb9b 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 f8ec 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000be6:	f000 fb87 	bl	80012f8 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	@ 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	@ 0x70
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2234      	movs	r2, #52	@ 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 f926 	bl	8005e80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c34:	4b57      	ldr	r3, [pc, #348]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c36:	4a58      	ldr	r2, [pc, #352]	@ (8000d98 <MX_TIM1_Init+0x1a4>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000c3a:	4b56      	ldr	r3, [pc, #344]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c3c:	22a9      	movs	r2, #169	@ 0xa9
 8000c3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b54      	ldr	r3, [pc, #336]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000c46:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c48:	22c7      	movs	r2, #199	@ 0xc7
 8000c4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c52:	4b50      	ldr	r3, [pc, #320]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b4e      	ldr	r3, [pc, #312]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5e:	484d      	ldr	r0, [pc, #308]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c60:	f002 fd14 	bl	800368c <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c6a:	f000 fb45 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c72:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c74:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4846      	ldr	r0, [pc, #280]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c7c:	f003 f918 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c86:	f000 fb37 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c8a:	4842      	ldr	r0, [pc, #264]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000c8c:	f002 fd55 	bl	800373a <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c96:	f000 fb2f 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000caa:	4619      	mov	r1, r3
 8000cac:	4839      	ldr	r0, [pc, #228]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000cae:	f003 feb5 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000cb8:	f000 fb1e 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbc:	2360      	movs	r3, #96	@ 0x60
 8000cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482c      	ldr	r0, [pc, #176]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000ce2:	f002 ffd1 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000cec:	f000 fb04 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4826      	ldr	r0, [pc, #152]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000cfa:	f002 ffc5 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000d04:	f000 faf8 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4820      	ldr	r0, [pc, #128]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000d12:	f002 ffb9 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000d1c:	f000 faec 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d24:	220c      	movs	r2, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000d2a:	f002 ffad 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000d34:	f000 fae0 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000d76:	f003 fee7 	bl	8004b48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000d80:	f000 faba 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <MX_TIM1_Init+0x1a0>)
 8000d86:	f000 fc09 	bl	800159c <HAL_TIM_MspPostInit>

}
 8000d8a:	bf00      	nop
 8000d8c:	3770      	adds	r7, #112	@ 0x70
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001cc 	.word	0x200001cc
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	@ 0x38
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dce:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000dd8:	22a9      	movs	r2, #169	@ 0xa9
 8000dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000de2:	4b39      	ldr	r3, [pc, #228]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000de4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b35      	ldr	r3, [pc, #212]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df6:	4834      	ldr	r0, [pc, #208]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000df8:	f002 fc48 	bl	800368c <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 fa79 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e10:	4619      	mov	r1, r3
 8000e12:	482d      	ldr	r0, [pc, #180]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000e14:	f003 f84c 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e1e:	f000 fa6b 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e22:	4829      	ldr	r0, [pc, #164]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000e24:	f002 fc89 	bl	800373a <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e2e:	f000 fa63 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4821      	ldr	r0, [pc, #132]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000e42:	f003 fdeb 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e4c:	f000 fa54 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e50:	2360      	movs	r3, #96	@ 0x60
 8000e52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1099;
 8000e54:	f240 434b 	movw	r3, #1099	@ 0x44b
 8000e58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000e6a:	f002 ff0d 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e74:	f000 fa40 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000e80:	f002 ff02 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e8a:	f000 fa35 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2208      	movs	r2, #8
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000e96:	f002 fef7 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000ea0:	f000 fa2a 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000eac:	f002 feec 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8000eb6:	f000 fa1f 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eba:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <MX_TIM2_Init+0x12c>)
 8000ebc:	f000 fb6e 	bl	800159c <HAL_TIM_MspPostInit>

}
 8000ec0:	bf00      	nop
 8000ec2:	3738      	adds	r7, #56	@ 0x38
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000218 	.word	0x20000218

08000ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2224      	movs	r2, #36	@ 0x24
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 ffd0 	bl	8005e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eea:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000eec:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <MX_TIM3_Init+0xa8>)
 8000eee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000f20:	2305      	movs	r3, #5
 8000f22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000f30:	2305      	movs	r3, #5
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000f3c:	f002 fd70 	bl	8003a20 <HAL_TIM_Encoder_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f46:	f000 f9d7 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <MX_TIM3_Init+0xa4>)
 8000f58:	f003 fd60 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f62:	f000 f9c9 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3730      	adds	r7, #48	@ 0x30
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000264 	.word	0x20000264
 8000f74:	40000400 	.word	0x40000400

08000f78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	@ 0x30
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2224      	movs	r2, #36	@ 0x24
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 ff7a 	bl	8005e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <MX_TIM4_Init+0xa8>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000fcc:	2305      	movs	r3, #5
 8000fce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_TIM4_Init+0xa4>)
 8000fe8:	f002 fd1a 	bl	8003a20 <HAL_TIM_Encoder_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000ff2:	f000 f981 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_TIM4_Init+0xa4>)
 8001004:	f003 fd0a 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800100e:	f000 f973 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	@ 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002b0 	.word	0x200002b0
 8001020:	40000800 	.word	0x40000800

08001024 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2224      	movs	r2, #36	@ 0x24
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 ff24 	bl	8005e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 8001044:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <MX_TIM5_Init+0xa8>)
 8001046:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 8001056:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800105a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001068:	2301      	movs	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001078:	2305      	movs	r3, #5
 800107a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001088:	2305      	movs	r3, #5
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 8001094:	f002 fcc4 	bl	8003a20 <HAL_TIM_Encoder_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800109e:	f000 f92b 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_TIM5_Init+0xa4>)
 80010b0:	f003 fcb4 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80010ba:	f000 f91d 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3730      	adds	r7, #48	@ 0x30
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002fc 	.word	0x200002fc
 80010cc:	40000c00 	.word	0x40000c00

080010d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	@ 0x30
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	2224      	movs	r2, #36	@ 0x24
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fece 	bl	8005e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <MX_TIM8_Init+0xac>)
 80010f0:	4a23      	ldr	r2, [pc, #140]	@ (8001180 <MX_TIM8_Init+0xb0>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010f4:	4b21      	ldr	r3, [pc, #132]	@ (800117c <MX_TIM8_Init+0xac>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_TIM8_Init+0xac>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <MX_TIM8_Init+0xac>)
 8001102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001106:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <MX_TIM8_Init+0xac>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800110e:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_TIM8_Init+0xac>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_TIM8_Init+0xac>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800112a:	2305      	movs	r3, #5
 800112c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001132:	2301      	movs	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 800113a:	2305      	movs	r3, #5
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <MX_TIM8_Init+0xac>)
 8001146:	f002 fc6b 	bl	8003a20 <HAL_TIM_Encoder_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001150:	f000 f8d2 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_TIM8_Init+0xac>)
 8001166:	f003 fc59 	bl	8004a1c <HAL_TIMEx_MasterConfigSynchronization>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001170:	f000 f8c2 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	@ 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000348 	.word	0x20000348
 8001180:	40013400 	.word	0x40013400

08001184 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001188:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 800118a:	4a23      	ldr	r2, [pc, #140]	@ (8001218 <MX_USART3_UART_Init+0x94>)
 800118c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 8001190:	4a22      	ldr	r2, [pc, #136]	@ (800121c <MX_USART3_UART_Init+0x98>)
 8001192:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011a8:	220c      	movs	r2, #12
 80011aa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ca:	4812      	ldr	r0, [pc, #72]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011cc:	f003 fd50 	bl	8004c70 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80011d6:	f000 f88f 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011de:	f004 fc41 	bl	8005a64 <HAL_UARTEx_SetTxFifoThreshold>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80011e8:	f000 f886 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4809      	ldr	r0, [pc, #36]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 80011f0:	f004 fc76 	bl	8005ae0 <HAL_UARTEx_SetRxFifoThreshold>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80011fa:	f000 f87d 	bl	80012f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_USART3_UART_Init+0x90>)
 8001200:	f004 fbf7 	bl	80059f2 <HAL_UARTEx_DisableFifoMode>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800120a:	f000 f875 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000394 	.word	0x20000394
 8001218:	40004800 	.word	0x40004800
 800121c:	0007a120 	.word	0x0007a120

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a1d      	ldr	r2, [pc, #116]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_GPIO_Init+0xa8>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800129c:	480b      	ldr	r0, [pc, #44]	@ (80012cc <MX_GPIO_Init+0xac>)
 800129e:	f001 f993 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 80012a2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_GPIO_Init+0xac>)
 80012bc:	f001 f802 	bl	80022c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	@ 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <BSP_PB_Callback+0x24>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200001c8 	.word	0x200001c8

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Error_Handler+0x8>

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_MspInit+0x44>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6613      	str	r3, [r2, #96]	@ 0x60
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_MspInit+0x44>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_MspInit+0x44>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_MspInit+0x44>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6593      	str	r3, [r2, #88]	@ 0x58
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_MspInit+0x44>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800133a:	f001 fa1b 	bl	8002774 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a13      	ldr	r2, [pc, #76]	@ (80013a8 <HAL_TIM_Base_MspInit+0x5c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10c      	bne.n	8001378 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <HAL_TIM_Base_MspInit+0x60>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_TIM_Base_MspInit+0x60>)
 8001364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001368:	6613      	str	r3, [r2, #96]	@ 0x60
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_TIM_Base_MspInit+0x60>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	e010      	b.n	800139a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001380:	d10b      	bne.n	800139a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_TIM_Base_MspInit+0x60>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_TIM_Base_MspInit+0x60>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6593      	str	r3, [r2, #88]	@ 0x58
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_TIM_Base_MspInit+0x60>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b090      	sub	sp, #64	@ 0x40
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a6c      	ldr	r2, [pc, #432]	@ (8001580 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d129      	bne.n	8001426 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a6b      	ldr	r2, [pc, #428]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b69      	ldr	r3, [pc, #420]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b66      	ldr	r3, [pc, #408]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a65      	ldr	r2, [pc, #404]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b63      	ldr	r3, [pc, #396]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001402:	2350      	movs	r3, #80	@ 0x50
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001412:	2302      	movs	r3, #2
 8001414:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001420:	f000 ff50 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001424:	e0a7      	b.n	8001576 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a57      	ldr	r2, [pc, #348]	@ (8001588 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d12a      	bne.n	8001486 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001430:	4b54      	ldr	r3, [pc, #336]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	4a53      	ldr	r2, [pc, #332]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6593      	str	r3, [r2, #88]	@ 0x58
 800143c:	4b51      	ldr	r3, [pc, #324]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	623b      	str	r3, [r7, #32]
 8001446:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b4e      	ldr	r3, [pc, #312]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a4d      	ldr	r2, [pc, #308]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001454:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001460:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001472:	230a      	movs	r3, #10
 8001474:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f000 ff20 	bl	80022c4 <HAL_GPIO_Init>
}
 8001484:	e077      	b.n	8001576 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a40      	ldr	r2, [pc, #256]	@ (800158c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d145      	bne.n	800151c <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001490:	4b3c      	ldr	r3, [pc, #240]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	4a3b      	ldr	r2, [pc, #236]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6593      	str	r3, [r2, #88]	@ 0x58
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	4a35      	ldr	r2, [pc, #212]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b4:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014d8:	2304      	movs	r3, #4
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014e8:	2302      	movs	r3, #2
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	4827      	ldr	r0, [pc, #156]	@ (8001590 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80014f4:	f000 fee6 	bl	80022c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800150a:	2301      	movs	r3, #1
 800150c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	481f      	ldr	r0, [pc, #124]	@ (8001594 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001516:	f000 fed5 	bl	80022c4 <HAL_GPIO_Init>
}
 800151a:	e02c      	b.n	8001576 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d127      	bne.n	8001576 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	4a16      	ldr	r2, [pc, #88]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800152c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001530:	6613      	str	r3, [r2, #96]	@ 0x60
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a10      	ldr	r2, [pc, #64]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001556:	23c0      	movs	r3, #192	@ 0xc0
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001566:	2304      	movs	r3, #4
 8001568:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800156e:	4619      	mov	r1, r3
 8001570:	4808      	ldr	r0, [pc, #32]	@ (8001594 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001572:	f000 fea7 	bl	80022c4 <HAL_GPIO_Init>
}
 8001576:	bf00      	nop
 8001578:	3740      	adds	r7, #64	@ 0x40
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40000400 	.word	0x40000400
 8001584:	40021000 	.word	0x40021000
 8001588:	40000800 	.word	0x40000800
 800158c:	40000c00 	.word	0x40000c00
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	40013400 	.word	0x40013400

0800159c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001668 <HAL_TIM_MspPostInit+0xcc>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11c      	bne.n	80015f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_TIM_MspPostInit+0xd0>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <HAL_TIM_MspPostInit+0xd0>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b28      	ldr	r3, [pc, #160]	@ (800166c <HAL_TIM_MspPostInit+0xd0>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Steering_PWM1_Pin|Steering_PWM2_Pin|Steering_PWM3_Pin|Steering_PWM4_Pin;
 80015d6:	230f      	movs	r3, #15
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015e6:	2302      	movs	r3, #2
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	481f      	ldr	r0, [pc, #124]	@ (8001670 <HAL_TIM_MspPostInit+0xd4>)
 80015f2:	f000 fe67 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015f6:	e033      	b.n	8001660 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001600:	d12e      	bne.n	8001660 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_TIM_MspPostInit+0xd0>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_TIM_MspPostInit+0xd0>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_TIM_MspPostInit+0xd0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Driving_PWM1_Pin|Driving_PWM2_Pin;
 800161a:	2303      	movs	r3, #3
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f000 fe44 	bl	80022c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Driving_PWM3_Pin|Driving_PWM4_Pin;
 800163c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800164e:	230a      	movs	r3, #10
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165c:	f000 fe32 	bl	80022c4 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	@ 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40021000 	.word	0x40021000
 8001670:	48000800 	.word	0x48000800

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09e      	sub	sp, #120	@ 0x78
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2254      	movs	r2, #84	@ 0x54
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f004 fbf3 	bl	8005e80 <memset>
  if(huart->Instance==USART3)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <HAL_UART_MspInit+0xa8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d136      	bne.n	8001712 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016a4:	2304      	movs	r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fd9d 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016bc:	f7ff fe1c 	bl	80012f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_UART_MspInit+0xac>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <HAL_UART_MspInit+0xac>)
 80016c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <HAL_UART_MspInit+0xac>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_UART_MspInit+0xac>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016dc:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_UART_MspInit+0xac>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_UART_MspInit+0xac>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001702:	2307      	movs	r3, #7
 8001704:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <HAL_UART_MspInit+0xb0>)
 800170e:	f000 fdd9 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001712:	bf00      	nop
 8001714:	3778      	adds	r7, #120	@ 0x78
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40004800 	.word	0x40004800
 8001720:	40021000 	.word	0x40021000
 8001724:	48000400 	.word	0x48000400

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <NMI_Handler+0x4>

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <MemManage_Handler+0x4>

08001740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <UsageFault_Handler+0x4>

08001750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 fbf1 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 fab4 	bl	8001cf8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <SM_Init>:
// Private helper functions
static float steering_pid_update(SteeringMotor* motor, float target, float current);
static void set_steering_pwm(SteeringMotor* motor, int16_t pwm);
static void constrain_pulse_width(uint16_t* pulse, uint16_t min, uint16_t max);

void SM_Init(SwerveModule* module) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    // Initialize steering motor PWM
    HAL_TIM_PWM_Start(module->steering.pwm_tim, module->steering.pwm_channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f002 f828 	bl	80037fc <HAL_TIM_PWM_Start>

    // Initialize encoder timer
    HAL_TIM_Encoder_Start(module->steering.encoder_tim, TIM_CHANNEL_ALL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	213c      	movs	r1, #60	@ 0x3c
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 f9da 	bl	8003b6c <HAL_TIM_Encoder_Start>

    // Initialize driving motor PWM
    HAL_TIM_PWM_Start(module->driving.pwm_tim, module->driving.pwm_channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f002 f81a 	bl	80037fc <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(module->driving.pwm_tim, module->driving.pwm_channel, module->driving.arming_pulse);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <SM_Init+0x4c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017de:	e03b      	b.n	8001858 <SM_Init+0xc4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d108      	bne.n	80017fa <SM_Init+0x66>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	460b      	mov	r3, r1
 80017f6:	6393      	str	r3, [r2, #56]	@ 0x38
 80017f8:	e02e      	b.n	8001858 <SM_Init+0xc4>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d108      	bne.n	8001814 <SM_Init+0x80>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	460b      	mov	r3, r1
 8001810:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001812:	e021      	b.n	8001858 <SM_Init+0xc4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d108      	bne.n	800182e <SM_Init+0x9a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	460b      	mov	r3, r1
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
 800182c:	e014      	b.n	8001858 <SM_Init+0xc4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001832:	2b10      	cmp	r3, #16
 8001834:	d108      	bne.n	8001848 <SM_Init+0xb4>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	460b      	mov	r3, r1
 8001844:	6493      	str	r3, [r2, #72]	@ 0x48
 8001846:	e007      	b.n	8001858 <SM_Init+0xc4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	64d3      	str	r3, [r2, #76]	@ 0x4c
    // Reset PID parameters
    module->steering.prev_error = 0.0f;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
    module->steering.integral = 0.0f;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <SM_CalibrateESC>:
bool SM_SteeringAtTarget(SwerveModule* module, float target_angle, float tolerance) {
    float current = SM_GetCurrentAngle(module);
    return fabsf(current - target_angle) <= tolerance;
}

void SM_CalibrateESC(DrivingMotor* motor) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->arming_pulse);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d106      	bne.n	800188e <SM_CalibrateESC+0x1e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	899a      	ldrh	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	635a      	str	r2, [r3, #52]	@ 0x34
 800188c:	e036      	b.n	80018fc <SM_CalibrateESC+0x8c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d107      	bne.n	80018a6 <SM_CalibrateESC+0x36>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	8999      	ldrh	r1, [r3, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	460b      	mov	r3, r1
 80018a2:	6393      	str	r3, [r2, #56]	@ 0x38
 80018a4:	e02a      	b.n	80018fc <SM_CalibrateESC+0x8c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d107      	bne.n	80018be <SM_CalibrateESC+0x4e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	8999      	ldrh	r1, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	460b      	mov	r3, r1
 80018ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018bc:	e01e      	b.n	80018fc <SM_CalibrateESC+0x8c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d107      	bne.n	80018d6 <SM_CalibrateESC+0x66>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8999      	ldrh	r1, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	460b      	mov	r3, r1
 80018d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d4:	e012      	b.n	80018fc <SM_CalibrateESC+0x8c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d107      	bne.n	80018ee <SM_CalibrateESC+0x7e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	8999      	ldrh	r1, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	460b      	mov	r3, r1
 80018ea:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ec:	e006      	b.n	80018fc <SM_CalibrateESC+0x8c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8999      	ldrh	r1, [r3, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
    HAL_Delay(5000);
 80018fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001900:	f000 fb4e 	bl	8001fa0 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_channel, motor->max_pulse);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d106      	bne.n	800191a <SM_CalibrateESC+0xaa>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	895a      	ldrh	r2, [r3, #10]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
 8001918:	e036      	b.n	8001988 <SM_CalibrateESC+0x118>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d107      	bne.n	8001932 <SM_CalibrateESC+0xc2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	8959      	ldrh	r1, [r3, #10]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	460b      	mov	r3, r1
 800192e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001930:	e02a      	b.n	8001988 <SM_CalibrateESC+0x118>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d107      	bne.n	800194a <SM_CalibrateESC+0xda>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	8959      	ldrh	r1, [r3, #10]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001948:	e01e      	b.n	8001988 <SM_CalibrateESC+0x118>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d107      	bne.n	8001962 <SM_CalibrateESC+0xf2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8959      	ldrh	r1, [r3, #10]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	460b      	mov	r3, r1
 800195e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001960:	e012      	b.n	8001988 <SM_CalibrateESC+0x118>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d107      	bne.n	800197a <SM_CalibrateESC+0x10a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	8959      	ldrh	r1, [r3, #10]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	460b      	mov	r3, r1
 8001976:	6493      	str	r3, [r2, #72]	@ 0x48
 8001978:	e006      	b.n	8001988 <SM_CalibrateESC+0x118>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	8959      	ldrh	r1, [r3, #10]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	64d3      	str	r3, [r2, #76]	@ 0x4c
    HAL_Delay(5000);
 8001988:	f241 3088 	movw	r0, #5000	@ 0x1388
 800198c:	f000 fb08 	bl	8001fa0 <HAL_Delay>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
  }

  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f9f7 	bl	8001de0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
  }
  return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
  return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f004 fa3a 	bl	8005f1c <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	20000428 	.word	0x20000428
 8001adc:	20000620 	.word	0x20000620

08001ae0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b04:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	@ (8001b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <LoopForever+0xe>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	@ (8001b50 <LoopForever+0x16>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f004 f9f9 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b36:	f7fe fdff 	bl	8000738 <main>

08001b3a <LoopForever>:

LoopForever:
    b LoopForever
 8001b3a:	e7fe      	b.n	8001b3a <LoopForever>
  ldr   r0, =_estack
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b48:	080076a4 	.word	0x080076a4
  ldr r2, =_sbss
 8001b4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b50:	2000061c 	.word	0x2000061c

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <BSP_LED_Init+0x64>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	4a15      	ldr	r2, [pc, #84]	@ (8001bbc <BSP_LED_Init+0x64>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <BSP_LED_Init+0x64>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <BSP_LED_Init+0x68>)
 8001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b92:	f107 020c 	add.w	r2, r7, #12
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fb93 	bl	80022c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <BSP_LED_Init+0x68>)
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fd0c 	bl	80025c8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <BSP_LED_On+0x28>)
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fcf4 	bl	80025c8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <BSP_LED_Toggle+0x28>)
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	2220      	movs	r2, #32
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fcf6 	bl	80025f8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008

08001c1c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	460a      	mov	r2, r1
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <BSP_PB_Init+0xc4>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce0 <BSP_PB_Init+0xc4>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c38:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <BSP_PB_Init+0xc4>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10c      	bne.n	8001c72 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ce4 <BSP_PB_Init+0xc8>)
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fb2a 	bl	80022c4 <HAL_GPIO_Init>
 8001c70:	e031      	b.n	8001cd6 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001c72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c76:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <BSP_PB_Init+0xc8>)
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fb1c 	bl	80022c4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <BSP_PB_Init+0xcc>)
 8001c92:	441a      	add	r2, r3
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4915      	ldr	r1, [pc, #84]	@ (8001cec <BSP_PB_Init+0xd0>)
 8001c98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 facc 	bl	800223c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <BSP_PB_Init+0xcc>)
 8001caa:	1898      	adds	r0, r3, r2
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <BSP_PB_Init+0xd4>)
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f000 faa3 	bl	8002202 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001cbc:	2028      	movs	r0, #40	@ 0x28
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <BSP_PB_Init+0xd8>)
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f000 fa66 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001cce:	2328      	movs	r3, #40	@ 0x28
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fa7c 	bl	80021ce <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	2000042c 	.word	0x2000042c
 8001cec:	08007518 	.word	0x08007518
 8001cf0:	20000014 	.word	0x20000014
 8001cf4:	20000018 	.word	0x20000018

08001cf8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <BSP_PB_IRQHandler+0x20>)
 8001d08:	4413      	add	r3, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 faaa 	bl	8002264 <HAL_EXTI_IRQHandler>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000042c 	.word	0x2000042c

08001d1c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d903      	bls.n	8001d3a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d32:	f06f 0301 	mvn.w	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e018      	b.n	8001d6c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2294      	movs	r2, #148	@ 0x94
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <BSP_COM_Init+0x5c>)
 8001d44:	4413      	add	r3, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f86e 	bl	8001e28 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2294      	movs	r2, #148	@ 0x94
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <BSP_COM_Init+0x5c>)
 8001d56:	4413      	add	r3, r2
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f80e 	bl	8001d7c <MX_LPUART1_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001d66:	f06f 0303 	mvn.w	r3, #3
 8001d6a:	e000      	b.n	8001d6e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000434 	.word	0x20000434

08001d7c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <MX_LPUART1_Init+0x60>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	895b      	ldrh	r3, [r3, #10]
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	891b      	ldrh	r3, [r3, #8]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	899b      	ldrh	r3, [r3, #12]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dc8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f002 ff50 	bl	8004c70 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000010 	.word	0x20000010

08001de0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <__io_putchar+0x30>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	2394      	movs	r3, #148	@ 0x94
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <__io_putchar+0x34>)
 8001df6:	1898      	adds	r0, r3, r2
 8001df8:	1d39      	adds	r1, r7, #4
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f002 ff86 	bl	8004d10 <HAL_UART_Transmit>
  return ch;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200004c8 	.word	0x200004c8
 8001e14:	20000434 	.word	0x20000434

08001e18 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fa57 	bl	80012d0 <BSP_PB_Callback>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001e30:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e34:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001e48:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	4a15      	ldr	r2, [pc, #84]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <COM1_MspInit+0x94>)
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001e80:	2302      	movs	r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e96:	f000 fa15 	bl	80022c4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb0:	f000 fa08 	bl	80022c4 <HAL_GPIO_Init>
}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	@ 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 f95a 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f80d 	bl	8001ef0 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	e001      	b.n	8001ee6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee2:	f7ff fa0f 	bl	8001304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]

}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_InitTick+0x68>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d022      	beq.n	8001f4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f04:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_InitTick+0x6c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_InitTick+0x68>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f966 	bl	80021ea <HAL_SYSTICK_Config>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	d809      	bhi.n	8001f3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f32:	f000 f932 	bl	800219a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <HAL_InitTick+0x70>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e007      	b.n	8001f4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e004      	b.n	8001f4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000020 	.word	0x20000020
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	2000001c 	.word	0x2000001c

08001f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_IncTick+0x20>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a03      	ldr	r2, [pc, #12]	@ (8001f80 <HAL_IncTick+0x1c>)
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	200004cc 	.word	0x200004cc
 8001f84:	20000020 	.word	0x20000020

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200004cc 	.word	0x200004cc

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fb8:	d004      	beq.n	8001fc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_Delay+0x40>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc4:	bf00      	nop
 8001fc6:	f7ff ffdf 	bl	8001f88 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d8f7      	bhi.n	8001fc6 <HAL_Delay+0x26>
  {
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000020 	.word	0x20000020

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	@ (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff40 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff90 	bl	80020d8 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5f 	bl	8002084 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa4 	bl	8002140 <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002202:	b480      	push	{r7}
 8002204:	b087      	sub	sp, #28
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	460b      	mov	r3, r1
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]
      break;
 8002220:	e005      	b.n	800222e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
      break;
 800222c:	bf00      	nop
  }

  return status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e003      	b.n	8002258 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002256:	2300      	movs	r3, #0
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	2201      	movs	r2, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_EXTI_IRQHandler+0x5c>)
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4798      	blx	r3
    }
  }
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40010414 	.word	0x40010414

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022d2:	e15a      	b.n	800258a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 814c 	beq.w	8002584 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d005      	beq.n	8002304 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002300:	2b02      	cmp	r3, #2
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800233a:	2201      	movs	r2, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b03      	cmp	r3, #3
 8002370:	d017      	beq.n	80023a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80a6 	beq.w	8002584 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_GPIO_Init+0x2e4>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	4a5a      	ldr	r2, [pc, #360]	@ (80025a8 <HAL_GPIO_Init+0x2e4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6613      	str	r3, [r2, #96]	@ 0x60
 8002444:	4b58      	ldr	r3, [pc, #352]	@ (80025a8 <HAL_GPIO_Init+0x2e4>)
 8002446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002450:	4a56      	ldr	r2, [pc, #344]	@ (80025ac <HAL_GPIO_Init+0x2e8>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800247a:	d01f      	beq.n	80024bc <HAL_GPIO_Init+0x1f8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_GPIO_Init+0x2ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d019      	beq.n	80024b8 <HAL_GPIO_Init+0x1f4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4b      	ldr	r2, [pc, #300]	@ (80025b4 <HAL_GPIO_Init+0x2f0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <HAL_GPIO_Init+0x1f0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4a      	ldr	r2, [pc, #296]	@ (80025b8 <HAL_GPIO_Init+0x2f4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x1ec>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a49      	ldr	r2, [pc, #292]	@ (80025bc <HAL_GPIO_Init+0x2f8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x1e8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a48      	ldr	r2, [pc, #288]	@ (80025c0 <HAL_GPIO_Init+0x2fc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_GPIO_Init+0x1e4>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e00a      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024a8:	2306      	movs	r3, #6
 80024aa:	e008      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e006      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e004      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024bc:	2300      	movs	r3, #0
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ce:	4937      	ldr	r1, [pc, #220]	@ (80025ac <HAL_GPIO_Init+0x2e8>)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024dc:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002500:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002506:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800252a:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002554:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f ae9d 	bne.w	80022d4 <HAL_GPIO_Init+0x10>
  }
}
 800259a:	bf00      	nop
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	48000400 	.word	0x48000400
 80025b4:	48000800 	.word	0x48000800
 80025b8:	48000c00 	.word	0x48000c00
 80025bc:	48001000 	.word	0x48001000
 80025c0:	48001400 	.word	0x48001400
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43d9      	mvns	r1, r3
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	400b      	ands	r3, r1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d141      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800263a:	4b4b      	ldr	r3, [pc, #300]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002646:	d131      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002648:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264e:	4a46      	ldr	r2, [pc, #280]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	4b43      	ldr	r3, [pc, #268]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002660:	4a41      	ldr	r2, [pc, #260]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002668:	4b40      	ldr	r3, [pc, #256]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2232      	movs	r2, #50	@ 0x32
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a3f      	ldr	r2, [pc, #252]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267e:	e002      	b.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002686:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d102      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269a:	4b33      	ldr	r3, [pc, #204]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a6:	d158      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e057      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026bc:	e04d      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c4:	d141      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c6:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d2:	d131      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d4:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026da:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2232      	movs	r2, #50	@ 0x32
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270a:	e002      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3b01      	subs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271e:	d102      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f2      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002732:	d112      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e011      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002748:	e007      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002752:	4a05      	ldr	r2, [pc, #20]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002758:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40007000 	.word	0x40007000
 800276c:	20000004 	.word	0x20000004
 8002770:	431bde83 	.word	0x431bde83

08002774 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e2fe      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b97      	ldr	r3, [pc, #604]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027bc:	4b94      	ldr	r3, [pc, #592]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3e>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e2d9      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b85      	ldr	r3, [pc, #532]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a84      	ldr	r2, [pc, #528]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b7f      	ldr	r3, [pc, #508]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b78      	ldr	r3, [pc, #480]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a77      	ldr	r2, [pc, #476]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b75      	ldr	r3, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a74      	ldr	r2, [pc, #464]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff fb9c 	bl	8001f88 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fb98 	bl	8001f88 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e29e      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	4b6a      	ldr	r3, [pc, #424]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff fb88 	bl	8001f88 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fb84 	bl	8001f88 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e28a      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b59      	ldr	r3, [pc, #356]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b56      	ldr	r3, [pc, #344]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x136>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_OscConfig+0x13c>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11f      	bne.n	8002910 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x154>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e25d      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b49      	ldr	r3, [pc, #292]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4946      	ldr	r1, [pc, #280]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028fc:	4b45      	ldr	r3, [pc, #276]	@ (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff faf5 	bl	8001ef0 <HAL_InitTick>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d043      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e249      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff fb30 	bl	8001f88 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7ff fb2c 	bl	8001f88 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e232      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293e:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	492d      	ldr	r1, [pc, #180]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e01a      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2a      	ldr	r2, [pc, #168]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7ff fb0c 	bl	8001f88 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7ff fb08 	bl	8001f88 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e20e      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1e0>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d041      	beq.n	8002a26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7ff fae5 	bl	8001f88 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7ff fae1 	bl	8001f88 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1e7      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCC_OscConfig+0x22e>
 80029e2:	e020      	b.n	8002a26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7ff fac8 	bl	8001f88 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029fa:	e00d      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff fac4 	bl	8001f88 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d906      	bls.n	8002a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a18:	4b8c      	ldr	r3, [pc, #560]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ea      	bne.n	80029fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80a6 	beq.w	8002b80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a38:	4b84      	ldr	r3, [pc, #528]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2b4>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x2b6>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	4a7e      	ldr	r2, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	4b79      	ldr	r3, [pc, #484]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a76:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fa81 	bl	8001f88 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7ff fa7d 	bl	8001f88 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e183      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x32e>
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a65      	ldr	r2, [pc, #404]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac0:	e024      	b.n	8002b0c <HAL_RCC_OscConfig+0x378>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d110      	bne.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002aca:	4b60      	ldr	r3, [pc, #384]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ada:	4b5c      	ldr	r3, [pc, #368]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x378>
 8002aec:	4b57      	ldr	r3, [pc, #348]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	4a56      	ldr	r2, [pc, #344]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002afc:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7ff fa38 	bl	8001f88 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fa34 	bl	8001f88 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e138      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ed      	beq.n	8002b1c <HAL_RCC_OscConfig+0x388>
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7ff fa21 	bl	8001f88 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7ff fa1d 	bl	8001f88 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e121      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b60:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ed      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	4a34      	ldr	r2, [pc, #208]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b94:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7ff f9f0 	bl	8001f88 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7ff f9ec 	bl	8001f88 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0f2      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bbe:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x418>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bce:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7ff f9d3 	bl	8001f88 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be6:	f7ff f9cf 	bl	8001f88 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0d5      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80c9 	beq.w	8002da2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f000 8083 	beq.w	8002d24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d15e      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7ff f9a9 	bl	8001f88 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	e00c      	b.n	8002c54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7ff f9a5 	bl	8001f88 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d905      	bls.n	8002c54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ab      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	4b55      	ldr	r3, [pc, #340]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ec      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c60:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4b52      	ldr	r3, [pc, #328]	@ (8002db0 <HAL_RCC_OscConfig+0x61c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6a11      	ldr	r1, [r2, #32]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c70:	3a01      	subs	r2, #1
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c7a:	0212      	lsls	r2, r2, #8
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0552      	lsls	r2, r2, #21
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c8e:	0852      	lsrs	r2, r2, #1
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0652      	lsls	r2, r2, #25
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c9a:	06d2      	lsls	r2, r2, #27
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4943      	ldr	r1, [pc, #268]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca4:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a40      	ldr	r2, [pc, #256]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7ff f964 	bl	8001f88 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7ff f960 	bl	8001f88 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e066      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	4b35      	ldr	r3, [pc, #212]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x530>
 8002ce2:	e05e      	b.n	8002da2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff f94a 	bl	8001f88 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7ff f946 	bl	8001f88 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e04c      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d16:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4924      	ldr	r1, [pc, #144]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d1c:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
 8002d22:	e03e      	b.n	8002da2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e039      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d30:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d12c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d123      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d113      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	019f800c 	.word	0x019f800c
 8002db4:	feeefffc 	.word	0xfeeefffc

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e11e      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b91      	ldr	r3, [pc, #580]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	498c      	ldr	r1, [pc, #560]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b8a      	ldr	r3, [pc, #552]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e106      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d073      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d129      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e14:	4b81      	ldr	r3, [pc, #516]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0f4      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e24:	f000 f99e 	bl	8003164 <RCC_GetSysClockFreqFromPLLSource>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4a7c      	ldr	r2, [pc, #496]	@ (8003020 <HAL_RCC_ClockConfig+0x268>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d93f      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e32:	4b7a      	ldr	r3, [pc, #488]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d033      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d12f      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e52:	4b72      	ldr	r3, [pc, #456]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e5a:	4a70      	ldr	r2, [pc, #448]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e024      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e70:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0c6      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b66      	ldr	r3, [pc, #408]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0be      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e90:	f000 f8ce 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4a61      	ldr	r2, [pc, #388]	@ (8003020 <HAL_RCC_ClockConfig+0x268>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d909      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4957      	ldr	r1, [pc, #348]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7ff f860 	bl	8001f88 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7ff f85c 	bl	8001f88 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e095      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b43      	ldr	r3, [pc, #268]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a42      	ldr	r2, [pc, #264]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f24:	4b3d      	ldr	r3, [pc, #244]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b39      	ldr	r3, [pc, #228]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4936      	ldr	r1, [pc, #216]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f4e:	4b33      	ldr	r3, [pc, #204]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a32      	ldr	r2, [pc, #200]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d21d      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 020f 	bic.w	r2, r3, #15
 8002f70:	4929      	ldr	r1, [pc, #164]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f78:	f7ff f806 	bl	8001f88 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7ff f802 	bl	8001f88 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e03b      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1ed      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4917      	ldr	r1, [pc, #92]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490f      	ldr	r1, [pc, #60]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe2:	f000 f825 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490c      	ldr	r1, [pc, #48]	@ (8003024 <HAL_RCC_ClockConfig+0x26c>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <HAL_RCC_ClockConfig+0x270>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <HAL_RCC_ClockConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe ff72 	bl	8001ef0 <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40022000 	.word	0x40022000
 800301c:	40021000 	.word	0x40021000
 8003020:	04c4b400 	.word	0x04c4b400
 8003024:	08007500 	.word	0x08007500
 8003028:	20000004 	.word	0x20000004
 800302c:	2000001c 	.word	0x2000001c

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d102      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003042:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e047      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003048:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d102      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003054:	4b26      	ldr	r3, [pc, #152]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e03e      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800305a:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d136      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3301      	adds	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d10c      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003084:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800308e:	68d2      	ldr	r2, [r2, #12]
 8003090:	0a12      	lsrs	r2, r2, #8
 8003092:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	617b      	str	r3, [r7, #20]
      break;
 800309c:	e00c      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800309e:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a10      	ldr	r2, [pc, #64]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	0a12      	lsrs	r2, r2, #8
 80030ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
      break;
 80030b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0e5b      	lsrs	r3, r3, #25
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e001      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030d8:	693b      	ldr	r3, [r7, #16]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	016e3600 	.word	0x016e3600

080030f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_RCC_GetHCLKFreq+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003110:	f7ff fff0 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4904      	ldr	r1, [pc, #16]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08007510 	.word	0x08007510

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800313c:	f7ff ffda 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0adb      	lsrs	r3, r3, #11
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4904      	ldr	r1, [pc, #16]	@ (8003160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08007510 	.word	0x08007510

08003164 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d10c      	bne.n	80031a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003188:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003192:	68d2      	ldr	r2, [r2, #12]
 8003194:	0a12      	lsrs	r2, r2, #8
 8003196:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	617b      	str	r3, [r7, #20]
    break;
 80031a0:	e00c      	b.n	80031bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a2:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	4a0e      	ldr	r2, [pc, #56]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	0a12      	lsrs	r2, r2, #8
 80031b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    break;
 80031ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0e5b      	lsrs	r3, r3, #25
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031d6:	687b      	ldr	r3, [r7, #4]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40021000 	.word	0x40021000
 80031e8:	016e3600 	.word	0x016e3600
 80031ec:	00f42400 	.word	0x00f42400

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8098 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003212:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321e:	4b40      	ldr	r3, [pc, #256]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	4a3f      	ldr	r2, [pc, #252]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003228:	6593      	str	r3, [r2, #88]	@ 0x58
 800322a:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003236:	2301      	movs	r3, #1
 8003238:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323a:	4b3a      	ldr	r3, [pc, #232]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a39      	ldr	r2, [pc, #228]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003246:	f7fe fe9f 	bl	8001f88 <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800324c:	e009      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7fe fe9b 	bl	8001f88 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d902      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	74fb      	strb	r3, [r7, #19]
        break;
 8003260:	e005      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003262:	4b30      	ldr	r3, [pc, #192]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ef      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d159      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003274:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01e      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	d019      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003290:	4b23      	ldr	r3, [pc, #140]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800329a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800329c:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032bc:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe fe5b 	bl	8001f88 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d4:	e00b      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fe57 	bl	8001f88 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d902      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	74fb      	strb	r3, [r7, #19]
            break;
 80032ec:	e006      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ec      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003318:	e008      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
 800331e:	e005      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7c7b      	ldrb	r3, [r7, #17]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4ba7      	ldr	r3, [pc, #668]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	4aa6      	ldr	r2, [pc, #664]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334a:	4ba1      	ldr	r3, [pc, #644]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003350:	f023 0203 	bic.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	499d      	ldr	r1, [pc, #628]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800336c:	4b98      	ldr	r3, [pc, #608]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003372:	f023 020c 	bic.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4995      	ldr	r1, [pc, #596]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338e:	4b90      	ldr	r3, [pc, #576]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	498c      	ldr	r1, [pc, #560]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b0:	4b87      	ldr	r3, [pc, #540]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4984      	ldr	r1, [pc, #528]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033d2:	4b7f      	ldr	r3, [pc, #508]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	497b      	ldr	r1, [pc, #492]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f4:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	4973      	ldr	r1, [pc, #460]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003416:	4b6e      	ldr	r3, [pc, #440]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	496a      	ldr	r1, [pc, #424]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003438:	4b65      	ldr	r3, [pc, #404]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4962      	ldr	r1, [pc, #392]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345a:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	4959      	ldr	r1, [pc, #356]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800347c:	4b54      	ldr	r3, [pc, #336]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	4951      	ldr	r1, [pc, #324]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349e:	4b4c      	ldr	r3, [pc, #304]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	4948      	ldr	r1, [pc, #288]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c0:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4940      	ldr	r1, [pc, #256]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f8:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003506:	4932      	ldr	r1, [pc, #200]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003518:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003522:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003530:	4b27      	ldr	r3, [pc, #156]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	4924      	ldr	r1, [pc, #144]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b1f      	ldr	r3, [pc, #124]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a1e      	ldr	r2, [pc, #120]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	4916      	ldr	r1, [pc, #88]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	4908      	ldr	r1, [pc, #32]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035be:	d109      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a02      	ldr	r2, [pc, #8]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035e0:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	4926      	ldr	r1, [pc, #152]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003600:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003626:	4918      	ldr	r1, [pc, #96]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003638:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a12      	ldr	r2, [pc, #72]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003650:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	490a      	ldr	r1, [pc, #40]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a04      	ldr	r2, [pc, #16]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800367c:	7cbb      	ldrb	r3, [r7, #18]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e049      	b.n	8003732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fe4a 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fd06 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e049      	b.n	80037e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f841 	bl	80037e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f000 fcaf 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_TIM_PWM_Start+0x24>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e03c      	b.n	800389a <HAL_TIM_PWM_Start+0x9e>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d109      	bne.n	800383a <HAL_TIM_PWM_Start+0x3e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e02f      	b.n	800389a <HAL_TIM_PWM_Start+0x9e>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start+0x58>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e022      	b.n	800389a <HAL_TIM_PWM_Start+0x9e>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d109      	bne.n	800386e <HAL_TIM_PWM_Start+0x72>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	bf14      	ite	ne
 8003866:	2301      	movne	r3, #1
 8003868:	2300      	moveq	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e015      	b.n	800389a <HAL_TIM_PWM_Start+0x9e>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b10      	cmp	r3, #16
 8003872:	d109      	bne.n	8003888 <HAL_TIM_PWM_Start+0x8c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e008      	b.n	800389a <HAL_TIM_PWM_Start+0x9e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0a6      	b.n	80039f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_PWM_Start+0xb6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b0:	e023      	b.n	80038fa <HAL_TIM_PWM_Start+0xfe>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_PWM_Start+0xc6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c0:	e01b      	b.n	80038fa <HAL_TIM_PWM_Start+0xfe>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d0:	e013      	b.n	80038fa <HAL_TIM_PWM_Start+0xfe>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0xe6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038e0:	e00b      	b.n	80038fa <HAL_TIM_PWM_Start+0xfe>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0xf6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f0:	e003      	b.n	80038fa <HAL_TIM_PWM_Start+0xfe>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2201      	movs	r2, #1
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f864 	bl	80049d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3a      	ldr	r2, [pc, #232]	@ (80039f8 <HAL_TIM_PWM_Start+0x1fc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d018      	beq.n	8003944 <HAL_TIM_PWM_Start+0x148>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a39      	ldr	r2, [pc, #228]	@ (80039fc <HAL_TIM_PWM_Start+0x200>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d013      	beq.n	8003944 <HAL_TIM_PWM_Start+0x148>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a37      	ldr	r2, [pc, #220]	@ (8003a00 <HAL_TIM_PWM_Start+0x204>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00e      	beq.n	8003944 <HAL_TIM_PWM_Start+0x148>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a36      	ldr	r2, [pc, #216]	@ (8003a04 <HAL_TIM_PWM_Start+0x208>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_TIM_PWM_Start+0x148>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a34      	ldr	r2, [pc, #208]	@ (8003a08 <HAL_TIM_PWM_Start+0x20c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_PWM_Start+0x148>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a33      	ldr	r2, [pc, #204]	@ (8003a0c <HAL_TIM_PWM_Start+0x210>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <HAL_TIM_PWM_Start+0x14c>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_TIM_PWM_Start+0x14e>
 8003948:	2300      	movs	r3, #0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800395c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a25      	ldr	r2, [pc, #148]	@ (80039f8 <HAL_TIM_PWM_Start+0x1fc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d022      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003970:	d01d      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <HAL_TIM_PWM_Start+0x214>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d018      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <HAL_TIM_PWM_Start+0x218>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <HAL_TIM_PWM_Start+0x21c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00e      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_TIM_PWM_Start+0x200>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <HAL_TIM_PWM_Start+0x204>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIM_PWM_Start+0x1b2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a18      	ldr	r2, [pc, #96]	@ (8003a0c <HAL_TIM_PWM_Start+0x210>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d115      	bne.n	80039da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_TIM_PWM_Start+0x220>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d015      	beq.n	80039ec <HAL_TIM_PWM_Start+0x1f0>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c6:	d011      	beq.n	80039ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d8:	e008      	b.n	80039ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e000      	b.n	80039ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40013400 	.word	0x40013400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	40015000 	.word	0x40015000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	00010007 	.word	0x00010007

08003a20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e097      	b.n	8003b64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fd fcb1 	bl	80013b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003a64:	f023 0307 	bic.w	r3, r3, #7
 8003a68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f000 fb31 	bl	80040dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003ac0:	f023 030c 	bic.w	r3, r3, #12
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003acc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	4313      	orrs	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	011a      	lsls	r2, r3, #4
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	4313      	orrs	r3, r2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4313      	orrs	r3, r2
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d110      	bne.n	8003bbe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ba2:	7b7b      	ldrb	r3, [r7, #13]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e069      	b.n	8003c80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bbc:	e031      	b.n	8003c22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d110      	bne.n	8003be6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bc4:	7bbb      	ldrb	r3, [r7, #14]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d102      	bne.n	8003bd0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bca:	7b3b      	ldrb	r3, [r7, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d001      	beq.n	8003bd4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e055      	b.n	8003c80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003be4:	e01d      	b.n	8003c22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bec:	7bbb      	ldrb	r3, [r7, #14]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf2:	7b7b      	ldrb	r3, [r7, #13]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d102      	bne.n	8003bfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bf8:	7b3b      	ldrb	r3, [r7, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e03e      	b.n	8003c80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_TIM_Encoder_Start+0xc4>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d008      	beq.n	8003c40 <HAL_TIM_Encoder_Start+0xd4>
 8003c2e:	e00f      	b.n	8003c50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fec9 	bl	80049d0 <TIM_CCxChannelCmd>
      break;
 8003c3e:	e016      	b.n	8003c6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	2104      	movs	r1, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fec1 	bl	80049d0 <TIM_CCxChannelCmd>
      break;
 8003c4e:	e00e      	b.n	8003c6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2201      	movs	r2, #1
 8003c56:	2100      	movs	r1, #0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 feb9 	bl	80049d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2201      	movs	r2, #1
 8003c64:	2104      	movs	r1, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 feb2 	bl	80049d0 <TIM_CCxChannelCmd>
      break;
 8003c6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ff      	b.n	8003ea6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b14      	cmp	r3, #20
 8003cb2:	f200 80f0 	bhi.w	8003e96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003e97 	.word	0x08003e97
 8003cc4:	08003e97 	.word	0x08003e97
 8003cc8:	08003e97 	.word	0x08003e97
 8003ccc:	08003d51 	.word	0x08003d51
 8003cd0:	08003e97 	.word	0x08003e97
 8003cd4:	08003e97 	.word	0x08003e97
 8003cd8:	08003e97 	.word	0x08003e97
 8003cdc:	08003d93 	.word	0x08003d93
 8003ce0:	08003e97 	.word	0x08003e97
 8003ce4:	08003e97 	.word	0x08003e97
 8003ce8:	08003e97 	.word	0x08003e97
 8003cec:	08003dd3 	.word	0x08003dd3
 8003cf0:	08003e97 	.word	0x08003e97
 8003cf4:	08003e97 	.word	0x08003e97
 8003cf8:	08003e97 	.word	0x08003e97
 8003cfc:	08003e15 	.word	0x08003e15
 8003d00:	08003e97 	.word	0x08003e97
 8003d04:	08003e97 	.word	0x08003e97
 8003d08:	08003e97 	.word	0x08003e97
 8003d0c:	08003e55 	.word	0x08003e55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fa94 	bl	8004244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0208 	orr.w	r2, r2, #8
 8003d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0204 	bic.w	r2, r2, #4
 8003d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6999      	ldr	r1, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	619a      	str	r2, [r3, #24]
      break;
 8003d4e:	e0a5      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fb0e 	bl	8004378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6999      	ldr	r1, [r3, #24]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	021a      	lsls	r2, r3, #8
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	619a      	str	r2, [r3, #24]
      break;
 8003d90:	e084      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fb81 	bl	80044a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0208 	orr.w	r2, r2, #8
 8003dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0204 	bic.w	r2, r2, #4
 8003dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69d9      	ldr	r1, [r3, #28]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
      break;
 8003dd0:	e064      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fbf3 	bl	80045c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	021a      	lsls	r2, r3, #8
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	61da      	str	r2, [r3, #28]
      break;
 8003e12:	e043      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fc66 	bl	80046ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0208 	orr.w	r2, r2, #8
 8003e2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0204 	bic.w	r2, r2, #4
 8003e3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e52:	e023      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fcb0 	bl	80047c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e94:	e002      	b.n	8003e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop

08003eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIM_ConfigClockSource+0x1c>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0f6      	b.n	80040ba <HAL_TIM_ConfigClockSource+0x20a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6f      	ldr	r2, [pc, #444]	@ (80040c4 <HAL_TIM_ConfigClockSource+0x214>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 80c1 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f0c:	4a6d      	ldr	r2, [pc, #436]	@ (80040c4 <HAL_TIM_ConfigClockSource+0x214>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f200 80c6 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f14:	4a6c      	ldr	r2, [pc, #432]	@ (80040c8 <HAL_TIM_ConfigClockSource+0x218>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f000 80b9 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80040c8 <HAL_TIM_ConfigClockSource+0x218>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f200 80be 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f24:	4a69      	ldr	r2, [pc, #420]	@ (80040cc <HAL_TIM_ConfigClockSource+0x21c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f000 80b1 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f2c:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_TIM_ConfigClockSource+0x21c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	f200 80b6 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f34:	4a66      	ldr	r2, [pc, #408]	@ (80040d0 <HAL_TIM_ConfigClockSource+0x220>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f000 80a9 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f3c:	4a64      	ldr	r2, [pc, #400]	@ (80040d0 <HAL_TIM_ConfigClockSource+0x220>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	f200 80ae 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f44:	4a63      	ldr	r2, [pc, #396]	@ (80040d4 <HAL_TIM_ConfigClockSource+0x224>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f000 80a1 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f4c:	4a61      	ldr	r2, [pc, #388]	@ (80040d4 <HAL_TIM_ConfigClockSource+0x224>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f200 80a6 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f54:	4a60      	ldr	r2, [pc, #384]	@ (80040d8 <HAL_TIM_ConfigClockSource+0x228>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	f000 8099 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80040d8 <HAL_TIM_ConfigClockSource+0x228>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	f200 809e 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f68:	f000 8091 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f70:	f200 8096 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f78:	f000 8089 	beq.w	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f80:	f200 808e 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f88:	d03e      	beq.n	8004008 <HAL_TIM_ConfigClockSource+0x158>
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8e:	f200 8087 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	f000 8086 	beq.w	80040a6 <HAL_TIM_ConfigClockSource+0x1f6>
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9e:	d87f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa0:	2b70      	cmp	r3, #112	@ 0x70
 8003fa2:	d01a      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x12a>
 8003fa4:	2b70      	cmp	r3, #112	@ 0x70
 8003fa6:	d87b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa8:	2b60      	cmp	r3, #96	@ 0x60
 8003faa:	d050      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x19e>
 8003fac:	2b60      	cmp	r3, #96	@ 0x60
 8003fae:	d877      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fb0:	2b50      	cmp	r3, #80	@ 0x50
 8003fb2:	d03c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x17e>
 8003fb4:	2b50      	cmp	r3, #80	@ 0x50
 8003fb6:	d873      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d058      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x1be>
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d86f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fc0:	2b30      	cmp	r3, #48	@ 0x30
 8003fc2:	d064      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003fc4:	2b30      	cmp	r3, #48	@ 0x30
 8003fc6:	d86b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d060      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d867      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d05a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8003fd8:	e062      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fea:	f000 fcd1 	bl	8004990 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	609a      	str	r2, [r3, #8]
      break;
 8004006:	e04f      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004018:	f000 fcba 	bl	8004990 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800402a:	609a      	str	r2, [r3, #8]
      break;
 800402c:	e03c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	461a      	mov	r2, r3
 800403c:	f000 fc2c 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2150      	movs	r1, #80	@ 0x50
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fc85 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800404c:	e02c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fc4b 	bl	80048f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2160      	movs	r1, #96	@ 0x60
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fc75 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800406c:	e01c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	f000 fc0c 	bl	8004898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2140      	movs	r1, #64	@ 0x40
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fc65 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800408c:	e00c      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f000 fc5c 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800409e:	e003      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      break;
 80040a4:	e000      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80040a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00100070 	.word	0x00100070
 80040c8:	00100060 	.word	0x00100060
 80040cc:	00100050 	.word	0x00100050
 80040d0:	00100040 	.word	0x00100040
 80040d4:	00100030 	.word	0x00100030
 80040d8:	00100020 	.word	0x00100020

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004220 <TIM_Base_SetConfig+0x144>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d017      	beq.n	8004124 <TIM_Base_SetConfig+0x48>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fa:	d013      	beq.n	8004124 <TIM_Base_SetConfig+0x48>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a49      	ldr	r2, [pc, #292]	@ (8004224 <TIM_Base_SetConfig+0x148>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00f      	beq.n	8004124 <TIM_Base_SetConfig+0x48>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a48      	ldr	r2, [pc, #288]	@ (8004228 <TIM_Base_SetConfig+0x14c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_Base_SetConfig+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a47      	ldr	r2, [pc, #284]	@ (800422c <TIM_Base_SetConfig+0x150>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_Base_SetConfig+0x48>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a46      	ldr	r2, [pc, #280]	@ (8004230 <TIM_Base_SetConfig+0x154>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a45      	ldr	r2, [pc, #276]	@ (8004234 <TIM_Base_SetConfig+0x158>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a39      	ldr	r2, [pc, #228]	@ (8004220 <TIM_Base_SetConfig+0x144>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d023      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004144:	d01f      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a36      	ldr	r2, [pc, #216]	@ (8004224 <TIM_Base_SetConfig+0x148>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01b      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a35      	ldr	r2, [pc, #212]	@ (8004228 <TIM_Base_SetConfig+0x14c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d017      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a34      	ldr	r2, [pc, #208]	@ (800422c <TIM_Base_SetConfig+0x150>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <TIM_Base_SetConfig+0x154>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a33      	ldr	r2, [pc, #204]	@ (8004238 <TIM_Base_SetConfig+0x15c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a32      	ldr	r2, [pc, #200]	@ (800423c <TIM_Base_SetConfig+0x160>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a31      	ldr	r2, [pc, #196]	@ (8004240 <TIM_Base_SetConfig+0x164>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0xaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2c      	ldr	r2, [pc, #176]	@ (8004234 <TIM_Base_SetConfig+0x158>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a18      	ldr	r2, [pc, #96]	@ (8004220 <TIM_Base_SetConfig+0x144>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <TIM_Base_SetConfig+0x110>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004230 <TIM_Base_SetConfig+0x154>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00f      	beq.n	80041ec <TIM_Base_SetConfig+0x110>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <TIM_Base_SetConfig+0x15c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x110>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a19      	ldr	r2, [pc, #100]	@ (800423c <TIM_Base_SetConfig+0x160>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x110>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a18      	ldr	r2, [pc, #96]	@ (8004240 <TIM_Base_SetConfig+0x164>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x110>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a13      	ldr	r2, [pc, #76]	@ (8004234 <TIM_Base_SetConfig+0x158>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d103      	bne.n	80041f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	611a      	str	r2, [r3, #16]
  }
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40013400 	.word	0x40013400
 8004234:	40015000 	.word	0x40015000
 8004238:	40014000 	.word	0x40014000
 800423c:	40014400 	.word	0x40014400
 8004240:	40014800 	.word	0x40014800

08004244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f023 0201 	bic.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0302 	bic.w	r3, r3, #2
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a30      	ldr	r2, [pc, #192]	@ (8004360 <TIM_OC1_SetConfig+0x11c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004364 <TIM_OC1_SetConfig+0x120>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004368 <TIM_OC1_SetConfig+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <TIM_OC1_SetConfig+0x128>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <TIM_OC1_SetConfig+0x12c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC1_SetConfig+0x88>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004374 <TIM_OC1_SetConfig+0x130>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d10c      	bne.n	80042e6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0308 	bic.w	r3, r3, #8
 80042d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <TIM_OC1_SetConfig+0x11c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <TIM_OC1_SetConfig+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <TIM_OC1_SetConfig+0x124>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1a      	ldr	r2, [pc, #104]	@ (800436c <TIM_OC1_SetConfig+0x128>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <TIM_OC1_SetConfig+0x12c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_OC1_SetConfig+0xd2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <TIM_OC1_SetConfig+0x130>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d111      	bne.n	800433a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	40015000 	.word	0x40015000

08004378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 0210 	bic.w	r2, r3, #16
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0320 	bic.w	r3, r3, #32
 80043c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004488 <TIM_OC2_SetConfig+0x110>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_OC2_SetConfig+0x74>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2b      	ldr	r2, [pc, #172]	@ (800448c <TIM_OC2_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC2_SetConfig+0x74>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <TIM_OC2_SetConfig+0x118>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d10d      	bne.n	8004408 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1f      	ldr	r2, [pc, #124]	@ (8004488 <TIM_OC2_SetConfig+0x110>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1e      	ldr	r2, [pc, #120]	@ (800448c <TIM_OC2_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00f      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1e      	ldr	r2, [pc, #120]	@ (8004494 <TIM_OC2_SetConfig+0x11c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <TIM_OC2_SetConfig+0x120>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1c      	ldr	r2, [pc, #112]	@ (800449c <TIM_OC2_SetConfig+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_OC2_SetConfig+0xc0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a17      	ldr	r2, [pc, #92]	@ (8004490 <TIM_OC2_SetConfig+0x118>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d113      	bne.n	8004460 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800443e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40015000 	.word	0x40015000
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400
 800449c:	40014800 	.word	0x40014800

080044a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	@ (80045ac <TIM_OC3_SetConfig+0x10c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_OC3_SetConfig+0x72>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2a      	ldr	r2, [pc, #168]	@ (80045b0 <TIM_OC3_SetConfig+0x110>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC3_SetConfig+0x72>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a29      	ldr	r2, [pc, #164]	@ (80045b4 <TIM_OC3_SetConfig+0x114>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10d      	bne.n	800452e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800452c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	@ (80045ac <TIM_OC3_SetConfig+0x10c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <TIM_OC3_SetConfig+0x110>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1d      	ldr	r2, [pc, #116]	@ (80045b8 <TIM_OC3_SetConfig+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <TIM_OC3_SetConfig+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <TIM_OC3_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC3_SetConfig+0xbe>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a16      	ldr	r2, [pc, #88]	@ (80045b4 <TIM_OC3_SetConfig+0x114>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40013400 	.word	0x40013400
 80045b4:	40015000 	.word	0x40015000
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800

080045c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <TIM_OC4_SetConfig+0x110>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC4_SetConfig+0x74>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a2b      	ldr	r2, [pc, #172]	@ (80046d8 <TIM_OC4_SetConfig+0x114>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC4_SetConfig+0x74>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2a      	ldr	r2, [pc, #168]	@ (80046dc <TIM_OC4_SetConfig+0x118>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a1f      	ldr	r2, [pc, #124]	@ (80046d4 <TIM_OC4_SetConfig+0x110>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1e      	ldr	r2, [pc, #120]	@ (80046d8 <TIM_OC4_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <TIM_OC4_SetConfig+0x11c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <TIM_OC4_SetConfig+0x120>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <TIM_OC4_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC4_SetConfig+0xc0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a17      	ldr	r2, [pc, #92]	@ (80046dc <TIM_OC4_SetConfig+0x118>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d113      	bne.n	80046ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800468a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004692:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40015000 	.word	0x40015000
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <TIM_OC5_SetConfig+0xbc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a18      	ldr	r2, [pc, #96]	@ (80047ac <TIM_OC5_SetConfig+0xc0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a17      	ldr	r2, [pc, #92]	@ (80047b0 <TIM_OC5_SetConfig+0xc4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a16      	ldr	r2, [pc, #88]	@ (80047b4 <TIM_OC5_SetConfig+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a15      	ldr	r2, [pc, #84]	@ (80047b8 <TIM_OC5_SetConfig+0xcc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC5_SetConfig+0x82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a14      	ldr	r2, [pc, #80]	@ (80047bc <TIM_OC5_SetConfig+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d109      	bne.n	8004782 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	40015000 	.word	0x40015000

080047c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	051b      	lsls	r3, r3, #20
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1a      	ldr	r2, [pc, #104]	@ (8004880 <TIM_OC6_SetConfig+0xc0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <TIM_OC6_SetConfig+0xc4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <TIM_OC6_SetConfig+0xc8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a17      	ldr	r2, [pc, #92]	@ (800488c <TIM_OC6_SetConfig+0xcc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <TIM_OC6_SetConfig+0xd0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC6_SetConfig+0x84>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <TIM_OC6_SetConfig+0xd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800
 8004894:	40015000 	.word	0x40015000

08004898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 030a 	bic.w	r3, r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f023 0210 	bic.w	r2, r3, #16
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004932:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800496c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	f043 0307 	orr.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2201      	movs	r2, #1
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e074      	b.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a34      	ldr	r2, [pc, #208]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a33      	ldr	r2, [pc, #204]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a31      	ldr	r2, [pc, #196]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a21      	ldr	r2, [pc, #132]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab4:	d01d      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1f      	ldr	r2, [pc, #124]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1c      	ldr	r2, [pc, #112]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a18      	ldr	r2, [pc, #96]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a11      	ldr	r2, [pc, #68]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10c      	bne.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40015000 	.word	0x40015000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40014000 	.word	0x40014000

08004b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e078      	b.n	8004c56 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d11c      	bne.n	8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	051b      	lsls	r3, r3, #20
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40013400 	.word	0x40013400
 8004c6c:	40015000 	.word	0x40015000

08004c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e042      	b.n	8004d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc fced 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2224      	movs	r2, #36	@ 0x24
 8004c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fc7a 	bl	80055b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f97b 	bl	8004fbc <UART_SetConfig>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e01b      	b.n	8004d08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fcf9 	bl	80056f8 <UART_CheckIdleState>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	@ 0x28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d17b      	bne.n	8004e22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_UART_Transmit+0x26>
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e074      	b.n	8004e24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2221      	movs	r2, #33	@ 0x21
 8004d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d4a:	f7fd f91d 	bl	8001f88 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88fa      	ldrh	r2, [r7, #6]
 8004d54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d68:	d108      	bne.n	8004d7c <HAL_UART_Transmit+0x6c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e003      	b.n	8004d84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d84:	e030      	b.n	8004de8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2180      	movs	r1, #128	@ 0x80
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fd5b 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e03d      	b.n	8004e24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e007      	b.n	8004dd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1c8      	bne.n	8004d86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2140      	movs	r1, #64	@ 0x40
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fd24 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e006      	b.n	8004e24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
  }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	@ 0x28
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	f040 80b5 	bne.w	8004fb2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Receive+0x28>
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0ad      	b.n	8004fb4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2222      	movs	r2, #34	@ 0x22
 8004e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6e:	f7fd f88b 	bl	8001f88 <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8c:	d10e      	bne.n	8004eac <HAL_UART_Receive+0x80>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_UART_Receive+0x76>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ea0:	e02d      	b.n	8004efe <HAL_UART_Receive+0xd2>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	@ 0xff
 8004ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004eaa:	e028      	b.n	8004efe <HAL_UART_Receive+0xd2>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_UART_Receive+0xa4>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <HAL_UART_Receive+0x9a>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	22ff      	movs	r2, #255	@ 0xff
 8004ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ec4:	e01b      	b.n	8004efe <HAL_UART_Receive+0xd2>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	227f      	movs	r2, #127	@ 0x7f
 8004eca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ece:	e016      	b.n	8004efe <HAL_UART_Receive+0xd2>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ed8:	d10d      	bne.n	8004ef6 <HAL_UART_Receive+0xca>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_Receive+0xc0>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	227f      	movs	r2, #127	@ 0x7f
 8004ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004eea:	e008      	b.n	8004efe <HAL_UART_Receive+0xd2>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	223f      	movs	r2, #63	@ 0x3f
 8004ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ef4:	e003      	b.n	8004efe <HAL_UART_Receive+0xd2>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f04:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0e:	d108      	bne.n	8004f22 <HAL_UART_Receive+0xf6>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e003      	b.n	8004f2a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f2a:	e036      	b.n	8004f9a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2120      	movs	r1, #32
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fc88 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e032      	b.n	8004fb4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10c      	bne.n	8004f6e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	8a7b      	ldrh	r3, [r7, #18]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3302      	adds	r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e00c      	b.n	8004f88 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8a7b      	ldrh	r3, [r7, #18]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1c2      	bne.n	8004f2c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004fb2:	2302      	movs	r3, #2
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc0:	b08c      	sub	sp, #48	@ 0x30
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4baa      	ldr	r3, [pc, #680]	@ (8005294 <UART_SetConfig+0x2d8>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a9f      	ldr	r2, [pc, #636]	@ (8005298 <UART_SetConfig+0x2dc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005024:	4313      	orrs	r3, r2
 8005026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005032:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800503c:	430b      	orrs	r3, r1
 800503e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	f023 010f 	bic.w	r1, r3, #15
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a90      	ldr	r2, [pc, #576]	@ (800529c <UART_SetConfig+0x2e0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d125      	bne.n	80050ac <UART_SetConfig+0xf0>
 8005060:	4b8f      	ldr	r3, [pc, #572]	@ (80052a0 <UART_SetConfig+0x2e4>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b03      	cmp	r3, #3
 800506c:	d81a      	bhi.n	80050a4 <UART_SetConfig+0xe8>
 800506e:	a201      	add	r2, pc, #4	@ (adr r2, 8005074 <UART_SetConfig+0xb8>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	08005085 	.word	0x08005085
 8005078:	08005095 	.word	0x08005095
 800507c:	0800508d 	.word	0x0800508d
 8005080:	0800509d 	.word	0x0800509d
 8005084:	2301      	movs	r3, #1
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e116      	b.n	80052ba <UART_SetConfig+0x2fe>
 800508c:	2302      	movs	r3, #2
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e112      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e10e      	b.n	80052ba <UART_SetConfig+0x2fe>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e10a      	b.n	80052ba <UART_SetConfig+0x2fe>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e106      	b.n	80052ba <UART_SetConfig+0x2fe>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a7c      	ldr	r2, [pc, #496]	@ (80052a4 <UART_SetConfig+0x2e8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d138      	bne.n	8005128 <UART_SetConfig+0x16c>
 80050b6:	4b7a      	ldr	r3, [pc, #488]	@ (80052a0 <UART_SetConfig+0x2e4>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d82d      	bhi.n	8005120 <UART_SetConfig+0x164>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <UART_SetConfig+0x110>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	08005101 	.word	0x08005101
 80050d0:	08005121 	.word	0x08005121
 80050d4:	08005121 	.word	0x08005121
 80050d8:	08005121 	.word	0x08005121
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005121 	.word	0x08005121
 80050e4:	08005121 	.word	0x08005121
 80050e8:	08005121 	.word	0x08005121
 80050ec:	08005109 	.word	0x08005109
 80050f0:	08005121 	.word	0x08005121
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005119 	.word	0x08005119
 8005100:	2300      	movs	r3, #0
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005106:	e0d8      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510e:	e0d4      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005116:	e0d0      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511e:	e0cc      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005126:	e0c8      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a5e      	ldr	r2, [pc, #376]	@ (80052a8 <UART_SetConfig+0x2ec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d125      	bne.n	800517e <UART_SetConfig+0x1c2>
 8005132:	4b5b      	ldr	r3, [pc, #364]	@ (80052a0 <UART_SetConfig+0x2e4>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005138:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800513c:	2b30      	cmp	r3, #48	@ 0x30
 800513e:	d016      	beq.n	800516e <UART_SetConfig+0x1b2>
 8005140:	2b30      	cmp	r3, #48	@ 0x30
 8005142:	d818      	bhi.n	8005176 <UART_SetConfig+0x1ba>
 8005144:	2b20      	cmp	r3, #32
 8005146:	d00a      	beq.n	800515e <UART_SetConfig+0x1a2>
 8005148:	2b20      	cmp	r3, #32
 800514a:	d814      	bhi.n	8005176 <UART_SetConfig+0x1ba>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <UART_SetConfig+0x19a>
 8005150:	2b10      	cmp	r3, #16
 8005152:	d008      	beq.n	8005166 <UART_SetConfig+0x1aa>
 8005154:	e00f      	b.n	8005176 <UART_SetConfig+0x1ba>
 8005156:	2300      	movs	r3, #0
 8005158:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515c:	e0ad      	b.n	80052ba <UART_SetConfig+0x2fe>
 800515e:	2302      	movs	r3, #2
 8005160:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005164:	e0a9      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005166:	2304      	movs	r3, #4
 8005168:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516c:	e0a5      	b.n	80052ba <UART_SetConfig+0x2fe>
 800516e:	2308      	movs	r3, #8
 8005170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005174:	e0a1      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005176:	2310      	movs	r3, #16
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517c:	e09d      	b.n	80052ba <UART_SetConfig+0x2fe>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4a      	ldr	r2, [pc, #296]	@ (80052ac <UART_SetConfig+0x2f0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d125      	bne.n	80051d4 <UART_SetConfig+0x218>
 8005188:	4b45      	ldr	r3, [pc, #276]	@ (80052a0 <UART_SetConfig+0x2e4>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005192:	2bc0      	cmp	r3, #192	@ 0xc0
 8005194:	d016      	beq.n	80051c4 <UART_SetConfig+0x208>
 8005196:	2bc0      	cmp	r3, #192	@ 0xc0
 8005198:	d818      	bhi.n	80051cc <UART_SetConfig+0x210>
 800519a:	2b80      	cmp	r3, #128	@ 0x80
 800519c:	d00a      	beq.n	80051b4 <UART_SetConfig+0x1f8>
 800519e:	2b80      	cmp	r3, #128	@ 0x80
 80051a0:	d814      	bhi.n	80051cc <UART_SetConfig+0x210>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <UART_SetConfig+0x1f0>
 80051a6:	2b40      	cmp	r3, #64	@ 0x40
 80051a8:	d008      	beq.n	80051bc <UART_SetConfig+0x200>
 80051aa:	e00f      	b.n	80051cc <UART_SetConfig+0x210>
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b2:	e082      	b.n	80052ba <UART_SetConfig+0x2fe>
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ba:	e07e      	b.n	80052ba <UART_SetConfig+0x2fe>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c2:	e07a      	b.n	80052ba <UART_SetConfig+0x2fe>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e076      	b.n	80052ba <UART_SetConfig+0x2fe>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e072      	b.n	80052ba <UART_SetConfig+0x2fe>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a35      	ldr	r2, [pc, #212]	@ (80052b0 <UART_SetConfig+0x2f4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d12a      	bne.n	8005234 <UART_SetConfig+0x278>
 80051de:	4b30      	ldr	r3, [pc, #192]	@ (80052a0 <UART_SetConfig+0x2e4>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ec:	d01a      	beq.n	8005224 <UART_SetConfig+0x268>
 80051ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f2:	d81b      	bhi.n	800522c <UART_SetConfig+0x270>
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f8:	d00c      	beq.n	8005214 <UART_SetConfig+0x258>
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fe:	d815      	bhi.n	800522c <UART_SetConfig+0x270>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <UART_SetConfig+0x250>
 8005204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005208:	d008      	beq.n	800521c <UART_SetConfig+0x260>
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x270>
 800520c:	2300      	movs	r3, #0
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005212:	e052      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005214:	2302      	movs	r3, #2
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521a:	e04e      	b.n	80052ba <UART_SetConfig+0x2fe>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005222:	e04a      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522a:	e046      	b.n	80052ba <UART_SetConfig+0x2fe>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005232:	e042      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a17      	ldr	r2, [pc, #92]	@ (8005298 <UART_SetConfig+0x2dc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d13a      	bne.n	80052b4 <UART_SetConfig+0x2f8>
 800523e:	4b18      	ldr	r3, [pc, #96]	@ (80052a0 <UART_SetConfig+0x2e4>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005244:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005248:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800524c:	d01a      	beq.n	8005284 <UART_SetConfig+0x2c8>
 800524e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005252:	d81b      	bhi.n	800528c <UART_SetConfig+0x2d0>
 8005254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005258:	d00c      	beq.n	8005274 <UART_SetConfig+0x2b8>
 800525a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800525e:	d815      	bhi.n	800528c <UART_SetConfig+0x2d0>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <UART_SetConfig+0x2b0>
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005268:	d008      	beq.n	800527c <UART_SetConfig+0x2c0>
 800526a:	e00f      	b.n	800528c <UART_SetConfig+0x2d0>
 800526c:	2300      	movs	r3, #0
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e022      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005274:	2302      	movs	r3, #2
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e01e      	b.n	80052ba <UART_SetConfig+0x2fe>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005282:	e01a      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528a:	e016      	b.n	80052ba <UART_SetConfig+0x2fe>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005292:	e012      	b.n	80052ba <UART_SetConfig+0x2fe>
 8005294:	cfff69f3 	.word	0xcfff69f3
 8005298:	40008000 	.word	0x40008000
 800529c:	40013800 	.word	0x40013800
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40004400 	.word	0x40004400
 80052a8:	40004800 	.word	0x40004800
 80052ac:	40004c00 	.word	0x40004c00
 80052b0:	40005000 	.word	0x40005000
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4aae      	ldr	r2, [pc, #696]	@ (8005578 <UART_SetConfig+0x5bc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	f040 8097 	bne.w	80053f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d823      	bhi.n	8005316 <UART_SetConfig+0x35a>
 80052ce:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <UART_SetConfig+0x318>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005307 	.word	0x08005307
 80052e8:	08005317 	.word	0x08005317
 80052ec:	08005317 	.word	0x08005317
 80052f0:	08005317 	.word	0x08005317
 80052f4:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fd ff08 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 80052fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052fe:	e010      	b.n	8005322 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b9e      	ldr	r3, [pc, #632]	@ (800557c <UART_SetConfig+0x5c0>)
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005304:	e00d      	b.n	8005322 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fd fe93 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800530a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800530c:	e009      	b.n	8005322 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005314:	e005      	b.n	8005322 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8130 	beq.w	800558a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	4a94      	ldr	r2, [pc, #592]	@ (8005580 <UART_SetConfig+0x5c4>)
 8005330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005334:	461a      	mov	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	fbb3 f3f2 	udiv	r3, r3, r2
 800533c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	4413      	add	r3, r2
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	429a      	cmp	r2, r3
 800534c:	d305      	bcc.n	800535a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	429a      	cmp	r2, r3
 8005358:	d903      	bls.n	8005362 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005360:	e113      	b.n	800558a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	2200      	movs	r2, #0
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	60fa      	str	r2, [r7, #12]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	4a84      	ldr	r2, [pc, #528]	@ (8005580 <UART_SetConfig+0x5c4>)
 8005370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005374:	b29b      	uxth	r3, r3
 8005376:	2200      	movs	r2, #0
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005384:	f7fa ffa4 	bl	80002d0 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	020b      	lsls	r3, r1, #8
 800539a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800539e:	0202      	lsls	r2, r0, #8
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	6849      	ldr	r1, [r1, #4]
 80053a4:	0849      	lsrs	r1, r1, #1
 80053a6:	2000      	movs	r0, #0
 80053a8:	460c      	mov	r4, r1
 80053aa:	4605      	mov	r5, r0
 80053ac:	eb12 0804 	adds.w	r8, r2, r4
 80053b0:	eb43 0905 	adc.w	r9, r3, r5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	469a      	mov	sl, r3
 80053bc:	4693      	mov	fp, r2
 80053be:	4652      	mov	r2, sl
 80053c0:	465b      	mov	r3, fp
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fa ff83 	bl	80002d0 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4613      	mov	r3, r2
 80053d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d8:	d308      	bcc.n	80053ec <UART_SetConfig+0x430>
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053e0:	d204      	bcs.n	80053ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e0ce      	b.n	800558a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053f2:	e0ca      	b.n	800558a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053fc:	d166      	bne.n	80054cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005402:	2b08      	cmp	r3, #8
 8005404:	d827      	bhi.n	8005456 <UART_SetConfig+0x49a>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <UART_SetConfig+0x450>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005431 	.word	0x08005431
 8005410:	08005439 	.word	0x08005439
 8005414:	08005441 	.word	0x08005441
 8005418:	08005457 	.word	0x08005457
 800541c:	08005447 	.word	0x08005447
 8005420:	08005457 	.word	0x08005457
 8005424:	08005457 	.word	0x08005457
 8005428:	08005457 	.word	0x08005457
 800542c:	0800544f 	.word	0x0800544f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005430:	f7fd fe6c 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 8005434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005436:	e014      	b.n	8005462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005438:	f7fd fe7e 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 800543c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800543e:	e010      	b.n	8005462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005440:	4b4e      	ldr	r3, [pc, #312]	@ (800557c <UART_SetConfig+0x5c0>)
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005444:	e00d      	b.n	8005462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005446:	f7fd fdf3 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800544a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800544c:	e009      	b.n	8005462 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005454:	e005      	b.n	8005462 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8090 	beq.w	800558a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	4a44      	ldr	r2, [pc, #272]	@ (8005580 <UART_SetConfig+0x5c4>)
 8005470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005474:	461a      	mov	r2, r3
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	fbb3 f3f2 	udiv	r3, r3, r2
 800547c:	005a      	lsls	r2, r3, #1
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	441a      	add	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d916      	bls.n	80054c4 <UART_SetConfig+0x508>
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549c:	d212      	bcs.n	80054c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f023 030f 	bic.w	r3, r3, #15
 80054a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	8bfb      	ldrh	r3, [r7, #30]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	8bfa      	ldrh	r2, [r7, #30]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e062      	b.n	800558a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054ca:	e05e      	b.n	800558a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d828      	bhi.n	8005526 <UART_SetConfig+0x56a>
 80054d4:	a201      	add	r2, pc, #4	@ (adr r2, 80054dc <UART_SetConfig+0x520>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005509 	.word	0x08005509
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005527 	.word	0x08005527
 80054ec:	08005517 	.word	0x08005517
 80054f0:	08005527 	.word	0x08005527
 80054f4:	08005527 	.word	0x08005527
 80054f8:	08005527 	.word	0x08005527
 80054fc:	0800551f 	.word	0x0800551f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005500:	f7fd fe04 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 8005504:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005506:	e014      	b.n	8005532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005508:	f7fd fe16 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 800550c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800550e:	e010      	b.n	8005532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005510:	4b1a      	ldr	r3, [pc, #104]	@ (800557c <UART_SetConfig+0x5c0>)
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005514:	e00d      	b.n	8005532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005516:	f7fd fd8b 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800551a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800551c:	e009      	b.n	8005532 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005524:	e005      	b.n	8005532 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005530:	bf00      	nop
    }

    if (pclk != 0U)
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <UART_SetConfig+0x5c4>)
 800553e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005542:	461a      	mov	r2, r3
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	fbb3 f2f2 	udiv	r2, r3, r2
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	441a      	add	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d910      	bls.n	8005584 <UART_SetConfig+0x5c8>
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005568:	d20c      	bcs.n	8005584 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	b29a      	uxth	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	e009      	b.n	800558a <UART_SetConfig+0x5ce>
 8005576:	bf00      	nop
 8005578:	40008000 	.word	0x40008000
 800557c:	00f42400 	.word	0x00f42400
 8005580:	0800751c 	.word	0x0800751c
      }
      else
      {
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2201      	movs	r2, #1
 800558e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2201      	movs	r2, #1
 8005596:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3730      	adds	r7, #48	@ 0x30
 80055ae:	46bd      	mov	sp, r7
 80055b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080055b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01a      	beq.n	80056ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b2:	d10a      	bne.n	80056ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b098      	sub	sp, #96	@ 0x60
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005708:	f7fc fc3e 	bl	8001f88 <HAL_GetTick>
 800570c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b08      	cmp	r3, #8
 800571a:	d12f      	bne.n	800577c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800571c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005724:	2200      	movs	r2, #0
 8005726:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f88e 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d022      	beq.n	800577c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800574a:	653b      	str	r3, [r7, #80]	@ 0x50
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005754:	647b      	str	r3, [r7, #68]	@ 0x44
 8005756:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800575a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e6      	bne.n	8005736 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e063      	b.n	8005844 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d149      	bne.n	800581e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005792:	2200      	movs	r2, #0
 8005794:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f857 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d03c      	beq.n	800581e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	623b      	str	r3, [r7, #32]
   return(result);
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e6      	bne.n	80057a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057f6:	61fa      	str	r2, [r7, #28]
 80057f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	617b      	str	r3, [r7, #20]
   return(result);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e5      	bne.n	80057d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e012      	b.n	8005844 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3758      	adds	r7, #88	@ 0x58
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585c:	e04f      	b.n	80058fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005864:	d04b      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005866:	f7fc fb8f 	bl	8001f88 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	429a      	cmp	r2, r3
 8005874:	d302      	bcc.n	800587c <UART_WaitOnFlagUntilTimeout+0x30>
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e04e      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d037      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b80      	cmp	r3, #128	@ 0x80
 8005892:	d034      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	d031      	beq.n	80058fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d110      	bne.n	80058ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2208      	movs	r2, #8
 80058ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f838 	bl	8005926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2208      	movs	r2, #8
 80058ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e029      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d8:	d111      	bne.n	80058fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f81e 	bl	8005926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e00f      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4013      	ands	r3, r2
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	429a      	cmp	r2, r3
 800591a:	d0a0      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005926:	b480      	push	{r7}
 8005928:	b095      	sub	sp, #84	@ 0x54
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594c:	643b      	str	r3, [r7, #64]	@ 0x40
 800594e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005984:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800598a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e3      	bne.n	8005960 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d118      	bne.n	80059d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f023 0310 	bic.w	r3, r3, #16
 80059b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6979      	ldr	r1, [r7, #20]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	613b      	str	r3, [r7, #16]
   return(result);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e6      	bne.n	80059a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059e6:	bf00      	nop
 80059e8:	3754      	adds	r7, #84	@ 0x54
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e027      	b.n	8005a58 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	@ 0x24
 8005a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e02d      	b.n	8005ad8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	@ 0x24
 8005a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f84f 	bl	8005b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e02d      	b.n	8005b54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	@ 0x24
 8005b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f811 	bl	8005b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d108      	bne.n	8005b7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b7c:	e031      	b.n	8005be2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b7e:	2308      	movs	r3, #8
 8005b80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b82:	2308      	movs	r3, #8
 8005b84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	0e5b      	lsrs	r3, r3, #25
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	0f5b      	lsrs	r3, r3, #29
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	7b3a      	ldrb	r2, [r7, #12]
 8005baa:	4911      	ldr	r1, [pc, #68]	@ (8005bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8005bac:	5c8a      	ldrb	r2, [r1, r2]
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bb2:	7b3a      	ldrb	r2, [r7, #12]
 8005bb4:	490f      	ldr	r1, [pc, #60]	@ (8005bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8005bb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	7b7a      	ldrb	r2, [r7, #13]
 8005bc8:	4909      	ldr	r1, [pc, #36]	@ (8005bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8005bca:	5c8a      	ldrb	r2, [r1, r2]
 8005bcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bd0:	7b7a      	ldrb	r2, [r7, #13]
 8005bd2:	4908      	ldr	r1, [pc, #32]	@ (8005bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8005bd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	08007534 	.word	0x08007534
 8005bf4:	0800753c 	.word	0x0800753c

08005bf8 <siscanf>:
 8005bf8:	b40e      	push	{r1, r2, r3}
 8005bfa:	b530      	push	{r4, r5, lr}
 8005bfc:	b09c      	sub	sp, #112	@ 0x70
 8005bfe:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005c00:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005c04:	f854 5b04 	ldr.w	r5, [r4], #4
 8005c08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005c0c:	9002      	str	r0, [sp, #8]
 8005c0e:	9006      	str	r0, [sp, #24]
 8005c10:	f7fa fb06 	bl	8000220 <strlen>
 8005c14:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <siscanf+0x4c>)
 8005c16:	9003      	str	r0, [sp, #12]
 8005c18:	9007      	str	r0, [sp, #28]
 8005c1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c1c:	480a      	ldr	r0, [pc, #40]	@ (8005c48 <siscanf+0x50>)
 8005c1e:	9401      	str	r4, [sp, #4]
 8005c20:	2300      	movs	r3, #0
 8005c22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c24:	9314      	str	r3, [sp, #80]	@ 0x50
 8005c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c2e:	462a      	mov	r2, r5
 8005c30:	4623      	mov	r3, r4
 8005c32:	a902      	add	r1, sp, #8
 8005c34:	6800      	ldr	r0, [r0, #0]
 8005c36:	f000 fa41 	bl	80060bc <__ssvfiscanf_r>
 8005c3a:	b01c      	add	sp, #112	@ 0x70
 8005c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c40:	b003      	add	sp, #12
 8005c42:	4770      	bx	lr
 8005c44:	08005c6f 	.word	0x08005c6f
 8005c48:	20000030 	.word	0x20000030

08005c4c <__sread>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	460c      	mov	r4, r1
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	f000 f93e 	bl	8005ed4 <_read_r>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	bfab      	itete	ge
 8005c5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c60:	181b      	addge	r3, r3, r0
 8005c62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c66:	bfac      	ite	ge
 8005c68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c6a:	81a3      	strhlt	r3, [r4, #12]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__seofread>:
 8005c6e:	2000      	movs	r0, #0
 8005c70:	4770      	bx	lr

08005c72 <__swrite>:
 8005c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	461f      	mov	r7, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	4616      	mov	r6, r2
 8005c82:	d505      	bpl.n	8005c90 <__swrite+0x1e>
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f910 	bl	8005eb0 <_lseek_r>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f000 b927 	b.w	8005ef8 <_write_r>

08005caa <__sseek>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 f8fd 	bl	8005eb0 <_lseek_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	bf15      	itete	ne
 8005cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cc6:	81a3      	strheq	r3, [r4, #12]
 8005cc8:	bf18      	it	ne
 8005cca:	81a3      	strhne	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__sclose>:
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 b8dd 	b.w	8005e90 <_close_r>
	...

08005cd8 <std>:
 8005cd8:	2300      	movs	r3, #0
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	4604      	mov	r4, r0
 8005cde:	e9c0 3300 	strd	r3, r3, [r0]
 8005ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ce6:	6083      	str	r3, [r0, #8]
 8005ce8:	8181      	strh	r1, [r0, #12]
 8005cea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cec:	81c2      	strh	r2, [r0, #14]
 8005cee:	6183      	str	r3, [r0, #24]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	305c      	adds	r0, #92	@ 0x5c
 8005cf6:	f000 f8c3 	bl	8005e80 <memset>
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <std+0x58>)
 8005cfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <std+0x5c>)
 8005d00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x60>)
 8005d04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <std+0x64>)
 8005d08:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <std+0x68>)
 8005d0c:	6224      	str	r4, [r4, #32]
 8005d0e:	429c      	cmp	r4, r3
 8005d10:	d006      	beq.n	8005d20 <std+0x48>
 8005d12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d16:	4294      	cmp	r4, r2
 8005d18:	d002      	beq.n	8005d20 <std+0x48>
 8005d1a:	33d0      	adds	r3, #208	@ 0xd0
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d105      	bne.n	8005d2c <std+0x54>
 8005d20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d28:	f000 b922 	b.w	8005f70 <__retarget_lock_init_recursive>
 8005d2c:	bd10      	pop	{r4, pc}
 8005d2e:	bf00      	nop
 8005d30:	08005c4d 	.word	0x08005c4d
 8005d34:	08005c73 	.word	0x08005c73
 8005d38:	08005cab 	.word	0x08005cab
 8005d3c:	08005ccf 	.word	0x08005ccf
 8005d40:	200004d0 	.word	0x200004d0

08005d44 <stdio_exit_handler>:
 8005d44:	4a02      	ldr	r2, [pc, #8]	@ (8005d50 <stdio_exit_handler+0xc>)
 8005d46:	4903      	ldr	r1, [pc, #12]	@ (8005d54 <stdio_exit_handler+0x10>)
 8005d48:	4803      	ldr	r0, [pc, #12]	@ (8005d58 <stdio_exit_handler+0x14>)
 8005d4a:	f000 b869 	b.w	8005e20 <_fwalk_sglue>
 8005d4e:	bf00      	nop
 8005d50:	20000024 	.word	0x20000024
 8005d54:	08006ea1 	.word	0x08006ea1
 8005d58:	20000034 	.word	0x20000034

08005d5c <cleanup_stdio>:
 8005d5c:	6841      	ldr	r1, [r0, #4]
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <cleanup_stdio+0x34>)
 8005d60:	4299      	cmp	r1, r3
 8005d62:	b510      	push	{r4, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	d001      	beq.n	8005d6c <cleanup_stdio+0x10>
 8005d68:	f001 f89a 	bl	8006ea0 <_fflush_r>
 8005d6c:	68a1      	ldr	r1, [r4, #8]
 8005d6e:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <cleanup_stdio+0x38>)
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d002      	beq.n	8005d7a <cleanup_stdio+0x1e>
 8005d74:	4620      	mov	r0, r4
 8005d76:	f001 f893 	bl	8006ea0 <_fflush_r>
 8005d7a:	68e1      	ldr	r1, [r4, #12]
 8005d7c:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <cleanup_stdio+0x3c>)
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	d004      	beq.n	8005d8c <cleanup_stdio+0x30>
 8005d82:	4620      	mov	r0, r4
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d88:	f001 b88a 	b.w	8006ea0 <_fflush_r>
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	bf00      	nop
 8005d90:	200004d0 	.word	0x200004d0
 8005d94:	20000538 	.word	0x20000538
 8005d98:	200005a0 	.word	0x200005a0

08005d9c <global_stdio_init.part.0>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <global_stdio_init.part.0+0x30>)
 8005da0:	4c0b      	ldr	r4, [pc, #44]	@ (8005dd0 <global_stdio_init.part.0+0x34>)
 8005da2:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd4 <global_stdio_init.part.0+0x38>)
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	4620      	mov	r0, r4
 8005da8:	2200      	movs	r2, #0
 8005daa:	2104      	movs	r1, #4
 8005dac:	f7ff ff94 	bl	8005cd8 <std>
 8005db0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005db4:	2201      	movs	r2, #1
 8005db6:	2109      	movs	r1, #9
 8005db8:	f7ff ff8e 	bl	8005cd8 <std>
 8005dbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc6:	2112      	movs	r1, #18
 8005dc8:	f7ff bf86 	b.w	8005cd8 <std>
 8005dcc:	20000608 	.word	0x20000608
 8005dd0:	200004d0 	.word	0x200004d0
 8005dd4:	08005d45 	.word	0x08005d45

08005dd8 <__sfp_lock_acquire>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__sfp_lock_acquire+0x8>)
 8005dda:	f000 b8ca 	b.w	8005f72 <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000611 	.word	0x20000611

08005de4 <__sfp_lock_release>:
 8005de4:	4801      	ldr	r0, [pc, #4]	@ (8005dec <__sfp_lock_release+0x8>)
 8005de6:	f000 b8c5 	b.w	8005f74 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	20000611 	.word	0x20000611

08005df0 <__sinit>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	f7ff fff0 	bl	8005dd8 <__sfp_lock_acquire>
 8005df8:	6a23      	ldr	r3, [r4, #32]
 8005dfa:	b11b      	cbz	r3, 8005e04 <__sinit+0x14>
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e00:	f7ff bff0 	b.w	8005de4 <__sfp_lock_release>
 8005e04:	4b04      	ldr	r3, [pc, #16]	@ (8005e18 <__sinit+0x28>)
 8005e06:	6223      	str	r3, [r4, #32]
 8005e08:	4b04      	ldr	r3, [pc, #16]	@ (8005e1c <__sinit+0x2c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f5      	bne.n	8005dfc <__sinit+0xc>
 8005e10:	f7ff ffc4 	bl	8005d9c <global_stdio_init.part.0>
 8005e14:	e7f2      	b.n	8005dfc <__sinit+0xc>
 8005e16:	bf00      	nop
 8005e18:	08005d5d 	.word	0x08005d5d
 8005e1c:	20000608 	.word	0x20000608

08005e20 <_fwalk_sglue>:
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	4607      	mov	r7, r0
 8005e26:	4688      	mov	r8, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e30:	f1b9 0901 	subs.w	r9, r9, #1
 8005e34:	d505      	bpl.n	8005e42 <_fwalk_sglue+0x22>
 8005e36:	6824      	ldr	r4, [r4, #0]
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d1f7      	bne.n	8005e2c <_fwalk_sglue+0xc>
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e42:	89ab      	ldrh	r3, [r5, #12]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d907      	bls.n	8005e58 <_fwalk_sglue+0x38>
 8005e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	d003      	beq.n	8005e58 <_fwalk_sglue+0x38>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	4306      	orrs	r6, r0
 8005e58:	3568      	adds	r5, #104	@ 0x68
 8005e5a:	e7e9      	b.n	8005e30 <_fwalk_sglue+0x10>

08005e5c <iprintf>:
 8005e5c:	b40f      	push	{r0, r1, r2, r3}
 8005e5e:	b507      	push	{r0, r1, r2, lr}
 8005e60:	4906      	ldr	r1, [pc, #24]	@ (8005e7c <iprintf+0x20>)
 8005e62:	ab04      	add	r3, sp, #16
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6a:	6881      	ldr	r1, [r0, #8]
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	f000 fac3 	bl	80063f8 <_vfiprintf_r>
 8005e72:	b003      	add	sp, #12
 8005e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e78:	b004      	add	sp, #16
 8005e7a:	4770      	bx	lr
 8005e7c:	20000030 	.word	0x20000030

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <_close_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	@ (8005eac <_close_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fb fdb5 	bl	8001a0a <_close>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_close_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_close_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	2000060c 	.word	0x2000060c

08005eb0 <_lseek_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	@ (8005ed0 <_lseek_r+0x20>)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4611      	mov	r1, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb fdca 	bl	8001a58 <_lseek>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_lseek_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_lseek_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	2000060c 	.word	0x2000060c

08005ed4 <_read_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d07      	ldr	r5, [pc, #28]	@ (8005ef4 <_read_r+0x20>)
 8005ed8:	4604      	mov	r4, r0
 8005eda:	4608      	mov	r0, r1
 8005edc:	4611      	mov	r1, r2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	602a      	str	r2, [r5, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f7fb fd58 	bl	8001998 <_read>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_read_r+0x1e>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_read_r+0x1e>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	2000060c 	.word	0x2000060c

08005ef8 <_write_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	@ (8005f18 <_write_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb fd63 	bl	80019d2 <_write>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_write_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_write_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	2000060c 	.word	0x2000060c

08005f1c <__errno>:
 8005f1c:	4b01      	ldr	r3, [pc, #4]	@ (8005f24 <__errno+0x8>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000030 	.word	0x20000030

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005f60 <__libc_init_array+0x38>)
 8005f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005f64 <__libc_init_array+0x3c>)
 8005f2e:	1b64      	subs	r4, r4, r5
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	2600      	movs	r6, #0
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	4d0b      	ldr	r5, [pc, #44]	@ (8005f68 <__libc_init_array+0x40>)
 8005f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f6c <__libc_init_array+0x44>)
 8005f3c:	f001 fa76 	bl	800742c <_init>
 8005f40:	1b64      	subs	r4, r4, r5
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	2600      	movs	r6, #0
 8005f46:	42a6      	cmp	r6, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f50:	4798      	blx	r3
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5a:	4798      	blx	r3
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	0800769c 	.word	0x0800769c
 8005f64:	0800769c 	.word	0x0800769c
 8005f68:	0800769c 	.word	0x0800769c
 8005f6c:	080076a0 	.word	0x080076a0

08005f70 <__retarget_lock_init_recursive>:
 8005f70:	4770      	bx	lr

08005f72 <__retarget_lock_acquire_recursive>:
 8005f72:	4770      	bx	lr

08005f74 <__retarget_lock_release_recursive>:
 8005f74:	4770      	bx	lr
	...

08005f78 <_free_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	d041      	beq.n	8006004 <_free_r+0x8c>
 8005f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f84:	1f0c      	subs	r4, r1, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfb8      	it	lt
 8005f8a:	18e4      	addlt	r4, r4, r3
 8005f8c:	f000 ffb0 	bl	8006ef0 <__malloc_lock>
 8005f90:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <_free_r+0x90>)
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	b933      	cbnz	r3, 8005fa4 <_free_r+0x2c>
 8005f96:	6063      	str	r3, [r4, #4]
 8005f98:	6014      	str	r4, [r2, #0]
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa0:	f000 bfac 	b.w	8006efc <__malloc_unlock>
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d908      	bls.n	8005fba <_free_r+0x42>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	1821      	adds	r1, r4, r0
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf01      	itttt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	1809      	addeq	r1, r1, r0
 8005fb6:	6021      	streq	r1, [r4, #0]
 8005fb8:	e7ed      	b.n	8005f96 <_free_r+0x1e>
 8005fba:	461a      	mov	r2, r3
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b10b      	cbz	r3, 8005fc4 <_free_r+0x4c>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d9fa      	bls.n	8005fba <_free_r+0x42>
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	1850      	adds	r0, r2, r1
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d10b      	bne.n	8005fe4 <_free_r+0x6c>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	4401      	add	r1, r0
 8005fd0:	1850      	adds	r0, r2, r1
 8005fd2:	4283      	cmp	r3, r0
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	d1e0      	bne.n	8005f9a <_free_r+0x22>
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	6053      	str	r3, [r2, #4]
 8005fde:	4408      	add	r0, r1
 8005fe0:	6010      	str	r0, [r2, #0]
 8005fe2:	e7da      	b.n	8005f9a <_free_r+0x22>
 8005fe4:	d902      	bls.n	8005fec <_free_r+0x74>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	e7d6      	b.n	8005f9a <_free_r+0x22>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf04      	itt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	bf04      	itt	eq
 8005ffc:	1809      	addeq	r1, r1, r0
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	6054      	str	r4, [r2, #4]
 8006002:	e7ca      	b.n	8005f9a <_free_r+0x22>
 8006004:	bd38      	pop	{r3, r4, r5, pc}
 8006006:	bf00      	nop
 8006008:	20000618 	.word	0x20000618

0800600c <_sungetc_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	1c4b      	adds	r3, r1, #1
 8006010:	4614      	mov	r4, r2
 8006012:	d103      	bne.n	800601c <_sungetc_r+0x10>
 8006014:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006018:	4628      	mov	r0, r5
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	8993      	ldrh	r3, [r2, #12]
 800601e:	f023 0320 	bic.w	r3, r3, #32
 8006022:	8193      	strh	r3, [r2, #12]
 8006024:	6853      	ldr	r3, [r2, #4]
 8006026:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006028:	b2cd      	uxtb	r5, r1
 800602a:	b18a      	cbz	r2, 8006050 <_sungetc_r+0x44>
 800602c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800602e:	429a      	cmp	r2, r3
 8006030:	dd08      	ble.n	8006044 <_sungetc_r+0x38>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	1e5a      	subs	r2, r3, #1
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	f803 5c01 	strb.w	r5, [r3, #-1]
 800603c:	6863      	ldr	r3, [r4, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	e7e9      	b.n	8006018 <_sungetc_r+0xc>
 8006044:	4621      	mov	r1, r4
 8006046:	f000 ff5f 	bl	8006f08 <__submore>
 800604a:	2800      	cmp	r0, #0
 800604c:	d0f1      	beq.n	8006032 <_sungetc_r+0x26>
 800604e:	e7e1      	b.n	8006014 <_sungetc_r+0x8>
 8006050:	6921      	ldr	r1, [r4, #16]
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	b141      	cbz	r1, 8006068 <_sungetc_r+0x5c>
 8006056:	4291      	cmp	r1, r2
 8006058:	d206      	bcs.n	8006068 <_sungetc_r+0x5c>
 800605a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800605e:	42a9      	cmp	r1, r5
 8006060:	d102      	bne.n	8006068 <_sungetc_r+0x5c>
 8006062:	3a01      	subs	r2, #1
 8006064:	6022      	str	r2, [r4, #0]
 8006066:	e7ea      	b.n	800603e <_sungetc_r+0x32>
 8006068:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800606c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006070:	6363      	str	r3, [r4, #52]	@ 0x34
 8006072:	2303      	movs	r3, #3
 8006074:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006076:	4623      	mov	r3, r4
 8006078:	f803 5f46 	strb.w	r5, [r3, #70]!
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	2301      	movs	r3, #1
 8006080:	e7de      	b.n	8006040 <_sungetc_r+0x34>

08006082 <__ssrefill_r>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006088:	b169      	cbz	r1, 80060a6 <__ssrefill_r+0x24>
 800608a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800608e:	4299      	cmp	r1, r3
 8006090:	d001      	beq.n	8006096 <__ssrefill_r+0x14>
 8006092:	f7ff ff71 	bl	8005f78 <_free_r>
 8006096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006098:	6063      	str	r3, [r4, #4]
 800609a:	2000      	movs	r0, #0
 800609c:	6360      	str	r0, [r4, #52]	@ 0x34
 800609e:	b113      	cbz	r3, 80060a6 <__ssrefill_r+0x24>
 80060a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	2300      	movs	r3, #0
 80060ac:	6063      	str	r3, [r4, #4]
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	f043 0320 	orr.w	r3, r3, #32
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060ba:	e7f3      	b.n	80060a4 <__ssrefill_r+0x22>

080060bc <__ssvfiscanf_r>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80060c6:	2100      	movs	r1, #0
 80060c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80060cc:	49a5      	ldr	r1, [pc, #660]	@ (8006364 <__ssvfiscanf_r+0x2a8>)
 80060ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 80060d0:	f10d 0804 	add.w	r8, sp, #4
 80060d4:	49a4      	ldr	r1, [pc, #656]	@ (8006368 <__ssvfiscanf_r+0x2ac>)
 80060d6:	4fa5      	ldr	r7, [pc, #660]	@ (800636c <__ssvfiscanf_r+0x2b0>)
 80060d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80060dc:	4606      	mov	r6, r0
 80060de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	7813      	ldrb	r3, [r2, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8158 	beq.w	800639a <__ssvfiscanf_r+0x2de>
 80060ea:	5cf9      	ldrb	r1, [r7, r3]
 80060ec:	f011 0108 	ands.w	r1, r1, #8
 80060f0:	f102 0501 	add.w	r5, r2, #1
 80060f4:	d019      	beq.n	800612a <__ssvfiscanf_r+0x6e>
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dd0f      	ble.n	800611c <__ssvfiscanf_r+0x60>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	5cba      	ldrb	r2, [r7, r2]
 8006102:	0712      	lsls	r2, r2, #28
 8006104:	d401      	bmi.n	800610a <__ssvfiscanf_r+0x4e>
 8006106:	462a      	mov	r2, r5
 8006108:	e7eb      	b.n	80060e2 <__ssvfiscanf_r+0x26>
 800610a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800610c:	3201      	adds	r2, #1
 800610e:	9245      	str	r2, [sp, #276]	@ 0x114
 8006110:	6862      	ldr	r2, [r4, #4]
 8006112:	3301      	adds	r3, #1
 8006114:	3a01      	subs	r2, #1
 8006116:	6062      	str	r2, [r4, #4]
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	e7ec      	b.n	80060f6 <__ssvfiscanf_r+0x3a>
 800611c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800611e:	4621      	mov	r1, r4
 8006120:	4630      	mov	r0, r6
 8006122:	4798      	blx	r3
 8006124:	2800      	cmp	r0, #0
 8006126:	d0e9      	beq.n	80060fc <__ssvfiscanf_r+0x40>
 8006128:	e7ed      	b.n	8006106 <__ssvfiscanf_r+0x4a>
 800612a:	2b25      	cmp	r3, #37	@ 0x25
 800612c:	d012      	beq.n	8006154 <__ssvfiscanf_r+0x98>
 800612e:	4699      	mov	r9, r3
 8006130:	6863      	ldr	r3, [r4, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f340 8093 	ble.w	800625e <__ssvfiscanf_r+0x1a2>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	7813      	ldrb	r3, [r2, #0]
 800613c:	454b      	cmp	r3, r9
 800613e:	f040 812c 	bne.w	800639a <__ssvfiscanf_r+0x2de>
 8006142:	6863      	ldr	r3, [r4, #4]
 8006144:	3b01      	subs	r3, #1
 8006146:	6063      	str	r3, [r4, #4]
 8006148:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800614a:	3201      	adds	r2, #1
 800614c:	3301      	adds	r3, #1
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	9345      	str	r3, [sp, #276]	@ 0x114
 8006152:	e7d8      	b.n	8006106 <__ssvfiscanf_r+0x4a>
 8006154:	9141      	str	r1, [sp, #260]	@ 0x104
 8006156:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006158:	7853      	ldrb	r3, [r2, #1]
 800615a:	2b2a      	cmp	r3, #42	@ 0x2a
 800615c:	bf02      	ittt	eq
 800615e:	2310      	moveq	r3, #16
 8006160:	1c95      	addeq	r5, r2, #2
 8006162:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006164:	220a      	movs	r2, #10
 8006166:	46a9      	mov	r9, r5
 8006168:	f819 1b01 	ldrb.w	r1, [r9], #1
 800616c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006170:	2b09      	cmp	r3, #9
 8006172:	d91e      	bls.n	80061b2 <__ssvfiscanf_r+0xf6>
 8006174:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006370 <__ssvfiscanf_r+0x2b4>
 8006178:	2203      	movs	r2, #3
 800617a:	4650      	mov	r0, sl
 800617c:	f7fa f858 	bl	8000230 <memchr>
 8006180:	b138      	cbz	r0, 8006192 <__ssvfiscanf_r+0xd6>
 8006182:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006184:	eba0 000a 	sub.w	r0, r0, sl
 8006188:	2301      	movs	r3, #1
 800618a:	4083      	lsls	r3, r0
 800618c:	4313      	orrs	r3, r2
 800618e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006190:	464d      	mov	r5, r9
 8006192:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006196:	2b78      	cmp	r3, #120	@ 0x78
 8006198:	d806      	bhi.n	80061a8 <__ssvfiscanf_r+0xec>
 800619a:	2b57      	cmp	r3, #87	@ 0x57
 800619c:	d810      	bhi.n	80061c0 <__ssvfiscanf_r+0x104>
 800619e:	2b25      	cmp	r3, #37	@ 0x25
 80061a0:	d0c5      	beq.n	800612e <__ssvfiscanf_r+0x72>
 80061a2:	d857      	bhi.n	8006254 <__ssvfiscanf_r+0x198>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d065      	beq.n	8006274 <__ssvfiscanf_r+0x1b8>
 80061a8:	2303      	movs	r3, #3
 80061aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80061ac:	230a      	movs	r3, #10
 80061ae:	9342      	str	r3, [sp, #264]	@ 0x108
 80061b0:	e078      	b.n	80062a4 <__ssvfiscanf_r+0x1e8>
 80061b2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80061b4:	fb02 1103 	mla	r1, r2, r3, r1
 80061b8:	3930      	subs	r1, #48	@ 0x30
 80061ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80061bc:	464d      	mov	r5, r9
 80061be:	e7d2      	b.n	8006166 <__ssvfiscanf_r+0xaa>
 80061c0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80061c4:	2a20      	cmp	r2, #32
 80061c6:	d8ef      	bhi.n	80061a8 <__ssvfiscanf_r+0xec>
 80061c8:	a101      	add	r1, pc, #4	@ (adr r1, 80061d0 <__ssvfiscanf_r+0x114>)
 80061ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006283 	.word	0x08006283
 80061d4:	080061a9 	.word	0x080061a9
 80061d8:	080061a9 	.word	0x080061a9
 80061dc:	080062dd 	.word	0x080062dd
 80061e0:	080061a9 	.word	0x080061a9
 80061e4:	080061a9 	.word	0x080061a9
 80061e8:	080061a9 	.word	0x080061a9
 80061ec:	080061a9 	.word	0x080061a9
 80061f0:	080061a9 	.word	0x080061a9
 80061f4:	080061a9 	.word	0x080061a9
 80061f8:	080061a9 	.word	0x080061a9
 80061fc:	080062f3 	.word	0x080062f3
 8006200:	080062d9 	.word	0x080062d9
 8006204:	0800625b 	.word	0x0800625b
 8006208:	0800625b 	.word	0x0800625b
 800620c:	0800625b 	.word	0x0800625b
 8006210:	080061a9 	.word	0x080061a9
 8006214:	08006295 	.word	0x08006295
 8006218:	080061a9 	.word	0x080061a9
 800621c:	080061a9 	.word	0x080061a9
 8006220:	080061a9 	.word	0x080061a9
 8006224:	080061a9 	.word	0x080061a9
 8006228:	08006303 	.word	0x08006303
 800622c:	0800629d 	.word	0x0800629d
 8006230:	0800627b 	.word	0x0800627b
 8006234:	080061a9 	.word	0x080061a9
 8006238:	080061a9 	.word	0x080061a9
 800623c:	080062ff 	.word	0x080062ff
 8006240:	080061a9 	.word	0x080061a9
 8006244:	080062d9 	.word	0x080062d9
 8006248:	080061a9 	.word	0x080061a9
 800624c:	080061a9 	.word	0x080061a9
 8006250:	08006283 	.word	0x08006283
 8006254:	3b45      	subs	r3, #69	@ 0x45
 8006256:	2b02      	cmp	r3, #2
 8006258:	d8a6      	bhi.n	80061a8 <__ssvfiscanf_r+0xec>
 800625a:	2305      	movs	r3, #5
 800625c:	e021      	b.n	80062a2 <__ssvfiscanf_r+0x1e6>
 800625e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006260:	4621      	mov	r1, r4
 8006262:	4630      	mov	r0, r6
 8006264:	4798      	blx	r3
 8006266:	2800      	cmp	r0, #0
 8006268:	f43f af66 	beq.w	8006138 <__ssvfiscanf_r+0x7c>
 800626c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 808b 	bne.w	800638a <__ssvfiscanf_r+0x2ce>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006278:	e08b      	b.n	8006392 <__ssvfiscanf_r+0x2d6>
 800627a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800627c:	f042 0220 	orr.w	r2, r2, #32
 8006280:	9241      	str	r2, [sp, #260]	@ 0x104
 8006282:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006288:	9241      	str	r2, [sp, #260]	@ 0x104
 800628a:	2210      	movs	r2, #16
 800628c:	2b6e      	cmp	r3, #110	@ 0x6e
 800628e:	9242      	str	r2, [sp, #264]	@ 0x108
 8006290:	d902      	bls.n	8006298 <__ssvfiscanf_r+0x1dc>
 8006292:	e005      	b.n	80062a0 <__ssvfiscanf_r+0x1e4>
 8006294:	2300      	movs	r3, #0
 8006296:	9342      	str	r3, [sp, #264]	@ 0x108
 8006298:	2303      	movs	r3, #3
 800629a:	e002      	b.n	80062a2 <__ssvfiscanf_r+0x1e6>
 800629c:	2308      	movs	r3, #8
 800629e:	9342      	str	r3, [sp, #264]	@ 0x108
 80062a0:	2304      	movs	r3, #4
 80062a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80062a4:	6863      	ldr	r3, [r4, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dd39      	ble.n	800631e <__ssvfiscanf_r+0x262>
 80062aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062ac:	0659      	lsls	r1, r3, #25
 80062ae:	d404      	bmi.n	80062ba <__ssvfiscanf_r+0x1fe>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	781a      	ldrb	r2, [r3, #0]
 80062b4:	5cba      	ldrb	r2, [r7, r2]
 80062b6:	0712      	lsls	r2, r2, #28
 80062b8:	d438      	bmi.n	800632c <__ssvfiscanf_r+0x270>
 80062ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80062bc:	2b02      	cmp	r3, #2
 80062be:	dc47      	bgt.n	8006350 <__ssvfiscanf_r+0x294>
 80062c0:	466b      	mov	r3, sp
 80062c2:	4622      	mov	r2, r4
 80062c4:	a941      	add	r1, sp, #260	@ 0x104
 80062c6:	4630      	mov	r0, r6
 80062c8:	f000 fbde 	bl	8006a88 <_scanf_chars>
 80062cc:	2801      	cmp	r0, #1
 80062ce:	d064      	beq.n	800639a <__ssvfiscanf_r+0x2de>
 80062d0:	2802      	cmp	r0, #2
 80062d2:	f47f af18 	bne.w	8006106 <__ssvfiscanf_r+0x4a>
 80062d6:	e7c9      	b.n	800626c <__ssvfiscanf_r+0x1b0>
 80062d8:	220a      	movs	r2, #10
 80062da:	e7d7      	b.n	800628c <__ssvfiscanf_r+0x1d0>
 80062dc:	4629      	mov	r1, r5
 80062de:	4640      	mov	r0, r8
 80062e0:	f000 fd20 	bl	8006d24 <__sccl>
 80062e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80062ec:	4605      	mov	r5, r0
 80062ee:	2301      	movs	r3, #1
 80062f0:	e7d7      	b.n	80062a2 <__ssvfiscanf_r+0x1e6>
 80062f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80062f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80062fa:	2300      	movs	r3, #0
 80062fc:	e7d1      	b.n	80062a2 <__ssvfiscanf_r+0x1e6>
 80062fe:	2302      	movs	r3, #2
 8006300:	e7cf      	b.n	80062a2 <__ssvfiscanf_r+0x1e6>
 8006302:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006304:	06c3      	lsls	r3, r0, #27
 8006306:	f53f aefe 	bmi.w	8006106 <__ssvfiscanf_r+0x4a>
 800630a:	9b00      	ldr	r3, [sp, #0]
 800630c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800630e:	1d19      	adds	r1, r3, #4
 8006310:	9100      	str	r1, [sp, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	07c0      	lsls	r0, r0, #31
 8006316:	bf4c      	ite	mi
 8006318:	801a      	strhmi	r2, [r3, #0]
 800631a:	601a      	strpl	r2, [r3, #0]
 800631c:	e6f3      	b.n	8006106 <__ssvfiscanf_r+0x4a>
 800631e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006320:	4621      	mov	r1, r4
 8006322:	4630      	mov	r0, r6
 8006324:	4798      	blx	r3
 8006326:	2800      	cmp	r0, #0
 8006328:	d0bf      	beq.n	80062aa <__ssvfiscanf_r+0x1ee>
 800632a:	e79f      	b.n	800626c <__ssvfiscanf_r+0x1b0>
 800632c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800632e:	3201      	adds	r2, #1
 8006330:	9245      	str	r2, [sp, #276]	@ 0x114
 8006332:	6862      	ldr	r2, [r4, #4]
 8006334:	3a01      	subs	r2, #1
 8006336:	2a00      	cmp	r2, #0
 8006338:	6062      	str	r2, [r4, #4]
 800633a:	dd02      	ble.n	8006342 <__ssvfiscanf_r+0x286>
 800633c:	3301      	adds	r3, #1
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	e7b6      	b.n	80062b0 <__ssvfiscanf_r+0x1f4>
 8006342:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006344:	4621      	mov	r1, r4
 8006346:	4630      	mov	r0, r6
 8006348:	4798      	blx	r3
 800634a:	2800      	cmp	r0, #0
 800634c:	d0b0      	beq.n	80062b0 <__ssvfiscanf_r+0x1f4>
 800634e:	e78d      	b.n	800626c <__ssvfiscanf_r+0x1b0>
 8006350:	2b04      	cmp	r3, #4
 8006352:	dc0f      	bgt.n	8006374 <__ssvfiscanf_r+0x2b8>
 8006354:	466b      	mov	r3, sp
 8006356:	4622      	mov	r2, r4
 8006358:	a941      	add	r1, sp, #260	@ 0x104
 800635a:	4630      	mov	r0, r6
 800635c:	f000 fbee 	bl	8006b3c <_scanf_i>
 8006360:	e7b4      	b.n	80062cc <__ssvfiscanf_r+0x210>
 8006362:	bf00      	nop
 8006364:	0800600d 	.word	0x0800600d
 8006368:	08006083 	.word	0x08006083
 800636c:	08007593 	.word	0x08007593
 8006370:	08007544 	.word	0x08007544
 8006374:	4b0a      	ldr	r3, [pc, #40]	@ (80063a0 <__ssvfiscanf_r+0x2e4>)
 8006376:	2b00      	cmp	r3, #0
 8006378:	f43f aec5 	beq.w	8006106 <__ssvfiscanf_r+0x4a>
 800637c:	466b      	mov	r3, sp
 800637e:	4622      	mov	r2, r4
 8006380:	a941      	add	r1, sp, #260	@ 0x104
 8006382:	4630      	mov	r0, r6
 8006384:	f3af 8000 	nop.w
 8006388:	e7a0      	b.n	80062cc <__ssvfiscanf_r+0x210>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	065b      	lsls	r3, r3, #25
 800638e:	f53f af71 	bmi.w	8006274 <__ssvfiscanf_r+0x1b8>
 8006392:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800639c:	e7f9      	b.n	8006392 <__ssvfiscanf_r+0x2d6>
 800639e:	bf00      	nop
 80063a0:	00000000 	.word	0x00000000

080063a4 <__sfputc_r>:
 80063a4:	6893      	ldr	r3, [r2, #8]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	b410      	push	{r4}
 80063ac:	6093      	str	r3, [r2, #8]
 80063ae:	da08      	bge.n	80063c2 <__sfputc_r+0x1e>
 80063b0:	6994      	ldr	r4, [r2, #24]
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	db01      	blt.n	80063ba <__sfputc_r+0x16>
 80063b6:	290a      	cmp	r1, #10
 80063b8:	d103      	bne.n	80063c2 <__sfputc_r+0x1e>
 80063ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063be:	f000 bef7 	b.w	80071b0 <__swbuf_r>
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	1c58      	adds	r0, r3, #1
 80063c6:	6010      	str	r0, [r2, #0]
 80063c8:	7019      	strb	r1, [r3, #0]
 80063ca:	4608      	mov	r0, r1
 80063cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <__sfputs_r>:
 80063d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d4:	4606      	mov	r6, r0
 80063d6:	460f      	mov	r7, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	18d5      	adds	r5, r2, r3
 80063dc:	42ac      	cmp	r4, r5
 80063de:	d101      	bne.n	80063e4 <__sfputs_r+0x12>
 80063e0:	2000      	movs	r0, #0
 80063e2:	e007      	b.n	80063f4 <__sfputs_r+0x22>
 80063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e8:	463a      	mov	r2, r7
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ffda 	bl	80063a4 <__sfputc_r>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d1f3      	bne.n	80063dc <__sfputs_r+0xa>
 80063f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063f8 <_vfiprintf_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	460d      	mov	r5, r1
 80063fe:	b09d      	sub	sp, #116	@ 0x74
 8006400:	4614      	mov	r4, r2
 8006402:	4698      	mov	r8, r3
 8006404:	4606      	mov	r6, r0
 8006406:	b118      	cbz	r0, 8006410 <_vfiprintf_r+0x18>
 8006408:	6a03      	ldr	r3, [r0, #32]
 800640a:	b90b      	cbnz	r3, 8006410 <_vfiprintf_r+0x18>
 800640c:	f7ff fcf0 	bl	8005df0 <__sinit>
 8006410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006412:	07d9      	lsls	r1, r3, #31
 8006414:	d405      	bmi.n	8006422 <_vfiprintf_r+0x2a>
 8006416:	89ab      	ldrh	r3, [r5, #12]
 8006418:	059a      	lsls	r2, r3, #22
 800641a:	d402      	bmi.n	8006422 <_vfiprintf_r+0x2a>
 800641c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800641e:	f7ff fda8 	bl	8005f72 <__retarget_lock_acquire_recursive>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	d501      	bpl.n	800642c <_vfiprintf_r+0x34>
 8006428:	692b      	ldr	r3, [r5, #16]
 800642a:	b99b      	cbnz	r3, 8006454 <_vfiprintf_r+0x5c>
 800642c:	4629      	mov	r1, r5
 800642e:	4630      	mov	r0, r6
 8006430:	f000 fefc 	bl	800722c <__swsetup_r>
 8006434:	b170      	cbz	r0, 8006454 <_vfiprintf_r+0x5c>
 8006436:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006438:	07dc      	lsls	r4, r3, #31
 800643a:	d504      	bpl.n	8006446 <_vfiprintf_r+0x4e>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006440:	b01d      	add	sp, #116	@ 0x74
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d4f7      	bmi.n	800643c <_vfiprintf_r+0x44>
 800644c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800644e:	f7ff fd91 	bl	8005f74 <__retarget_lock_release_recursive>
 8006452:	e7f3      	b.n	800643c <_vfiprintf_r+0x44>
 8006454:	2300      	movs	r3, #0
 8006456:	9309      	str	r3, [sp, #36]	@ 0x24
 8006458:	2320      	movs	r3, #32
 800645a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800645e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006462:	2330      	movs	r3, #48	@ 0x30
 8006464:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006614 <_vfiprintf_r+0x21c>
 8006468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800646c:	f04f 0901 	mov.w	r9, #1
 8006470:	4623      	mov	r3, r4
 8006472:	469a      	mov	sl, r3
 8006474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006478:	b10a      	cbz	r2, 800647e <_vfiprintf_r+0x86>
 800647a:	2a25      	cmp	r2, #37	@ 0x25
 800647c:	d1f9      	bne.n	8006472 <_vfiprintf_r+0x7a>
 800647e:	ebba 0b04 	subs.w	fp, sl, r4
 8006482:	d00b      	beq.n	800649c <_vfiprintf_r+0xa4>
 8006484:	465b      	mov	r3, fp
 8006486:	4622      	mov	r2, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ffa1 	bl	80063d2 <__sfputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	f000 80a7 	beq.w	80065e4 <_vfiprintf_r+0x1ec>
 8006496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006498:	445a      	add	r2, fp
 800649a:	9209      	str	r2, [sp, #36]	@ 0x24
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 809f 	beq.w	80065e4 <_vfiprintf_r+0x1ec>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80064be:	4654      	mov	r4, sl
 80064c0:	2205      	movs	r2, #5
 80064c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c6:	4853      	ldr	r0, [pc, #332]	@ (8006614 <_vfiprintf_r+0x21c>)
 80064c8:	f7f9 feb2 	bl	8000230 <memchr>
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	b9d8      	cbnz	r0, 8006508 <_vfiprintf_r+0x110>
 80064d0:	06d1      	lsls	r1, r2, #27
 80064d2:	bf44      	itt	mi
 80064d4:	2320      	movmi	r3, #32
 80064d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064da:	0713      	lsls	r3, r2, #28
 80064dc:	bf44      	itt	mi
 80064de:	232b      	movmi	r3, #43	@ 0x2b
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e4:	f89a 3000 	ldrb.w	r3, [sl]
 80064e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ea:	d015      	beq.n	8006518 <_vfiprintf_r+0x120>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	4654      	mov	r4, sl
 80064f0:	2000      	movs	r0, #0
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fc:	3b30      	subs	r3, #48	@ 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d94b      	bls.n	800659a <_vfiprintf_r+0x1a2>
 8006502:	b1b0      	cbz	r0, 8006532 <_vfiprintf_r+0x13a>
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	e014      	b.n	8006532 <_vfiprintf_r+0x13a>
 8006508:	eba0 0308 	sub.w	r3, r0, r8
 800650c:	fa09 f303 	lsl.w	r3, r9, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	46a2      	mov	sl, r4
 8006516:	e7d2      	b.n	80064be <_vfiprintf_r+0xc6>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbb      	ittet	lt
 8006524:	425b      	neglt	r3, r3
 8006526:	f042 0202 	orrlt.w	r2, r2, #2
 800652a:	9307      	strge	r3, [sp, #28]
 800652c:	9307      	strlt	r3, [sp, #28]
 800652e:	bfb8      	it	lt
 8006530:	9204      	strlt	r2, [sp, #16]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	2b2e      	cmp	r3, #46	@ 0x2e
 8006536:	d10a      	bne.n	800654e <_vfiprintf_r+0x156>
 8006538:	7863      	ldrb	r3, [r4, #1]
 800653a:	2b2a      	cmp	r3, #42	@ 0x2a
 800653c:	d132      	bne.n	80065a4 <_vfiprintf_r+0x1ac>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9203      	str	r2, [sp, #12]
 8006546:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800654a:	3402      	adds	r4, #2
 800654c:	9305      	str	r3, [sp, #20]
 800654e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006624 <_vfiprintf_r+0x22c>
 8006552:	7821      	ldrb	r1, [r4, #0]
 8006554:	2203      	movs	r2, #3
 8006556:	4650      	mov	r0, sl
 8006558:	f7f9 fe6a 	bl	8000230 <memchr>
 800655c:	b138      	cbz	r0, 800656e <_vfiprintf_r+0x176>
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	eba0 000a 	sub.w	r0, r0, sl
 8006564:	2240      	movs	r2, #64	@ 0x40
 8006566:	4082      	lsls	r2, r0
 8006568:	4313      	orrs	r3, r2
 800656a:	3401      	adds	r4, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006572:	4829      	ldr	r0, [pc, #164]	@ (8006618 <_vfiprintf_r+0x220>)
 8006574:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006578:	2206      	movs	r2, #6
 800657a:	f7f9 fe59 	bl	8000230 <memchr>
 800657e:	2800      	cmp	r0, #0
 8006580:	d03f      	beq.n	8006602 <_vfiprintf_r+0x20a>
 8006582:	4b26      	ldr	r3, [pc, #152]	@ (800661c <_vfiprintf_r+0x224>)
 8006584:	bb1b      	cbnz	r3, 80065ce <_vfiprintf_r+0x1d6>
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	3307      	adds	r3, #7
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	3308      	adds	r3, #8
 8006590:	9303      	str	r3, [sp, #12]
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	443b      	add	r3, r7
 8006596:	9309      	str	r3, [sp, #36]	@ 0x24
 8006598:	e76a      	b.n	8006470 <_vfiprintf_r+0x78>
 800659a:	fb0c 3202 	mla	r2, ip, r2, r3
 800659e:	460c      	mov	r4, r1
 80065a0:	2001      	movs	r0, #1
 80065a2:	e7a8      	b.n	80064f6 <_vfiprintf_r+0xfe>
 80065a4:	2300      	movs	r3, #0
 80065a6:	3401      	adds	r4, #1
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	4619      	mov	r1, r3
 80065ac:	f04f 0c0a 	mov.w	ip, #10
 80065b0:	4620      	mov	r0, r4
 80065b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065b6:	3a30      	subs	r2, #48	@ 0x30
 80065b8:	2a09      	cmp	r2, #9
 80065ba:	d903      	bls.n	80065c4 <_vfiprintf_r+0x1cc>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0c6      	beq.n	800654e <_vfiprintf_r+0x156>
 80065c0:	9105      	str	r1, [sp, #20]
 80065c2:	e7c4      	b.n	800654e <_vfiprintf_r+0x156>
 80065c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065c8:	4604      	mov	r4, r0
 80065ca:	2301      	movs	r3, #1
 80065cc:	e7f0      	b.n	80065b0 <_vfiprintf_r+0x1b8>
 80065ce:	ab03      	add	r3, sp, #12
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	462a      	mov	r2, r5
 80065d4:	4b12      	ldr	r3, [pc, #72]	@ (8006620 <_vfiprintf_r+0x228>)
 80065d6:	a904      	add	r1, sp, #16
 80065d8:	4630      	mov	r0, r6
 80065da:	f3af 8000 	nop.w
 80065de:	4607      	mov	r7, r0
 80065e0:	1c78      	adds	r0, r7, #1
 80065e2:	d1d6      	bne.n	8006592 <_vfiprintf_r+0x19a>
 80065e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065e6:	07d9      	lsls	r1, r3, #31
 80065e8:	d405      	bmi.n	80065f6 <_vfiprintf_r+0x1fe>
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	059a      	lsls	r2, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_vfiprintf_r+0x1fe>
 80065f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065f2:	f7ff fcbf 	bl	8005f74 <__retarget_lock_release_recursive>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	065b      	lsls	r3, r3, #25
 80065fa:	f53f af1f 	bmi.w	800643c <_vfiprintf_r+0x44>
 80065fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006600:	e71e      	b.n	8006440 <_vfiprintf_r+0x48>
 8006602:	ab03      	add	r3, sp, #12
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	462a      	mov	r2, r5
 8006608:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <_vfiprintf_r+0x228>)
 800660a:	a904      	add	r1, sp, #16
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f91b 	bl	8006848 <_printf_i>
 8006612:	e7e4      	b.n	80065de <_vfiprintf_r+0x1e6>
 8006614:	08007548 	.word	0x08007548
 8006618:	0800754e 	.word	0x0800754e
 800661c:	00000000 	.word	0x00000000
 8006620:	080063d3 	.word	0x080063d3
 8006624:	08007544 	.word	0x08007544

08006628 <sbrk_aligned>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	4e0f      	ldr	r6, [pc, #60]	@ (8006668 <sbrk_aligned+0x40>)
 800662c:	460c      	mov	r4, r1
 800662e:	6831      	ldr	r1, [r6, #0]
 8006630:	4605      	mov	r5, r0
 8006632:	b911      	cbnz	r1, 800663a <sbrk_aligned+0x12>
 8006634:	f000 fed4 	bl	80073e0 <_sbrk_r>
 8006638:	6030      	str	r0, [r6, #0]
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f000 fecf 	bl	80073e0 <_sbrk_r>
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	d103      	bne.n	800664e <sbrk_aligned+0x26>
 8006646:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800664a:	4620      	mov	r0, r4
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	1cc4      	adds	r4, r0, #3
 8006650:	f024 0403 	bic.w	r4, r4, #3
 8006654:	42a0      	cmp	r0, r4
 8006656:	d0f8      	beq.n	800664a <sbrk_aligned+0x22>
 8006658:	1a21      	subs	r1, r4, r0
 800665a:	4628      	mov	r0, r5
 800665c:	f000 fec0 	bl	80073e0 <_sbrk_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d1f2      	bne.n	800664a <sbrk_aligned+0x22>
 8006664:	e7ef      	b.n	8006646 <sbrk_aligned+0x1e>
 8006666:	bf00      	nop
 8006668:	20000614 	.word	0x20000614

0800666c <_malloc_r>:
 800666c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006670:	1ccd      	adds	r5, r1, #3
 8006672:	f025 0503 	bic.w	r5, r5, #3
 8006676:	3508      	adds	r5, #8
 8006678:	2d0c      	cmp	r5, #12
 800667a:	bf38      	it	cc
 800667c:	250c      	movcc	r5, #12
 800667e:	2d00      	cmp	r5, #0
 8006680:	4606      	mov	r6, r0
 8006682:	db01      	blt.n	8006688 <_malloc_r+0x1c>
 8006684:	42a9      	cmp	r1, r5
 8006686:	d904      	bls.n	8006692 <_malloc_r+0x26>
 8006688:	230c      	movs	r3, #12
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	2000      	movs	r0, #0
 800668e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006768 <_malloc_r+0xfc>
 8006696:	f000 fc2b 	bl	8006ef0 <__malloc_lock>
 800669a:	f8d8 3000 	ldr.w	r3, [r8]
 800669e:	461c      	mov	r4, r3
 80066a0:	bb44      	cbnz	r4, 80066f4 <_malloc_r+0x88>
 80066a2:	4629      	mov	r1, r5
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7ff ffbf 	bl	8006628 <sbrk_aligned>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	4604      	mov	r4, r0
 80066ae:	d158      	bne.n	8006762 <_malloc_r+0xf6>
 80066b0:	f8d8 4000 	ldr.w	r4, [r8]
 80066b4:	4627      	mov	r7, r4
 80066b6:	2f00      	cmp	r7, #0
 80066b8:	d143      	bne.n	8006742 <_malloc_r+0xd6>
 80066ba:	2c00      	cmp	r4, #0
 80066bc:	d04b      	beq.n	8006756 <_malloc_r+0xea>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	4639      	mov	r1, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	eb04 0903 	add.w	r9, r4, r3
 80066c8:	f000 fe8a 	bl	80073e0 <_sbrk_r>
 80066cc:	4581      	cmp	r9, r0
 80066ce:	d142      	bne.n	8006756 <_malloc_r+0xea>
 80066d0:	6821      	ldr	r1, [r4, #0]
 80066d2:	1a6d      	subs	r5, r5, r1
 80066d4:	4629      	mov	r1, r5
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ffa6 	bl	8006628 <sbrk_aligned>
 80066dc:	3001      	adds	r0, #1
 80066de:	d03a      	beq.n	8006756 <_malloc_r+0xea>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	442b      	add	r3, r5
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	bb62      	cbnz	r2, 8006748 <_malloc_r+0xdc>
 80066ee:	f8c8 7000 	str.w	r7, [r8]
 80066f2:	e00f      	b.n	8006714 <_malloc_r+0xa8>
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	1b52      	subs	r2, r2, r5
 80066f8:	d420      	bmi.n	800673c <_malloc_r+0xd0>
 80066fa:	2a0b      	cmp	r2, #11
 80066fc:	d917      	bls.n	800672e <_malloc_r+0xc2>
 80066fe:	1961      	adds	r1, r4, r5
 8006700:	42a3      	cmp	r3, r4
 8006702:	6025      	str	r5, [r4, #0]
 8006704:	bf18      	it	ne
 8006706:	6059      	strne	r1, [r3, #4]
 8006708:	6863      	ldr	r3, [r4, #4]
 800670a:	bf08      	it	eq
 800670c:	f8c8 1000 	streq.w	r1, [r8]
 8006710:	5162      	str	r2, [r4, r5]
 8006712:	604b      	str	r3, [r1, #4]
 8006714:	4630      	mov	r0, r6
 8006716:	f000 fbf1 	bl	8006efc <__malloc_unlock>
 800671a:	f104 000b 	add.w	r0, r4, #11
 800671e:	1d23      	adds	r3, r4, #4
 8006720:	f020 0007 	bic.w	r0, r0, #7
 8006724:	1ac2      	subs	r2, r0, r3
 8006726:	bf1c      	itt	ne
 8006728:	1a1b      	subne	r3, r3, r0
 800672a:	50a3      	strne	r3, [r4, r2]
 800672c:	e7af      	b.n	800668e <_malloc_r+0x22>
 800672e:	6862      	ldr	r2, [r4, #4]
 8006730:	42a3      	cmp	r3, r4
 8006732:	bf0c      	ite	eq
 8006734:	f8c8 2000 	streq.w	r2, [r8]
 8006738:	605a      	strne	r2, [r3, #4]
 800673a:	e7eb      	b.n	8006714 <_malloc_r+0xa8>
 800673c:	4623      	mov	r3, r4
 800673e:	6864      	ldr	r4, [r4, #4]
 8006740:	e7ae      	b.n	80066a0 <_malloc_r+0x34>
 8006742:	463c      	mov	r4, r7
 8006744:	687f      	ldr	r7, [r7, #4]
 8006746:	e7b6      	b.n	80066b6 <_malloc_r+0x4a>
 8006748:	461a      	mov	r2, r3
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	42a3      	cmp	r3, r4
 800674e:	d1fb      	bne.n	8006748 <_malloc_r+0xdc>
 8006750:	2300      	movs	r3, #0
 8006752:	6053      	str	r3, [r2, #4]
 8006754:	e7de      	b.n	8006714 <_malloc_r+0xa8>
 8006756:	230c      	movs	r3, #12
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	4630      	mov	r0, r6
 800675c:	f000 fbce 	bl	8006efc <__malloc_unlock>
 8006760:	e794      	b.n	800668c <_malloc_r+0x20>
 8006762:	6005      	str	r5, [r0, #0]
 8006764:	e7d6      	b.n	8006714 <_malloc_r+0xa8>
 8006766:	bf00      	nop
 8006768:	20000618 	.word	0x20000618

0800676c <_printf_common>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	4616      	mov	r6, r2
 8006772:	4698      	mov	r8, r3
 8006774:	688a      	ldr	r2, [r1, #8]
 8006776:	690b      	ldr	r3, [r1, #16]
 8006778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800677c:	4293      	cmp	r3, r2
 800677e:	bfb8      	it	lt
 8006780:	4613      	movlt	r3, r2
 8006782:	6033      	str	r3, [r6, #0]
 8006784:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006788:	4607      	mov	r7, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b10a      	cbz	r2, 8006792 <_printf_common+0x26>
 800678e:	3301      	adds	r3, #1
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	0699      	lsls	r1, r3, #26
 8006796:	bf42      	ittt	mi
 8006798:	6833      	ldrmi	r3, [r6, #0]
 800679a:	3302      	addmi	r3, #2
 800679c:	6033      	strmi	r3, [r6, #0]
 800679e:	6825      	ldr	r5, [r4, #0]
 80067a0:	f015 0506 	ands.w	r5, r5, #6
 80067a4:	d106      	bne.n	80067b4 <_printf_common+0x48>
 80067a6:	f104 0a19 	add.w	sl, r4, #25
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	6832      	ldr	r2, [r6, #0]
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	42ab      	cmp	r3, r5
 80067b2:	dc26      	bgt.n	8006802 <_printf_common+0x96>
 80067b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	3b00      	subs	r3, #0
 80067bc:	bf18      	it	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	0692      	lsls	r2, r2, #26
 80067c2:	d42b      	bmi.n	800681c <_printf_common+0xb0>
 80067c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067c8:	4641      	mov	r1, r8
 80067ca:	4638      	mov	r0, r7
 80067cc:	47c8      	blx	r9
 80067ce:	3001      	adds	r0, #1
 80067d0:	d01e      	beq.n	8006810 <_printf_common+0xa4>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	6922      	ldr	r2, [r4, #16]
 80067d6:	f003 0306 	and.w	r3, r3, #6
 80067da:	2b04      	cmp	r3, #4
 80067dc:	bf02      	ittt	eq
 80067de:	68e5      	ldreq	r5, [r4, #12]
 80067e0:	6833      	ldreq	r3, [r6, #0]
 80067e2:	1aed      	subeq	r5, r5, r3
 80067e4:	68a3      	ldr	r3, [r4, #8]
 80067e6:	bf0c      	ite	eq
 80067e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067ec:	2500      	movne	r5, #0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	bfc4      	itt	gt
 80067f2:	1a9b      	subgt	r3, r3, r2
 80067f4:	18ed      	addgt	r5, r5, r3
 80067f6:	2600      	movs	r6, #0
 80067f8:	341a      	adds	r4, #26
 80067fa:	42b5      	cmp	r5, r6
 80067fc:	d11a      	bne.n	8006834 <_printf_common+0xc8>
 80067fe:	2000      	movs	r0, #0
 8006800:	e008      	b.n	8006814 <_printf_common+0xa8>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4641      	mov	r1, r8
 8006808:	4638      	mov	r0, r7
 800680a:	47c8      	blx	r9
 800680c:	3001      	adds	r0, #1
 800680e:	d103      	bne.n	8006818 <_printf_common+0xac>
 8006810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006818:	3501      	adds	r5, #1
 800681a:	e7c6      	b.n	80067aa <_printf_common+0x3e>
 800681c:	18e1      	adds	r1, r4, r3
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	2030      	movs	r0, #48	@ 0x30
 8006822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006826:	4422      	add	r2, r4
 8006828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800682c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006830:	3302      	adds	r3, #2
 8006832:	e7c7      	b.n	80067c4 <_printf_common+0x58>
 8006834:	2301      	movs	r3, #1
 8006836:	4622      	mov	r2, r4
 8006838:	4641      	mov	r1, r8
 800683a:	4638      	mov	r0, r7
 800683c:	47c8      	blx	r9
 800683e:	3001      	adds	r0, #1
 8006840:	d0e6      	beq.n	8006810 <_printf_common+0xa4>
 8006842:	3601      	adds	r6, #1
 8006844:	e7d9      	b.n	80067fa <_printf_common+0x8e>
	...

08006848 <_printf_i>:
 8006848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	7e0f      	ldrb	r7, [r1, #24]
 800684e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006850:	2f78      	cmp	r7, #120	@ 0x78
 8006852:	4691      	mov	r9, r2
 8006854:	4680      	mov	r8, r0
 8006856:	460c      	mov	r4, r1
 8006858:	469a      	mov	sl, r3
 800685a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800685e:	d807      	bhi.n	8006870 <_printf_i+0x28>
 8006860:	2f62      	cmp	r7, #98	@ 0x62
 8006862:	d80a      	bhi.n	800687a <_printf_i+0x32>
 8006864:	2f00      	cmp	r7, #0
 8006866:	f000 80d2 	beq.w	8006a0e <_printf_i+0x1c6>
 800686a:	2f58      	cmp	r7, #88	@ 0x58
 800686c:	f000 80b9 	beq.w	80069e2 <_printf_i+0x19a>
 8006870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006878:	e03a      	b.n	80068f0 <_printf_i+0xa8>
 800687a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800687e:	2b15      	cmp	r3, #21
 8006880:	d8f6      	bhi.n	8006870 <_printf_i+0x28>
 8006882:	a101      	add	r1, pc, #4	@ (adr r1, 8006888 <_printf_i+0x40>)
 8006884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068f5 	.word	0x080068f5
 8006890:	08006871 	.word	0x08006871
 8006894:	08006871 	.word	0x08006871
 8006898:	08006871 	.word	0x08006871
 800689c:	08006871 	.word	0x08006871
 80068a0:	080068f5 	.word	0x080068f5
 80068a4:	08006871 	.word	0x08006871
 80068a8:	08006871 	.word	0x08006871
 80068ac:	08006871 	.word	0x08006871
 80068b0:	08006871 	.word	0x08006871
 80068b4:	080069f5 	.word	0x080069f5
 80068b8:	0800691f 	.word	0x0800691f
 80068bc:	080069af 	.word	0x080069af
 80068c0:	08006871 	.word	0x08006871
 80068c4:	08006871 	.word	0x08006871
 80068c8:	08006a17 	.word	0x08006a17
 80068cc:	08006871 	.word	0x08006871
 80068d0:	0800691f 	.word	0x0800691f
 80068d4:	08006871 	.word	0x08006871
 80068d8:	08006871 	.word	0x08006871
 80068dc:	080069b7 	.word	0x080069b7
 80068e0:	6833      	ldr	r3, [r6, #0]
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6032      	str	r2, [r6, #0]
 80068e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068f0:	2301      	movs	r3, #1
 80068f2:	e09d      	b.n	8006a30 <_printf_i+0x1e8>
 80068f4:	6833      	ldr	r3, [r6, #0]
 80068f6:	6820      	ldr	r0, [r4, #0]
 80068f8:	1d19      	adds	r1, r3, #4
 80068fa:	6031      	str	r1, [r6, #0]
 80068fc:	0606      	lsls	r6, r0, #24
 80068fe:	d501      	bpl.n	8006904 <_printf_i+0xbc>
 8006900:	681d      	ldr	r5, [r3, #0]
 8006902:	e003      	b.n	800690c <_printf_i+0xc4>
 8006904:	0645      	lsls	r5, r0, #25
 8006906:	d5fb      	bpl.n	8006900 <_printf_i+0xb8>
 8006908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800690c:	2d00      	cmp	r5, #0
 800690e:	da03      	bge.n	8006918 <_printf_i+0xd0>
 8006910:	232d      	movs	r3, #45	@ 0x2d
 8006912:	426d      	negs	r5, r5
 8006914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006918:	4859      	ldr	r0, [pc, #356]	@ (8006a80 <_printf_i+0x238>)
 800691a:	230a      	movs	r3, #10
 800691c:	e011      	b.n	8006942 <_printf_i+0xfa>
 800691e:	6821      	ldr	r1, [r4, #0]
 8006920:	6833      	ldr	r3, [r6, #0]
 8006922:	0608      	lsls	r0, r1, #24
 8006924:	f853 5b04 	ldr.w	r5, [r3], #4
 8006928:	d402      	bmi.n	8006930 <_printf_i+0xe8>
 800692a:	0649      	lsls	r1, r1, #25
 800692c:	bf48      	it	mi
 800692e:	b2ad      	uxthmi	r5, r5
 8006930:	2f6f      	cmp	r7, #111	@ 0x6f
 8006932:	4853      	ldr	r0, [pc, #332]	@ (8006a80 <_printf_i+0x238>)
 8006934:	6033      	str	r3, [r6, #0]
 8006936:	bf14      	ite	ne
 8006938:	230a      	movne	r3, #10
 800693a:	2308      	moveq	r3, #8
 800693c:	2100      	movs	r1, #0
 800693e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006942:	6866      	ldr	r6, [r4, #4]
 8006944:	60a6      	str	r6, [r4, #8]
 8006946:	2e00      	cmp	r6, #0
 8006948:	bfa2      	ittt	ge
 800694a:	6821      	ldrge	r1, [r4, #0]
 800694c:	f021 0104 	bicge.w	r1, r1, #4
 8006950:	6021      	strge	r1, [r4, #0]
 8006952:	b90d      	cbnz	r5, 8006958 <_printf_i+0x110>
 8006954:	2e00      	cmp	r6, #0
 8006956:	d04b      	beq.n	80069f0 <_printf_i+0x1a8>
 8006958:	4616      	mov	r6, r2
 800695a:	fbb5 f1f3 	udiv	r1, r5, r3
 800695e:	fb03 5711 	mls	r7, r3, r1, r5
 8006962:	5dc7      	ldrb	r7, [r0, r7]
 8006964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006968:	462f      	mov	r7, r5
 800696a:	42bb      	cmp	r3, r7
 800696c:	460d      	mov	r5, r1
 800696e:	d9f4      	bls.n	800695a <_printf_i+0x112>
 8006970:	2b08      	cmp	r3, #8
 8006972:	d10b      	bne.n	800698c <_printf_i+0x144>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	07df      	lsls	r7, r3, #31
 8006978:	d508      	bpl.n	800698c <_printf_i+0x144>
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	6861      	ldr	r1, [r4, #4]
 800697e:	4299      	cmp	r1, r3
 8006980:	bfde      	ittt	le
 8006982:	2330      	movle	r3, #48	@ 0x30
 8006984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006988:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800698c:	1b92      	subs	r2, r2, r6
 800698e:	6122      	str	r2, [r4, #16]
 8006990:	f8cd a000 	str.w	sl, [sp]
 8006994:	464b      	mov	r3, r9
 8006996:	aa03      	add	r2, sp, #12
 8006998:	4621      	mov	r1, r4
 800699a:	4640      	mov	r0, r8
 800699c:	f7ff fee6 	bl	800676c <_printf_common>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d14a      	bne.n	8006a3a <_printf_i+0x1f2>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a8:	b004      	add	sp, #16
 80069aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f043 0320 	orr.w	r3, r3, #32
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	4833      	ldr	r0, [pc, #204]	@ (8006a84 <_printf_i+0x23c>)
 80069b8:	2778      	movs	r7, #120	@ 0x78
 80069ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	6831      	ldr	r1, [r6, #0]
 80069c2:	061f      	lsls	r7, r3, #24
 80069c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80069c8:	d402      	bmi.n	80069d0 <_printf_i+0x188>
 80069ca:	065f      	lsls	r7, r3, #25
 80069cc:	bf48      	it	mi
 80069ce:	b2ad      	uxthmi	r5, r5
 80069d0:	6031      	str	r1, [r6, #0]
 80069d2:	07d9      	lsls	r1, r3, #31
 80069d4:	bf44      	itt	mi
 80069d6:	f043 0320 	orrmi.w	r3, r3, #32
 80069da:	6023      	strmi	r3, [r4, #0]
 80069dc:	b11d      	cbz	r5, 80069e6 <_printf_i+0x19e>
 80069de:	2310      	movs	r3, #16
 80069e0:	e7ac      	b.n	800693c <_printf_i+0xf4>
 80069e2:	4827      	ldr	r0, [pc, #156]	@ (8006a80 <_printf_i+0x238>)
 80069e4:	e7e9      	b.n	80069ba <_printf_i+0x172>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f023 0320 	bic.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	e7f6      	b.n	80069de <_printf_i+0x196>
 80069f0:	4616      	mov	r6, r2
 80069f2:	e7bd      	b.n	8006970 <_printf_i+0x128>
 80069f4:	6833      	ldr	r3, [r6, #0]
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	6961      	ldr	r1, [r4, #20]
 80069fa:	1d18      	adds	r0, r3, #4
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	062e      	lsls	r6, r5, #24
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	d501      	bpl.n	8006a08 <_printf_i+0x1c0>
 8006a04:	6019      	str	r1, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <_printf_i+0x1c6>
 8006a08:	0668      	lsls	r0, r5, #25
 8006a0a:	d5fb      	bpl.n	8006a04 <_printf_i+0x1bc>
 8006a0c:	8019      	strh	r1, [r3, #0]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	4616      	mov	r6, r2
 8006a14:	e7bc      	b.n	8006990 <_printf_i+0x148>
 8006a16:	6833      	ldr	r3, [r6, #0]
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	6032      	str	r2, [r6, #0]
 8006a1c:	681e      	ldr	r6, [r3, #0]
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	2100      	movs	r1, #0
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7f9 fc04 	bl	8000230 <memchr>
 8006a28:	b108      	cbz	r0, 8006a2e <_printf_i+0x1e6>
 8006a2a:	1b80      	subs	r0, r0, r6
 8006a2c:	6060      	str	r0, [r4, #4]
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	2300      	movs	r3, #0
 8006a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a38:	e7aa      	b.n	8006990 <_printf_i+0x148>
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	4632      	mov	r2, r6
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	47d0      	blx	sl
 8006a44:	3001      	adds	r0, #1
 8006a46:	d0ad      	beq.n	80069a4 <_printf_i+0x15c>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	079b      	lsls	r3, r3, #30
 8006a4c:	d413      	bmi.n	8006a76 <_printf_i+0x22e>
 8006a4e:	68e0      	ldr	r0, [r4, #12]
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	4298      	cmp	r0, r3
 8006a54:	bfb8      	it	lt
 8006a56:	4618      	movlt	r0, r3
 8006a58:	e7a6      	b.n	80069a8 <_printf_i+0x160>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4640      	mov	r0, r8
 8006a62:	47d0      	blx	sl
 8006a64:	3001      	adds	r0, #1
 8006a66:	d09d      	beq.n	80069a4 <_printf_i+0x15c>
 8006a68:	3501      	adds	r5, #1
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	9903      	ldr	r1, [sp, #12]
 8006a6e:	1a5b      	subs	r3, r3, r1
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	dcf2      	bgt.n	8006a5a <_printf_i+0x212>
 8006a74:	e7eb      	b.n	8006a4e <_printf_i+0x206>
 8006a76:	2500      	movs	r5, #0
 8006a78:	f104 0619 	add.w	r6, r4, #25
 8006a7c:	e7f5      	b.n	8006a6a <_printf_i+0x222>
 8006a7e:	bf00      	nop
 8006a80:	08007555 	.word	0x08007555
 8006a84:	08007566 	.word	0x08007566

08006a88 <_scanf_chars>:
 8006a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a8c:	4615      	mov	r5, r2
 8006a8e:	688a      	ldr	r2, [r1, #8]
 8006a90:	4680      	mov	r8, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b932      	cbnz	r2, 8006aa4 <_scanf_chars+0x1c>
 8006a96:	698a      	ldr	r2, [r1, #24]
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	bf14      	ite	ne
 8006a9c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8006aa0:	2201      	moveq	r2, #1
 8006aa2:	608a      	str	r2, [r1, #8]
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006b38 <_scanf_chars+0xb0>
 8006aaa:	06d1      	lsls	r1, r2, #27
 8006aac:	bf5f      	itttt	pl
 8006aae:	681a      	ldrpl	r2, [r3, #0]
 8006ab0:	1d11      	addpl	r1, r2, #4
 8006ab2:	6019      	strpl	r1, [r3, #0]
 8006ab4:	6816      	ldrpl	r6, [r2, #0]
 8006ab6:	2700      	movs	r7, #0
 8006ab8:	69a0      	ldr	r0, [r4, #24]
 8006aba:	b188      	cbz	r0, 8006ae0 <_scanf_chars+0x58>
 8006abc:	2801      	cmp	r0, #1
 8006abe:	d107      	bne.n	8006ad0 <_scanf_chars+0x48>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	6963      	ldr	r3, [r4, #20]
 8006ac6:	5c9b      	ldrb	r3, [r3, r2]
 8006ac8:	b953      	cbnz	r3, 8006ae0 <_scanf_chars+0x58>
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d031      	beq.n	8006b32 <_scanf_chars+0xaa>
 8006ace:	e022      	b.n	8006b16 <_scanf_chars+0x8e>
 8006ad0:	2802      	cmp	r0, #2
 8006ad2:	d120      	bne.n	8006b16 <_scanf_chars+0x8e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006adc:	071b      	lsls	r3, r3, #28
 8006ade:	d41a      	bmi.n	8006b16 <_scanf_chars+0x8e>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	06da      	lsls	r2, r3, #27
 8006ae4:	bf5e      	ittt	pl
 8006ae6:	682b      	ldrpl	r3, [r5, #0]
 8006ae8:	781b      	ldrbpl	r3, [r3, #0]
 8006aea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006aee:	682a      	ldr	r2, [r5, #0]
 8006af0:	686b      	ldr	r3, [r5, #4]
 8006af2:	3201      	adds	r2, #1
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	68a2      	ldr	r2, [r4, #8]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	3a01      	subs	r2, #1
 8006afc:	606b      	str	r3, [r5, #4]
 8006afe:	3701      	adds	r7, #1
 8006b00:	60a2      	str	r2, [r4, #8]
 8006b02:	b142      	cbz	r2, 8006b16 <_scanf_chars+0x8e>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dcd7      	bgt.n	8006ab8 <_scanf_chars+0x30>
 8006b08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4640      	mov	r0, r8
 8006b10:	4798      	blx	r3
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d0d0      	beq.n	8006ab8 <_scanf_chars+0x30>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	f013 0310 	ands.w	r3, r3, #16
 8006b1c:	d105      	bne.n	8006b2a <_scanf_chars+0xa2>
 8006b1e:	68e2      	ldr	r2, [r4, #12]
 8006b20:	3201      	adds	r2, #1
 8006b22:	60e2      	str	r2, [r4, #12]
 8006b24:	69a2      	ldr	r2, [r4, #24]
 8006b26:	b102      	cbz	r2, 8006b2a <_scanf_chars+0xa2>
 8006b28:	7033      	strb	r3, [r6, #0]
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	443b      	add	r3, r7
 8006b2e:	6123      	str	r3, [r4, #16]
 8006b30:	2000      	movs	r0, #0
 8006b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b36:	bf00      	nop
 8006b38:	08007593 	.word	0x08007593

08006b3c <_scanf_i>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4698      	mov	r8, r3
 8006b42:	4b74      	ldr	r3, [pc, #464]	@ (8006d14 <_scanf_i+0x1d8>)
 8006b44:	460c      	mov	r4, r1
 8006b46:	4682      	mov	sl, r0
 8006b48:	4616      	mov	r6, r2
 8006b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	ab03      	add	r3, sp, #12
 8006b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b56:	4b70      	ldr	r3, [pc, #448]	@ (8006d18 <_scanf_i+0x1dc>)
 8006b58:	69a1      	ldr	r1, [r4, #24]
 8006b5a:	4a70      	ldr	r2, [pc, #448]	@ (8006d1c <_scanf_i+0x1e0>)
 8006b5c:	2903      	cmp	r1, #3
 8006b5e:	bf08      	it	eq
 8006b60:	461a      	moveq	r2, r3
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	9201      	str	r2, [sp, #4]
 8006b66:	1e5a      	subs	r2, r3, #1
 8006b68:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b6c:	bf88      	it	hi
 8006b6e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b72:	4627      	mov	r7, r4
 8006b74:	bf82      	ittt	hi
 8006b76:	eb03 0905 	addhi.w	r9, r3, r5
 8006b7a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b7e:	60a3      	strhi	r3, [r4, #8]
 8006b80:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006b84:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006b88:	bf98      	it	ls
 8006b8a:	f04f 0900 	movls.w	r9, #0
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	463d      	mov	r5, r7
 8006b92:	f04f 0b00 	mov.w	fp, #0
 8006b96:	6831      	ldr	r1, [r6, #0]
 8006b98:	ab03      	add	r3, sp, #12
 8006b9a:	7809      	ldrb	r1, [r1, #0]
 8006b9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f7f9 fb45 	bl	8000230 <memchr>
 8006ba6:	b328      	cbz	r0, 8006bf4 <_scanf_i+0xb8>
 8006ba8:	f1bb 0f01 	cmp.w	fp, #1
 8006bac:	d159      	bne.n	8006c62 <_scanf_i+0x126>
 8006bae:	6862      	ldr	r2, [r4, #4]
 8006bb0:	b92a      	cbnz	r2, 8006bbe <_scanf_i+0x82>
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	2108      	movs	r1, #8
 8006bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bba:	6061      	str	r1, [r4, #4]
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	68a2      	ldr	r2, [r4, #8]
 8006bc8:	1e51      	subs	r1, r2, #1
 8006bca:	60a1      	str	r1, [r4, #8]
 8006bcc:	b192      	cbz	r2, 8006bf4 <_scanf_i+0xb8>
 8006bce:	6832      	ldr	r2, [r6, #0]
 8006bd0:	1c51      	adds	r1, r2, #1
 8006bd2:	6031      	str	r1, [r6, #0]
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	f805 2b01 	strb.w	r2, [r5], #1
 8006bda:	6872      	ldr	r2, [r6, #4]
 8006bdc:	3a01      	subs	r2, #1
 8006bde:	2a00      	cmp	r2, #0
 8006be0:	6072      	str	r2, [r6, #4]
 8006be2:	dc07      	bgt.n	8006bf4 <_scanf_i+0xb8>
 8006be4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006be8:	4631      	mov	r1, r6
 8006bea:	4650      	mov	r0, sl
 8006bec:	4790      	blx	r2
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f040 8085 	bne.w	8006cfe <_scanf_i+0x1c2>
 8006bf4:	f10b 0b01 	add.w	fp, fp, #1
 8006bf8:	f1bb 0f03 	cmp.w	fp, #3
 8006bfc:	d1cb      	bne.n	8006b96 <_scanf_i+0x5a>
 8006bfe:	6863      	ldr	r3, [r4, #4]
 8006c00:	b90b      	cbnz	r3, 8006c06 <_scanf_i+0xca>
 8006c02:	230a      	movs	r3, #10
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	6863      	ldr	r3, [r4, #4]
 8006c08:	4945      	ldr	r1, [pc, #276]	@ (8006d20 <_scanf_i+0x1e4>)
 8006c0a:	6960      	ldr	r0, [r4, #20]
 8006c0c:	1ac9      	subs	r1, r1, r3
 8006c0e:	f000 f889 	bl	8006d24 <__sccl>
 8006c12:	f04f 0b00 	mov.w	fp, #0
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	6822      	ldr	r2, [r4, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03d      	beq.n	8006c9a <_scanf_i+0x15e>
 8006c1e:	6831      	ldr	r1, [r6, #0]
 8006c20:	6960      	ldr	r0, [r4, #20]
 8006c22:	f891 c000 	ldrb.w	ip, [r1]
 8006c26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d035      	beq.n	8006c9a <_scanf_i+0x15e>
 8006c2e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006c32:	d124      	bne.n	8006c7e <_scanf_i+0x142>
 8006c34:	0510      	lsls	r0, r2, #20
 8006c36:	d522      	bpl.n	8006c7e <_scanf_i+0x142>
 8006c38:	f10b 0b01 	add.w	fp, fp, #1
 8006c3c:	f1b9 0f00 	cmp.w	r9, #0
 8006c40:	d003      	beq.n	8006c4a <_scanf_i+0x10e>
 8006c42:	3301      	adds	r3, #1
 8006c44:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	6873      	ldr	r3, [r6, #4]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	6073      	str	r3, [r6, #4]
 8006c52:	dd1b      	ble.n	8006c8c <_scanf_i+0x150>
 8006c54:	6833      	ldr	r3, [r6, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	68a3      	ldr	r3, [r4, #8]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	e7d9      	b.n	8006c16 <_scanf_i+0xda>
 8006c62:	f1bb 0f02 	cmp.w	fp, #2
 8006c66:	d1ae      	bne.n	8006bc6 <_scanf_i+0x8a>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006c6e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006c72:	d1bf      	bne.n	8006bf4 <_scanf_i+0xb8>
 8006c74:	2110      	movs	r1, #16
 8006c76:	6061      	str	r1, [r4, #4]
 8006c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c7c:	e7a2      	b.n	8006bc4 <_scanf_i+0x88>
 8006c7e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	780b      	ldrb	r3, [r1, #0]
 8006c86:	f805 3b01 	strb.w	r3, [r5], #1
 8006c8a:	e7de      	b.n	8006c4a <_scanf_i+0x10e>
 8006c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c90:	4631      	mov	r1, r6
 8006c92:	4650      	mov	r0, sl
 8006c94:	4798      	blx	r3
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0df      	beq.n	8006c5a <_scanf_i+0x11e>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	05d9      	lsls	r1, r3, #23
 8006c9e:	d50d      	bpl.n	8006cbc <_scanf_i+0x180>
 8006ca0:	42bd      	cmp	r5, r7
 8006ca2:	d909      	bls.n	8006cb8 <_scanf_i+0x17c>
 8006ca4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cac:	4632      	mov	r2, r6
 8006cae:	4650      	mov	r0, sl
 8006cb0:	4798      	blx	r3
 8006cb2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8006cb6:	464d      	mov	r5, r9
 8006cb8:	42bd      	cmp	r5, r7
 8006cba:	d028      	beq.n	8006d0e <_scanf_i+0x1d2>
 8006cbc:	6822      	ldr	r2, [r4, #0]
 8006cbe:	f012 0210 	ands.w	r2, r2, #16
 8006cc2:	d113      	bne.n	8006cec <_scanf_i+0x1b0>
 8006cc4:	702a      	strb	r2, [r5, #0]
 8006cc6:	6863      	ldr	r3, [r4, #4]
 8006cc8:	9e01      	ldr	r6, [sp, #4]
 8006cca:	4639      	mov	r1, r7
 8006ccc:	4650      	mov	r0, sl
 8006cce:	47b0      	blx	r6
 8006cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	f8c8 2000 	str.w	r2, [r8]
 8006cdc:	f011 0f20 	tst.w	r1, #32
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	d00f      	beq.n	8006d04 <_scanf_i+0x1c8>
 8006ce4:	6018      	str	r0, [r3, #0]
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60e3      	str	r3, [r4, #12]
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	1bed      	subs	r5, r5, r7
 8006cf0:	445d      	add	r5, fp
 8006cf2:	442b      	add	r3, r5
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	b007      	add	sp, #28
 8006cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	f04f 0b00 	mov.w	fp, #0
 8006d02:	e7ca      	b.n	8006c9a <_scanf_i+0x15e>
 8006d04:	07ca      	lsls	r2, r1, #31
 8006d06:	bf4c      	ite	mi
 8006d08:	8018      	strhmi	r0, [r3, #0]
 8006d0a:	6018      	strpl	r0, [r3, #0]
 8006d0c:	e7eb      	b.n	8006ce6 <_scanf_i+0x1aa>
 8006d0e:	2001      	movs	r0, #1
 8006d10:	e7f2      	b.n	8006cf8 <_scanf_i+0x1bc>
 8006d12:	bf00      	nop
 8006d14:	080074f4 	.word	0x080074f4
 8006d18:	080070cd 	.word	0x080070cd
 8006d1c:	080071ad 	.word	0x080071ad
 8006d20:	08007587 	.word	0x08007587

08006d24 <__sccl>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	780b      	ldrb	r3, [r1, #0]
 8006d28:	4604      	mov	r4, r0
 8006d2a:	2b5e      	cmp	r3, #94	@ 0x5e
 8006d2c:	bf0b      	itete	eq
 8006d2e:	784b      	ldrbeq	r3, [r1, #1]
 8006d30:	1c4a      	addne	r2, r1, #1
 8006d32:	1c8a      	addeq	r2, r1, #2
 8006d34:	2100      	movne	r1, #0
 8006d36:	bf08      	it	eq
 8006d38:	2101      	moveq	r1, #1
 8006d3a:	3801      	subs	r0, #1
 8006d3c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006d40:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006d44:	42a8      	cmp	r0, r5
 8006d46:	d1fb      	bne.n	8006d40 <__sccl+0x1c>
 8006d48:	b90b      	cbnz	r3, 8006d4e <__sccl+0x2a>
 8006d4a:	1e50      	subs	r0, r2, #1
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
 8006d4e:	f081 0101 	eor.w	r1, r1, #1
 8006d52:	54e1      	strb	r1, [r4, r3]
 8006d54:	4610      	mov	r0, r2
 8006d56:	4602      	mov	r2, r0
 8006d58:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d5c:	2d2d      	cmp	r5, #45	@ 0x2d
 8006d5e:	d005      	beq.n	8006d6c <__sccl+0x48>
 8006d60:	2d5d      	cmp	r5, #93	@ 0x5d
 8006d62:	d016      	beq.n	8006d92 <__sccl+0x6e>
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	d0f1      	beq.n	8006d4c <__sccl+0x28>
 8006d68:	462b      	mov	r3, r5
 8006d6a:	e7f2      	b.n	8006d52 <__sccl+0x2e>
 8006d6c:	7846      	ldrb	r6, [r0, #1]
 8006d6e:	2e5d      	cmp	r6, #93	@ 0x5d
 8006d70:	d0fa      	beq.n	8006d68 <__sccl+0x44>
 8006d72:	42b3      	cmp	r3, r6
 8006d74:	dcf8      	bgt.n	8006d68 <__sccl+0x44>
 8006d76:	3002      	adds	r0, #2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	4296      	cmp	r6, r2
 8006d7e:	54a1      	strb	r1, [r4, r2]
 8006d80:	dcfb      	bgt.n	8006d7a <__sccl+0x56>
 8006d82:	1af2      	subs	r2, r6, r3
 8006d84:	3a01      	subs	r2, #1
 8006d86:	1c5d      	adds	r5, r3, #1
 8006d88:	42b3      	cmp	r3, r6
 8006d8a:	bfa8      	it	ge
 8006d8c:	2200      	movge	r2, #0
 8006d8e:	18ab      	adds	r3, r5, r2
 8006d90:	e7e1      	b.n	8006d56 <__sccl+0x32>
 8006d92:	4610      	mov	r0, r2
 8006d94:	e7da      	b.n	8006d4c <__sccl+0x28>
	...

08006d98 <__sflush_r>:
 8006d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	0716      	lsls	r6, r2, #28
 8006da2:	4605      	mov	r5, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	d454      	bmi.n	8006e52 <__sflush_r+0xba>
 8006da8:	684b      	ldr	r3, [r1, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dc02      	bgt.n	8006db4 <__sflush_r+0x1c>
 8006dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dd48      	ble.n	8006e46 <__sflush_r+0xae>
 8006db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d045      	beq.n	8006e46 <__sflush_r+0xae>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dc0:	682f      	ldr	r7, [r5, #0]
 8006dc2:	6a21      	ldr	r1, [r4, #32]
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	d030      	beq.n	8006e2a <__sflush_r+0x92>
 8006dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	0759      	lsls	r1, r3, #29
 8006dce:	d505      	bpl.n	8006ddc <__sflush_r+0x44>
 8006dd0:	6863      	ldr	r3, [r4, #4]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dd6:	b10b      	cbz	r3, 8006ddc <__sflush_r+0x44>
 8006dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006de0:	6a21      	ldr	r1, [r4, #32]
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b0      	blx	r6
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	d106      	bne.n	8006dfa <__sflush_r+0x62>
 8006dec:	6829      	ldr	r1, [r5, #0]
 8006dee:	291d      	cmp	r1, #29
 8006df0:	d82b      	bhi.n	8006e4a <__sflush_r+0xb2>
 8006df2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e9c <__sflush_r+0x104>)
 8006df4:	410a      	asrs	r2, r1
 8006df6:	07d6      	lsls	r6, r2, #31
 8006df8:	d427      	bmi.n	8006e4a <__sflush_r+0xb2>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6062      	str	r2, [r4, #4]
 8006dfe:	04d9      	lsls	r1, r3, #19
 8006e00:	6922      	ldr	r2, [r4, #16]
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	d504      	bpl.n	8006e10 <__sflush_r+0x78>
 8006e06:	1c42      	adds	r2, r0, #1
 8006e08:	d101      	bne.n	8006e0e <__sflush_r+0x76>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	b903      	cbnz	r3, 8006e10 <__sflush_r+0x78>
 8006e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e12:	602f      	str	r7, [r5, #0]
 8006e14:	b1b9      	cbz	r1, 8006e46 <__sflush_r+0xae>
 8006e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d002      	beq.n	8006e24 <__sflush_r+0x8c>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f7ff f8aa 	bl	8005f78 <_free_r>
 8006e24:	2300      	movs	r3, #0
 8006e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e28:	e00d      	b.n	8006e46 <__sflush_r+0xae>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b0      	blx	r6
 8006e30:	4602      	mov	r2, r0
 8006e32:	1c50      	adds	r0, r2, #1
 8006e34:	d1c9      	bne.n	8006dca <__sflush_r+0x32>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0c6      	beq.n	8006dca <__sflush_r+0x32>
 8006e3c:	2b1d      	cmp	r3, #29
 8006e3e:	d001      	beq.n	8006e44 <__sflush_r+0xac>
 8006e40:	2b16      	cmp	r3, #22
 8006e42:	d11e      	bne.n	8006e82 <__sflush_r+0xea>
 8006e44:	602f      	str	r7, [r5, #0]
 8006e46:	2000      	movs	r0, #0
 8006e48:	e022      	b.n	8006e90 <__sflush_r+0xf8>
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4e:	b21b      	sxth	r3, r3
 8006e50:	e01b      	b.n	8006e8a <__sflush_r+0xf2>
 8006e52:	690f      	ldr	r7, [r1, #16]
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	d0f6      	beq.n	8006e46 <__sflush_r+0xae>
 8006e58:	0793      	lsls	r3, r2, #30
 8006e5a:	680e      	ldr	r6, [r1, #0]
 8006e5c:	bf08      	it	eq
 8006e5e:	694b      	ldreq	r3, [r1, #20]
 8006e60:	600f      	str	r7, [r1, #0]
 8006e62:	bf18      	it	ne
 8006e64:	2300      	movne	r3, #0
 8006e66:	eba6 0807 	sub.w	r8, r6, r7
 8006e6a:	608b      	str	r3, [r1, #8]
 8006e6c:	f1b8 0f00 	cmp.w	r8, #0
 8006e70:	dde9      	ble.n	8006e46 <__sflush_r+0xae>
 8006e72:	6a21      	ldr	r1, [r4, #32]
 8006e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e76:	4643      	mov	r3, r8
 8006e78:	463a      	mov	r2, r7
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b0      	blx	r6
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	dc08      	bgt.n	8006e94 <__sflush_r+0xfc>
 8006e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e94:	4407      	add	r7, r0
 8006e96:	eba8 0800 	sub.w	r8, r8, r0
 8006e9a:	e7e7      	b.n	8006e6c <__sflush_r+0xd4>
 8006e9c:	dfbffffe 	.word	0xdfbffffe

08006ea0 <_fflush_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	690b      	ldr	r3, [r1, #16]
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	b913      	cbnz	r3, 8006eb0 <_fflush_r+0x10>
 8006eaa:	2500      	movs	r5, #0
 8006eac:	4628      	mov	r0, r5
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	b118      	cbz	r0, 8006eba <_fflush_r+0x1a>
 8006eb2:	6a03      	ldr	r3, [r0, #32]
 8006eb4:	b90b      	cbnz	r3, 8006eba <_fflush_r+0x1a>
 8006eb6:	f7fe ff9b 	bl	8005df0 <__sinit>
 8006eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f3      	beq.n	8006eaa <_fflush_r+0xa>
 8006ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ec4:	07d0      	lsls	r0, r2, #31
 8006ec6:	d404      	bmi.n	8006ed2 <_fflush_r+0x32>
 8006ec8:	0599      	lsls	r1, r3, #22
 8006eca:	d402      	bmi.n	8006ed2 <_fflush_r+0x32>
 8006ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ece:	f7ff f850 	bl	8005f72 <__retarget_lock_acquire_recursive>
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	f7ff ff5f 	bl	8006d98 <__sflush_r>
 8006eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006edc:	07da      	lsls	r2, r3, #31
 8006ede:	4605      	mov	r5, r0
 8006ee0:	d4e4      	bmi.n	8006eac <_fflush_r+0xc>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	059b      	lsls	r3, r3, #22
 8006ee6:	d4e1      	bmi.n	8006eac <_fflush_r+0xc>
 8006ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eea:	f7ff f843 	bl	8005f74 <__retarget_lock_release_recursive>
 8006eee:	e7dd      	b.n	8006eac <_fflush_r+0xc>

08006ef0 <__malloc_lock>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	@ (8006ef8 <__malloc_lock+0x8>)
 8006ef2:	f7ff b83e 	b.w	8005f72 <__retarget_lock_acquire_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	20000610 	.word	0x20000610

08006efc <__malloc_unlock>:
 8006efc:	4801      	ldr	r0, [pc, #4]	@ (8006f04 <__malloc_unlock+0x8>)
 8006efe:	f7ff b839 	b.w	8005f74 <__retarget_lock_release_recursive>
 8006f02:	bf00      	nop
 8006f04:	20000610 	.word	0x20000610

08006f08 <__submore>:
 8006f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006f10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d11d      	bne.n	8006f54 <__submore+0x4c>
 8006f18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f1c:	f7ff fba6 	bl	800666c <_malloc_r>
 8006f20:	b918      	cbnz	r0, 8006f2a <__submore+0x22>
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f2e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006f30:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006f34:	6360      	str	r0, [r4, #52]	@ 0x34
 8006f36:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006f3a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006f3e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006f42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006f46:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006f4a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006f4e:	6020      	str	r0, [r4, #0]
 8006f50:	2000      	movs	r0, #0
 8006f52:	e7e8      	b.n	8006f26 <__submore+0x1e>
 8006f54:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006f56:	0077      	lsls	r7, r6, #1
 8006f58:	463a      	mov	r2, r7
 8006f5a:	f000 f80f 	bl	8006f7c <_realloc_r>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d0de      	beq.n	8006f22 <__submore+0x1a>
 8006f64:	eb00 0806 	add.w	r8, r0, r6
 8006f68:	4601      	mov	r1, r0
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	f000 fa47 	bl	8007400 <memcpy>
 8006f72:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006f76:	f8c4 8000 	str.w	r8, [r4]
 8006f7a:	e7e9      	b.n	8006f50 <__submore+0x48>

08006f7c <_realloc_r>:
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	4680      	mov	r8, r0
 8006f82:	4615      	mov	r5, r2
 8006f84:	460c      	mov	r4, r1
 8006f86:	b921      	cbnz	r1, 8006f92 <_realloc_r+0x16>
 8006f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	f7ff bb6d 	b.w	800666c <_malloc_r>
 8006f92:	b92a      	cbnz	r2, 8006fa0 <_realloc_r+0x24>
 8006f94:	f7fe fff0 	bl	8005f78 <_free_r>
 8006f98:	2400      	movs	r4, #0
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	f000 fa3c 	bl	800741c <_malloc_usable_size_r>
 8006fa4:	4285      	cmp	r5, r0
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	d802      	bhi.n	8006fb0 <_realloc_r+0x34>
 8006faa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fae:	d8f4      	bhi.n	8006f9a <_realloc_r+0x1e>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f7ff fb5a 	bl	800666c <_malloc_r>
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d0ec      	beq.n	8006f98 <_realloc_r+0x1c>
 8006fbe:	42b5      	cmp	r5, r6
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	bf28      	it	cs
 8006fc6:	4632      	movcs	r2, r6
 8006fc8:	f000 fa1a 	bl	8007400 <memcpy>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4640      	mov	r0, r8
 8006fd0:	f7fe ffd2 	bl	8005f78 <_free_r>
 8006fd4:	463c      	mov	r4, r7
 8006fd6:	e7e0      	b.n	8006f9a <_realloc_r+0x1e>

08006fd8 <_strtol_l.constprop.0>:
 8006fd8:	2b24      	cmp	r3, #36	@ 0x24
 8006fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fde:	4686      	mov	lr, r0
 8006fe0:	4690      	mov	r8, r2
 8006fe2:	d801      	bhi.n	8006fe8 <_strtol_l.constprop.0+0x10>
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d106      	bne.n	8006ff6 <_strtol_l.constprop.0+0x1e>
 8006fe8:	f7fe ff98 	bl	8005f1c <__errno>
 8006fec:	2316      	movs	r3, #22
 8006fee:	6003      	str	r3, [r0, #0]
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff6:	4834      	ldr	r0, [pc, #208]	@ (80070c8 <_strtol_l.constprop.0+0xf0>)
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007000:	5d06      	ldrb	r6, [r0, r4]
 8007002:	f016 0608 	ands.w	r6, r6, #8
 8007006:	d1f8      	bne.n	8006ffa <_strtol_l.constprop.0+0x22>
 8007008:	2c2d      	cmp	r4, #45	@ 0x2d
 800700a:	d12d      	bne.n	8007068 <_strtol_l.constprop.0+0x90>
 800700c:	782c      	ldrb	r4, [r5, #0]
 800700e:	2601      	movs	r6, #1
 8007010:	1c95      	adds	r5, r2, #2
 8007012:	f033 0210 	bics.w	r2, r3, #16
 8007016:	d109      	bne.n	800702c <_strtol_l.constprop.0+0x54>
 8007018:	2c30      	cmp	r4, #48	@ 0x30
 800701a:	d12a      	bne.n	8007072 <_strtol_l.constprop.0+0x9a>
 800701c:	782a      	ldrb	r2, [r5, #0]
 800701e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007022:	2a58      	cmp	r2, #88	@ 0x58
 8007024:	d125      	bne.n	8007072 <_strtol_l.constprop.0+0x9a>
 8007026:	786c      	ldrb	r4, [r5, #1]
 8007028:	2310      	movs	r3, #16
 800702a:	3502      	adds	r5, #2
 800702c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007030:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007034:	2200      	movs	r2, #0
 8007036:	fbbc f9f3 	udiv	r9, ip, r3
 800703a:	4610      	mov	r0, r2
 800703c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007040:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007044:	2f09      	cmp	r7, #9
 8007046:	d81b      	bhi.n	8007080 <_strtol_l.constprop.0+0xa8>
 8007048:	463c      	mov	r4, r7
 800704a:	42a3      	cmp	r3, r4
 800704c:	dd27      	ble.n	800709e <_strtol_l.constprop.0+0xc6>
 800704e:	1c57      	adds	r7, r2, #1
 8007050:	d007      	beq.n	8007062 <_strtol_l.constprop.0+0x8a>
 8007052:	4581      	cmp	r9, r0
 8007054:	d320      	bcc.n	8007098 <_strtol_l.constprop.0+0xc0>
 8007056:	d101      	bne.n	800705c <_strtol_l.constprop.0+0x84>
 8007058:	45a2      	cmp	sl, r4
 800705a:	db1d      	blt.n	8007098 <_strtol_l.constprop.0+0xc0>
 800705c:	fb00 4003 	mla	r0, r0, r3, r4
 8007060:	2201      	movs	r2, #1
 8007062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007066:	e7eb      	b.n	8007040 <_strtol_l.constprop.0+0x68>
 8007068:	2c2b      	cmp	r4, #43	@ 0x2b
 800706a:	bf04      	itt	eq
 800706c:	782c      	ldrbeq	r4, [r5, #0]
 800706e:	1c95      	addeq	r5, r2, #2
 8007070:	e7cf      	b.n	8007012 <_strtol_l.constprop.0+0x3a>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1da      	bne.n	800702c <_strtol_l.constprop.0+0x54>
 8007076:	2c30      	cmp	r4, #48	@ 0x30
 8007078:	bf0c      	ite	eq
 800707a:	2308      	moveq	r3, #8
 800707c:	230a      	movne	r3, #10
 800707e:	e7d5      	b.n	800702c <_strtol_l.constprop.0+0x54>
 8007080:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007084:	2f19      	cmp	r7, #25
 8007086:	d801      	bhi.n	800708c <_strtol_l.constprop.0+0xb4>
 8007088:	3c37      	subs	r4, #55	@ 0x37
 800708a:	e7de      	b.n	800704a <_strtol_l.constprop.0+0x72>
 800708c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007090:	2f19      	cmp	r7, #25
 8007092:	d804      	bhi.n	800709e <_strtol_l.constprop.0+0xc6>
 8007094:	3c57      	subs	r4, #87	@ 0x57
 8007096:	e7d8      	b.n	800704a <_strtol_l.constprop.0+0x72>
 8007098:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800709c:	e7e1      	b.n	8007062 <_strtol_l.constprop.0+0x8a>
 800709e:	1c53      	adds	r3, r2, #1
 80070a0:	d108      	bne.n	80070b4 <_strtol_l.constprop.0+0xdc>
 80070a2:	2322      	movs	r3, #34	@ 0x22
 80070a4:	f8ce 3000 	str.w	r3, [lr]
 80070a8:	4660      	mov	r0, ip
 80070aa:	f1b8 0f00 	cmp.w	r8, #0
 80070ae:	d0a0      	beq.n	8006ff2 <_strtol_l.constprop.0+0x1a>
 80070b0:	1e69      	subs	r1, r5, #1
 80070b2:	e006      	b.n	80070c2 <_strtol_l.constprop.0+0xea>
 80070b4:	b106      	cbz	r6, 80070b8 <_strtol_l.constprop.0+0xe0>
 80070b6:	4240      	negs	r0, r0
 80070b8:	f1b8 0f00 	cmp.w	r8, #0
 80070bc:	d099      	beq.n	8006ff2 <_strtol_l.constprop.0+0x1a>
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d1f6      	bne.n	80070b0 <_strtol_l.constprop.0+0xd8>
 80070c2:	f8c8 1000 	str.w	r1, [r8]
 80070c6:	e794      	b.n	8006ff2 <_strtol_l.constprop.0+0x1a>
 80070c8:	08007593 	.word	0x08007593

080070cc <_strtol_r>:
 80070cc:	f7ff bf84 	b.w	8006fd8 <_strtol_l.constprop.0>

080070d0 <_strtoul_l.constprop.0>:
 80070d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070d4:	4e34      	ldr	r6, [pc, #208]	@ (80071a8 <_strtoul_l.constprop.0+0xd8>)
 80070d6:	4686      	mov	lr, r0
 80070d8:	460d      	mov	r5, r1
 80070da:	4628      	mov	r0, r5
 80070dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070e0:	5d37      	ldrb	r7, [r6, r4]
 80070e2:	f017 0708 	ands.w	r7, r7, #8
 80070e6:	d1f8      	bne.n	80070da <_strtoul_l.constprop.0+0xa>
 80070e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80070ea:	d12f      	bne.n	800714c <_strtoul_l.constprop.0+0x7c>
 80070ec:	782c      	ldrb	r4, [r5, #0]
 80070ee:	2701      	movs	r7, #1
 80070f0:	1c85      	adds	r5, r0, #2
 80070f2:	f033 0010 	bics.w	r0, r3, #16
 80070f6:	d109      	bne.n	800710c <_strtoul_l.constprop.0+0x3c>
 80070f8:	2c30      	cmp	r4, #48	@ 0x30
 80070fa:	d12c      	bne.n	8007156 <_strtoul_l.constprop.0+0x86>
 80070fc:	7828      	ldrb	r0, [r5, #0]
 80070fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007102:	2858      	cmp	r0, #88	@ 0x58
 8007104:	d127      	bne.n	8007156 <_strtoul_l.constprop.0+0x86>
 8007106:	786c      	ldrb	r4, [r5, #1]
 8007108:	2310      	movs	r3, #16
 800710a:	3502      	adds	r5, #2
 800710c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007110:	2600      	movs	r6, #0
 8007112:	fbb8 f8f3 	udiv	r8, r8, r3
 8007116:	fb03 f908 	mul.w	r9, r3, r8
 800711a:	ea6f 0909 	mvn.w	r9, r9
 800711e:	4630      	mov	r0, r6
 8007120:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007124:	f1bc 0f09 	cmp.w	ip, #9
 8007128:	d81c      	bhi.n	8007164 <_strtoul_l.constprop.0+0x94>
 800712a:	4664      	mov	r4, ip
 800712c:	42a3      	cmp	r3, r4
 800712e:	dd2a      	ble.n	8007186 <_strtoul_l.constprop.0+0xb6>
 8007130:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8007134:	d007      	beq.n	8007146 <_strtoul_l.constprop.0+0x76>
 8007136:	4580      	cmp	r8, r0
 8007138:	d322      	bcc.n	8007180 <_strtoul_l.constprop.0+0xb0>
 800713a:	d101      	bne.n	8007140 <_strtoul_l.constprop.0+0x70>
 800713c:	45a1      	cmp	r9, r4
 800713e:	db1f      	blt.n	8007180 <_strtoul_l.constprop.0+0xb0>
 8007140:	fb00 4003 	mla	r0, r0, r3, r4
 8007144:	2601      	movs	r6, #1
 8007146:	f815 4b01 	ldrb.w	r4, [r5], #1
 800714a:	e7e9      	b.n	8007120 <_strtoul_l.constprop.0+0x50>
 800714c:	2c2b      	cmp	r4, #43	@ 0x2b
 800714e:	bf04      	itt	eq
 8007150:	782c      	ldrbeq	r4, [r5, #0]
 8007152:	1c85      	addeq	r5, r0, #2
 8007154:	e7cd      	b.n	80070f2 <_strtoul_l.constprop.0+0x22>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1d8      	bne.n	800710c <_strtoul_l.constprop.0+0x3c>
 800715a:	2c30      	cmp	r4, #48	@ 0x30
 800715c:	bf0c      	ite	eq
 800715e:	2308      	moveq	r3, #8
 8007160:	230a      	movne	r3, #10
 8007162:	e7d3      	b.n	800710c <_strtoul_l.constprop.0+0x3c>
 8007164:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007168:	f1bc 0f19 	cmp.w	ip, #25
 800716c:	d801      	bhi.n	8007172 <_strtoul_l.constprop.0+0xa2>
 800716e:	3c37      	subs	r4, #55	@ 0x37
 8007170:	e7dc      	b.n	800712c <_strtoul_l.constprop.0+0x5c>
 8007172:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007176:	f1bc 0f19 	cmp.w	ip, #25
 800717a:	d804      	bhi.n	8007186 <_strtoul_l.constprop.0+0xb6>
 800717c:	3c57      	subs	r4, #87	@ 0x57
 800717e:	e7d5      	b.n	800712c <_strtoul_l.constprop.0+0x5c>
 8007180:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8007184:	e7df      	b.n	8007146 <_strtoul_l.constprop.0+0x76>
 8007186:	1c73      	adds	r3, r6, #1
 8007188:	d106      	bne.n	8007198 <_strtoul_l.constprop.0+0xc8>
 800718a:	2322      	movs	r3, #34	@ 0x22
 800718c:	f8ce 3000 	str.w	r3, [lr]
 8007190:	4630      	mov	r0, r6
 8007192:	b932      	cbnz	r2, 80071a2 <_strtoul_l.constprop.0+0xd2>
 8007194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007198:	b107      	cbz	r7, 800719c <_strtoul_l.constprop.0+0xcc>
 800719a:	4240      	negs	r0, r0
 800719c:	2a00      	cmp	r2, #0
 800719e:	d0f9      	beq.n	8007194 <_strtoul_l.constprop.0+0xc4>
 80071a0:	b106      	cbz	r6, 80071a4 <_strtoul_l.constprop.0+0xd4>
 80071a2:	1e69      	subs	r1, r5, #1
 80071a4:	6011      	str	r1, [r2, #0]
 80071a6:	e7f5      	b.n	8007194 <_strtoul_l.constprop.0+0xc4>
 80071a8:	08007593 	.word	0x08007593

080071ac <_strtoul_r>:
 80071ac:	f7ff bf90 	b.w	80070d0 <_strtoul_l.constprop.0>

080071b0 <__swbuf_r>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	460e      	mov	r6, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	4605      	mov	r5, r0
 80071b8:	b118      	cbz	r0, 80071c2 <__swbuf_r+0x12>
 80071ba:	6a03      	ldr	r3, [r0, #32]
 80071bc:	b90b      	cbnz	r3, 80071c2 <__swbuf_r+0x12>
 80071be:	f7fe fe17 	bl	8005df0 <__sinit>
 80071c2:	69a3      	ldr	r3, [r4, #24]
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	071a      	lsls	r2, r3, #28
 80071ca:	d501      	bpl.n	80071d0 <__swbuf_r+0x20>
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	b943      	cbnz	r3, 80071e2 <__swbuf_r+0x32>
 80071d0:	4621      	mov	r1, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 f82a 	bl	800722c <__swsetup_r>
 80071d8:	b118      	cbz	r0, 80071e2 <__swbuf_r+0x32>
 80071da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80071de:	4638      	mov	r0, r7
 80071e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	6922      	ldr	r2, [r4, #16]
 80071e6:	1a98      	subs	r0, r3, r2
 80071e8:	6963      	ldr	r3, [r4, #20]
 80071ea:	b2f6      	uxtb	r6, r6
 80071ec:	4283      	cmp	r3, r0
 80071ee:	4637      	mov	r7, r6
 80071f0:	dc05      	bgt.n	80071fe <__swbuf_r+0x4e>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f7ff fe53 	bl	8006ea0 <_fflush_r>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d1ed      	bne.n	80071da <__swbuf_r+0x2a>
 80071fe:	68a3      	ldr	r3, [r4, #8]
 8007200:	3b01      	subs	r3, #1
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	6022      	str	r2, [r4, #0]
 800720a:	701e      	strb	r6, [r3, #0]
 800720c:	6962      	ldr	r2, [r4, #20]
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	429a      	cmp	r2, r3
 8007212:	d004      	beq.n	800721e <__swbuf_r+0x6e>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d5e1      	bpl.n	80071de <__swbuf_r+0x2e>
 800721a:	2e0a      	cmp	r6, #10
 800721c:	d1df      	bne.n	80071de <__swbuf_r+0x2e>
 800721e:	4621      	mov	r1, r4
 8007220:	4628      	mov	r0, r5
 8007222:	f7ff fe3d 	bl	8006ea0 <_fflush_r>
 8007226:	2800      	cmp	r0, #0
 8007228:	d0d9      	beq.n	80071de <__swbuf_r+0x2e>
 800722a:	e7d6      	b.n	80071da <__swbuf_r+0x2a>

0800722c <__swsetup_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4b29      	ldr	r3, [pc, #164]	@ (80072d4 <__swsetup_r+0xa8>)
 8007230:	4605      	mov	r5, r0
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	460c      	mov	r4, r1
 8007236:	b118      	cbz	r0, 8007240 <__swsetup_r+0x14>
 8007238:	6a03      	ldr	r3, [r0, #32]
 800723a:	b90b      	cbnz	r3, 8007240 <__swsetup_r+0x14>
 800723c:	f7fe fdd8 	bl	8005df0 <__sinit>
 8007240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007244:	0719      	lsls	r1, r3, #28
 8007246:	d422      	bmi.n	800728e <__swsetup_r+0x62>
 8007248:	06da      	lsls	r2, r3, #27
 800724a:	d407      	bmi.n	800725c <__swsetup_r+0x30>
 800724c:	2209      	movs	r2, #9
 800724e:	602a      	str	r2, [r5, #0]
 8007250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800725a:	e033      	b.n	80072c4 <__swsetup_r+0x98>
 800725c:	0758      	lsls	r0, r3, #29
 800725e:	d512      	bpl.n	8007286 <__swsetup_r+0x5a>
 8007260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007262:	b141      	cbz	r1, 8007276 <__swsetup_r+0x4a>
 8007264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007268:	4299      	cmp	r1, r3
 800726a:	d002      	beq.n	8007272 <__swsetup_r+0x46>
 800726c:	4628      	mov	r0, r5
 800726e:	f7fe fe83 	bl	8005f78 <_free_r>
 8007272:	2300      	movs	r3, #0
 8007274:	6363      	str	r3, [r4, #52]	@ 0x34
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	2300      	movs	r3, #0
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	f043 0308 	orr.w	r3, r3, #8
 800728c:	81a3      	strh	r3, [r4, #12]
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	b94b      	cbnz	r3, 80072a6 <__swsetup_r+0x7a>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800729c:	d003      	beq.n	80072a6 <__swsetup_r+0x7a>
 800729e:	4621      	mov	r1, r4
 80072a0:	4628      	mov	r0, r5
 80072a2:	f000 f83f 	bl	8007324 <__smakebuf_r>
 80072a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072aa:	f013 0201 	ands.w	r2, r3, #1
 80072ae:	d00a      	beq.n	80072c6 <__swsetup_r+0x9a>
 80072b0:	2200      	movs	r2, #0
 80072b2:	60a2      	str	r2, [r4, #8]
 80072b4:	6962      	ldr	r2, [r4, #20]
 80072b6:	4252      	negs	r2, r2
 80072b8:	61a2      	str	r2, [r4, #24]
 80072ba:	6922      	ldr	r2, [r4, #16]
 80072bc:	b942      	cbnz	r2, 80072d0 <__swsetup_r+0xa4>
 80072be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072c2:	d1c5      	bne.n	8007250 <__swsetup_r+0x24>
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	0799      	lsls	r1, r3, #30
 80072c8:	bf58      	it	pl
 80072ca:	6962      	ldrpl	r2, [r4, #20]
 80072cc:	60a2      	str	r2, [r4, #8]
 80072ce:	e7f4      	b.n	80072ba <__swsetup_r+0x8e>
 80072d0:	2000      	movs	r0, #0
 80072d2:	e7f7      	b.n	80072c4 <__swsetup_r+0x98>
 80072d4:	20000030 	.word	0x20000030

080072d8 <__swhatbuf_r>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	460c      	mov	r4, r1
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	2900      	cmp	r1, #0
 80072e2:	b096      	sub	sp, #88	@ 0x58
 80072e4:	4615      	mov	r5, r2
 80072e6:	461e      	mov	r6, r3
 80072e8:	da0d      	bge.n	8007306 <__swhatbuf_r+0x2e>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072f0:	f04f 0100 	mov.w	r1, #0
 80072f4:	bf14      	ite	ne
 80072f6:	2340      	movne	r3, #64	@ 0x40
 80072f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072fc:	2000      	movs	r0, #0
 80072fe:	6031      	str	r1, [r6, #0]
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	b016      	add	sp, #88	@ 0x58
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	466a      	mov	r2, sp
 8007308:	f000 f848 	bl	800739c <_fstat_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	dbec      	blt.n	80072ea <__swhatbuf_r+0x12>
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007316:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800731a:	4259      	negs	r1, r3
 800731c:	4159      	adcs	r1, r3
 800731e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007322:	e7eb      	b.n	80072fc <__swhatbuf_r+0x24>

08007324 <__smakebuf_r>:
 8007324:	898b      	ldrh	r3, [r1, #12]
 8007326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007328:	079d      	lsls	r5, r3, #30
 800732a:	4606      	mov	r6, r0
 800732c:	460c      	mov	r4, r1
 800732e:	d507      	bpl.n	8007340 <__smakebuf_r+0x1c>
 8007330:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	6123      	str	r3, [r4, #16]
 8007338:	2301      	movs	r3, #1
 800733a:	6163      	str	r3, [r4, #20]
 800733c:	b003      	add	sp, #12
 800733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007340:	ab01      	add	r3, sp, #4
 8007342:	466a      	mov	r2, sp
 8007344:	f7ff ffc8 	bl	80072d8 <__swhatbuf_r>
 8007348:	9f00      	ldr	r7, [sp, #0]
 800734a:	4605      	mov	r5, r0
 800734c:	4639      	mov	r1, r7
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff f98c 	bl	800666c <_malloc_r>
 8007354:	b948      	cbnz	r0, 800736a <__smakebuf_r+0x46>
 8007356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735a:	059a      	lsls	r2, r3, #22
 800735c:	d4ee      	bmi.n	800733c <__smakebuf_r+0x18>
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	f043 0302 	orr.w	r3, r3, #2
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	e7e2      	b.n	8007330 <__smakebuf_r+0xc>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	6020      	str	r0, [r4, #0]
 800736e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	9b01      	ldr	r3, [sp, #4]
 8007376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800737a:	b15b      	cbz	r3, 8007394 <__smakebuf_r+0x70>
 800737c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007380:	4630      	mov	r0, r6
 8007382:	f000 f81d 	bl	80073c0 <_isatty_r>
 8007386:	b128      	cbz	r0, 8007394 <__smakebuf_r+0x70>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	431d      	orrs	r5, r3
 8007398:	81a5      	strh	r5, [r4, #12]
 800739a:	e7cf      	b.n	800733c <__smakebuf_r+0x18>

0800739c <_fstat_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d07      	ldr	r5, [pc, #28]	@ (80073bc <_fstat_r+0x20>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	f7fa fb3a 	bl	8001a22 <_fstat>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d102      	bne.n	80073b8 <_fstat_r+0x1c>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	b103      	cbz	r3, 80073b8 <_fstat_r+0x1c>
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	bd38      	pop	{r3, r4, r5, pc}
 80073ba:	bf00      	nop
 80073bc:	2000060c 	.word	0x2000060c

080073c0 <_isatty_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d06      	ldr	r5, [pc, #24]	@ (80073dc <_isatty_r+0x1c>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7fa fb39 	bl	8001a42 <_isatty>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_isatty_r+0x1a>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_isatty_r+0x1a>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	2000060c 	.word	0x2000060c

080073e0 <_sbrk_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d06      	ldr	r5, [pc, #24]	@ (80073fc <_sbrk_r+0x1c>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fa fb42 	bl	8001a74 <_sbrk>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_sbrk_r+0x1a>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_sbrk_r+0x1a>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	2000060c 	.word	0x2000060c

08007400 <memcpy>:
 8007400:	440a      	add	r2, r1
 8007402:	4291      	cmp	r1, r2
 8007404:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007408:	d100      	bne.n	800740c <memcpy+0xc>
 800740a:	4770      	bx	lr
 800740c:	b510      	push	{r4, lr}
 800740e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007416:	4291      	cmp	r1, r2
 8007418:	d1f9      	bne.n	800740e <memcpy+0xe>
 800741a:	bd10      	pop	{r4, pc}

0800741c <_malloc_usable_size_r>:
 800741c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007420:	1f18      	subs	r0, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	bfbc      	itt	lt
 8007426:	580b      	ldrlt	r3, [r1, r0]
 8007428:	18c0      	addlt	r0, r0, r3
 800742a:	4770      	bx	lr

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
